/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AB_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_12_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29680 = ae * be;
    const double C29679 = ae + be;
    const double C29678 = 0 * be;
    const double C29677 = xA - xB;
    const double C29697 = 0 * be;
    const double C29696 = yA - yB;
    const double C29720 = xP - xQ;
    const double C29719 = yP - yQ;
    const double C29718 = p + q;
    const double C29717 = p * q;
    const double C29725 = bs[3];
    const double C29735 = bs[4];
    const double C29744 = bs[5];
    const double C29758 = bs[6];
    const double C29780 = bs[7];
    const double C29933 = zP - zQ;
    const double C30030 = bs[2];
    const double C117 = bs[0];
    const double C30411 = ce + de;
    const double C30410 = ce * de;
    const double C30409 = xC - xD;
    const double C30443 = yC - yD;
    const double C30461 = zC - zD;
    const double C30640 = zA - zB;
    const double C29681 = std::pow(C29679, 2);
    const double C30684 = 2 * C29679;
    const double C29682 = C29680 * C29677;
    const double C30392 = std::pow(C29677, 2);
    const double C30683 = C29677 * ae;
    const double C29698 = C29680 * C29696;
    const double C30627 = std::pow(C29696, 2);
    const double C30715 = C29696 * ae;
    const double C29745 = std::pow(C29720, 2);
    const double C29805 = C29720 * ae;
    const double C29727 = C29719 * be;
    const double C29726 = C29720 * C29719;
    const double C29900 = std::pow(C29719, 2);
    const double C29721 = 2 * C29717;
    const double C29937 = std::pow(C29933, 2);
    const double C30415 = 2 * C30411;
    const double C30414 = std::pow(C30411, 2);
    const double C30416 = C30409 * de;
    const double C30413 = C30409 * ce;
    const double C30412 = std::pow(C30409, 2);
    const double C30444 = std::pow(C30443, 2);
    const double C30503 = C30443 * de;
    const double C30501 = C30443 * ce;
    const double C30462 = std::pow(C30461, 2);
    const double C30545 = C30461 * de;
    const double C30543 = C30461 * ce;
    const double C30641 = std::pow(C30640, 2);
    const double C30716 = C30640 * ae;
    const double C29683 = 2 * C29681;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * ae * be) /
                        C29681;
    const double C30719 = std::pow(C30684, -2);
    const double C30717 = std::pow(C30684, -1);
    const double C30393 = C30392 * C29680;
    const double C30628 = C30627 * C29680;
    const double C29808 = C29725 * C29805;
    const double C29811 = C29735 * C29805;
    const double C29817 = C29744 * C29805;
    const double C29831 = C29758 * C29805;
    const double C29852 = C29780 * C29805;
    const double C29730 = C29725 * C29727;
    const double C29737 = C29735 * C29727;
    const double C29747 = C29744 * C29727;
    const double C29762 = C29758 * C29727;
    const double C29786 = C29780 * C29727;
    const double C29729 = C29726 * ae;
    const double C29722 = C29721 / C29718;
    const double C124 = (-(bs[1] * C29727 * C29721) / C29718) / C29679;
    const double C125 = (-(bs[1] * C29805 * C29721) / C29718) / C29679;
    const double C118 = -(C29720 * bs[1] * C29721) / C29718;
    const double C287 = -(C29719 * bs[1] * C29721) / C29718;
    const double C468 = -(C29933 * bs[1] * C29721) / C29718;
    const double C30428 = std::pow(C30415, -1);
    const double C30692 = std::pow(C30415, -2);
    const double C30429 = 2 * C30414;
    const double C30696 = C30414 * C30415;
    const double C30695 = 4 * C30414;
    const double C30685 = std::pow(C30413, 2);
    const double C30417 = C30412 * C30410;
    const double C30445 = C30444 * C30410;
    const double C30697 = std::pow(C30501, 2);
    const double C30463 = C30462 * C30410;
    const double C30699 = std::pow(C30543, 2);
    const double C30642 = C30641 * C29680;
    const double C30394 = C30393 / C29679;
    const double C30629 = C30628 / C29679;
    const double C29731 = C29729 * be;
    const double C29724 = -C29722;
    const double C29734 = std::pow(C29722, 4);
    const double C29757 = std::pow(C29722, 6);
    const double C139 =
        (ae * std::pow(C29722, 2) * bs[2] * C29719 * be +
         C29720 * std::pow(-C29722, 3) * bs[3] * C29720 * C29719 * ae * be) /
        C29681;
    const double C30029 = std::pow(C29722, 2);
    const double C126 =
        (C29720 * std::pow(C29722, 2) * bs[2] * C29727) / C29679;
    const double C127 =
        (C29720 * std::pow(C29722, 2) * bs[2] * C29805) / C29679 -
        (ae * bs[1] * C29721) / (C29718 * C29679);
    const double C30729 = 4 * C30696;
    const double C30728 = C30411 * C30695;
    const double C30418 = C30417 / C30411;
    const double C30446 = C30445 / C30411;
    const double C30464 = C30463 / C30411;
    const double C30643 = C30642 / C29679;
    const double C30395 = -C30394;
    const double C30630 = -C30629;
    const double C29736 = C29735 * C29731;
    const double C29746 = C29744 * C29731;
    const double C29760 = C29758 * C29731;
    const double C29784 = C29780 * C29731;
    const double C29728 = std::pow(C29724, 3);
    const double C29743 = std::pow(C29724, 5);
    const double C29779 = std::pow(C29724, 7);
    const double C29739 = C29734 * C29737;
    const double C29813 = C29734 * C29811;
    const double C29818 = C29735 * C29734;
    const double C29765 = C29757 * C29762;
    const double C29833 = C29757 * C29831;
    const double C29853 = C29758 * C29757;
    const double C30031 = C30030 * C30029;
    const double C297 = (C29719 * C30029 * C30030 * C29727) / C29679 -
                        (be * bs[1] * C29721) / (C29718 * C29679);
    const double C298 = (C29719 * C30029 * C30030 * C29805) / C29679;
    const double C478 = (C29933 * C30029 * C30030 * C29727) / C29679;
    const double C479 = (C29933 * C30029 * C30030 * C29805) / C29679;
    const double C30419 = -C30418;
    const double C30447 = -C30446;
    const double C30465 = -C30464;
    const double C30644 = -C30643;
    const double C30396 = std::exp(C30395);
    const double C30631 = std::exp(C30630);
    const double C29738 = C29734 * C29736;
    const double C29764 = C29757 * C29760;
    const double C29732 = C29728 * C29730;
    const double C29806 = C29725 * C29728;
    const double C29809 = C29728 * C29808;
    const double C317 = (be * std::pow(C29722, 2) * bs[2] * C29720 * ae +
                         C29719 * C29728 * C29725 * C29731) /
                        C29681;
    const double C498 = ((zP - zQ) * C29728 * C29725 * C29731) / C29681;
    const double C29749 = C29743 * C29747;
    const double C29748 = C29743 * C29746;
    const double C29819 = C29743 * C29817;
    const double C29832 = C29744 * C29743;
    const double C29789 = C29779 * C29786;
    const double C29788 = C29779 * C29784;
    const double C29855 = C29779 * C29852;
    const double C29742 = ae * C29739;
    const double C29741 = C29720 * C29739;
    const double C30110 = C29719 * C29739;
    const double C29814 = C29720 * C29813;
    const double C29898 = be * C29813;
    const double C29897 = C29719 * C29813;
    const double C29821 = C29720 * C29818;
    const double C29820 = C29818 * ae;
    const double C30037 = C29818 * C29745;
    const double C30113 = C29818 * C29900;
    const double C30186 = C29719 * C29818;
    const double C30185 = C29818 * be;
    const double C30372 = C29818 * C29937;
    const double C30375 = C29933 * C29818;
    const double C29767 = C29765 * C29745;
    const double C29778 = ae * C29765;
    const double C29777 = C29720 * C29765;
    const double C30200 = C29719 * C29765;
    const double C30266 = C29765 * C29937;
    const double C29837 = C29720 * C29833;
    const double C29949 = C29833 * C29900;
    const double C29963 = be * C29833;
    const double C29962 = C29719 * C29833;
    const double C30273 = C29833 * C29937;
    const double C29858 = C29853 * C29745;
    const double C29857 = C29720 * C29853;
    const double C29856 = C29853 * ae;
    const double C30204 = C29853 * C29900;
    const double C119 = C30031 * C29745 - (bs[1] * C29721) / C29718;
    const double C288 = C29719 * C29720 * C30031;
    const double C290 = C30031 * C29900 - (bs[1] * C29721) / C29718;
    const double C469 = C29933 * C29720 * C30031;
    const double C471 = C30031 * C29937 - (bs[1] * C29721) / C29718;
    const double C906 = C29933 * C29719 * C30031;
    const double C30420 = std::exp(C30419);
    const double C30448 = std::exp(C30447);
    const double C30466 = std::exp(C30465);
    const double C30645 = std::exp(C30644);
    const double C29684 = C29682 * C30396;
    const double C30718 = C30396 * C30683;
    const double C102 =
        (C30396 * std::pow(C30683, 2)) / C29681 + C30396 / C30684;
    const double C104 = C30719 * C30396;
    const double C13129 = C30717 * C30396;
    const double C148 = C30631 * C139;
    const double C146 = C30631 * C126;
    const double C9087 = C30631 * C478;
    const double C29699 = C29698 * C30631;
    const double C113 = -(2 * ae * be * (yA - yB) * C30631) / (ae + be);
    const double C30749 = C30631 * C30715;
    const double C4695 =
        (C30631 * std::pow(C30715, 2)) / C29681 + C30631 / C30684;
    const double C4697 = C30719 * C30631;
    const double C13127 = C30717 * C30631;
    const double C501 =
        (C29728 * C29725 * C29731 + C29738 * std::pow(zP - zQ, 2)) / C29681;
    const double C29766 = C29720 * C29764;
    const double C29948 = C29719 * C29764;
    const double C30007 = C29764 * C29937;
    const double C30010 = C29933 * C29764;
    const double C140 = (C29728 * C29725 * C29731 + ae * C29720 * C29732 +
                         C29720 * (ae * C29732 + C29720 * std::pow(C29722, 4) *
                                                     bs[4] * C29731)) /
                        C29681;
    const double C141 =
        (2 * (ae * C29732 + C29720 * C29738) +
         ae * (C29732 + C29739 * std::pow(C29720, 2)) +
         C29720 * (C29738 + ae * C29720 * C29739 +
                   C29720 * (ae * C29739 +
                             C29720 * std::pow(C29724, 5) * bs[5] * C29731))) /
        C29681;
    const double C318 = (be * (C29720 * C29728 * C29725 * C29720 * ae +
                               bs[2] * std::pow(C29722, 2) * ae) +
                         C29719 * (ae * C29732 + C29720 * C29738)) /
                        C29681;
    const double C499 = ((zP - zQ) * (ae * C29732 + C29720 * C29738)) / C29681;
    const double C128 =
        (std::pow(C29722, 2) * bs[2] * C29727 + C29732 * C29745) / C29679;
    const double C130 =
        (2 * C29720 * C29732 + C29720 * (C29732 + C29739 * C29745)) / C29679;
    const double C299 =
        (C29719 * C29720 * C29732 + C29720 * C30031 * be) / C29679;
    const double C303 =
        (C30029 * C30030 * C29727 + C29719 * (C29719 * C29732 + C30031 * be) +
         C29719 * C30031 * be) /
        C29679;
    const double C480 = (C29933 * C29720 * C29732) / C29679;
    const double C482 = (C29933 * (C29732 + C29739 * C29745)) / C29679;
    const double C484 = (C30029 * C30030 * C29727 + C29732 * C29937) / C29679;
    const double C911 = (C29933 * (C29719 * C29732 + C30031 * be)) / C29679;
    const double C1974 =
        (2 * C29933 * C29732 + C29933 * (C29732 + C29739 * C29937)) / C29679;
    const double C29812 = C29806 * ae;
    const double C30036 = C29720 * C29806;
    const double C30112 = C29719 * C29806;
    const double C30111 = C29806 * be;
    const double C301 = (C29719 * (C29732 + C29739 * C29745) +
                         (C30031 + C29806 * C29745) * be) /
                        C29679;
    const double C1130 =
        (2 * (C29719 * C29732 + C30031 * be) +
         C29719 * (C29732 + C29719 * (C29719 * C29739 + C29806 * be) +
                   C29719 * C29806 * be) +
         (C30031 + C29806 * C29900) * be) /
        C29679;
    const double C120 =
        2 * C29720 * C30031 + C29720 * (C30031 + C29806 * C29745);
    const double C289 = C29719 * (C30031 + C29806 * C29745);
    const double C470 = C29933 * (C30031 + C29806 * C29745);
    const double C1124 =
        2 * C29719 * C30031 + C29719 * (C30031 + C29806 * C29900);
    const double C1261 = C29933 * (C30031 + C29806 * C29900);
    const double C1968 =
        2 * C29933 * C30031 + C29933 * (C30031 + C29806 * C29937);
    const double C1971 =
        3 * (C30031 + C29806 * C29937) +
        C29933 * (2 * C29933 * C29806 + C29933 * (C29806 + C29818 * C29937));
    const double C320 = (C29728 * C29725 * C29731 + be * C29719 * C29809 +
                         C29719 * (be * C29809 + C29719 * C29738)) /
                        C29681;
    const double C921 = ((zP - zQ) * (be * C29809 + C29719 * C29738)) / C29681;
    const double C129 =
        (C30029 * C30030 * C29805 + C29720 * (C29720 * C29809 + C30031 * ae) +
         C29720 * C30031 * ae) /
        C29679;
    const double C300 = (C29719 * (C29720 * C29809 + C30031 * ae)) / C29679;
    const double C304 = (C30029 * C30030 * C29805 + C29809 * C29900) / C29679;
    const double C481 = (C29933 * (C29720 * C29809 + C30031 * ae)) / C29679;
    const double C485 = (C30029 * C30030 * C29805 + C29809 * C29937) / C29679;
    const double C912 = (C29933 * C29719 * C29809) / C29679;
    const double C1131 =
        (2 * C29719 * C29809 + C29719 * (C29809 + C29813 * C29900)) / C29679;
    const double C1274 = (C29933 * (C29809 + C29813 * C29900)) / C29679;
    const double C1975 =
        (2 * C29933 * C29809 + C29933 * (C29809 + C29813 * C29937)) / C29679;
    const double C9089 = C30631 * C498;
    const double C29751 = C29749 * C29745;
    const double C29756 = ae * C29749;
    const double C29755 = C29720 * C29749;
    const double C30184 = C29719 * C29749;
    const double C30259 = C29749 * C29937;
    const double C30265 = C29933 * C29749;
    const double C1980 =
        (3 * (C29732 + C29739 * C29937) +
         C29933 * (2 * C29933 * C29739 + C29933 * (C29739 + C29749 * C29937))) /
        C29679;
    const double C29750 = C29720 * C29748;
    const double C29899 = C29719 * C29748;
    const double C1142 = (2 * (be * C29809 + C29719 * C29738) +
                          be * (C29809 + C29813 * std::pow(C29719, 2)) +
                          C29719 * (C29738 + be * C29719 * C29813 +
                                    C29719 * (be * C29813 + C29719 * C29748))) /
                         C29681;
    const double C1986 = (2 * C29933 * C29738 +
                          C29933 * (C29738 + C29748 * std::pow(C29933, 2))) /
                         C29681;
    const double C1989 =
        (3 * (C29738 + C29748 * C29937) +
         C29933 * (2 * C29933 * C29748 + C29933 * (C29748 + C29764 * C29937))) /
        C29681;
    const double C29822 = C29720 * C29819;
    const double C29902 = C29819 * C29900;
    const double C29947 = be * C29819;
    const double C29946 = C29719 * C29819;
    const double C30262 = C29819 * C29937;
    const double C30272 = C29933 * C29819;
    const double C1981 =
        (3 * (C29809 + C29813 * C29937) +
         C29933 * (2 * C29933 * C29813 + C29933 * (C29813 + C29819 * C29937))) /
        C29679;
    const double C29836 = C29832 * C29745;
    const double C29835 = C29720 * C29832;
    const double C29834 = C29832 * ae;
    const double C30187 = C29832 * C29900;
    const double C30202 = C29719 * C29832;
    const double C30201 = C29832 * be;
    const double C30376 = C29832 * C29937;
    const double C29791 = C29789 * C29745;
    const double C29790 = C29720 * C29788;
    const double C29964 = C29719 * C29788;
    const double C30011 = C29788 * C29937;
    const double C29859 = C29720 * C29855;
    const double C29966 = C29855 * C29900;
    const double C486 = (C29720 * C29732 + C29741 * C29937) / C29679;
    const double C1268 = (C29719 * C29809 + C29897 * C29937) / C29679;
    const double C29823 = C29821 * ae;
    const double C30041 = 2 * C29821;
    const double C30120 = C29719 * C29821;
    const double C30119 = C29821 * be;
    const double C30038 = C29806 + C30037;
    const double C30115 = C29806 + C30113;
    const double C30191 = 2 * C30186;
    const double C30189 = C30186 * be;
    const double C30373 = C29806 + C30372;
    const double C30377 = 2 * C30375;
    const double C29769 = C29749 + C29767;
    const double C29785 = 2 * C29777;
    const double C29783 = ae * C29777;
    const double C30228 = C29719 * C29777;
    const double C30281 = C29777 * C29937;
    const double C30268 = C29749 + C30266;
    const double C29953 = C29819 + C29949;
    const double C29970 = 2 * C29962;
    const double C29968 = be * C29962;
    const double C30290 = C29962 * C29937;
    const double C30275 = C29819 + C30273;
    const double C29861 = C29832 + C29858;
    const double C29860 = C29857 * ae;
    const double C30231 = C29857 * C29900;
    const double C30208 = C29832 + C30204;
    const double C30422 = C30420 * C30413;
    const double C30421 = C30420 / C30415;
    const double C30431 = C30428 * C30420;
    const double C30688 = C30420 * C30416;
    const double C30726 = C30692 * C30420;
    const double C30720 = C30420 * C30685;
    const double C30502 = C30448 / C30415;
    const double C30504 = C30448 * C30501;
    const double C30511 = C30428 * C30448;
    const double C30703 = C30448 * C30503;
    const double C30732 = C30692 * C30448;
    const double C30730 = C30448 * C30697;
    const double C30544 = C30466 / C30415;
    const double C30546 = C30466 * C30543;
    const double C30553 = C30428 * C30466;
    const double C30709 = C30466 * C30545;
    const double C30735 = C30692 * C30466;
    const double C30733 = C30466 * C30699;
    const double C30750 = C30645 * C30716;
    const double C8863 =
        (C30645 * std::pow(C30716, 2)) / C29681 + C30645 / C30684;
    const double C8865 = C30719 * C30645;
    const double C18743 = C30717 * C30645;
    const double C116 = ((0 * ae) / C29679 - C29684 / C29681) / (2 * C29679) +
                        (0 * ae) / C29679;
    const double C4702 = -(2 * C29684) / C29679;
    const double C13132 =
        ((C30396 - (C29677 * 2 * C29684) / C29679) * ae) / C29679 -
        C29678 / C29683;
    const double C13133 = (0 * ae) / C29679 - C29684 / C29681;
    const double C103 = (2 * C30717 * C30718) / C29679;
    const double C13128 = C30718 / C29679;
    const double C115 =
        (((C30396 - (C29677 * 2 * C29684) / C29679) * ae) / C29679 -
         C29678 / C29683) /
            (2 * C29679) +
        ((C29677 * ((0 * ae) / C29679 - C29684 / C29681) + C13129) * ae) /
            C29679;
    const double C4701 = ((0 * ae) / C29679 - C29699 / C29681) / (2 * C29679) +
                         (0 * ae) / C29679;
    const double C13130 =
        ((C30631 - (C29696 * 2 * C29699) / C29679) * ae) / C29679 -
        C29697 / C29683;
    const double C13131 = (0 * ae) / C29679 - C29699 / C29681;
    const double C151 = C113 * C119;
    const double C149 = C113 * C127;
    const double C147 = C113 * C118;
    const double C328 = C113 * C288;
    const double C509 = C113 * C469;
    const double C9092 = C113 * C471;
    const double C9090 = C113 * C479;
    const double C9088 = C113 * C468;
    const double C9454 = C113 * C906;
    const double C4696 = (2 * C30717 * C30749) / C29679;
    const double C13126 = C30749 / C29679;
    const double C4700 =
        (((C30631 - (C29696 * 2 * C29699) / C29679) * ae) / C29679 -
         C29697 / C29683) /
            (2 * C29679) +
        ((C29696 * ((0 * ae) / C29679 - C29699 / C29681) + C13127) * ae) /
            C29679;
    const double C9093 = C30631 * C501;
    const double C30008 = C29748 + C30007;
    const double C30012 = 2 * C30010;
    const double C152 = C30631 * C140;
    const double C157 = C30631 * C141;
    const double C331 = C30631 * C318;
    const double C13141 = C13127 * C318;
    const double C512 = C30631 * C499;
    const double C150 = C30631 * C128;
    const double C155 = C30631 * C130;
    const double C329 = C30631 * C299;
    const double C13137 = C13127 * C299;
    const double C510 = C30631 * C480;
    const double C514 = C30631 * C482;
    const double C9091 = C30631 * C484;
    const double C9455 = C30631 * C911;
    const double C24517 = C13127 * C911;
    const double C9096 = C30631 * C1974;
    const double C29815 = C29814 + C29812;
    const double C305 =
        (C29720 * C29732 + C29719 * (C29719 * C29741 + C30036 * be) +
         C29719 * C30036 * be) /
        C29679;
    const double C913 = (C29933 * (C29719 * C29741 + C30036 * be)) / C29679;
    const double C291 = C29720 * C30031 + C30036 * C29900;
    const double C472 = C29720 * C30031 + C30036 * C29937;
    const double C907 = C29933 * C29719 * C30036;
    const double C1125 =
        2 * C29719 * C30036 + C29719 * (C30036 + C29821 * C29900);
    const double C1262 = C29933 * (C30036 + C29821 * C29900);
    const double C1969 =
        2 * C29933 * C30036 + C29933 * (C30036 + C29821 * C29937);
    const double C1258 = C29719 * C30031 + C30112 * C29937;
    const double C2362 =
        2 * C29933 * C30112 + C29933 * (C30112 + C30186 * C29937);
    const double C30114 = C30110 + C30111;
    const double C333 = C30631 * C301;
    const double C13146 = C13127 * C301;
    const double C154 = C113 * C120;
    const double C332 = C113 * C289;
    const double C513 = C113 * C470;
    const double C9751 = C113 * C1261;
    const double C9095 = C113 * C1968;
    const double C10417 = C113 * C1971;
    const double C9457 = C30631 * C921;
    const double C24521 = C13127 * C921;
    const double C153 = C113 * C129;
    const double C330 = C113 * C300;
    const double C511 = C113 * C481;
    const double C9094 = C113 * C485;
    const double C9456 = C113 * C912;
    const double C9753 = C113 * C1274;
    const double C9097 = C113 * C1975;
    const double C29753 = C29739 + C29751;
    const double C29768 = C29756 + C29766;
    const double C29761 = 2 * C29755;
    const double C29759 = ae * C29755;
    const double C30118 = C29719 * C29755;
    const double C1132 =
        (2 * (C29719 * C29741 + C30036 * be) +
         C29719 * (C29741 + C29719 * (C29719 * C29755 + C29821 * be) +
                   C29719 * C29821 * be) +
         (C30036 + C29821 * C29900) * be) /
        C29679;
    const double C1976 =
        (2 * C29933 * C29741 + C29933 * (C29741 + C29755 * C29937)) / C29679;
    const double C1982 =
        (3 * (C29741 + C29755 * C29937) +
         C29933 * (2 * C29933 * C29755 + C29933 * (C29755 + C29777 * C29937))) /
        C29679;
    const double C30188 = C30184 + C30185;
    const double C30260 = C29739 + C30259;
    const double C30267 = 2 * C30265;
    const double C10416 = C30631 * C1980;
    const double C29752 = C29742 + C29750;
    const double C29901 = C29898 + C29899;
    const double C9098 = C30631 * C1986;
    const double C10418 = C30631 * C1989;
    const double C29824 = C29822 + C29820;
    const double C29903 = C29813 + C29902;
    const double C29951 = C29947 + C29948;
    const double C29952 = 2 * C29946;
    const double C29950 = be * C29946;
    const double C2366 =
        (2 * C29933 * C29897 + C29933 * (C29897 + C29946 * C29937)) / C29679;
    const double C6210 =
        (3 * (C29897 + C29946 * C29937) +
         C29933 * (2 * C29933 * C29946 + C29933 * (C29946 + C29962 * C29937))) /
        C29679;
    const double C30263 = C29813 + C30262;
    const double C30274 = 2 * C30272;
    const double C10419 = C113 * C1981;
    const double C29839 = C29818 + C29836;
    const double C29838 = C29835 * ae;
    const double C29854 = 2 * C29835;
    const double C30121 = C29835 * C29900;
    const double C30230 = C29719 * C29835;
    const double C30229 = C29835 * be;
    const double C30383 = C29835 * C29937;
    const double C1972 =
        3 * (C30036 + C29821 * C29937) +
        C29933 * (2 * C29933 * C29821 + C29933 * (C29821 + C29835 * C29937));
    const double C29840 = C29837 + C29834;
    const double C30190 = C29818 + C30187;
    const double C30209 = 2 * C30202;
    const double C30207 = C30202 * be;
    const double C30386 = C30202 * C29937;
    const double C6204 =
        3 * (C30112 + C30186 * C29937) +
        C29933 * (2 * C29933 * C30186 + C29933 * (C30186 + C30202 * C29937));
    const double C30206 = C30200 + C30201;
    const double C30378 = C29818 + C30376;
    const double C29793 = C29765 + C29791;
    const double C29792 = C29778 + C29790;
    const double C29969 = C29963 + C29964;
    const double C30013 = C29764 + C30011;
    const double C29862 = C29859 + C29856;
    const double C29971 = C29833 + C29966;
    const double C517 = C30631 * C486;
    const double C9460 = C113 * C1268;
    const double C1259 = C29719 * C30036 + C30120 * C29937;
    const double C121 = 3 * (C30031 + C29806 * C29745) +
                        C29720 * (2 * C30036 + C29720 * C30038);
    const double C292 = C30031 + C29806 * C29745 + C30038 * C29900;
    const double C293 = C29719 * (2 * C30036 + C29720 * C30038);
    const double C473 = C30031 + C29806 * C29745 + C30038 * C29937;
    const double C474 = C29933 * (2 * C30036 + C29720 * C30038);
    const double C908 = C29933 * C29719 * C30038;
    const double C1127 = 3 * (C30031 + C29806 * C29900) +
                         C29719 * (2 * C30112 + C29719 * C30115);
    const double C1264 = C30031 + C29806 * C29900 + C30115 * C29937;
    const double C1666 = C29933 * (2 * C30112 + C29719 * C30115);
    const double C10405 =
        4 * (2 * C29933 * C29806 + C29933 * C30373) +
        C29933 * (3 * C30373 + C29933 * (2 * C29933 * C29818 +
                                         C29933 * (C29818 + C29832 * C29937)));
    const double C29771 = C29720 * C29769;
    const double C29781 = 3 * C29769;
    const double C29776 = ae * C29769;
    const double C30126 = C29719 * C29769;
    const double C29787 = C29764 + C29783;
    const double C30282 = C29755 + C30281;
    const double C30269 = C29933 * C30268;
    const double C29956 = C29719 * C29953;
    const double C29965 = 3 * C29953;
    const double C29961 = be * C29953;
    const double C29972 = C29764 + C29968;
    const double C30291 = C29946 + C30290;
    const double C30276 = C29933 * C30275;
    const double C29864 = C29720 * C29861;
    const double C29863 = C29861 * ae;
    const double C30129 = C29861 * C29900;
    const double C30234 = C29835 + C30231;
    const double C30211 = C29719 * C30208;
    const double C30423 = C30422 * C30416;
    const double C30430 = C30422 / C30429;
    const double C30689 = C30428 * C30422;
    const double C30687 = C30422 / C30411;
    const double C284 = (C30420 * std::pow(C30416, 2)) / C30414 + C30421;
    const double C30432 = C30431 * C30416;
    const double C30693 = C30413 * C30431;
    const double C30691 = 2 * C30431;
    const double C30736 = C30431 / C30695;
    const double C112 = C30431 / C30729;
    const double C2843 = C30431 / C30415;
    const double C30722 = C30688 / C30411;
    const double C285 = (-2 * C30428 * C30688) / C30411;
    const double C30751 = C30720 / C30414;
    const double C1050 = (C30448 * std::pow(C30503, 2)) / C30414 + C30502;
    const double C30505 = C30504 * C30503;
    const double C30510 = C30504 / C30429;
    const double C30701 = C30504 / C30411;
    const double C30698 = C30428 * C30504;
    const double C30512 = C30511 * C30503;
    const double C30707 = C30501 * C30511;
    const double C30706 = 2 * C30511;
    const double C30742 = C30511 / C30695;
    const double C1122 = C30511 / C30729;
    const double C2840 = C30511 / C30415;
    const double C30738 = C30703 / C30411;
    const double C1051 = (-2 * C30428 * C30703) / C30411;
    const double C30756 = C30730 / C30414;
    const double C1788 = (C30466 * std::pow(C30545, 2)) / C30414 + C30544;
    const double C30547 = C30546 * C30545;
    const double C30552 = C30546 / C30429;
    const double C30702 = C30546 / C30411;
    const double C30700 = C30428 * C30546;
    const double C30554 = C30553 * C30545;
    const double C30713 = C30543 * C30553;
    const double C30712 = 2 * C30553;
    const double C30748 = C30553 / C30695;
    const double C1967 = C30553 / C30729;
    const double C3742 = C30553 / C30415;
    const double C30744 = C30709 / C30411;
    const double C1789 = (-2 * C30428 * C30709) / C30411;
    const double C30758 = C30733 / C30414;
    const double C8864 = (2 * C30717 * C30750) / C29679;
    const double C18742 = C30750 / C29679;
    const double C114 =
        (((0 - (C29677 * C29678) / C29679) * ae) / C29679 - (0 * be) / C29683) /
            (2 * C29679) +
        ((C29677 * (((C30396 - (C29677 * 2 * C29684) / C29679) * ae) / C29679 -
                    C29678 / C29683) +
          C13128) *
         ae) /
            C29679 +
        (0 * ae) / C29679 - C29684 / C29681;
    const double C13152 = C13130 * C120;
    const double C13147 = C13130 * C129;
    const double C13143 = C13130 * C119;
    const double C13140 = C13130 * C127;
    const double C13136 = C13130 * C118;
    const double C13330 = C13130 * C289;
    const double C13317 = C13130 * C300;
    const double C13313 = C13130 * C288;
    const double C13508 = C13130 * C470;
    const double C13495 = C13130 * C481;
    const double C13491 = C13130 * C469;
    const double C24527 = C13130 * C485;
    const double C24523 = C13130 * C471;
    const double C24520 = C13130 * C479;
    const double C24516 = C13130 * C468;
    const double C24989 = C13130 * C912;
    const double C24985 = C13130 * C906;
    const double C25380 = C13130 * C1274;
    const double C25376 = C13130 * C1261;
    const double C25372 = C13130 * C1268;
    const double C26239 = C13130 * C1981;
    const double C26235 = C13130 * C1971;
    const double C26232 = C13130 * C1975;
    const double C26228 = C13130 * C1968;
    const double C13145 = C13131 * C289;
    const double C13142 = C13131 * C300;
    const double C13138 = C13131 * C288;
    const double C24529 = C13131 * C1268;
    const double C24522 = C13131 * C912;
    const double C24518 = C13131 * C906;
    const double C24991 = C13131 * C1274;
    const double C24987 = C13131 * C1261;
    const double C13155 = C13126 * C141;
    const double C13151 = C13126 * C130;
    const double C13148 = C13126 * C140;
    const double C13144 = C13126 * C128;
    const double C13139 = C13126 * C139;
    const double C13135 = C13126 * C126;
    const double C13329 = C13126 * C301;
    const double C13318 = C13126 * C318;
    const double C13314 = C13126 * C299;
    const double C13507 = C13126 * C482;
    const double C13499 = C13126 * C486;
    const double C13496 = C13126 * C499;
    const double C13492 = C13126 * C480;
    const double C24528 = C13126 * C501;
    const double C24524 = C13126 * C484;
    const double C24519 = C13126 * C498;
    const double C24515 = C13126 * C478;
    const double C24990 = C13126 * C921;
    const double C24986 = C13126 * C911;
    const double C26240 = C13126 * C1989;
    const double C26236 = C13126 * C1980;
    const double C26231 = C13126 * C1986;
    const double C26227 = C13126 * C1974;
    const double C4699 =
        (((0 - (C29696 * C29697) / C29679) * ae) / C29679 - (0 * be) / C29683) /
            (2 * C29679) +
        ((C29696 * (((C30631 - (C29696 * 2 * C29699) / C29679) * ae) / C29679 -
                    C29697 / C29683) +
          C13126) *
         ae) /
            C29679 +
        (0 * ae) / C29679 - C29699 / C29681;
    const double C10411 =
        (4 * (2 * C29933 * C29748 + C29933 * C30008) +
         C29933 *
             (3 * C30008 + C29933 * (2 * C29933 * C29764 +
                                     C29933 * (C29764 + C29788 * C29937)))) /
        C29681;
    const double C166 = C150 - C151;
    const double C19039 = C509 - C510;
    const double C19037 = C510 - C509;
    const double C9103 = C9091 - C9092;
    const double C131 =
        (2 * (C29720 * C29809 + C30031 * ae) +
         C29720 * (C29809 + C29720 * C29815 + C29720 * C29806 * ae) +
         (C30031 + C29806 * C29745) * ae) /
        C29679;
    const double C302 =
        (C29719 * (C29809 + C29720 * C29815 + C30036 * ae)) / C29679;
    const double C306 =
        (C29720 * C29809 + C30031 * ae + C29815 * C29900) / C29679;
    const double C483 =
        (C29933 * (C29809 + C29720 * C29815 + C30036 * ae)) / C29679;
    const double C487 =
        (C29720 * C29809 + C30031 * ae + C29815 * C29937) / C29679;
    const double C914 = (C29933 * C29719 * C29815) / C29679;
    const double C336 = C30631 * C305;
    const double C13321 = C13126 * C305;
    const double C13316 = C13127 * C305;
    const double C927 = C30631 * C913;
    const double C13494 = C13127 * C913;
    const double C13993 = C13126 * C913;
    const double C337 = C113 * C291;
    const double C13322 = C13130 * C291;
    const double C13315 = C13131 * C291;
    const double C518 = C113 * C472;
    const double C13500 = C13130 * C472;
    const double C928 = C113 * C907;
    const double C13493 = C13131 * C907;
    const double C13994 = C13130 * C907;
    const double C1403 = C113 * C1125;
    const double C13324 = C13131 * C1125;
    const double C14513 = C13130 * C1125;
    const double C1561 = C113 * C1262;
    const double C13996 = C13131 * C1262;
    const double C14715 = C13130 * C1262;
    const double C2257 = C113 * C1969;
    const double C15559 = C13130 * C1969;
    const double C9458 = C113 * C1258;
    const double C24525 = C13131 * C1258;
    const double C25368 = C13130 * C1258;
    const double C9747 = C113 * C2362;
    const double C26230 = C13131 * C2362;
    const double C26697 = C13130 * C2362;
    const double C1136 =
        (3 * (C29732 + C29719 * C30114 + C30112 * be) +
         C29719 * (2 * C30114 +
                   C29719 * (C29739 + C29719 * (C29719 * C29749 + C29818 * be) +
                             C29719 * C29818 * be) +
                   C30115 * be) +
         (2 * C30112 + C29719 * C30115) * be) /
        C29679;
    const double C1267 =
        (C29719 * C29732 + C30031 * be + C30114 * C29937) / C29679;
    const double C1273 =
        (C29933 * (C29732 + C29719 * C30114 + C30112 * be)) / C29679;
    const double C1279 = (C29732 + C29719 * C30114 + C30112 * be +
                          (C29739 + C29719 * (C29719 * C29749 + C29818 * be) +
                           C29719 * C29818 * be) *
                              C29937) /
                         C29679;
    const double C1669 =
        (C29933 * (2 * C30114 +
                   C29719 * (C29739 + C29719 * (C29719 * C29749 + C29818 * be) +
                             C29719 * C29818 * be) +
                   C30115 * be)) /
        C29679;
    const double C2365 =
        (2 * C29933 * C30114 +
         C29933 * (C30114 + (C29719 * C29749 + C29818 * be) * C29937)) /
        C29679;
    const double C168 = C154 - C155;
    const double C352 = C332 - C333;
    const double C533 = C513 - C514;
    const double C19043 = C514 - C513;
    const double C10414 = C9095 - C9096;
    const double C167 = C152 - C153;
    const double C19040 = C511 - C512;
    const double C19038 = C512 - C511;
    const double C9104 = C9093 - C9094;
    const double C132 = (3 * (C29732 + C29739 * C29745) +
                         C29720 * (2 * C29741 + C29720 * C29753)) /
                        C29679;
    const double C307 =
        (C29732 + C29739 * C29745 + C29719 * (C29719 * C29753 + C30038 * be) +
         C29719 * C30038 * be) /
        C29679;
    const double C309 = (C29719 * (2 * C29741 + C29720 * C29753) +
                         (2 * C30036 + C29720 * C30038) * be) /
                        C29679;
    const double C488 = (C29732 + C29739 * C29745 + C29753 * C29937) / C29679;
    const double C490 = (C29933 * (2 * C29741 + C29720 * C29753)) / C29679;
    const double C915 = (C29933 * (C29719 * C29753 + C30038 * be)) / C29679;
    const double C1978 =
        (2 * C29933 * C29753 + C29933 * (C29753 + C29769 * C29937)) / C29679;
    const double C29770 = C29720 * C29768;
    const double C29775 = 2 * C29768;
    const double C29907 = C29719 * C29768;
    const double C29763 = C29748 + C29759;
    const double C30122 = C30118 + C30119;
    const double C1404 = C30631 * C1132;
    const double C13323 = C13127 * C1132;
    const double C14514 = C13126 * C1132;
    const double C2258 = C30631 * C1976;
    const double C15560 = C13126 * C1976;
    const double C10696 = C30631 * C1982;
    const double C30192 = C29719 * C30188;
    const double C30199 = 2 * C30188;
    const double C10407 =
        (4 * (2 * C29933 * C29739 + C29933 * C30260) +
         C29933 *
             (3 * C30260 + C29933 * (2 * C29933 * C29749 +
                                     C29933 * (C29749 + C29765 * C29937)))) /
        C29679;
    const double C10426 = C10416 - C10417;
    const double C142 =
        (3 * (C29738 + ae * C29741 + C29720 * C29752) +
         ae * (2 * C29741 + C29720 * C29753) +
         C29720 *
             (2 * C29752 + ae * C29753 +
              C29720 * (C29748 + ae * C29720 * C29749 +
                        C29720 * (ae * C29749 + C29720 * std::pow(C29722, 6) *
                                                    bs[6] * C29731)))) /
        C29681;
    const double C319 =
        (be * (C29728 * C29725 * C29805 +
               C29720 * (C29720 * C29734 * C29735 * C29805 + C29806 * ae) +
               C29720 * C29806 * ae) +
         C29719 * (C29738 + ae * C29741 + C29720 * C29752)) /
        C29681;
    const double C321 = (ae * C29732 + C29720 * C29738 + be * C29719 * C29815 +
                         C29719 * (be * C29815 + C29719 * C29752)) /
                        C29681;
    const double C500 =
        ((zP - zQ) * (C29738 + ae * C29741 + C29720 * C29752)) / C29681;
    const double C502 =
        (ae * C29732 + C29720 * C29738 + C29752 * std::pow(zP - zQ, 2)) /
        C29681;
    const double C922 = ((zP - zQ) * (be * C29815 + C29719 * C29752)) / C29681;
    const double C1987 = (2 * C29933 * C29752 +
                          C29933 * (C29752 + C29768 * std::pow(C29933, 2))) /
                         C29681;
    const double C1285 =
        (be * C29809 + C29719 * C29738 + C29901 * std::pow(zP - zQ, 2)) /
        C29681;
    const double C1288 =
        ((zP - zQ) * (C29738 + be * C29897 + C29719 * C29901)) / C29681;
    const double C1291 = (C29738 + be * C29897 + C29719 * C29901 +
                          (C29748 + be * C29719 * C29819 +
                           C29719 * (be * C29819 + C29719 * C29764)) *
                              std::pow(zP - zQ, 2)) /
                         C29681;
    const double C2371 =
        (2 * C29933 * C29901 +
         C29933 * (C29901 + (be * C29819 + C29719 * C29764) * C29937)) /
        C29681;
    const double C10415 = C9097 - C9098;
    const double C29825 = C29720 * C29824;
    const double C29830 = 2 * C29824;
    const double C29906 = be * C29824;
    const double C29905 = C29719 * C29824;
    const double C1143 = (2 * (be * C29815 + C29719 * C29752) +
                          be * (C29815 + C29824 * std::pow(C29719, 2)) +
                          C29719 * (C29752 + be * C29719 * C29824 +
                                    C29719 * (be * C29824 + C29719 * C29768))) /
                         C29681;
    const double C1133 =
        (2 * C29719 * C29815 + C29719 * (C29815 + C29824 * C29900)) / C29679;
    const double C1276 = (C29933 * (C29815 + C29824 * C29900)) / C29679;
    const double C1977 =
        (2 * C29933 * C29815 + C29933 * (C29815 + C29824 * C29937)) / C29679;
    const double C1145 =
        (3 * (C29738 + be * C29897 + C29719 * C29901) +
         be * (2 * C29897 + C29719 * C29903) +
         C29719 * (2 * C29901 + be * C29903 +
                   C29719 * (C29748 + be * C29719 * C29819 +
                             C29719 * (be * C29819 + C29719 * C29764)))) /
        C29681;
    const double C1675 =
        ((zP - zQ) * (2 * C29901 + be * C29903 +
                      C29719 * (C29748 + be * C29719 * C29819 +
                                C29719 * (be * C29819 + C29719 * C29764)))) /
        C29681;
    const double C1137 = (3 * (C29809 + C29813 * C29900) +
                          C29719 * (2 * C29897 + C29719 * C29903)) /
                         C29679;
    const double C1280 = (C29809 + C29813 * C29900 + C29903 * C29937) / C29679;
    const double C1670 = (C29933 * (2 * C29897 + C29719 * C29903)) / C29679;
    const double C6207 =
        (2 * C29933 * C29903 + C29933 * (C29903 + C29953 * C29937)) / C29679;
    const double C29955 = C29719 * C29951;
    const double C29960 = 2 * C29951;
    const double C29954 = C29748 + C29950;
    const double C9749 = C113 * C2366;
    const double C26234 = C13131 * C2366;
    const double C26701 = C13130 * C2366;
    const double C10808 = C113 * C6210;
    const double C26241 = C13131 * C6210;
    const double C10408 =
        (4 * (2 * C29933 * C29813 + C29933 * C30263) +
         C29933 *
             (3 * C30263 + C29933 * (2 * C29933 * C29819 +
                                     C29933 * (C29819 + C29833 * C29937)))) /
        C29679;
    const double C10427 = C10418 - C10419;
    const double C29841 = C29839 * ae;
    const double C30042 = C29720 * C29839;
    const double C30046 = 3 * C29839;
    const double C30128 = C29719 * C29839;
    const double C30127 = C29839 * be;
    const double C1134 =
        (2 * (C29719 * C29753 + C30038 * be) +
         C29719 * (C29753 + C29719 * (C29719 * C29769 + C29839 * be) +
                   C29719 * C29839 * be) +
         (C30038 + C29839 * C29900) * be) /
        C29679;
    const double C1126 =
        2 * C29719 * C30038 + C29719 * (C30038 + C29839 * C29900);
    const double C1263 = C29933 * (C30038 + C29839 * C29900);
    const double C1970 =
        2 * C29933 * C30038 + C29933 * (C30038 + C29839 * C29937);
    const double C1973 =
        3 * (C30038 + C29839 * C29937) +
        C29933 * (2 * C29933 * C29839 + C29933 * (C29839 + C29861 * C29937));
    const double C30123 = C29821 + C30121;
    const double C30235 = 2 * C30230;
    const double C30233 = C30230 * be;
    const double C2363 =
        2 * C29933 * C30120 + C29933 * (C30120 + C30230 * C29937);
    const double C10577 =
        3 * (C30120 + C30230 * C29937) +
        C29933 * (2 * C29933 * C30230 +
                  C29933 * (C30230 + C29719 * C29857 * C29937));
    const double C30232 = C30228 + C30229;
    const double C30384 = C29821 + C30383;
    const double C10695 = C113 * C1972;
    const double C29842 = C29720 * C29840;
    const double C29851 = 2 * C29840;
    const double C29908 = C29840 * C29900;
    const double C29986 = be * C29840;
    const double C29985 = C29719 * C29840;
    const double C30284 = C29840 * C29937;
    const double C1983 =
        (3 * (C29815 + C29824 * C29937) +
         C29933 * (2 * C29933 * C29824 + C29933 * (C29824 + C29840 * C29937))) /
        C29679;
    const double C30193 = C29719 * C30190;
    const double C30205 = 3 * C30190;
    const double C30203 = C30190 * be;
    const double C6203 =
        2 * C29933 * C30115 + C29933 * (C30115 + C30190 * C29937);
    const double C6205 =
        3 * (C30115 + C30190 * C29937) +
        C29933 * (2 * C29933 * C30190 + C29933 * (C30190 + C30208 * C29937));
    const double C30387 = C30186 + C30386;
    const double C10806 = C113 * C6204;
    const double C26237 = C13131 * C6204;
    const double C30210 = C29719 * C30206;
    const double C30287 = C30206 * C29937;
    const double C6208 =
        (3 * (C30114 + C30188 * C29937) +
         C29933 * (2 * C29933 * C30188 + C29933 * (C30188 + C30206 * C29937))) /
        C29679;
    const double C30379 = C29933 * C30378;
    const double C29795 = C29720 * C29793;
    const double C1984 =
        (3 * (C29753 + C29769 * C29937) +
         C29933 * (2 * C29933 * C29769 + C29933 * (C29769 + C29793 * C29937))) /
        C29679;
    const double C29794 = C29720 * C29792;
    const double C29987 = C29719 * C29792;
    const double C30018 = C29792 * C29937;
    const double C1990 =
        (3 * (C29752 + C29768 * C29937) +
         C29933 * (2 * C29933 * C29768 + C29933 * (C29768 + C29792 * C29937))) /
        C29681;
    const double C29973 = C29719 * C29969;
    const double C30021 = C29969 * C29937;
    const double C6213 =
        (3 * (C29901 + C29951 * C29937) +
         C29933 * (2 * C29933 * C29951 + C29933 * (C29951 + C29969 * C29937))) /
        C29681;
    const double C30014 = C29933 * C30013;
    const double C29865 = C29720 * C29862;
    const double C29988 = C29862 * C29900;
    const double C29974 = C29719 * C29971;
    const double C6211 =
        (3 * (C29903 + C29953 * C29937) +
         C29933 * (2 * C29933 * C29953 + C29933 * (C29953 + C29971 * C29937))) /
        C29679;
    const double C2143 = C113 * C1259;
    const double C13502 = C13131 * C1259;
    const double C15421 = C13130 * C1259;
    const double C159 = C113 * C121;
    const double C13159 = C13130 * C121;
    const double C341 = C113 * C292;
    const double C13337 = C13130 * C292;
    const double C13332 = C13131 * C292;
    const double C345 = C113 * C293;
    const double C13154 = C13131 * C293;
    const double C13653 = C13130 * C293;
    const double C522 = C113 * C473;
    const double C13515 = C13130 * C473;
    const double C526 = C113 * C474;
    const double C13791 = C13130 * C474;
    const double C932 = C113 * C908;
    const double C13510 = C13131 * C908;
    const double C14001 = C13130 * C908;
    const double C9755 = C113 * C1264;
    const double C25383 = C13130 * C1264;
    const double C25370 = C13131 * C1264;
    const double C10116 = C113 * C1666;
    const double C25378 = C13131 * C1666;
    const double C25845 = C13130 * C1666;
    const double C10420 = C113 * C10405;
    const double C29773 = C29761 + C29771;
    const double C10689 =
        (4 * (2 * C29933 * C29755 + C29933 * C30282) +
         C29933 * (3 * C30282 +
                   C29933 * (2 * C29933 * C29777 +
                             C29933 * (C29777 + C29720 * C29789 * C29937)))) /
        C29679;
    const double C30270 = C30267 + C30269;
    const double C29958 = C29952 + C29956;
    const double C10801 =
        (4 * (2 * C29933 * C29946 + C29933 * C30291) +
         C29933 * (3 * C30291 +
                   C29933 * (2 * C29933 * C29962 +
                             C29933 * (C29962 + C29719 * C29855 * C29937)))) /
        C29679;
    const double C30277 = C30274 + C30276;
    const double C29866 = C29854 + C29864;
    const double C30131 = C29839 + C30129;
    const double C30237 = C29719 * C30234;
    const double C30213 = C30209 + C30211;
    const double C30424 = C30423 / C30414;
    const double C30723 = 2 * C30689;
    const double C30433 = C30432 / C30411;
    const double C30727 = C30693 / C30429;
    const double C30752 = C30687 - C30722;
    const double C2580 = -C30722;
    const double C30766 = C30751 + C30421;
    const double C30506 = C30505 / C30414;
    const double C30731 = 2 * C30698;
    const double C30513 = C30512 / C30411;
    const double C30741 = C30707 / C30429;
    const double C30760 = C30701 - C30738;
    const double C2472 = -C30738;
    const double C30769 = C30756 + C30502;
    const double C30548 = C30547 / C30414;
    const double C30734 = 2 * C30700;
    const double C30555 = C30554 / C30411;
    const double C30747 = C30713 / C30429;
    const double C30763 = C30702 - C30744;
    const double C3234 = -C30744;
    const double C30770 = C30758 + C30544;
    const double C10423 = C30631 * C10411;
    const double C9108 = C9103 * C4702;
    const double C156 = C113 * C131;
    const double C13156 = C13130 * C131;
    const double C334 = C113 * C302;
    const double C13149 = C13131 * C302;
    const double C13334 = C13130 * C302;
    const double C339 = C113 * C306;
    const double C13326 = C13130 * C306;
    const double C13319 = C13131 * C306;
    const double C515 = C113 * C483;
    const double C13512 = C13130 * C483;
    const double C520 = C113 * C487;
    const double C13504 = C13130 * C487;
    const double C930 = C113 * C914;
    const double C13497 = C13131 * C914;
    const double C13998 = C13130 * C914;
    const double C9099 = C518 - C517;
    const double C19041 = C517 - C518;
    const double C19505 = C927 - C928;
    const double C19503 = C928 - C927;
    const double C9459 = C30631 * C1267;
    const double C24526 = C13127 * C1267;
    const double C25367 = C13126 * C1267;
    const double C9750 = C30631 * C1273;
    const double C24988 = C13127 * C1273;
    const double C25375 = C13126 * C1273;
    const double C9754 = C30631 * C1279;
    const double C25384 = C13126 * C1279;
    const double C25369 = C13127 * C1279;
    const double C10117 = C30631 * C1669;
    const double C25377 = C13127 * C1669;
    const double C25846 = C13126 * C1669;
    const double C9746 = C30631 * C2365;
    const double C26229 = C13127 * C2365;
    const double C26698 = C13126 * C2365;
    const double C10424 = C10414 * C4702;
    const double C9109 = C9104 * C30396;
    const double C158 = C30631 * C132;
    const double C13160 = C13126 * C132;
    const double C340 = C30631 * C307;
    const double C13338 = C13126 * C307;
    const double C13331 = C13127 * C307;
    const double C344 = C30631 * C309;
    const double C13153 = C13127 * C309;
    const double C13654 = C13126 * C309;
    const double C521 = C30631 * C488;
    const double C13516 = C13126 * C488;
    const double C525 = C30631 * C490;
    const double C13792 = C13126 * C490;
    const double C931 = C30631 * C915;
    const double C13509 = C13127 * C915;
    const double C14002 = C13126 * C915;
    const double C2262 = C30631 * C1978;
    const double C29782 = C29775 + C29776;
    const double C29772 = C29763 + C29770;
    const double C1269 =
        (C29719 * C29741 + C30036 * be + C30122 * C29937) / C29679;
    const double C1275 =
        (C29933 * (C29741 + C29719 * C30122 + C30120 * be)) / C29679;
    const double C1281 = (C29741 + C29719 * C30122 + C30120 * be +
                          (C29755 + C29719 * (C29719 * C29777 + C29835 * be) +
                           C29719 * C29835 * be) *
                              C29937) /
                         C29679;
    const double C2367 =
        (2 * C29933 * C30122 +
         C29933 * (C30122 + (C29719 * C29777 + C29835 * be) * C29937)) /
        C29679;
    const double C10693 = C2258 - C2257;
    const double C21045 = C2257 - C2258;
    const double C30194 = C29739 + C30192;
    const double C10421 = C30631 * C10407;
    const double C10429 = C10426 * C4702;
    const double C160 = C30631 * C142;
    const double C13164 = C13126 * C142;
    const double C335 = C30631 * C319;
    const double C13150 = C13127 * C319;
    const double C13333 = C13126 * C319;
    const double C338 = C30631 * C321;
    const double C13325 = C13126 * C321;
    const double C13320 = C13127 * C321;
    const double C516 = C30631 * C500;
    const double C13511 = C13126 * C500;
    const double C519 = C30631 * C502;
    const double C13503 = C13126 * C502;
    const double C929 = C30631 * C922;
    const double C13498 = C13127 * C922;
    const double C13997 = C13126 * C922;
    const double C2260 = C30631 * C1987;
    const double C15564 = C13126 * C1987;
    const double C9461 = C30631 * C1285;
    const double C24530 = C13127 * C1285;
    const double C25371 = C13126 * C1285;
    const double C9752 = C30631 * C1288;
    const double C24992 = C13127 * C1288;
    const double C25379 = C13126 * C1288;
    const double C9756 = C30631 * C1291;
    const double C25388 = C13126 * C1291;
    const double C25373 = C13127 * C1291;
    const double C9748 = C30631 * C2371;
    const double C26233 = C13127 * C2371;
    const double C26702 = C13126 * C2371;
    const double C10425 = C10415 * C30396;
    const double C29826 = C29813 + C29825;
    const double C29909 = C29906 + C29907;
    const double C1270 = (C29719 * C29815 + C29905 * C29937) / C29679;
    const double C1406 = C30631 * C1143;
    const double C13327 = C13127 * C1143;
    const double C14518 = C13126 * C1143;
    const double C1405 = C113 * C1133;
    const double C13328 = C13131 * C1133;
    const double C14517 = C13130 * C1133;
    const double C1563 = C113 * C1276;
    const double C14000 = C13131 * C1276;
    const double C14719 = C13130 * C1276;
    const double C2259 = C113 * C1977;
    const double C15563 = C13130 * C1977;
    const double C10119 = C30631 * C1675;
    const double C25381 = C13127 * C1675;
    const double C25850 = C13126 * C1675;
    const double C9757 = C113 * C1280;
    const double C25387 = C13130 * C1280;
    const double C25374 = C13131 * C1280;
    const double C10118 = C113 * C1670;
    const double C25382 = C13131 * C1670;
    const double C25849 = C13130 * C1670;
    const double C9760 = C113 * C6207;
    const double C26703 = C13131 * C6207;
    const double C29967 = C29960 + C29961;
    const double C29957 = C29954 + C29955;
    const double C10422 = C113 * C10408;
    const double C10430 = C10427 * C30396;
    const double C30043 = C30041 + C30042;
    const double C1260 = C29719 * C30038 + C30128 * C29937;
    const double C2364 =
        2 * C29933 * C30128 + C29933 * (C30128 + C29719 * C29861 * C29937);
    const double C30130 = C30126 + C30127;
    const double C1408 = C30631 * C1134;
    const double C13340 = C13127 * C1134;
    const double C1407 = C113 * C1126;
    const double C13339 = C13131 * C1126;
    const double C1565 = C113 * C1263;
    const double C14003 = C13131 * C1263;
    const double C2261 = C113 * C1970;
    const double C1138 =
        (3 * (C29741 + C29719 * C30122 + C30120 * be) +
         C29719 * (2 * C30122 +
                   C29719 * (C29755 + C29719 * (C29719 * C29777 + C29835 * be) +
                             C29719 * C29835 * be) +
                   C30123 * be) +
         (2 * C30120 + C29719 * C30123) * be) /
        C29679;
    const double C1671 =
        (C29933 * (2 * C30122 +
                   C29719 * (C29755 + C29719 * (C29719 * C29777 + C29835 * be) +
                             C29719 * C29835 * be) +
                   C30123 * be)) /
        C29679;
    const double C1128 = 3 * (C30036 + C29821 * C29900) +
                         C29719 * (2 * C30120 + C29719 * C30123);
    const double C1265 = C30036 + C29821 * C29900 + C30123 * C29937;
    const double C1667 = C29933 * (2 * C30120 + C29719 * C30123);
    const double C6463 =
        2 * C29933 * C30123 + C29933 * (C30123 + C30234 * C29937);
    const double C10584 = C113 * C2363;
    const double C15561 = C13131 * C2363;
    const double C30236 = C29719 * C30232;
    const double C10578 =
        (3 * (C30122 + C30232 * C29937) +
         C29933 * (2 * C29933 * C30232 +
                   C29933 * (C30232 + (C29719 * C29720 * C29789 + C29857 * be) *
                                          C29937))) /
        C29679;
    const double C10688 =
        4 * (2 * C29933 * C29821 + C29933 * C30384) +
        C29933 * (3 * C30384 + C29933 * (2 * C29933 * C29835 +
                                         C29933 * (C29835 + C29857 * C29937)));
    const double C29843 = C29819 + C29842;
    const double C29910 = C29824 + C29908;
    const double C29991 = 2 * C29985;
    const double C29989 = be * C29985;
    const double C2368 =
        (2 * C29933 * C29905 + C29933 * (C29905 + C29985 * C29937)) / C29679;
    const double C10579 =
        (3 * (C29905 + C29985 * C29937) +
         C29933 * (2 * C29933 * C29985 +
                   C29933 * (C29985 + C29719 * C29862 * C29937))) /
        C29679;
    const double C30285 = C29824 + C30284;
    const double C10697 = C113 * C1983;
    const double C30195 = C30191 + C30193;
    const double C9758 = C113 * C6203;
    const double C26699 = C13131 * C6203;
    const double C10799 =
        4 * (2 * C29933 * C30186 + C29933 * C30387) +
        C29933 * (3 * C30387 +
                  C29933 * (2 * C29933 * C30202 +
                            C29933 * (C30202 + C29719 * C29853 * C29937)));
    const double C30212 = C29749 + C30210;
    const double C30288 = C30188 + C30287;
    const double C10807 = C30631 * C6208;
    const double C26238 = C13127 * C6208;
    const double C30380 = C30377 + C30379;
    const double C29797 = C29785 + C29795;
    const double C29796 = C29787 + C29794;
    const double C29990 = C29986 + C29987;
    const double C30019 = C29768 + C30018;
    const double C10698 = C30631 * C1990;
    const double C29975 = C29972 + C29973;
    const double C30022 = C29951 + C30021;
    const double C10809 = C30631 * C6213;
    const double C26242 = C13127 * C6213;
    const double C30015 = C30012 + C30014;
    const double C29867 = C29833 + C29865;
    const double C29992 = C29840 + C29988;
    const double C29976 = C29970 + C29974;
    const double C134 = (4 * (2 * C29741 + C29720 * C29753) +
                         C29720 * (3 * C29753 + C29720 * C29773)) /
                        C29679;
    const double C492 =
        (2 * C29741 + C29720 * C29753 + C29773 * C29937) / C29679;
    const double C494 = (C29933 * (3 * C29753 + C29720 * C29773)) / C29679;
    const double C10409 =
        (5 * (3 * C30260 + C29933 * C30270) +
         C29933 * (4 * C30270 +
                   C29933 * (3 * C30268 +
                             C29933 * (2 * C29933 * C29765 +
                                       C29933 * (C29765 + C29789 * C29937))))) /
        C29679;
    const double C5440 = (4 * (2 * C29897 + C29719 * C29903) +
                          C29719 * (3 * C29903 + C29719 * C29958)) /
                         C29679;
    const double C5559 =
        (2 * C29897 + C29719 * C29903 + C29958 * C29937) / C29679;
    const double C5561 = (C29933 * (3 * C29903 + C29719 * C29958)) / C29679;
    const double C10410 =
        (5 * (3 * C30263 + C29933 * C30277) +
         C29933 * (4 * C30277 +
                   C29933 * (3 * C30275 +
                             C29933 * (2 * C29933 * C29833 +
                                       C29933 * (C29833 + C29855 * C29937))))) /
        C29679;
    const double C29868 = C29866 * ae;
    const double C30047 = C29720 * C29866;
    const double C1129 = 3 * (C30038 + C29839 * C29900) +
                         C29719 * (2 * C30128 + C29719 * C30131);
    const double C1266 = C30038 + C29839 * C29900 + C30131 * C29937;
    const double C1668 = C29933 * (2 * C30128 + C29719 * C30131);
    const double C30239 = C30235 + C30237;
    const double C30215 = C29719 * C30213;
    const double C30425 = C30421 - C30424;
    const double C30753 = C30723 / C30411;
    const double C30434 = C30430 - C30433;
    const double C30767 = C30752 / C30415;
    const double C30507 = C30502 - C30506;
    const double C30757 = C30731 / C30411;
    const double C30514 = C30510 - C30513;
    const double C30771 = C30760 / C30415;
    const double C30549 = C30544 - C30548;
    const double C30759 = C30734 / C30411;
    const double C30556 = C30552 - C30555;
    const double C30773 = C30763 / C30415;
    const double C169 = C156 - C157;
    const double C9105 = C9099 * C4702;
    const double C9744 = C9458 - C9459;
    const double C9764 = C9754 - C9755;
    const double C10804 = C9746 - C9747;
    const double C9111 = C9108 + C9109;
    const double C170 = C158 - C159;
    const double C354 = C340 - C341;
    const double C645 = C344 - C345;
    const double C535 = C521 - C522;
    const double C19045 = C522 - C521;
    const double C755 = C525 - C526;
    const double C19307 = C526 - C525;
    const double C939 = C931 - C932;
    const double C19507 = C932 - C931;
    const double C143 =
        (4 * (2 * C29752 + ae * C29753 + C29720 * C29772) +
         ae * (3 * C29753 + C29720 * C29773) +
         C29720 * (3 * C29772 + ae * C29773 +
                   C29720 * (2 * C29768 + ae * C29769 +
                             C29720 * (C29764 + ae * C29720 * C29765 +
                                       C29720 * (ae * C29765 +
                                                 C29720 * std::pow(C29724, 7) *
                                                     bs[7] * C29731))))) /
        C29681;
    const double C503 = (C29738 + ae * C29741 + C29720 * C29752 +
                         C29772 * std::pow(zP - zQ, 2)) /
                        C29681;
    const double C504 =
        ((zP - zQ) * (2 * C29752 + ae * C29753 + C29720 * C29772)) / C29681;
    const double C2144 = C30631 * C1269;
    const double C13501 = C13127 * C1269;
    const double C15422 = C13126 * C1269;
    const double C1562 = C30631 * C1275;
    const double C13995 = C13127 * C1275;
    const double C14716 = C13126 * C1275;
    const double C10015 = C30631 * C1281;
    const double C15424 = C13127 * C1281;
    const double C10585 = C30631 * C2367;
    const double C15562 = C13127 * C2367;
    const double C10699 = C10693 * C4702;
    const double C30196 = C30194 + C30189;
    const double C353 = C334 - C335;
    const double C534 = C515 - C516;
    const double C19044 = C516 - C515;
    const double C9100 = C520 - C519;
    const double C19042 = C519 - C520;
    const double C19506 = C929 - C930;
    const double C19504 = C930 - C929;
    const double C9745 = C9460 - C9461;
    const double C10805 = C9748 - C9749;
    const double C10428 = C10424 + C10425;
    const double C29827 = C29826 + C29823;
    const double C1286 =
        (be * C29815 + C29719 * C29752 + C29909 * std::pow(zP - zQ, 2)) /
        C29681;
    const double C1289 =
        ((zP - zQ) * (C29752 + be * C29905 + C29719 * C29909)) / C29681;
    const double C1292 = (C29752 + be * C29905 + C29719 * C29909 +
                          (C29768 + be * C29719 * C29840 +
                           C29719 * (be * C29840 + C29719 * C29792)) *
                              std::pow(zP - zQ, 2)) /
                         C29681;
    const double C2372 =
        (2 * C29933 * C29909 +
         C29933 * (C29909 + (be * C29840 + C29719 * C29792) * C29937)) /
        C29681;
    const double C2145 = C113 * C1270;
    const double C13506 = C13131 * C1270;
    const double C15425 = C13130 * C1270;
    const double C10694 = C2260 - C2259;
    const double C21046 = C2259 - C2260;
    const double C9765 = C9756 - C9757;
    const double C5443 =
        (4 * (2 * C29901 + be * C29903 + C29719 * C29957) +
         be * (3 * C29903 + C29719 * C29958) +
         C29719 *
             (3 * C29957 + be * C29958 +
              C29719 * (2 * C29951 + be * C29953 +
                        C29719 * (C29764 + be * C29719 * C29833 +
                                  C29719 * (be * C29833 + C29719 * C29788))))) /
        C29681;
    const double C10431 = C10429 + C10430;
    const double C311 =
        (2 * C29741 + C29720 * C29753 +
         C29719 * (C29719 * C29773 + C30043 * be) + C29719 * C30043 * be) /
        C29679;
    const double C313 = (C29719 * (3 * C29753 + C29720 * C29773) +
                         (3 * C30038 + C29720 * C30043) * be) /
                        C29679;
    const double C917 = (C29933 * (C29719 * C29773 + C30043 * be)) / C29679;
    const double C122 = 4 * (2 * C30036 + C29720 * C30038) +
                        C29720 * (3 * C30038 + C29720 * C30043);
    const double C294 = 2 * C30036 + C29720 * C30038 + C30043 * C29900;
    const double C295 = C29719 * (3 * C30038 + C29720 * C30043);
    const double C475 = 2 * C30036 + C29720 * C30038 + C30043 * C29937;
    const double C476 = C29933 * (3 * C30038 + C29720 * C30043);
    const double C909 = C29933 * C29719 * C30043;
    const double C1398 =
        2 * C29719 * C30043 + C29719 * (C30043 + C29866 * C29900);
    const double C1556 = C29933 * (C30043 + C29866 * C29900);
    const double C2138 = C29719 * C30043 + C29719 * C29866 * C29937;
    const double C2252 =
        2 * C29933 * C30043 + C29933 * (C30043 + C29866 * C29937);
    const double C2147 = C113 * C1260;
    const double C13517 = C13131 * C1260;
    const double C1140 =
        (3 * (C29753 + C29719 * C30130 + C30128 * be) +
         C29719 * (2 * C30130 +
                   C29719 * (C29769 + C29719 * (C29719 * C29793 + C29861 * be) +
                             C29719 * C29861 * be) +
                   C30131 * be) +
         (2 * C30128 + C29719 * C30131) * be) /
        C29679;
    const double C1271 =
        (C29719 * C29753 + C30038 * be + C30130 * C29937) / C29679;
    const double C1277 =
        (C29933 * (C29753 + C29719 * C30130 + C30128 * be)) / C29679;
    const double C1283 = (C29753 + C29719 * C30130 + C30128 * be +
                          (C29769 + C29719 * (C29719 * C29793 + C29861 * be) +
                           C29719 * C29861 * be) *
                              C29937) /
                         C29679;
    const double C1673 =
        (C29933 * (2 * C30130 +
                   C29719 * (C29769 + C29719 * (C29719 * C29793 + C29861 * be) +
                             C29719 * C29861 * be) +
                   C30131 * be)) /
        C29679;
    const double C2369 =
        (2 * C29933 * C30130 +
         C29933 * (C30130 + (C29719 * C29793 + C29861 * be) * C29937)) /
        C29679;
    const double C14516 = C13127 * C1138;
    const double C14718 = C13127 * C1671;
    const double C20014 = C30631 * C1671;
    const double C14515 = C13131 * C1128;
    const double C10014 = C113 * C1265;
    const double C15423 = C13131 * C1265;
    const double C14717 = C13131 * C1667;
    const double C20013 = C113 * C1667;
    const double C30238 = C29755 + C30236;
    const double C29844 = C29843 + C29838;
    const double C1146 =
        (3 * (C29752 + be * C29905 + C29719 * C29909) +
         be * (2 * C29905 + C29719 * C29910) +
         C29719 * (2 * C29909 + be * C29910 +
                   C29719 * (C29768 + be * C29719 * C29840 +
                             C29719 * (be * C29840 + C29719 * C29792)))) /
        C29681;
    const double C1676 =
        ((zP - zQ) * (2 * C29909 + be * C29910 +
                      C29719 * (C29768 + be * C29719 * C29840 +
                                C29719 * (be * C29840 + C29719 * C29792)))) /
        C29681;
    const double C1139 = (3 * (C29815 + C29824 * C29900) +
                          C29719 * (2 * C29905 + C29719 * C29910)) /
                         C29679;
    const double C1282 = (C29815 + C29824 * C29900 + C29910 * C29937) / C29679;
    const double C1672 = (C29933 * (2 * C29905 + C29719 * C29910)) / C29679;
    const double C29993 = C29768 + C29989;
    const double C10586 = C113 * C2368;
    const double C15565 = C13131 * C2368;
    const double C10690 =
        (4 * (2 * C29933 * C29824 + C29933 * C30285) +
         C29933 *
             (3 * C30285 + C29933 * (2 * C29933 * C29840 +
                                     C29933 * (C29840 + C29862 * C29937)))) /
        C29679;
    const double C5437 = 4 * (2 * C30112 + C29719 * C30115) +
                         C29719 * (3 * C30115 + C29719 * C30195);
    const double C5555 = 2 * C30112 + C29719 * C30115 + C30195 * C29937;
    const double C5556 = C29933 * (3 * C30115 + C29719 * C30195);
    const double C6565 =
        2 * C29933 * C30195 + C29933 * (C30195 + C30213 * C29937);
    const double C30214 = C30212 + C30207;
    const double C10800 =
        (4 * (2 * C29933 * C30188 + C29933 * C30288) +
         C29933 * (3 * C30288 + C29933 * (2 * C29933 * C30206 +
                                          C29933 * (C30206 + (C29719 * C29789 +
                                                              C29853 * be) *
                                                                 C29937)))) /
        C29679;
    const double C10406 =
        5 * (3 * C30373 + C29933 * C30380) +
        C29933 * (4 * C30380 +
                  C29933 * (3 * C30378 +
                            C29933 * (2 * C29933 * C29832 +
                                      C29933 * (C29832 + C29853 * C29937))));
    const double C29799 = C29720 * C29797;
    const double C1399 =
        (2 * (C29719 * C29773 + C30043 * be) +
         C29719 * (C29773 + C29719 * (C29719 * C29797 + C29866 * be) +
                   C29719 * C29866 * be) +
         (C30043 + C29866 * C29900) * be) /
        C29679;
    const double C1557 =
        (C29933 * (C29773 + C29719 * (C29719 * C29797 + C29866 * be) +
                   C29719 * C29866 * be)) /
        C29679;
    const double C2139 = (C29719 * C29773 + C30043 * be +
                          (C29719 * C29797 + C29866 * be) * C29937) /
                         C29679;
    const double C2253 =
        (2 * C29933 * C29773 + C29933 * (C29773 + C29797 * C29937)) / C29679;
    const double C29798 = C29720 * C29796;
    const double C29914 = C29719 * C29796;
    const double C1988 = (2 * C29933 * C29772 +
                          C29933 * (C29772 + C29796 * std::pow(C29933, 2))) /
                         C29681;
    const double C1991 =
        (3 * (C29772 + C29796 * C29937) +
         C29933 * (2 * C29933 * C29796 +
                   C29933 * (C29796 + (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29937))) /
        C29681;
    const double C29994 = C29719 * C29990;
    const double C10580 =
        (3 * (C29909 + C29990 * C29937) +
         C29933 * (2 * C29933 * C29990 +
                   C29933 * (C29990 + (be * C29862 +
                                       C29719 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29937))) /
        C29681;
    const double C10691 =
        (4 * (2 * C29933 * C29768 + C29933 * C30019) +
         C29933 * (3 * C30019 +
                   C29933 * (2 * C29933 * C29792 +
                             C29933 * (C29792 + (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29937)))) /
        C29681;
    const double C29977 = C29719 * C29975;
    const double C6212 =
        (2 * C29933 * C29957 + C29933 * (C29957 + C29975 * C29937)) / C29681;
    const double C6214 =
        (3 * (C29957 + C29975 * C29937) +
         C29933 * (2 * C29933 * C29975 +
                   C29933 * (C29975 + (C29788 + be * C29719 * C29855 +
                                       C29719 * (be * C29855 +
                                                 C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29937))) /
        C29681;
    const double C10802 =
        (4 * (2 * C29933 * C29951 + C29933 * C30022) +
         C29933 * (3 * C30022 +
                   C29933 * (2 * C29933 * C29969 +
                             C29933 * (C29969 + (be * C29855 +
                                                 C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29937)))) /
        C29681;
    const double C10412 =
        (5 * (3 * C30008 + C29933 * C30015) +
         C29933 * (4 * C30015 +
                   C29933 * (3 * C30013 +
                             C29933 * (2 * C29933 * C29788 +
                                       C29933 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29937))))) /
        C29681;
    const double C29869 = C29867 + C29860;
    const double C29995 = C29719 * C29992;
    const double C6465 =
        (2 * C29933 * C29910 + C29933 * (C29910 + C29992 * C29937)) / C29679;
    const double C29978 = C29719 * C29976;
    const double C6567 =
        (2 * C29933 * C29958 + C29933 * (C29958 + C29976 * C29937)) / C29679;
    const double C163 = C30631 * C134;
    const double C530 = C30631 * C492;
    const double C758 = C30631 * C494;
    const double C10122 = C113 * C5559;
    const double C25389 = C13131 * C5559;
    const double C25851 = C13131 * C5561;
    const double C30048 = C30046 + C30047;
    const double C5665 = 4 * (2 * C30120 + C29719 * C30123) +
                         C29719 * (3 * C30123 + C29719 * C30239);
    const double C5815 = C29933 * (3 * C30123 + C29719 * C30239);
    const double C6361 = 2 * C30120 + C29719 * C30123 + C30239 * C29937;
    const double C30217 = C30205 + C30215;
    const double C30686 = C30425 * C30413;
    const double C30725 = C30691 + C30425;
    const double C30694 = C30434 / C30415;
    const double C30690 = C30434 * C30413;
    const double C636 = C30767 - (C30425 * C30416) / C30411;
    const double C30704 = C30507 * C30501;
    const double C30740 = C30706 + C30507;
    const double C30708 = C30514 / C30415;
    const double C30705 = C30514 * C30501;
    const double C1392 = C30771 - (C30507 * C30503) / C30411;
    const double C30710 = C30549 * C30543;
    const double C30746 = C30712 + C30549;
    const double C30714 = C30556 / C30415;
    const double C30711 = C30556 * C30543;
    const double C2248 = C30773 - (C30549 * C30545) / C30411;
    const double C9762 = C9744 * C4702;
    const double C9767 = C9764 * C4702;
    const double C10810 = C10804 * C4702;
    const double C9101 = C535 * C4702;
    const double C165 = C30631 * C143;
    const double C523 = C30631 * C503;
    const double C13520 = C13126 * C503;
    const double C527 = C30631 * C504;
    const double C13796 = C13126 * C504;
    const double C10582 = C2144 - C2143;
    const double C20913 = C2143 - C2144;
    const double C20213 = C1561 - C1562;
    const double C20211 = C1562 - C1561;
    const double C5439 =
        (4 * (2 * C30114 + C29719 * C30196 + C30115 * be) +
         C29719 *
             (3 * C30196 +
              C29719 *
                  (2 * C30188 +
                   C29719 * (C29749 + C29719 * (C29719 * C29765 + C29832 * be) +
                             C29719 * C29832 * be) +
                   C30190 * be) +
              C30195 * be) +
         (3 * C30115 + C29719 * C30195) * be) /
        C29679;
    const double C9106 = C9100 * C30396;
    const double C9763 = C9745 * C30396;
    const double C10811 = C10805 * C30396;
    const double C322 =
        (C29738 + ae * C29741 + C29720 * C29752 + be * C29719 * C29827 +
         C29719 * (be * C29827 + C29719 * C29772)) /
        C29681;
    const double C323 =
        (be * (2 * C29815 + C29720 * C29827 + (C29806 + C29818 * C29745) * ae) +
         C29719 * (2 * C29752 + ae * C29753 + C29720 * C29772)) /
        C29681;
    const double C923 = ((zP - zQ) * (be * C29827 + C29719 * C29772)) / C29681;
    const double C133 = (3 * (C29809 + C29720 * C29815 + C30036 * ae) +
                         C29720 * (2 * C29815 + C29720 * C29827 + C30038 * ae) +
                         (2 * C30036 + C29720 * C30038) * ae) /
                        C29679;
    const double C308 =
        (C29809 + C29720 * C29815 + C30036 * ae + C29827 * C29900) / C29679;
    const double C310 =
        (C29719 * (2 * C29815 + C29720 * C29827 + C30038 * ae)) / C29679;
    const double C489 =
        (C29809 + C29720 * C29815 + C30036 * ae + C29827 * C29937) / C29679;
    const double C491 =
        (C29933 * (2 * C29815 + C29720 * C29827 + C30038 * ae)) / C29679;
    const double C916 = (C29933 * C29719 * C29827) / C29679;
    const double C2146 = C30631 * C1286;
    const double C13505 = C13127 * C1286;
    const double C15426 = C13126 * C1286;
    const double C1564 = C30631 * C1289;
    const double C13999 = C13127 * C1289;
    const double C14720 = C13126 * C1289;
    const double C10017 = C30631 * C1292;
    const double C15428 = C13127 * C1292;
    const double C10587 = C30631 * C2372;
    const double C15566 = C13127 * C2372;
    const double C10700 = C10694 * C30396;
    const double C9768 = C9765 * C30396;
    const double C349 = C30631 * C311;
    const double C13656 = C13127 * C311;
    const double C648 = C30631 * C313;
    const double C13162 = C13127 * C313;
    const double C936 = C30631 * C917;
    const double C13794 = C13127 * C917;
    const double C162 = C113 * C122;
    const double C348 = C113 * C294;
    const double C13655 = C13131 * C294;
    const double C647 = C113 * C295;
    const double C13161 = C13131 * C295;
    const double C529 = C113 * C475;
    const double C757 = C113 * C476;
    const double C935 = C113 * C909;
    const double C13793 = C13131 * C909;
    const double C2148 = C30631 * C1271;
    const double C13518 = C13127 * C1271;
    const double C1566 = C30631 * C1277;
    const double C14004 = C13127 * C1277;
    const double C30240 = C30238 + C30233;
    const double C29845 = C29720 * C29844;
    const double C29850 = 3 * C29844;
    const double C29913 = be * C29844;
    const double C29912 = C29719 * C29844;
    const double C1144 = (2 * (be * C29827 + C29719 * C29772) +
                          be * (C29827 + C29844 * std::pow(C29719, 2)) +
                          C29719 * (C29772 + be * C29719 * C29844 +
                                    C29719 * (be * C29844 + C29719 * C29796))) /
                         C29681;
    const double C1135 =
        (2 * C29719 * C29827 + C29719 * (C29827 + C29844 * C29900)) / C29679;
    const double C1278 = (C29933 * (C29827 + C29844 * C29900)) / C29679;
    const double C1979 =
        (2 * C29933 * C29827 + C29933 * (C29827 + C29844 * C29937)) / C29679;
    const double C14520 = C13127 * C1146;
    const double C14722 = C13127 * C1676;
    const double C20016 = C30631 * C1676;
    const double C14519 = C13131 * C1139;
    const double C10016 = C113 * C1282;
    const double C15427 = C13131 * C1282;
    const double C14721 = C13131 * C1672;
    const double C20015 = C113 * C1672;
    const double C10120 = C113 * C5555;
    const double C25385 = C13131 * C5555;
    const double C25847 = C13131 * C5556;
    const double C30216 = C29719 * C30214;
    const double C6206 =
        (2 * C29933 * C30196 + C29933 * (C30196 + C30214 * C29937)) / C29679;
    const double C6209 =
        (3 * (C30196 + C30214 * C29937) +
         C29933 *
             (2 * C29933 * C30214 +
              C29933 *
                  (C30214 + (C29765 + C29719 * (C29719 * C29789 + C29853 * be) +
                             C29719 * C29853 * be) *
                                C29937))) /
        C29679;
    const double C29801 = C29781 + C29799;
    const double C29800 = C29782 + C29798;
    const double C2264 = C30631 * C1988;
    const double C29996 = C29993 + C29994;
    const double C29979 = C29967 + C29977;
    const double C9761 = C30631 * C6212;
    const double C26704 = C13127 * C6212;
    const double C29870 = C29720 * C29869;
    const double C29915 = C29869 * C29900;
    const double C1985 =
        (3 * (C29827 + C29844 * C29937) +
         C29933 * (2 * C29933 * C29844 + C29933 * (C29844 + C29869 * C29937))) /
        C29679;
    const double C29997 = C29991 + C29995;
    const double C29980 = C29965 + C29978;
    const double C123 = 5 * (3 * C30038 + C29720 * C30043) +
                        C29720 * (4 * C30043 + C29720 * C30048);
    const double C296 = 3 * C30038 + C29720 * C30043 + C30048 * C29900;
    const double C477 = 3 * C30038 + C29720 * C30043 + C30048 * C29937;
    const double C640 = C29719 * (4 * C30043 + C29720 * C30048);
    const double C750 = C29933 * (4 * C30043 + C29720 * C30048);
    const double C910 = C29933 * C29719 * C30048;
    const double C5438 = 5 * (3 * C30115 + C29719 * C30195) +
                         C29719 * (4 * C30195 + C29719 * C30217);
    const double C5557 = 3 * C30115 + C29719 * C30195 + C30217 * C29937;
    const double C5917 = C29933 * (4 * C30195 + C29719 * C30217);
    const double C30721 = C30686 / C30411;
    const double C30754 = C30725 / C30415;
    const double C30755 = C30727 + C30694;
    const double C638 = C30694 - C30432 / C30429;
    const double C30724 = C30690 / C30411;
    const double C30737 = C30704 / C30411;
    const double C30761 = C30740 / C30415;
    const double C30762 = C30741 + C30708;
    const double C1394 = C30708 - C30512 / C30429;
    const double C30739 = C30705 / C30411;
    const double C30743 = C30710 / C30411;
    const double C30764 = C30746 / C30415;
    const double C30765 = C30747 + C30714;
    const double C2250 = C30714 - C30554 / C30429;
    const double C30745 = C30711 / C30411;
    const double C10588 = C10582 * C4702;
    const double C9110 = C9105 + C9106;
    const double C9766 = C9762 + C9763;
    const double C10812 = C10810 + C10811;
    const double C342 = C30631 * C322;
    const double C13342 = C13126 * C322;
    const double C13335 = C13127 * C322;
    const double C346 = C30631 * C323;
    const double C13157 = C13127 * C323;
    const double C13658 = C13126 * C323;
    const double C933 = C30631 * C923;
    const double C13513 = C13127 * C923;
    const double C14006 = C13126 * C923;
    const double C161 = C113 * C133;
    const double C13163 = C13130 * C133;
    const double C343 = C113 * C308;
    const double C13341 = C13130 * C308;
    const double C13336 = C13131 * C308;
    const double C347 = C113 * C310;
    const double C13158 = C13131 * C310;
    const double C13657 = C13130 * C310;
    const double C524 = C113 * C489;
    const double C13519 = C13130 * C489;
    const double C528 = C113 * C491;
    const double C13795 = C13130 * C491;
    const double C934 = C113 * C916;
    const double C13514 = C13131 * C916;
    const double C14005 = C13130 * C916;
    const double C10583 = C2146 - C2145;
    const double C20914 = C2145 - C2146;
    const double C20214 = C1563 - C1564;
    const double C20212 = C1564 - C1563;
    const double C10701 = C10699 + C10700;
    const double C9769 = C9767 + C9768;
    const double C5666 =
        (4 * (2 * C30122 + C29719 * C30240 + C30123 * be) +
         C29719 * (3 * C30240 +
                   C29719 * (2 * C30232 +
                             C29719 * (C29777 +
                                       C29719 * (C29719 * C29720 * C29789 +
                                                 C29857 * be) +
                                       C29719 * C29857 * be) +
                             C30234 * be) +
                   C30239 * be) +
         (3 * C30123 + C29719 * C30239) * be) /
        C29679;
    const double C5816 =
        (C29933 * (3 * C30240 +
                   C29719 * (2 * C30232 +
                             C29719 * (C29777 +
                                       C29719 * (C29719 * C29720 * C29789 +
                                                 C29857 * be) +
                                       C29719 * C29857 * be) +
                             C30234 * be) +
                   C30239 * be)) /
        C29679;
    const double C6362 =
        (2 * C30122 + C29719 * C30240 + C30123 * be +
         (2 * C30232 +
          C29719 * (C29777 + C29719 * (C29719 * C29720 * C29789 + C29857 * be) +
                    C29719 * C29857 * be) +
          C30234 * be) *
             C29937) /
        C29679;
    const double C6464 =
        (2 * C29933 * C30240 +
         C29933 * (C30240 +
                   (C29777 + C29719 * (C29719 * C29720 * C29789 + C29857 * be) +
                    C29719 * C29857 * be) *
                       C29937)) /
        C29679;
    const double C29846 = C29830 + C29845;
    const double C29916 = C29913 + C29914;
    const double C1272 = (C29719 * C29827 + C29912 * C29937) / C29679;
    const double C2370 =
        (2 * C29933 * C29912 + C29933 * (C29912 + C29719 * C29869 * C29937)) /
        C29679;
    const double C1410 = C30631 * C1144;
    const double C13344 = C13127 * C1144;
    const double C1409 = C113 * C1135;
    const double C13343 = C13131 * C1135;
    const double C1567 = C113 * C1278;
    const double C14007 = C13131 * C1278;
    const double C2263 = C113 * C1979;
    const double C30218 = C30199 + C30216;
    const double C9759 = C30631 * C6206;
    const double C26700 = C13127 * C6206;
    const double C136 = (5 * (3 * C29753 + C29720 * C29773) +
                         C29720 * (4 * C29773 + C29720 * C29801)) /
                        C29679;
    const double C315 =
        (3 * C29753 + C29720 * C29773 +
         C29719 * (C29719 * C29801 + C30048 * be) + C29719 * C30048 * be) /
        C29679;
    const double C496 =
        (3 * C29753 + C29720 * C29773 + C29801 * C29937) / C29679;
    const double C641 = (C29719 * (4 * C29773 + C29720 * C29801) +
                         (4 * C30043 + C29720 * C30048) * be) /
                        C29679;
    const double C751 = (C29933 * (4 * C29773 + C29720 * C29801)) / C29679;
    const double C919 = (C29933 * (C29719 * C29801 + C30048 * be)) / C29679;
    const double C144 =
        (5 * (3 * C29772 + ae * C29773 + C29720 * C29800) +
         ae * (4 * C29773 + C29720 * C29801) +
         C29720 *
             (4 * C29800 + ae * C29801 +
              C29720 *
                  (3 * C29796 + ae * C29797 +
                   C29720 * (2 * C29792 + ae * C29793 +
                             C29720 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C505 = (2 * C29752 + ae * C29753 + C29720 * C29772 +
                         C29800 * std::pow(zP - zQ, 2)) /
                        C29681;
    const double C506 =
        ((zP - zQ) * (3 * C29772 + ae * C29773 + C29720 * C29800)) / C29681;
    const double C507 =
        (3 * C29772 + ae * C29773 + C29720 * C29800 +
         (3 * C29796 + ae * C29797 +
          C29720 *
              (2 * C29792 + ae * C29793 +
               C29720 * (C29788 + ae * C29720 * C29789 +
                         C29720 * (ae * C29789 + C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             std::pow(zP - zQ, 2)) /
        C29681;
    const double C753 =
        ((zP - zQ) *
         (4 * C29800 + ae * C29801 +
          C29720 * (3 * C29796 + ae * C29797 +
                    C29720 * (2 * C29792 + ae * C29793 +
                              C29720 * (C29788 + ae * C29720 * C29789 +
                                        C29720 * (ae * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29681;
    const double C2255 =
        (2 * C29933 * C29800 +
         C29933 * (C29800 + (2 * C29792 + ae * C29793 +
                             C29720 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29937)) /
        C29681;
    const double C6364 =
        (2 * C29909 + be * C29910 + C29719 * C29996 +
         (2 * C29990 + be * C29992 +
          C29719 *
              (C29792 + be * C29719 * C29862 +
               C29719 * (be * C29862 +
                         C29719 * (ae * C29789 + C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             C29937) /
        C29681;
    const double C6466 =
        (2 * C29933 * C29996 +
         C29933 * (C29996 + (C29792 + be * C29719 * C29862 +
                             C29719 * (be * C29862 +
                                       C29719 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29937)) /
        C29681;
    const double C5564 =
        (2 * C29901 + be * C29903 + C29719 * C29957 + C29979 * C29937) / C29681;
    const double C5565 =
        (C29933 * (3 * C29957 + be * C29958 + C29719 * C29979)) / C29681;
    const double C5566 =
        (3 * C29957 + be * C29958 + C29719 * C29979 +
         (3 * C29975 + be * C29976 +
          C29719 *
              (2 * C29969 + be * C29971 +
               C29719 * (C29788 + be * C29719 * C29855 +
                         C29719 * (be * C29855 + C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             C29937) /
        C29681;
    const double C6568 =
        (2 * C29933 * C29979 +
         C29933 * (C29979 + (2 * C29969 + be * C29971 +
                             C29719 * (C29788 + be * C29719 * C29855 +
                                       C29719 * (be * C29855 +
                                                 C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29937)) /
        C29681;
    const double C29871 = C29851 + C29870;
    const double C29917 = C29844 + C29915;
    const double C5668 =
        (4 * (2 * C29909 + be * C29910 + C29719 * C29996) +
         be * (3 * C29910 + C29719 * C29997) +
         C29719 *
             (3 * C29996 + be * C29997 +
              C29719 *
                  (2 * C29990 + be * C29992 +
                   C29719 * (C29792 + be * C29719 * C29862 +
                             C29719 * (be * C29862 +
                                       C29719 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C5818 =
        (C29933 *
         (3 * C29996 + be * C29997 +
          C29719 * (2 * C29990 + be * C29992 +
                    C29719 * (C29792 + be * C29719 * C29862 +
                              C29719 * (be * C29862 +
                                        C29719 * (ae * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29681;
    const double C5667 = (4 * (2 * C29905 + C29719 * C29910) +
                          C29719 * (3 * C29910 + C29719 * C29997)) /
                         C29679;
    const double C5817 = (C29933 * (3 * C29910 + C29719 * C29997)) / C29679;
    const double C6363 =
        (2 * C29905 + C29719 * C29910 + C29997 * C29937) / C29679;
    const double C5444 =
        (5 * (3 * C29957 + be * C29958 + C29719 * C29979) +
         be * (4 * C29958 + C29719 * C29980) +
         C29719 *
             (4 * C29979 + be * C29980 +
              C29719 *
                  (3 * C29975 + be * C29976 +
                   C29719 * (2 * C29969 + be * C29971 +
                             C29719 * (C29788 + be * C29719 * C29855 +
                                       C29719 * (be * C29855 +
                                                 C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C5920 =
        (C29933 *
         (4 * C29979 + be * C29980 +
          C29719 * (3 * C29975 + be * C29976 +
                    C29719 * (2 * C29969 + be * C29971 +
                              C29719 * (C29788 + be * C29719 * C29855 +
                                        C29719 * (be * C29855 +
                                                  C29719 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29681;
    const double C5442 = (5 * (3 * C29903 + C29719 * C29958) +
                          C29719 * (4 * C29958 + C29719 * C29980)) /
                         C29679;
    const double C5563 =
        (3 * C29903 + C29719 * C29958 + C29980 * C29937) / C29679;
    const double C5919 = (C29933 * (4 * C29958 + C29719 * C29980)) / C29679;
    const double C30775 = C30721 + C30767;
    const double C637 = C30754 - (C30434 * C30416) / C30411;
    const double C111 = C30755 / C30415 - C30432 / C30728;
    const double C30768 = C30724 + C30754;
    const double C30776 = C30737 + C30771;
    const double C1393 = C30761 - (C30514 * C30503) / C30411;
    const double C1121 = C30762 / C30415 - C30512 / C30728;
    const double C30772 = C30739 + C30761;
    const double C30777 = C30743 + C30773;
    const double C2249 = C30764 - (C30556 * C30545) / C30411;
    const double C1966 = C30765 / C30415 - C30554 / C30728;
    const double C30774 = C30745 + C30764;
    const double C171 = C160 - C161;
    const double C355 = C342 - C343;
    const double C646 = C346 - C347;
    const double C536 = C523 - C524;
    const double C19046 = C524 - C523;
    const double C756 = C527 - C528;
    const double C19308 = C528 - C527;
    const double C940 = C933 - C934;
    const double C19508 = C934 - C933;
    const double C10589 = C10583 * C30396;
    const double C29847 = C29846 + C29841;
    const double C1287 =
        (be * C29827 + C29719 * C29772 + C29916 * std::pow(zP - zQ, 2)) /
        C29681;
    const double C1290 =
        ((zP - zQ) * (C29772 + be * C29912 + C29719 * C29916)) / C29681;
    const double C1293 =
        (C29772 + be * C29912 + C29719 * C29916 +
         (C29796 + be * C29719 * C29869 +
          C29719 *
              (be * C29869 +
               C29719 * (C29788 + ae * C29720 * C29789 +
                         C29720 * (ae * C29789 + C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             std::pow(zP - zQ, 2)) /
        C29681;
    const double C2373 =
        (2 * C29933 * C29916 +
         C29933 * (C29916 + (be * C29869 +
                             C29719 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29937)) /
        C29681;
    const double C2149 = C113 * C1272;
    const double C13521 = C13131 * C1272;
    const double C30219 = C30218 + C30203;
    const double C532 = C30631 * C505;
    const double C760 = C30631 * C506;
    const double C10123 = C30631 * C5564;
    const double C25390 = C13127 * C5564;
    const double C25852 = C13127 * C5565;
    const double C29872 = C29871 + C29863;
    const double C1147 =
        (3 * (C29772 + be * C29912 + C29719 * C29916) +
         be * (2 * C29912 + C29719 * C29917) +
         C29719 *
             (2 * C29916 + be * C29917 +
              C29719 *
                  (C29796 + be * C29719 * C29869 +
                   C29719 * (be * C29869 +
                             C29719 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C1677 =
        ((zP - zQ) *
         (2 * C29916 + be * C29917 +
          C29719 * (C29796 + be * C29719 * C29869 +
                    C29719 * (be * C29869 +
                              C29719 * (C29788 + ae * C29720 * C29789 +
                                        C29720 * (ae * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29681;
    const double C1141 = (3 * (C29827 + C29844 * C29900) +
                          C29719 * (2 * C29912 + C29719 * C29917)) /
                         C29679;
    const double C1284 = (C29827 + C29844 * C29900 + C29917 * C29937) / C29679;
    const double C1674 = (C29933 * (2 * C29912 + C29719 * C29917)) / C29679;
    const double C108 =
        (C30766 + 2 * C30425) / C30415 - (C30775 * C30416) / C30411;
    const double C109 =
        (C30753 + 2 * C30434 + C30775) / C30415 - (C30768 * C30416) / C30411;
    const double C110 = (C30726 + C30431 / C30411 + C30768) / C30415 -
                        (C30755 * C30416) / C30411;
    const double C1118 =
        (C30769 + 2 * C30507) / C30415 - (C30776 * C30503) / C30411;
    const double C1119 =
        (C30757 + 2 * C30514 + C30776) / C30415 - (C30772 * C30503) / C30411;
    const double C1120 = (C30732 + C30511 / C30411 + C30772) / C30415 -
                         (C30762 * C30503) / C30411;
    const double C1963 =
        (C30770 + 2 * C30549) / C30415 - (C30777 * C30545) / C30411;
    const double C1964 =
        (C30759 + 2 * C30556 + C30777) / C30415 - (C30774 * C30545) / C30411;
    const double C1965 = (C30735 + C30553 / C30411 + C30774) / C30415 -
                         (C30765 * C30545) / C30411;
    const double C9102 = C536 * C30396;
    const double C10590 = C10588 + C10589;
    const double C324 =
        (2 * C29752 + ae * C29753 + C29720 * C29772 + be * C29719 * C29847 +
         C29719 * (be * C29847 + C29719 * C29800)) /
        C29681;
    const double C325 =
        (be * (3 * C29827 + C29720 * C29847 +
               (2 * C29821 + C29720 * C29839) * ae) +
         C29719 * (3 * C29772 + ae * C29773 + C29720 * C29800)) /
        C29681;
    const double C924 = ((zP - zQ) * (be * C29847 + C29719 * C29800)) / C29681;
    const double C135 = (4 * (2 * C29815 + C29720 * C29827 + C30038 * ae) +
                         C29720 * (3 * C29827 + C29720 * C29847 + C30043 * ae) +
                         (3 * C30038 + C29720 * C30043) * ae) /
                        C29679;
    const double C312 =
        (2 * C29815 + C29720 * C29827 + C30038 * ae + C29847 * C29900) / C29679;
    const double C314 =
        (C29719 * (3 * C29827 + C29720 * C29847 + C30043 * ae)) / C29679;
    const double C493 =
        (2 * C29815 + C29720 * C29827 + C30038 * ae + C29847 * C29937) / C29679;
    const double C495 =
        (C29933 * (3 * C29827 + C29720 * C29847 + C30043 * ae)) / C29679;
    const double C918 = (C29933 * C29719 * C29847) / C29679;
    const double C2150 = C30631 * C1287;
    const double C13522 = C13127 * C1287;
    const double C1568 = C30631 * C1290;
    const double C14008 = C13127 * C1290;
    const double C5441 =
        (5 * (3 * C30196 + C29719 * C30219 + C30195 * be) +
         C29719 * (4 * C30219 +
                   C29719 * (3 * C30214 +
                             C29719 * (2 * C30206 +
                                       C29719 * (C29765 +
                                                 C29719 * (C29719 * C29789 +
                                                           C29853 * be) +
                                                 C29719 * C29853 * be) +
                                       C30208 * be) +
                             C30213 * be) +
                   C30217 * be) +
         (4 * C30195 + C29719 * C30217) * be) /
        C29679;
    const double C5558 =
        (2 * C30114 + C29719 * C30196 + C30115 * be + C30219 * C29937) / C29679;
    const double C5560 =
        (C29933 * (3 * C30196 + C29719 * C30219 + C30195 * be)) / C29679;
    const double C5562 =
        (3 * C30196 + C29719 * C30219 + C30195 * be +
         (3 * C30214 +
          C29719 *
              (2 * C30206 +
               C29719 * (C29765 + C29719 * (C29719 * C29789 + C29853 * be) +
                         C29719 * C29853 * be) +
               C30208 * be) +
          C30213 * be) *
             C29937) /
        C29679;
    const double C5918 =
        (C29933 *
         (4 * C30219 +
          C29719 *
              (3 * C30214 +
               C29719 * (2 * C30206 +
                         C29719 * (C29765 +
                                   C29719 * (C29719 * C29789 + C29853 * be) +
                                   C29719 * C29853 * be) +
                         C30208 * be) +
               C30213 * be) +
          C30217 * be)) /
        C29679;
    const double C6566 =
        (2 * C29933 * C30219 +
         C29933 *
             (C30219 +
              (2 * C30206 +
               C29719 * (C29765 + C29719 * (C29719 * C29789 + C29853 * be) +
                         C29719 * C29853 * be) +
               C30208 * be) *
                  C29937)) /
        C29679;
    const double C29873 = C29720 * C29872;
    const double C1401 =
        (2 * (be * C29847 + C29719 * C29800) + be * (C29847 + C29872 * C29900) +
         C29719 *
             (C29800 + be * C29719 * C29872 +
              C29719 *
                  (be * C29872 +
                   C29719 * (2 * C29792 + ae * C29793 +
                             C29720 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C1559 =
        ((zP - zQ) *
         (C29800 + be * C29719 * C29872 +
          C29719 * (be * C29872 +
                    C29719 * (2 * C29792 + ae * C29793 +
                              C29720 * (C29788 + ae * C29720 * C29789 +
                                        C29720 * (ae * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29681;
    const double C2141 =
        (be * C29847 + C29719 * C29800 +
         (be * C29872 +
          C29719 *
              (2 * C29792 + ae * C29793 +
               C29720 * (C29788 + ae * C29720 * C29789 +
                         C29720 * (ae * C29789 + C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             C29937) /
        C29681;
    const double C1400 =
        (2 * C29719 * C29847 + C29719 * (C29847 + C29872 * C29900)) / C29679;
    const double C1558 = (C29933 * (C29847 + C29872 * C29900)) / C29679;
    const double C2140 = (C29719 * C29847 + C29719 * C29872 * C29937) / C29679;
    const double C2254 =
        (2 * C29933 * C29847 + C29933 * (C29847 + C29872 * C29937)) / C29679;
    const double C9107 = C9101 + C9102;
    const double C351 = C30631 * C324;
    const double C13660 = C13127 * C324;
    const double C650 = C30631 * C325;
    const double C13166 = C13127 * C325;
    const double C938 = C30631 * C924;
    const double C13798 = C13127 * C924;
    const double C164 = C113 * C135;
    const double C350 = C113 * C312;
    const double C13659 = C13131 * C312;
    const double C649 = C113 * C314;
    const double C13165 = C13131 * C314;
    const double C531 = C113 * C493;
    const double C759 = C113 * C495;
    const double C937 = C113 * C918;
    const double C13797 = C13131 * C918;
    const double C10121 = C30631 * C5558;
    const double C25386 = C13127 * C5558;
    const double C25848 = C13127 * C5560;
    const double C29874 = C29850 + C29873;
    const double C29875 = C29874 + C29868;
    const double C326 =
        (3 * C29772 + ae * C29773 + C29720 * C29800 + be * C29719 * C29875 +
         C29719 *
             (be * C29875 +
              C29719 *
                  (3 * C29796 + ae * C29797 +
                   C29720 * (2 * C29792 + ae * C29793 +
                             C29720 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C643 =
        (be * (4 * C29847 + C29720 * C29875 +
               (3 * C29839 + C29720 * C29866) * ae) +
         C29719 *
             (4 * C29800 + ae * C29801 +
              C29720 *
                  (3 * C29796 + ae * C29797 +
                   C29720 * (2 * C29792 + ae * C29793 +
                             C29720 * (C29788 + ae * C29720 * C29789 +
                                       C29720 * (ae * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29681;
    const double C925 =
        ((zP - zQ) *
         (be * C29875 +
          C29719 * (3 * C29796 + ae * C29797 +
                    C29720 * (2 * C29792 + ae * C29793 +
                              C29720 * (C29788 + ae * C29720 * C29789 +
                                        C29720 * (ae * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29681;
    const double C137 = (5 * (3 * C29827 + C29720 * C29847 + C30043 * ae) +
                         C29720 * (4 * C29847 + C29720 * C29875 + C30048 * ae) +
                         (4 * C30043 + C29720 * C30048) * ae) /
                        C29679;
    const double C316 =
        (3 * C29827 + C29720 * C29847 + C30043 * ae + C29875 * C29900) / C29679;
    const double C497 =
        (3 * C29827 + C29720 * C29847 + C30043 * ae + C29875 * C29937) / C29679;
    const double C642 =
        (C29719 * (4 * C29847 + C29720 * C29875 + C30048 * ae)) / C29679;
    const double C752 =
        (C29933 * (4 * C29847 + C29720 * C29875 + C30048 * ae)) / C29679;
    const double C920 = (C29933 * C29719 * C29875) / C29679;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30507 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30514 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C2840) *
              C30425 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30507 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30514 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C2840) *
              C30434 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C30507 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C30514 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30702 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30507 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30702 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30514 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C13132 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30645 * C30702 +
            ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
              C13127 * C1669) *
                 C13132 +
             (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
              C13127 * C1675) *
                 C13128 +
             (C14715 - C14716 + C14717 - C14718) * C13133 +
             (C14719 - C14720 + C14721 - C14722) * C13129) *
                C30645 * C30553) *
               C2840) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30702 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30507 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30702 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30514 +
           (((C13322 - C13321 + C13324 - C13323) * C13132 +
             (C13326 - C13325 + C13328 - C13327) * C13128 +
             (C13337 - C13338 + C13339 - C13340) * C13133 +
             (C13341 - C13342 + C13343 - C13344) * C13129) *
                C30645 * C30702 +
            ((C14716 - C14715 + C14718 - C14717) * C13132 +
             (C14720 - C14719 + C14722 - C14721) * C13128 +
             (C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C13133 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C13129) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30776 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30772 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30762 +
           ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30776 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30772 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30762 +
           ((C14514 - C14513 + C14516 - C14515) * C13132 +
            (C14518 - C14517 + C14520 - C14519) * C13128 +
            (C13126 * C1134 - C13130 * C1126 + C13127 * C1140 -
             C13131 * C1129) *
                C13133 +
            (C13126 * C1144 - C13130 * C1135 + C13127 * C1147 -
             C13131 * C1141) *
                C13129) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30511) *
              C30768 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C30511) *
              C30755 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13654 - C13653 + C13656 - C13655) * C13132 +
            (C13658 - C13657 + C13660 - C13659) * C13128 +
            (C13126 * C313 - C13130 * C295 + C13127 * C315 - C13131 * C296) *
                C13133 +
            (C13126 * C325 - C13130 * C314 + C13127 * C326 - C13131 * C316) *
                C13129) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30770 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30759 +
            ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                 C13132 +
             (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                 C13128 +
             (C13499 - C13500 + C13501 - C13502) * C13133 +
             (C13503 - C13504 + C13505 - C13506) * C13129) *
                C30645 * C30735) *
               C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30770 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30759 +
            ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
              C13127 * C1279) *
                 C13132 +
             (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
              C13127 * C1291) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30645 * C30735) *
               C30511) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30770 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30759 +
            ((C13500 - C13499 + C13502 - C13501) * C13132 +
             (C13504 - C13503 + C13506 - C13505) * C13128 +
             (C13515 - C13516 + C13517 - C13518) * C13133 +
             (C13519 - C13520 + C13521 - C13522) * C13129) *
                C30645 * C30735) *
               C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30770 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30759 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
              C13131 * C1266) *
                 C13133 +
             (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
              C13131 * C1284) *
                 C13129) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30702 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30702 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30702 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30702 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          ((((C13144 - C13143 + C13146 - C13145) * C13132 +
             (C13148 - C13147 + C13150 - C13149) * C13128 +
             (C13151 - C13152 + C13153 - C13154) * C13133 +
             (C13155 - C13156 + C13157 - C13158) * C13129) *
                C30645 * C30702 +
            ((C13508 - C13507 + C13510 - C13509) * C13132 +
             (C13512 - C13511 + C13514 - C13513) * C13128 +
             (C13791 - C13792 + C13793 - C13794) * C13133 +
             (C13795 - C13796 + C13797 - C13798) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13330 - C13329 + C13332 - C13331) * C13132 +
             (C13334 - C13333 + C13336 - C13335) * C13128 +
             (C13653 - C13654 + C13655 - C13656) * C13133 +
             (C13657 - C13658 + C13659 - C13660) * C13129) *
                C30645 * C30702 +
            ((C14002 - C14001 + C14004 - C14003) * C13132 +
             (C14006 - C14005 + C14008 - C14007) * C13128 +
             (C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C13133 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C13129) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30511) *
              C30768 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C30511) *
              C30755 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C30466 * C2472 +
           ((C13654 - C13653 + C13656 - C13655) * C13132 +
            (C13658 - C13657 + C13660 - C13659) * C13128 +
            (C13126 * C313 - C13130 * C295 + C13127 * C315 - C13131 * C296) *
                C13133 +
            (C13126 * C325 - C13130 * C314 + C13127 * C326 - C13131 * C316) *
                C13129) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30776 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30772 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30762 +
           ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30776 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30772 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30762 +
           ((C14514 - C14513 + C14516 - C14515) * C13132 +
            (C14518 - C14517 + C14520 - C14519) * C13128 +
            (C13126 * C1134 - C13130 * C1126 + C13127 * C1140 -
             C13131 * C1129) *
                C13133 +
            (C13126 * C1144 - C13130 * C1135 + C13127 * C1147 -
             C13131 * C1141) *
                C13129) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C3234 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30507 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C3234 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30514 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C13132 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30645 * C3234 +
            ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
              C13127 * C1669) *
                 C13132 +
             (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
              C13127 * C1675) *
                 C13128 +
             (C14715 - C14716 + C14717 - C14718) * C13133 +
             (C14719 - C14720 + C14721 - C14722) * C13129) *
                C30645 * C30553) *
               C2840) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C3234 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30507 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C3234 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30514 +
           (((C13322 - C13321 + C13324 - C13323) * C13132 +
             (C13326 - C13325 + C13328 - C13327) * C13128 +
             (C13337 - C13338 + C13339 - C13340) * C13133 +
             (C13341 - C13342 + C13343 - C13344) * C13129) *
                C30645 * C3234 +
            ((C14716 - C14715 + C14718 - C14717) * C13132 +
             (C14720 - C14719 + C14722 - C14721) * C13128 +
             (C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C13133 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C13129) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30549 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30556 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C3742) *
              C30507 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30549 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30556 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C15421 - C15422 + C15423 - C15424) * C13133 +
            (C15425 - C15426 + C15427 - C15428) * C13129) *
               C30645 * C3742) *
              C30514 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30549 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C30556 +
           ((C13126 * C1279 - C13130 * C1264 + C13127 * C5558 -
             C13131 * C5555) *
                C13132 +
            (C13126 * C1291 - C13130 * C1280 + C13127 * C5564 -
             C13131 * C5559) *
                C13128 +
            (C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
             C13131 * C6361) *
                C13133 +
            (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
             C13131 * C6363) *
                C13129) *
               C30645 * C3742) *
              C2840) *
         C30420) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C3234 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C30776 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C3234 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30553) *
              C30772 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C3234 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C30553) *
              C30762 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C3234 +
           ((C13126 * C1669 - C13130 * C1666 + C13127 * C5560 -
             C13131 * C5556) *
                C13132 +
            (C13126 * C1675 - C13130 * C1670 + C13127 * C5565 -
             C13131 * C5561) *
                C13128 +
            (C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
             C13131 * C5815) *
                C13133 +
            (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
             C13131 * C5817) *
                C13129) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C3234 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C3234 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C3234 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C3234 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C13132 +
             (C13148 - C13147 + C13150 - C13149) * C13128 +
             (C13151 - C13152 + C13153 - C13154) * C13133 +
             (C13155 - C13156 + C13157 - C13158) * C13129) *
                C30645 * C3234 +
            ((C13508 - C13507 + C13510 - C13509) * C13132 +
             (C13512 - C13511 + C13514 - C13513) * C13128 +
             (C13791 - C13792 + C13793 - C13794) * C13133 +
             (C13795 - C13796 + C13797 - C13798) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13330 - C13329 + C13332 - C13331) * C13132 +
             (C13334 - C13333 + C13336 - C13335) * C13128 +
             (C13653 - C13654 + C13655 - C13656) * C13133 +
             (C13657 - C13658 + C13659 - C13660) * C13129) *
                C30645 * C3234 +
            ((C14002 - C14001 + C14004 - C14003) * C13132 +
             (C14006 - C14005 + C14008 - C14007) * C13128 +
             (C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C13133 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C13129) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30777 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30774 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30765 +
           ((C13130 * C1968 - C13126 * C1974 + C13131 * C2362 -
             C13127 * C2365) *
                C13132 +
            (C13130 * C1975 - C13126 * C1986 + C13131 * C2366 -
             C13127 * C2371) *
                C13128 +
            (C15559 - C15560 + C15561 - C15562) * C13133 +
            (C15563 - C15564 + C15565 - C15566) * C13129) *
               C30645 * C30748) *
              C2472 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30777 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30774 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C15421 - C15422 + C15423 - C15424) * C13133 +
            (C15425 - C15426 + C15427 - C15428) * C13129) *
               C30645 * C30765 +
           ((C13126 * C2365 - C13130 * C2362 + C13127 * C6206 -
             C13131 * C6203) *
                C13132 +
            (C13126 * C2371 - C13130 * C2366 + C13127 * C6212 -
             C13131 * C6207) *
                C13128 +
            (C13126 * C2367 - C13130 * C2363 + C13127 * C6464 -
             C13131 * C6463) *
                C13133 +
            (C13126 * C2372 - C13130 * C2368 + C13127 * C6466 -
             C13131 * C6465) *
                C13129) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30549 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30556 +
            ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                 C13132 +
             (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                 C13128 +
             (C13499 - C13500 + C13501 - C13502) * C13133 +
             (C13503 - C13504 + C13505 - C13506) * C13129) *
                C30645 * C3742) *
               C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30549 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30556 +
            ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
              C13127 * C1279) *
                 C13132 +
             (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
              C13127 * C1291) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30645 * C3742) *
               C30511) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30549 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30556 +
            ((C13500 - C13499 + C13502 - C13501) * C13132 +
             (C13504 - C13503 + C13506 - C13505) * C13128 +
             (C13515 - C13516 + C13517 - C13518) * C13133 +
             (C13519 - C13520 + C13521 - C13522) * C13129) *
                C30645 * C3742) *
               C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30549 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30556 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
              C13131 * C1266) *
                 C13133 +
             (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
              C13131 * C1284) *
                 C13129) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C3234 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C3234 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C3234 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C3234 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C13132 +
             (C13148 - C13147 + C13150 - C13149) * C13128 +
             (C13151 - C13152 + C13153 - C13154) * C13133 +
             (C13155 - C13156 + C13157 - C13158) * C13129) *
                C30645 * C3234 +
            ((C13508 - C13507 + C13510 - C13509) * C13132 +
             (C13512 - C13511 + C13514 - C13513) * C13128 +
             (C13791 - C13792 + C13793 - C13794) * C13133 +
             (C13795 - C13796 + C13797 - C13798) * C13129) *
                C30645 * C30553) *
               C2472 +
           (((C13330 - C13329 + C13332 - C13331) * C13132 +
             (C13334 - C13333 + C13336 - C13335) * C13128 +
             (C13653 - C13654 + C13655 - C13656) * C13133 +
             (C13657 - C13658 + C13659 - C13660) * C13129) *
                C30645 * C3234 +
            ((C14002 - C14001 + C14004 - C14003) * C13132 +
             (C14006 - C14005 + C14008 - C14007) * C13128 +
             (C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C13133 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C13129) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C3234 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C30776 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C3234 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30553) *
              C30772 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C3234 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C30553) *
              C30762 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C3234 +
           ((C13126 * C1669 - C13130 * C1666 + C13127 * C5560 -
             C13131 * C5556) *
                C13132 +
            (C13126 * C1675 - C13130 * C1670 + C13127 * C5565 -
             C13131 * C5561) *
                C13128 +
            (C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
             C13131 * C5815) *
                C13133 +
            (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
             C13131 * C5817) *
                C13129) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C1392 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C1393 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C1394 +
           ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C1392 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C1393 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C1394 +
           ((C14514 - C14513 + C14516 - C14515) * C13132 +
            (C14518 - C14517 + C14520 - C14519) * C13128 +
            (C13126 * C1134 - C13130 * C1126 + C13127 * C1140 -
             C13131 * C1129) *
                C13133 +
            (C13126 * C1144 - C13130 * C1135 + C13127 * C1147 -
             C13131 * C1141) *
                C13129) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30511) *
              C637 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C30511) *
              C638 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13654 - C13653 + C13656 - C13655) * C13132 +
            (C13658 - C13657 + C13660 - C13659) * C13128 +
            (C13126 * C313 - C13130 * C295 + C13127 * C315 - C13131 * C296) *
                C13133 +
            (C13126 * C325 - C13130 * C314 + C13127 * C326 - C13131 * C316) *
                C13129) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C1788 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C1789 +
            ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                 C13132 +
             (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                 C13128 +
             (C13499 - C13500 + C13501 - C13502) * C13133 +
             (C13503 - C13504 + C13505 - C13506) * C13129) *
                C30645 * C30735) *
               C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C1788 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C1789 +
            ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
              C13127 * C1279) *
                 C13132 +
             (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
              C13127 * C1291) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30645 * C30735) *
               C30511) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C1788 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C1789 +
            ((C13500 - C13499 + C13502 - C13501) * C13132 +
             (C13504 - C13503 + C13506 - C13505) * C13128 +
             (C13515 - C13516 + C13517 - C13518) * C13133 +
             (C13519 - C13520 + C13521 - C13522) * C13129) *
                C30645 * C30735) *
               C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C1788 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C1789 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
              C13131 * C1266) *
                 C13133 +
             (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
              C13131 * C1284) *
                 C13129) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30702 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C1392 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30702 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30553) *
              C1393 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30702 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C30553) *
              C1394 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C30702 +
           ((C13126 * C1669 - C13130 * C1666 + C13127 * C5560 -
             C13131 * C5556) *
                C13132 +
            (C13126 * C1675 - C13130 * C1670 + C13127 * C5565 -
             C13131 * C5561) *
                C13128 +
            (C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
             C13131 * C5815) *
                C13133 +
            (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
             C13131 * C5817) *
                C13129) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30702 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30702 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30702 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30702 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30511) *
              C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C13132 +
             (C13148 - C13147 + C13150 - C13149) * C13128 +
             (C13151 - C13152 + C13153 - C13154) * C13133 +
             (C13155 - C13156 + C13157 - C13158) * C13129) *
                C30645 * C30702 +
            ((C13508 - C13507 + C13510 - C13509) * C13132 +
             (C13512 - C13511 + C13514 - C13513) * C13128 +
             (C13791 - C13792 + C13793 - C13794) * C13133 +
             (C13795 - C13796 + C13797 - C13798) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13330 - C13329 + C13332 - C13331) * C13132 +
             (C13334 - C13333 + C13336 - C13335) * C13128 +
             (C13653 - C13654 + C13655 - C13656) * C13133 +
             (C13657 - C13658 + C13659 - C13660) * C13129) *
                C30645 * C30702 +
            ((C14002 - C14001 + C14004 - C14003) * C13132 +
             (C14006 - C14005 + C14008 - C14007) * C13128 +
             (C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C13133 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C13129) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C2248 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C2249 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C2250 +
           ((C13130 * C1968 - C13126 * C1974 + C13131 * C2362 -
             C13127 * C2365) *
                C13132 +
            (C13130 * C1975 - C13126 * C1986 + C13131 * C2366 -
             C13127 * C2371) *
                C13128 +
            (C15559 - C15560 + C15561 - C15562) * C13133 +
            (C15563 - C15564 + C15565 - C15566) * C13129) *
               C30645 * C30748) *
              C30701 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C2248 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C2249 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C15421 - C15422 + C15423 - C15424) * C13133 +
            (C15425 - C15426 + C15427 - C15428) * C13129) *
               C30645 * C2250 +
           ((C13126 * C2365 - C13130 * C2362 + C13127 * C6206 -
             C13131 * C6203) *
                C13132 +
            (C13126 * C2371 - C13130 * C2366 + C13127 * C6212 -
             C13131 * C6207) *
                C13128 +
            (C13126 * C2367 - C13130 * C2363 + C13127 * C6464 -
             C13131 * C6463) *
                C13133 +
            (C13126 * C2372 - C13130 * C2368 + C13127 * C6466 -
             C13131 * C6465) *
                C13129) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                   C13132 +
               (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                   C13128 +
               (C13135 - C13136 + C13137 - C13138) * C13133 +
               (C13139 - C13140 + C13141 - C13142) * C13129) *
                  C30645 * C30466 * C30448 * C108 +
              ((C13136 - C13135 + C13138 - C13137) * C13132 +
               (C13140 - C13139 + C13142 - C13141) * C13128 +
               (C13143 - C13144 + C13145 - C13146) * C13133 +
               (C13147 - C13148 + C13149 - C13150) * C13129) *
                  C30645 * C30466 * C30448 * C109 +
              ((C13144 - C13143 + C13146 - C13145) * C13132 +
               (C13148 - C13147 + C13150 - C13149) * C13128 +
               (C13151 - C13152 + C13153 - C13154) * C13133 +
               (C13155 - C13156 + C13157 - C13158) * C13129) *
                  C30645 * C30466 * C30448 * C110 +
              ((C13152 - C13151 + C13154 - C13153) * C13132 +
               (C13156 - C13155 + C13158 - C13157) * C13128 +
               (C13159 - C13160 + C13161 - C13162) * C13133 +
               (C13163 - C13164 + C13165 - C13166) * C13129) *
                  C30645 * C30466 * C30448 * C111 +
              ((C13160 - C13159 + C13162 - C13161) * C13132 +
               (C13164 - C13163 + C13166 - C13165) * C13128 +
               (C13126 * C134 - C13130 * C122 + C13127 * C641 - C13131 * C640) *
                   C13133 +
               (C13126 * C143 - C13130 * C135 + C13127 * C643 - C13131 * C642) *
                   C13129) *
                  C30645 * C30466 * C30448 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C124 - C13130 * C117 + C13127 * C297 -
                 C13131 * C287) *
                    C13132 +
                (C13126 * C138 - C13130 * C125 + C13127 * C317 -
                 C13131 * C298) *
                    C13128 +
                (C13135 - C13136 + C13137 - C13138) * C13133 +
                (C13139 - C13140 + C13141 - C13142) * C13129) *
                   C30645 * C30466 * C30769 +
               ((C13130 * C287 - C13126 * C297 + C13131 * C290 -
                 C13127 * C303) *
                    C13132 +
                (C13130 * C298 - C13126 * C317 + C13131 * C304 -
                 C13127 * C320) *
                    C13128 +
                (C13313 - C13314 + C13315 - C13316) * C13133 +
                (C13317 - C13318 + C13319 - C13320) * C13129) *
                   C30645 * C30466 * C30757 +
               ((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
                 C13131 * C1124) *
                    C13132 +
                (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
                 C13131 * C1131) *
                    C13128 +
                (C13321 - C13322 + C13323 - C13324) * C13133 +
                (C13325 - C13326 + C13327 - C13328) * C13129) *
                   C30645 * C30466 * C30732) *
                  C284 +
              (((C13136 - C13135 + C13138 - C13137) * C13132 +
                (C13140 - C13139 + C13142 - C13141) * C13128 +
                (C13143 - C13144 + C13145 - C13146) * C13133 +
                (C13147 - C13148 + C13149 - C13150) * C13129) *
                   C30645 * C30466 * C30769 +
               ((C13314 - C13313 + C13316 - C13315) * C13132 +
                (C13318 - C13317 + C13320 - C13319) * C13128 +
                (C13329 - C13330 + C13331 - C13332) * C13133 +
                (C13333 - C13334 + C13335 - C13336) * C13129) *
                   C30645 * C30466 * C30757 +
               ((C13322 - C13321 + C13324 - C13323) * C13132 +
                (C13326 - C13325 + C13328 - C13327) * C13128 +
                (C13337 - C13338 + C13339 - C13340) * C13133 +
                (C13341 - C13342 + C13343 - C13344) * C13129) *
                   C30645 * C30466 * C30732) *
                  C285 +
              (((C13144 - C13143 + C13146 - C13145) * C13132 +
                (C13148 - C13147 + C13150 - C13149) * C13128 +
                (C13151 - C13152 + C13153 - C13154) * C13133 +
                (C13155 - C13156 + C13157 - C13158) * C13129) *
                   C30645 * C30466 * C30769 +
               ((C13330 - C13329 + C13332 - C13331) * C13132 +
                (C13334 - C13333 + C13336 - C13335) * C13128 +
                (C13130 * C293 - C13126 * C309 + C13131 * C294 -
                 C13127 * C311) *
                    C13133 +
                (C13130 * C310 - C13126 * C323 + C13131 * C312 -
                 C13127 * C324) *
                    C13129) *
                   C30645 * C30466 * C30757 +
               ((C13338 - C13337 + C13340 - C13339) * C13132 +
                (C13342 - C13341 + C13344 - C13343) * C13128 +
                (C13126 * C311 - C13130 * C294 + C13127 * C1399 -
                 C13131 * C1398) *
                    C13133 +
                (C13126 * C324 - C13130 * C312 + C13127 * C1401 -
                 C13131 * C1400) *
                    C13129) *
                   C30645 * C30466 * C30732) *
                  C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30770 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30759 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30770 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30759 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C30735) *
              C30448 * C285 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30770 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13130 * C474 - C13126 * C490 + C13131 * C909 - C13127 * C917) *
                C13133 +
            (C13130 * C491 - C13126 * C504 + C13131 * C918 - C13127 * C924) *
                C13129) *
               C30645 * C30759 +
           ((C13516 - C13515 + C13518 - C13517) * C13132 +
            (C13520 - C13519 + C13522 - C13521) * C13128 +
            (C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                C13133 +
            (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                C13129) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C1118 +
          ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
               C13132 +
           (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
               C13128 +
           (C13313 - C13314 + C13315 - C13316) * C13133 +
           (C13317 - C13318 + C13319 - C13320) * C13129) *
              C30645 * C30466 * C1119 +
          ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
               C13132 +
           (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
               C13128 +
           (C13321 - C13322 + C13323 - C13324) * C13133 +
           (C13325 - C13326 + C13327 - C13328) * C13129) *
              C30645 * C30466 * C1120 +
          ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 - C13127 * C1136) *
               C13132 +
           (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 - C13127 * C1145) *
               C13128 +
           (C13130 * C1125 - C13126 * C1132 + C13131 * C1128 - C13127 * C1138) *
               C13133 +
           (C13130 * C1133 - C13126 * C1143 + C13131 * C1139 - C13127 * C1146) *
               C13129) *
              C30645 * C30466 * C1121 +
          ((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 - C13131 * C5437) *
               C13132 +
           (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 - C13131 * C5440) *
               C13128 +
           (C13126 * C1138 - C13130 * C1128 + C13127 * C5666 - C13131 * C5665) *
               C13133 +
           (C13126 * C1146 - C13130 * C1139 + C13127 * C5668 - C13131 * C5667) *
               C13129) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30770 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30759 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C1050 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30770 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30759 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C13130 * C1259 - C13126 * C1269 + C13131 * C1265 -
             C13127 * C1281) *
                C13133 +
            (C13130 * C1270 - C13126 * C1286 + C13131 * C1282 -
             C13127 * C1292) *
                C13129) *
               C30645 * C30735) *
              C1051 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30770 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C13130 * C1262 - C13126 * C1275 + C13131 * C1667 -
             C13127 * C1671) *
                C13133 +
            (C13130 * C1276 - C13126 * C1289 + C13131 * C1672 -
             C13127 * C1676) *
                C13129) *
               C30645 * C30759 +
           ((C13126 * C1279 - C13130 * C1264 + C13127 * C5558 -
             C13131 * C5555) *
                C13132 +
            (C13126 * C1291 - C13130 * C1280 + C13127 * C5564 -
             C13131 * C5559) *
                C13128 +
            (C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
             C13131 * C6361) *
                C13133 +
            (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
             C13131 * C6363) *
                C13129) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C1788 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C1789 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C1788 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C1789 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C30735) *
              C30448 * C30753 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C1788 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C1789 +
           ((C13516 - C13515 + C13518 - C13517) * C13132 +
            (C13520 - C13519 + C13522 - C13521) * C13128 +
            (C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                C13133 +
            (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                C13129) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C1788 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C1789 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C30769 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C1788 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C1789 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C13130 * C1259 - C13126 * C1269 + C13131 * C1265 -
             C13127 * C1281) *
                C13133 +
            (C13130 * C1270 - C13126 * C1286 + C13131 * C1282 -
             C13127 * C1292) *
                C13129) *
               C30645 * C30735) *
              C30757 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C1788 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C1789 +
           ((C13126 * C1279 - C13130 * C1264 + C13127 * C5558 -
             C13131 * C5555) *
                C13132 +
            (C13126 * C1291 - C13130 * C1280 + C13127 * C5564 -
             C13131 * C5559) *
                C13128 +
            (C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
             C13131 * C6361) *
                C13133 +
            (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
             C13131 * C6363) *
                C13129) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C1963 +
          ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
               C13132 +
           (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
               C13128 +
           (C13491 - C13492 + C13493 - C13494) * C13133 +
           (C13495 - C13496 + C13497 - C13498) * C13129) *
              C30645 * C1964 +
          ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
               C13132 +
           (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
               C13128 +
           (C13499 - C13500 + C13501 - C13502) * C13133 +
           (C13503 - C13504 + C13505 - C13506) * C13129) *
              C30645 * C1965 +
          ((C13130 * C1968 - C13126 * C1974 + C13131 * C2362 - C13127 * C2365) *
               C13132 +
           (C13130 * C1975 - C13126 * C1986 + C13131 * C2366 - C13127 * C2371) *
               C13128 +
           (C13130 * C1969 - C13126 * C1976 + C13131 * C2363 - C13127 * C2367) *
               C13133 +
           (C13130 * C1977 - C13126 * C1987 + C13131 * C2368 - C13127 * C2372) *
               C13129) *
              C30645 * C1966 +
          ((C13126 * C1980 - C13130 * C1971 + C13127 * C6208 - C13131 * C6204) *
               C13132 +
           (C13126 * C1989 - C13130 * C1981 + C13127 * C6213 - C13131 * C6210) *
               C13128 +
           (C13126 * C1982 - C13130 * C1972 + C13127 * C10578 -
            C13131 * C10577) *
               C13133 +
           (C13126 * C1990 - C13130 * C1983 + C13127 * C10580 -
            C13131 * C10579) *
               C13129) *
              C30645 * C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30702 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C1050 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30702 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C1051 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C13132 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30645 * C30702 +
            ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
              C13127 * C1669) *
                 C13132 +
             (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
              C13127 * C1675) *
                 C13128 +
             (C14715 - C14716 + C14717 - C14718) * C13133 +
             (C14719 - C14720 + C14721 - C14722) * C13129) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30702 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C1050 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30702 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C1051 +
           (((C13322 - C13321 + C13324 - C13323) * C13132 +
             (C13326 - C13325 + C13328 - C13327) * C13128 +
             (C13337 - C13338 + C13339 - C13340) * C13133 +
             (C13341 - C13342 + C13343 - C13344) * C13129) *
                C30645 * C30702 +
            ((C14716 - C14715 + C14718 - C14717) * C13132 +
             (C14720 - C14719 + C14722 - C14721) * C13128 +
             (C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C13133 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C13129) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30702 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30702 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30553) *
              C30448 * C637 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30702 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C30553) *
              C30448 * C638 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C30702 +
           ((C13792 - C13791 + C13794 - C13793) * C13132 +
            (C13796 - C13795 + C13798 - C13797) * C13128 +
            (C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C13133 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C13129) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C2248 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C2249 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C2250 +
           ((C13130 * C1968 - C13126 * C1974 + C13131 * C2362 -
             C13127 * C2365) *
                C13132 +
            (C13130 * C1975 - C13126 * C1986 + C13131 * C2366 -
             C13127 * C2371) *
                C13128 +
            (C15559 - C15560 + C15561 - C15562) * C13133 +
            (C15563 - C15564 + C15565 - C15566) * C13129) *
               C30645 * C30748) *
              C30448 * C30687 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C2248 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C2249 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C2250 +
           ((C15560 - C15559 + C15562 - C15561) * C13132 +
            (C15564 - C15563 + C15566 - C15565) * C13128 +
            (C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
             C13131 * C2364) *
                C13133 +
            (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
             C13131 * C2370) *
                C13129) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30757 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30757 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13130 * C293 - C13126 * C309 + C13131 * C294 - C13127 * C311) *
                C13133 +
            (C13130 * C310 - C13126 * C323 + C13131 * C312 - C13127 * C324) *
                C13129) *
               C30645 * C30466 * C30757 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C30448 * C108 +
          ((C13136 - C13135 + C13138 - C13137) * C13132 +
           (C13140 - C13139 + C13142 - C13141) * C13128 +
           (C13143 - C13144 + C13145 - C13146) * C13133 +
           (C13147 - C13148 + C13149 - C13150) * C13129) *
              C30645 * C30466 * C30448 * C109 +
          ((C13144 - C13143 + C13146 - C13145) * C13132 +
           (C13148 - C13147 + C13150 - C13149) * C13128 +
           (C13151 - C13152 + C13153 - C13154) * C13133 +
           (C13155 - C13156 + C13157 - C13158) * C13129) *
              C30645 * C30466 * C30448 * C110 +
          ((C13152 - C13151 + C13154 - C13153) * C13132 +
           (C13156 - C13155 + C13158 - C13157) * C13128 +
           (C13159 - C13160 + C13161 - C13162) * C13133 +
           (C13163 - C13164 + C13165 - C13166) * C13129) *
              C30645 * C30466 * C30448 * C111 +
          ((C13160 - C13159 + C13162 - C13161) * C13132 +
           (C13164 - C13163 + C13166 - C13165) * C13128 +
           (C13126 * C134 - C13130 * C122 + C13127 * C641 - C13131 * C640) *
               C13133 +
           (C13126 * C143 - C13130 * C135 + C13127 * C643 - C13131 * C642) *
               C13129) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C1118 +
          ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
               C13132 +
           (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
               C13128 +
           (C13313 - C13314 + C13315 - C13316) * C13133 +
           (C13317 - C13318 + C13319 - C13320) * C13129) *
              C30645 * C30466 * C1119 +
          ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
               C13132 +
           (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
               C13128 +
           (C13321 - C13322 + C13323 - C13324) * C13133 +
           (C13325 - C13326 + C13327 - C13328) * C13129) *
              C30645 * C30466 * C1120 +
          ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 - C13127 * C1136) *
               C13132 +
           (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 - C13127 * C1145) *
               C13128 +
           (C13130 * C1125 - C13126 * C1132 + C13131 * C1128 - C13127 * C1138) *
               C13133 +
           (C13130 * C1133 - C13126 * C1143 + C13131 * C1139 - C13127 * C1146) *
               C13129) *
              C30645 * C30466 * C1121 +
          ((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 - C13131 * C5437) *
               C13132 +
           (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 - C13131 * C5440) *
               C13128 +
           (C13126 * C1138 - C13130 * C1128 + C13127 * C5666 - C13131 * C5665) *
               C13133 +
           (C13126 * C1146 - C13130 * C1139 + C13127 * C5668 - C13131 * C5667) *
               C13129) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C1788 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C1789 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C1788 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C1789 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C30735) *
              C30448 * C30753 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C1788 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C1789 +
           ((C13516 - C13515 + C13518 - C13517) * C13132 +
            (C13520 - C13519 + C13522 - C13521) * C13128 +
            (C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                C13133 +
            (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                C13129) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C1788 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C1789 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C30769 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C1788 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C1789 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C13130 * C1259 - C13126 * C1269 + C13131 * C1265 -
             C13127 * C1281) *
                C13133 +
            (C13130 * C1270 - C13126 * C1286 + C13131 * C1282 -
             C13127 * C1292) *
                C13129) *
               C30645 * C30735) *
              C30757 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C1788 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C1789 +
           ((C13126 * C1279 - C13130 * C1264 + C13127 * C5558 -
             C13131 * C5555) *
                C13132 +
            (C13126 * C1291 - C13130 * C1280 + C13127 * C5564 -
             C13131 * C5559) *
                C13128 +
            (C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
             C13131 * C6361) *
                C13133 +
            (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
             C13131 * C6363) *
                C13129) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C3234 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C3234 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C3234 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C3234 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          ((((C13144 - C13143 + C13146 - C13145) * C13132 +
             (C13148 - C13147 + C13150 - C13149) * C13128 +
             (C13151 - C13152 + C13153 - C13154) * C13133 +
             (C13155 - C13156 + C13157 - C13158) * C13129) *
                C30645 * C3234 +
            ((C13508 - C13507 + C13510 - C13509) * C13132 +
             (C13512 - C13511 + C13514 - C13513) * C13128 +
             (C13791 - C13792 + C13793 - C13794) * C13133 +
             (C13795 - C13796 + C13797 - C13798) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13330 - C13329 + C13332 - C13331) * C13132 +
             (C13334 - C13333 + C13336 - C13335) * C13128 +
             (C13653 - C13654 + C13655 - C13656) * C13133 +
             (C13657 - C13658 + C13659 - C13660) * C13129) *
                C30645 * C3234 +
            ((C14002 - C14001 + C14004 - C14003) * C13132 +
             (C14006 - C14005 + C14008 - C14007) * C13128 +
             (C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C13133 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C13129) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30549 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30556 +
            ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                 C13132 +
             (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                 C13128 +
             (C13499 - C13500 + C13501 - C13502) * C13133 +
             (C13503 - C13504 + C13505 - C13506) * C13129) *
                C30645 * C3742) *
               C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30549 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30556 +
            ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
              C13127 * C1279) *
                 C13132 +
             (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
              C13127 * C1291) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30645 * C3742) *
               C30511) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30549 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30556 +
            ((C13500 - C13499 + C13502 - C13501) * C13132 +
             (C13504 - C13503 + C13506 - C13505) * C13128 +
             (C13515 - C13516 + C13517 - C13518) * C13133 +
             (C13519 - C13520 + C13521 - C13522) * C13129) *
                C30645 * C3742) *
               C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30549 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30556 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
              C13131 * C1266) *
                 C13133 +
             (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
              C13131 * C1284) *
                 C13129) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C3234 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30769 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C3234 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30757 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C13132 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30645 * C3234 +
            ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
              C13127 * C1669) *
                 C13132 +
             (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
              C13127 * C1675) *
                 C13128 +
             (C14715 - C14716 + C14717 - C14718) * C13133 +
             (C14719 - C14720 + C14721 - C14722) * C13129) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C3234 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30769 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C3234 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30757 +
           (((C13322 - C13321 + C13324 - C13323) * C13132 +
             (C13326 - C13325 + C13328 - C13327) * C13128 +
             (C13337 - C13338 + C13339 - C13340) * C13133 +
             (C13341 - C13342 + C13343 - C13344) * C13129) *
                C30645 * C3234 +
            ((C14716 - C14715 + C14718 - C14717) * C13132 +
             (C14720 - C14719 + C14722 - C14721) * C13128 +
             (C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C13133 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C13129) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C3234 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C3234 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30553) *
              C30448 * C30768 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C3234 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C30553) *
              C30448 * C30755 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C3234 +
           ((C13792 - C13791 + C13794 - C13793) * C13132 +
            (C13796 - C13795 + C13798 - C13797) * C13128 +
            (C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C13133 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C13129) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30777 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30774 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30765 +
           ((C13130 * C1968 - C13126 * C1974 + C13131 * C2362 -
             C13127 * C2365) *
                C13132 +
            (C13130 * C1975 - C13126 * C1986 + C13131 * C2366 -
             C13127 * C2371) *
                C13128 +
            (C15559 - C15560 + C15561 - C15562) * C13133 +
            (C15563 - C15564 + C15565 - C15566) * C13129) *
               C30645 * C30748) *
              C30448 * C2580 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30777 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30774 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C30765 +
           ((C15560 - C15559 + C15562 - C15561) * C13132 +
            (C15564 - C15563 + C15566 - C15565) * C13128 +
            (C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
             C13131 * C2364) *
                C13133 +
            (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
             C13131 * C2370) *
                C13129) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30549 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30556 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C3742) *
              C30448 * C30425 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30549 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30556 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C3742) *
              C30448 * C30434 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30549 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C30556 +
           ((C13516 - C13515 + C13518 - C13517) * C13132 +
            (C13520 - C13519 + C13522 - C13521) * C13128 +
            (C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                C13133 +
            (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                C13129) *
               C30645 * C3742) *
              C30448 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C3234 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C3234 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30553) *
              C30448 * C30768 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C3234 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C30553) *
              C30448 * C30755 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C3234 +
           ((C13792 - C13791 + C13794 - C13793) * C13132 +
            (C13796 - C13795 + C13798 - C13797) * C13128 +
            (C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C13133 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C13129) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C3234 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30769 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C3234 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30757 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C13132 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30645 * C3234 +
            ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
              C13127 * C1669) *
                 C13132 +
             (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
              C13127 * C1675) *
                 C13128 +
             (C14715 - C14716 + C14717 - C14718) * C13133 +
             (C14719 - C14720 + C14721 - C14722) * C13129) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C3234 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30769 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C3234 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30757 +
           (((C13322 - C13321 + C13324 - C13323) * C13132 +
             (C13326 - C13325 + C13328 - C13327) * C13128 +
             (C13337 - C13338 + C13339 - C13340) * C13133 +
             (C13341 - C13342 + C13343 - C13344) * C13129) *
                C30645 * C3234 +
            ((C14716 - C14715 + C14718 - C14717) * C13132 +
             (C14720 - C14719 + C14722 - C14721) * C13128 +
             (C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C13133 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C13129) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30511) *
              C637 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C30511) *
              C638 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C30466 * C30701 +
           ((C13654 - C13653 + C13656 - C13655) * C13132 +
            (C13658 - C13657 + C13660 - C13659) * C13128 +
            (C13126 * C313 - C13130 * C295 + C13127 * C315 - C13131 * C296) *
                C13133 +
            (C13126 * C325 - C13130 * C314 + C13127 * C326 - C13131 * C316) *
                C13129) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C1392 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C1393 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C1394 +
           ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C1392 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C1393 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C1394 +
           ((C14514 - C14513 + C14516 - C14515) * C13132 +
            (C14518 - C14517 + C14520 - C14519) * C13128 +
            (C13126 * C1134 - C13130 * C1126 + C13127 * C1140 -
             C13131 * C1129) *
                C13133 +
            (C13126 * C1144 - C13130 * C1135 + C13127 * C1147 -
             C13131 * C1141) *
                C13129) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30702 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30702 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30702 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30702 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C30511) *
              C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C13132 +
             (C13148 - C13147 + C13150 - C13149) * C13128 +
             (C13151 - C13152 + C13153 - C13154) * C13133 +
             (C13155 - C13156 + C13157 - C13158) * C13129) *
                C30645 * C30702 +
            ((C13508 - C13507 + C13510 - C13509) * C13132 +
             (C13512 - C13511 + C13514 - C13513) * C13128 +
             (C13791 - C13792 + C13793 - C13794) * C13133 +
             (C13795 - C13796 + C13797 - C13798) * C13129) *
                C30645 * C30553) *
               C30701 +
           (((C13330 - C13329 + C13332 - C13331) * C13132 +
             (C13334 - C13333 + C13336 - C13335) * C13128 +
             (C13653 - C13654 + C13655 - C13656) * C13133 +
             (C13657 - C13658 + C13659 - C13660) * C13129) *
                C30645 * C30702 +
            ((C14002 - C14001 + C14004 - C14003) * C13132 +
             (C14006 - C14005 + C14008 - C14007) * C13128 +
             (C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C13133 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C13129) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30702 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C1392 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30702 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30553) *
              C1393 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30702 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C14715 - C14716 + C14717 - C14718) * C13133 +
            (C14719 - C14720 + C14721 - C14722) * C13129) *
               C30645 * C30553) *
              C1394 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C13132 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C13128 +
            (C14513 - C14514 + C14515 - C14516) * C13133 +
            (C14517 - C14518 + C14519 - C14520) * C13129) *
               C30645 * C30702 +
           ((C13126 * C1669 - C13130 * C1666 + C13127 * C5560 -
             C13131 * C5556) *
                C13132 +
            (C13126 * C1675 - C13130 * C1670 + C13127 * C5565 -
             C13131 * C5561) *
                C13128 +
            (C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
             C13131 * C5815) *
                C13133 +
            (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
             C13131 * C5817) *
                C13129) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30757 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30757 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13130 * C293 - C13126 * C309 + C13131 * C294 - C13127 * C311) *
                C13133 +
            (C13130 * C310 - C13126 * C323 + C13131 * C312 - C13127 * C324) *
                C13129) *
               C30645 * C30466 * C30757 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C30448 * C108 +
          ((C13136 - C13135 + C13138 - C13137) * C13132 +
           (C13140 - C13139 + C13142 - C13141) * C13128 +
           (C13143 - C13144 + C13145 - C13146) * C13133 +
           (C13147 - C13148 + C13149 - C13150) * C13129) *
              C30645 * C30466 * C30448 * C109 +
          ((C13144 - C13143 + C13146 - C13145) * C13132 +
           (C13148 - C13147 + C13150 - C13149) * C13128 +
           (C13151 - C13152 + C13153 - C13154) * C13133 +
           (C13155 - C13156 + C13157 - C13158) * C13129) *
              C30645 * C30466 * C30448 * C110 +
          ((C13152 - C13151 + C13154 - C13153) * C13132 +
           (C13156 - C13155 + C13158 - C13157) * C13128 +
           (C13159 - C13160 + C13161 - C13162) * C13133 +
           (C13163 - C13164 + C13165 - C13166) * C13129) *
              C30645 * C30466 * C30448 * C111 +
          ((C13160 - C13159 + C13162 - C13161) * C13132 +
           (C13164 - C13163 + C13166 - C13165) * C13128 +
           (C13126 * C134 - C13130 * C122 + C13127 * C641 - C13131 * C640) *
               C13133 +
           (C13126 * C143 - C13130 * C135 + C13127 * C643 - C13131 * C642) *
               C13129) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30770 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30759 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30770 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30759 +
           ((C13500 - C13499 + C13502 - C13501) * C13132 +
            (C13504 - C13503 + C13506 - C13505) * C13128 +
            (C13515 - C13516 + C13517 - C13518) * C13133 +
            (C13519 - C13520 + C13521 - C13522) * C13129) *
               C30645 * C30735) *
              C30448 * C285 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30770 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13130 * C474 - C13126 * C490 + C13131 * C909 - C13127 * C917) *
                C13133 +
            (C13130 * C491 - C13126 * C504 + C13131 * C918 - C13127 * C924) *
                C13129) *
               C30645 * C30759 +
           ((C13516 - C13515 + C13518 - C13517) * C13132 +
            (C13520 - C13519 + C13522 - C13521) * C13128 +
            (C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                C13133 +
            (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                C13129) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C1118 +
          ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
               C13132 +
           (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
               C13128 +
           (C13313 - C13314 + C13315 - C13316) * C13133 +
           (C13317 - C13318 + C13319 - C13320) * C13129) *
              C30645 * C30466 * C1119 +
          ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
               C13132 +
           (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
               C13128 +
           (C13321 - C13322 + C13323 - C13324) * C13133 +
           (C13325 - C13326 + C13327 - C13328) * C13129) *
              C30645 * C30466 * C1120 +
          ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 - C13127 * C1136) *
               C13132 +
           (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 - C13127 * C1145) *
               C13128 +
           (C13130 * C1125 - C13126 * C1132 + C13131 * C1128 - C13127 * C1138) *
               C13133 +
           (C13130 * C1133 - C13126 * C1143 + C13131 * C1139 - C13127 * C1146) *
               C13129) *
              C30645 * C30466 * C1121 +
          ((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 - C13131 * C5437) *
               C13132 +
           (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 - C13131 * C5440) *
               C13128 +
           (C13126 * C1138 - C13130 * C1128 + C13127 * C5666 - C13131 * C5665) *
               C13133 +
           (C13126 * C1146 - C13130 * C1139 + C13127 * C5668 - C13131 * C5667) *
               C13129) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30770 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30759 +
           ((C13126 * C484 - C13130 * C471 + C13127 * C1267 - C13131 * C1258) *
                C13132 +
            (C13126 * C501 - C13130 * C485 + C13127 * C1285 - C13131 * C1268) *
                C13128 +
            (C13499 - C13500 + C13501 - C13502) * C13133 +
            (C13503 - C13504 + C13505 - C13506) * C13129) *
               C30645 * C30735) *
              C1050 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30770 +
           ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                C13132 +
            (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                C13128 +
            (C13993 - C13994 + C13995 - C13996) * C13133 +
            (C13997 - C13998 + C13999 - C14000) * C13129) *
               C30645 * C30759 +
           ((C13130 * C1258 - C13126 * C1267 + C13131 * C1264 -
             C13127 * C1279) *
                C13132 +
            (C13130 * C1268 - C13126 * C1285 + C13131 * C1280 -
             C13127 * C1291) *
                C13128 +
            (C13130 * C1259 - C13126 * C1269 + C13131 * C1265 -
             C13127 * C1281) *
                C13133 +
            (C13130 * C1270 - C13126 * C1286 + C13131 * C1282 -
             C13127 * C1292) *
                C13129) *
               C30645 * C30735) *
              C1051 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30770 +
           ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
             C13127 * C1669) *
                C13132 +
            (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
             C13127 * C1675) *
                C13128 +
            (C13130 * C1262 - C13126 * C1275 + C13131 * C1667 -
             C13127 * C1671) *
                C13133 +
            (C13130 * C1276 - C13126 * C1289 + C13131 * C1672 -
             C13127 * C1676) *
                C13129) *
               C30645 * C30759 +
           ((C13126 * C1279 - C13130 * C1264 + C13127 * C5558 -
             C13131 * C5555) *
                C13132 +
            (C13126 * C1291 - C13130 * C1280 + C13127 * C5564 -
             C13131 * C5559) *
                C13128 +
            (C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
             C13131 * C6361) *
                C13133 +
            (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
             C13131 * C6363) *
                C13129) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30702 +
           ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                C13132 +
            (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                C13128 +
            (C13491 - C13492 + C13493 - C13494) * C13133 +
            (C13495 - C13496 + C13497 - C13498) * C13129) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30702 +
           ((C13492 - C13491 + C13494 - C13493) * C13132 +
            (C13496 - C13495 + C13498 - C13497) * C13128 +
            (C13507 - C13508 + C13509 - C13510) * C13133 +
            (C13511 - C13512 + C13513 - C13514) * C13129) *
               C30645 * C30553) *
              C30448 * C637 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30702 +
           ((C13508 - C13507 + C13510 - C13509) * C13132 +
            (C13512 - C13511 + C13514 - C13513) * C13128 +
            (C13791 - C13792 + C13793 - C13794) * C13133 +
            (C13795 - C13796 + C13797 - C13798) * C13129) *
               C30645 * C30553) *
              C30448 * C638 +
          (((C13152 - C13151 + C13154 - C13153) * C13132 +
            (C13156 - C13155 + C13158 - C13157) * C13128 +
            (C13159 - C13160 + C13161 - C13162) * C13133 +
            (C13163 - C13164 + C13165 - C13166) * C13129) *
               C30645 * C30702 +
           ((C13792 - C13791 + C13794 - C13793) * C13132 +
            (C13796 - C13795 + C13798 - C13797) * C13128 +
            (C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C13133 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C13129) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C13132 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C13128 +
             (C13135 - C13136 + C13137 - C13138) * C13133 +
             (C13139 - C13140 + C13141 - C13142) * C13129) *
                C30645 * C30702 +
            ((C13130 * C468 - C13126 * C478 + C13131 * C906 - C13127 * C911) *
                 C13132 +
             (C13130 * C479 - C13126 * C498 + C13131 * C912 - C13127 * C921) *
                 C13128 +
             (C13491 - C13492 + C13493 - C13494) * C13133 +
             (C13495 - C13496 + C13497 - C13498) * C13129) *
                C30645 * C30553) *
               C1050 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C13132 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30645 * C30702 +
            ((C13126 * C911 - C13130 * C906 + C13127 * C1273 - C13131 * C1261) *
                 C13132 +
             (C13126 * C921 - C13130 * C912 + C13127 * C1288 - C13131 * C1274) *
                 C13128 +
             (C13993 - C13994 + C13995 - C13996) * C13133 +
             (C13997 - C13998 + C13999 - C14000) * C13129) *
                C30645 * C30553) *
               C1051 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C13132 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30645 * C30702 +
            ((C13130 * C1261 - C13126 * C1273 + C13131 * C1666 -
              C13127 * C1669) *
                 C13132 +
             (C13130 * C1274 - C13126 * C1288 + C13131 * C1670 -
              C13127 * C1675) *
                 C13128 +
             (C14715 - C14716 + C14717 - C14718) * C13133 +
             (C14719 - C14720 + C14721 - C14722) * C13129) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C13132 +
             (C13140 - C13139 + C13142 - C13141) * C13128 +
             (C13143 - C13144 + C13145 - C13146) * C13133 +
             (C13147 - C13148 + C13149 - C13150) * C13129) *
                C30645 * C30702 +
            ((C13492 - C13491 + C13494 - C13493) * C13132 +
             (C13496 - C13495 + C13498 - C13497) * C13128 +
             (C13507 - C13508 + C13509 - C13510) * C13133 +
             (C13511 - C13512 + C13513 - C13514) * C13129) *
                C30645 * C30553) *
               C1050 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13329 - C13330 + C13331 - C13332) * C13133 +
             (C13333 - C13334 + C13335 - C13336) * C13129) *
                C30645 * C30702 +
            ((C13994 - C13993 + C13996 - C13995) * C13132 +
             (C13998 - C13997 + C14000 - C13999) * C13128 +
             (C14001 - C14002 + C14003 - C14004) * C13133 +
             (C14005 - C14006 + C14007 - C14008) * C13129) *
                C30645 * C30553) *
               C1051 +
           (((C13322 - C13321 + C13324 - C13323) * C13132 +
             (C13326 - C13325 + C13328 - C13327) * C13128 +
             (C13337 - C13338 + C13339 - C13340) * C13133 +
             (C13341 - C13342 + C13343 - C13344) * C13129) *
                C30645 * C30702 +
            ((C14716 - C14715 + C14718 - C14717) * C13132 +
             (C14720 - C14719 + C14722 - C14721) * C13128 +
             (C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C13133 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C13129) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C30448 * C108 +
          ((C13136 - C13135 + C13138 - C13137) * C13132 +
           (C13140 - C13139 + C13142 - C13141) * C13128 +
           (C13143 - C13144 + C13145 - C13146) * C13133 +
           (C13147 - C13148 + C13149 - C13150) * C13129) *
              C30645 * C30466 * C30448 * C109 +
          ((C13144 - C13143 + C13146 - C13145) * C13132 +
           (C13148 - C13147 + C13150 - C13149) * C13128 +
           (C13151 - C13152 + C13153 - C13154) * C13133 +
           (C13155 - C13156 + C13157 - C13158) * C13129) *
              C30645 * C30466 * C30448 * C110 +
          ((C13152 - C13151 + C13154 - C13153) * C13132 +
           (C13156 - C13155 + C13158 - C13157) * C13128 +
           (C13159 - C13160 + C13161 - C13162) * C13133 +
           (C13163 - C13164 + C13165 - C13166) * C13129) *
              C30645 * C30466 * C30448 * C111 +
          ((C13160 - C13159 + C13162 - C13161) * C13132 +
           (C13164 - C13163 + C13166 - C13165) * C13128 +
           (C13126 * C134 - C13130 * C122 + C13127 * C641 - C13131 * C640) *
               C13133 +
           (C13126 * C143 - C13130 * C135 + C13127 * C643 - C13131 * C642) *
               C13129) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C30757 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C30757 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C30769 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13130 * C293 - C13126 * C309 + C13131 * C294 - C13127 * C311) *
                C13133 +
            (C13130 * C310 - C13126 * C323 + C13131 * C312 - C13127 * C324) *
                C13129) *
               C30645 * C30466 * C30757 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C13132 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C13128 +
            (C13135 - C13136 + C13137 - C13138) * C13133 +
            (C13139 - C13140 + C13141 - C13142) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C13132 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C13132 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C13136 - C13135 + C13138 - C13137) * C13132 +
            (C13140 - C13139 + C13142 - C13141) * C13128 +
            (C13143 - C13144 + C13145 - C13146) * C13133 +
            (C13147 - C13148 + C13149 - C13150) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13329 - C13330 + C13331 - C13332) * C13133 +
            (C13333 - C13334 + C13335 - C13336) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13337 - C13338 + C13339 - C13340) * C13133 +
            (C13341 - C13342 + C13343 - C13344) * C13129) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C13144 - C13143 + C13146 - C13145) * C13132 +
            (C13148 - C13147 + C13150 - C13149) * C13128 +
            (C13151 - C13152 + C13153 - C13154) * C13133 +
            (C13155 - C13156 + C13157 - C13158) * C13129) *
               C30645 * C30466 * C1050 +
           ((C13330 - C13329 + C13332 - C13331) * C13132 +
            (C13334 - C13333 + C13336 - C13335) * C13128 +
            (C13653 - C13654 + C13655 - C13656) * C13133 +
            (C13657 - C13658 + C13659 - C13660) * C13129) *
               C30645 * C30466 * C1051 +
           ((C13338 - C13337 + C13340 - C13339) * C13132 +
            (C13342 - C13341 + C13344 - C13343) * C13128 +
            (C13126 * C311 - C13130 * C294 + C13127 * C1399 - C13131 * C1398) *
                C13133 +
            (C13126 * C324 - C13130 * C312 + C13127 * C1401 - C13131 * C1400) *
                C13129) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
               C13132 +
           (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
               C13128 +
           (C13135 - C13136 + C13137 - C13138) * C13133 +
           (C13139 - C13140 + C13141 - C13142) * C13129) *
              C30645 * C30466 * C1118 +
          ((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
               C13132 +
           (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
               C13128 +
           (C13313 - C13314 + C13315 - C13316) * C13133 +
           (C13317 - C13318 + C13319 - C13320) * C13129) *
              C30645 * C30466 * C1119 +
          ((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
               C13132 +
           (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
               C13128 +
           (C13321 - C13322 + C13323 - C13324) * C13133 +
           (C13325 - C13326 + C13327 - C13328) * C13129) *
              C30645 * C30466 * C1120 +
          ((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 - C13127 * C1136) *
               C13132 +
           (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 - C13127 * C1145) *
               C13128 +
           (C13130 * C1125 - C13126 * C1132 + C13131 * C1128 - C13127 * C1138) *
               C13133 +
           (C13130 * C1133 - C13126 * C1143 + C13131 * C1139 - C13127 * C1146) *
               C13129) *
              C30645 * C30466 * C1121 +
          ((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 - C13131 * C5437) *
               C13132 +
           (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 - C13131 * C5440) *
               C13128 +
           (C13126 * C1138 - C13130 * C1128 + C13127 * C5666 - C13131 * C5665) *
               C13133 +
           (C13126 * C1146 - C13130 * C1139 + C13127 * C5668 - C13131 * C5667) *
               C13129) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C30507 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C30514 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30466 * C2840) *
              C30425 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30507 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30514 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C2840) *
              C30434 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C30507 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30514 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30702 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30507 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30702 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30514 +
           ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
               C13131 * C1124) *
                  C4702 +
              (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
               C13131 * C1131) *
                  C30396) *
                 C18742 +
             ((C25375 - C25376 + C25377 - C25378) * C4702 +
              (C25379 - C25380 + C25381 - C25382) * C30396) *
                 C18743) *
                C30702 +
            (((C25376 - C25375 + C25378 - C25377) * C4702 +
              (C25380 - C25379 + C25382 - C25381) * C30396) *
                 C18742 +
             ((C25383 - C25384 + C25385 - C25386) * C4702 +
              (C25387 - C25388 + C25389 - C25390) * C30396) *
                 C18743) *
                C30553) *
               C2840) *
              C2580 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30702 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30507 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30702 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30514 +
           ((((C13322 - C13321 + C13324 - C13323) * C4702 +
              (C13326 - C13325 + C13328 - C13327) * C30396) *
                 C18742 +
             ((C14715 - C14716 + C14717 - C14718) * C4702 +
              (C14719 - C14720 + C14721 - C14722) * C30396) *
                 C18743) *
                C30702 +
            (((C14716 - C14715 + C14718 - C14717) * C4702 +
              (C14720 - C14719 + C14722 - C14721) * C30396) *
                 C18742 +
             ((C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
               C13131 * C6361) *
                  C4702 +
              (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
               C13131 * C6363) *
                  C30396) *
                 C18743) *
                C30553) *
               C2840) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C30776 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C30772 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30466 * C30762 +
           (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C25845 - C25846 + C25847 - C25848) * C4702 +
             (C25849 - C25850 + C25851 - C25852) * C30396) *
                C18743) *
               C30466 * C30742) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30776 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30772 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30762 +
           (((C14514 - C14513 + C14516 - C14515) * C4702 +
             (C14518 - C14517 + C14520 - C14519) * C30396) *
                C18742 +
            ((C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
              C13131 * C5815) *
                 C4702 +
             (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
              C13131 * C5817) *
                 C30396) *
                C18743) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C30511) *
              C30775 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30511) *
              C30768 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30511) *
              C30755 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13654 - C13653 + C13656 - C13655) * C4702 +
             (C13658 - C13657 + C13660 - C13659) * C30396) *
                C18742 +
            ((C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C4702 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C30396) *
                C18743) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30770 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30759 +
            (((C24524 - C24523 + C24526 - C24525) * C4702 +
              (C24528 - C24527 + C24530 - C24529) * C30396) *
                 C18742 +
             ((C26227 - C26228 + C26229 - C26230) * C4702 +
              (C26231 - C26232 + C26233 - C26234) * C30396) *
                 C18743) *
                C30735) *
               C2472 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30770 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30759 +
            (((C25368 - C25367 + C25370 - C25369) * C4702 +
              (C25372 - C25371 + C25374 - C25373) * C30396) *
                 C18742 +
             ((C26697 - C26698 + C26699 - C26700) * C4702 +
              (C26701 - C26702 + C26703 - C26704) * C30396) *
                 C18743) *
                C30735) *
               C30511) *
              C2580 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30770 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30759 +
            (((C13500 - C13499 + C13502 - C13501) * C4702 +
              (C13504 - C13503 + C13506 - C13505) * C30396) *
                 C18742 +
             ((C15559 - C15560 + C15561 - C15562) * C4702 +
              (C15563 - C15564 + C15565 - C15566) * C30396) *
                 C18743) *
                C30735) *
               C2472 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30770 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30759 +
            (((C15422 - C15421 + C15424 - C15423) * C4702 +
              (C15426 - C15425 + C15428 - C15427) * C30396) *
                 C18742 +
             ((C13126 * C2367 - C13130 * C2363 + C13127 * C6464 -
               C13131 * C6463) *
                  C4702 +
              (C13126 * C2372 - C13130 * C2368 + C13127 * C6466 -
               C13131 * C6465) *
                  C30396) *
                 C18743) *
                C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30702 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30702 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30425 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30702 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30702 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30434 +
          (((((C13144 - C13143 + C13146 - C13145) * C4702 +
              (C13148 - C13147 + C13150 - C13149) * C30396) *
                 C18742 +
             ((C13507 - C13508 + C13509 - C13510) * C4702 +
              (C13511 - C13512 + C13513 - C13514) * C30396) *
                 C18743) *
                C30702 +
            (((C13508 - C13507 + C13510 - C13509) * C4702 +
              (C13512 - C13511 + C13514 - C13513) * C30396) *
                 C18742 +
             ((C13515 - C13516 + C13517 - C13518) * C4702 +
              (C13519 - C13520 + C13521 - C13522) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13330 - C13329 + C13332 - C13331) * C4702 +
              (C13334 - C13333 + C13336 - C13335) * C30396) *
                 C18742 +
             ((C14001 - C14002 + C14003 - C14004) * C4702 +
              (C14005 - C14006 + C14007 - C14008) * C30396) *
                 C18743) *
                C30702 +
            (((C14002 - C14001 + C14004 - C14003) * C4702 +
              (C14006 - C14005 + C14008 - C14007) * C30396) *
                 C18742 +
             ((C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
               C13131 * C1266) *
                  C4702 +
              (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
               C13131 * C1284) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C30511) *
              C30775 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30511) *
              C30768 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30511) *
              C30755 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C30466 * C2472 +
           (((C13654 - C13653 + C13656 - C13655) * C4702 +
             (C13658 - C13657 + C13660 - C13659) * C30396) *
                C18742 +
            ((C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C4702 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C30396) *
                C18743) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C30776 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C30772 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30466 * C30762 +
           (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C25845 - C25846 + C25847 - C25848) * C4702 +
             (C25849 - C25850 + C25851 - C25852) * C30396) *
                C18743) *
               C30466 * C30742) *
              C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30776 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30772 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30762 +
           (((C14514 - C14513 + C14516 - C14515) * C4702 +
             (C14518 - C14517 + C14520 - C14519) * C30396) *
                C18742 +
            ((C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
              C13131 * C5815) *
                 C4702 +
             (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
              C13131 * C5817) *
                 C30396) *
                C18743) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C3234 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30507 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C3234 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30514 +
           ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
               C13131 * C1124) *
                  C4702 +
              (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
               C13131 * C1131) *
                  C30396) *
                 C18742 +
             ((C25375 - C25376 + C25377 - C25378) * C4702 +
              (C25379 - C25380 + C25381 - C25382) * C30396) *
                 C18743) *
                C3234 +
            (((C25376 - C25375 + C25378 - C25377) * C4702 +
              (C25380 - C25379 + C25382 - C25381) * C30396) *
                 C18742 +
             ((C25383 - C25384 + C25385 - C25386) * C4702 +
              (C25387 - C25388 + C25389 - C25390) * C30396) *
                 C18743) *
                C30553) *
               C2840) *
              C30687 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C3234 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30507 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C3234 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30514 +
           ((((C13322 - C13321 + C13324 - C13323) * C4702 +
              (C13326 - C13325 + C13328 - C13327) * C30396) *
                 C18742 +
             ((C14715 - C14716 + C14717 - C14718) * C4702 +
              (C14719 - C14720 + C14721 - C14722) * C30396) *
                 C18743) *
                C3234 +
            (((C14716 - C14715 + C14718 - C14717) * C4702 +
              (C14720 - C14719 + C14722 - C14721) * C30396) *
                 C18742 +
             ((C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
               C13131 * C6361) *
                  C4702 +
              (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
               C13131 * C6363) *
                  C30396) *
                 C18743) *
                C30553) *
               C2840) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30549 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30556 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C26227 - C26228 + C26229 - C26230) * C4702 +
             (C26231 - C26232 + C26233 - C26234) * C30396) *
                C18743) *
               C3742) *
              C30507 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30549 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30556 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C26697 - C26698 + C26699 - C26700) * C4702 +
             (C26701 - C26702 + C26703 - C26704) * C30396) *
                C18743) *
               C3742) *
              C30514 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30549 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30556 +
           (((C25384 - C25383 + C25386 - C25385) * C4702 +
             (C25388 - C25387 + C25390 - C25389) * C30396) *
                C18742 +
            ((C13126 * C6206 - C13130 * C6203 + C13127 * C6566 -
              C13131 * C6565) *
                 C4702 +
             (C13126 * C6212 - C13130 * C6207 + C13127 * C6568 -
              C13131 * C6567) *
                 C30396) *
                C18743) *
               C3742) *
              C2840) *
         C30420) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C3234 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C30776 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C3234 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30553) *
              C30772 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C3234 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30553) *
              C30762 +
          ((((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C25845 - C25846 + C25847 - C25848) * C4702 +
             (C25849 - C25850 + C25851 - C25852) * C30396) *
                C18743) *
               C3234 +
           (((C25846 - C25845 + C25848 - C25847) * C4702 +
             (C25850 - C25849 + C25852 - C25851) * C30396) *
                C18742 +
            ((C13126 * C5558 - C13130 * C5555 + C13127 * C5562 -
              C13131 * C5557) *
                 C4702 +
             (C13126 * C5564 - C13130 * C5559 + C13127 * C5566 -
              C13131 * C5563) *
                 C30396) *
                C18743) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C3234 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C3234 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30766 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C3234 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C3234 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30753 +
          (((((C13144 - C13143 + C13146 - C13145) * C4702 +
              (C13148 - C13147 + C13150 - C13149) * C30396) *
                 C18742 +
             ((C13507 - C13508 + C13509 - C13510) * C4702 +
              (C13511 - C13512 + C13513 - C13514) * C30396) *
                 C18743) *
                C3234 +
            (((C13508 - C13507 + C13510 - C13509) * C4702 +
              (C13512 - C13511 + C13514 - C13513) * C30396) *
                 C18742 +
             ((C13515 - C13516 + C13517 - C13518) * C4702 +
              (C13519 - C13520 + C13521 - C13522) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13330 - C13329 + C13332 - C13331) * C4702 +
              (C13334 - C13333 + C13336 - C13335) * C30396) *
                 C18742 +
             ((C14001 - C14002 + C14003 - C14004) * C4702 +
              (C14005 - C14006 + C14007 - C14008) * C30396) *
                 C18743) *
                C3234 +
            (((C14002 - C14001 + C14004 - C14003) * C4702 +
              (C14006 - C14005 + C14008 - C14007) * C30396) *
                 C18742 +
             ((C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
               C13131 * C1266) *
                  C4702 +
              (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
               C13131 * C1284) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30777 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30774 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C26227 - C26228 + C26229 - C26230) * C4702 +
             (C26231 - C26232 + C26233 - C26234) * C30396) *
                C18743) *
               C30765 +
           (((C26228 - C26227 + C26230 - C26229) * C4702 +
             (C26232 - C26231 + C26234 - C26233) * C30396) *
                C18742 +
            ((C26235 - C26236 + C26237 - C26238) * C4702 +
             (C26239 - C26240 + C26241 - C26242) * C30396) *
                C18743) *
               C30748) *
              C2472 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30777 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30774 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C26697 - C26698 + C26699 - C26700) * C4702 +
             (C26701 - C26702 + C26703 - C26704) * C30396) *
                C18743) *
               C30765 +
           (((C26698 - C26697 + C26700 - C26699) * C4702 +
             (C26702 - C26701 + C26704 - C26703) * C30396) *
                C18742 +
            ((C13126 * C6208 - C13130 * C6204 + C13127 * C6209 -
              C13131 * C6205) *
                 C4702 +
             (C13126 * C6213 - C13130 * C6210 + C13127 * C6214 -
              C13131 * C6211) *
                 C30396) *
                C18743) *
               C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30549 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30556 +
            (((C24524 - C24523 + C24526 - C24525) * C4702 +
              (C24528 - C24527 + C24530 - C24529) * C30396) *
                 C18742 +
             ((C26227 - C26228 + C26229 - C26230) * C4702 +
              (C26231 - C26232 + C26233 - C26234) * C30396) *
                 C18743) *
                C3742) *
               C2472 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30549 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30556 +
            (((C25368 - C25367 + C25370 - C25369) * C4702 +
              (C25372 - C25371 + C25374 - C25373) * C30396) *
                 C18742 +
             ((C26697 - C26698 + C26699 - C26700) * C4702 +
              (C26701 - C26702 + C26703 - C26704) * C30396) *
                 C18743) *
                C3742) *
               C30511) *
              C30687 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30549 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30556 +
            (((C13500 - C13499 + C13502 - C13501) * C4702 +
              (C13504 - C13503 + C13506 - C13505) * C30396) *
                 C18742 +
             ((C15559 - C15560 + C15561 - C15562) * C4702 +
              (C15563 - C15564 + C15565 - C15566) * C30396) *
                 C18743) *
                C3742) *
               C2472 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30549 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30556 +
            (((C15422 - C15421 + C15424 - C15423) * C4702 +
              (C15426 - C15425 + C15428 - C15427) * C30396) *
                 C18742 +
             ((C13126 * C2367 - C13130 * C2363 + C13127 * C6464 -
               C13131 * C6463) *
                  C4702 +
              (C13126 * C2372 - C13130 * C2368 + C13127 * C6466 -
               C13131 * C6465) *
                  C30396) *
                 C18743) *
                C3742) *
               C30511) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C3234 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C3234 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30766 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C3234 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C3234 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30753 +
          (((((C13144 - C13143 + C13146 - C13145) * C4702 +
              (C13148 - C13147 + C13150 - C13149) * C30396) *
                 C18742 +
             ((C13507 - C13508 + C13509 - C13510) * C4702 +
              (C13511 - C13512 + C13513 - C13514) * C30396) *
                 C18743) *
                C3234 +
            (((C13508 - C13507 + C13510 - C13509) * C4702 +
              (C13512 - C13511 + C13514 - C13513) * C30396) *
                 C18742 +
             ((C13515 - C13516 + C13517 - C13518) * C4702 +
              (C13519 - C13520 + C13521 - C13522) * C30396) *
                 C18743) *
                C30553) *
               C2472 +
           ((((C13330 - C13329 + C13332 - C13331) * C4702 +
              (C13334 - C13333 + C13336 - C13335) * C30396) *
                 C18742 +
             ((C14001 - C14002 + C14003 - C14004) * C4702 +
              (C14005 - C14006 + C14007 - C14008) * C30396) *
                 C18743) *
                C3234 +
            (((C14002 - C14001 + C14004 - C14003) * C4702 +
              (C14006 - C14005 + C14008 - C14007) * C30396) *
                 C18742 +
             ((C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
               C13131 * C1266) *
                  C4702 +
              (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
               C13131 * C1284) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C3234 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C30776 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C3234 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30553) *
              C30772 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C3234 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30553) *
              C30762 +
          ((((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C25845 - C25846 + C25847 - C25848) * C4702 +
             (C25849 - C25850 + C25851 - C25852) * C30396) *
                C18743) *
               C3234 +
           (((C25846 - C25845 + C25848 - C25847) * C4702 +
             (C25850 - C25849 + C25852 - C25851) * C30396) *
                C18742 +
            ((C13126 * C5558 - C13130 * C5555 + C13127 * C5562 -
              C13131 * C5557) *
                 C4702 +
             (C13126 * C5564 - C13130 * C5559 + C13127 * C5566 -
              C13131 * C5563) *
                 C30396) *
                C18743) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C1392 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C1393 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30466 * C1394 +
           (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C13130 * C1666 - C13126 * C1669 + C13131 * C5556 -
              C13127 * C5560) *
                 C4702 +
             (C13130 * C1670 - C13126 * C1675 + C13131 * C5561 -
              C13127 * C5565) *
                 C30396) *
                C18743) *
               C30466 * C30742) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C1392 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C1393 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C1394 +
           (((C14514 - C14513 + C14516 - C14515) * C4702 +
             (C14518 - C14517 + C14520 - C14519) * C30396) *
                C18742 +
            ((C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
              C13131 * C5815) *
                 C4702 +
             (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
              C13131 * C5817) *
                 C30396) *
                C18743) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C13130 * C906 - C13126 * C911 + C13131 * C1261 - C13127 * C1273) *
                 C4702 +
             (C13130 * C912 - C13126 * C921 + C13131 * C1274 - C13127 * C1288) *
                 C30396) *
                C18743) *
               C30466 * C30511) *
              C636 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30511) *
              C637 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30511) *
              C638 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13654 - C13653 + C13656 - C13655) * C4702 +
             (C13658 - C13657 + C13660 - C13659) * C30396) *
                C18742 +
            ((C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C4702 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C30396) *
                C18743) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C1788 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C1789 +
            (((C24524 - C24523 + C24526 - C24525) * C4702 +
              (C24528 - C24527 + C24530 - C24529) * C30396) *
                 C18742 +
             ((C26227 - C26228 + C26229 - C26230) * C4702 +
              (C26231 - C26232 + C26233 - C26234) * C30396) *
                 C18743) *
                C30735) *
               C30701 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C1788 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C1789 +
            (((C25368 - C25367 + C25370 - C25369) * C4702 +
              (C25372 - C25371 + C25374 - C25373) * C30396) *
                 C18742 +
             ((C13130 * C2362 - C13126 * C2365 + C13131 * C6203 -
               C13127 * C6206) *
                  C4702 +
              (C13130 * C2366 - C13126 * C2371 + C13131 * C6207 -
               C13127 * C6212) *
                  C30396) *
                 C18743) *
                C30735) *
               C30511) *
              C30687 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C1788 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C1789 +
            (((C13500 - C13499 + C13502 - C13501) * C4702 +
              (C13504 - C13503 + C13506 - C13505) * C30396) *
                 C18742 +
             ((C15559 - C15560 + C15561 - C15562) * C4702 +
              (C15563 - C15564 + C15565 - C15566) * C30396) *
                 C18743) *
                C30735) *
               C30701 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C1788 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C1789 +
            (((C15422 - C15421 + C15424 - C15423) * C4702 +
              (C15426 - C15425 + C15428 - C15427) * C30396) *
                 C18742 +
             ((C13126 * C2367 - C13130 * C2363 + C13127 * C6464 -
               C13131 * C6463) *
                  C4702 +
              (C13126 * C2372 - C13130 * C2368 + C13127 * C6466 -
               C13131 * C6465) *
                  C30396) *
                 C18743) *
                C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30702 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C1392 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30702 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30553) *
              C1393 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30702 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30553) *
              C1394 +
          ((((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C25845 - C25846 + C25847 - C25848) * C4702 +
             (C25849 - C25850 + C25851 - C25852) * C30396) *
                C18743) *
               C30702 +
           (((C25846 - C25845 + C25848 - C25847) * C4702 +
             (C25850 - C25849 + C25852 - C25851) * C30396) *
                C18742 +
            ((C13126 * C5558 - C13130 * C5555 + C13127 * C5562 -
              C13131 * C5557) *
                 C4702 +
             (C13126 * C5564 - C13130 * C5559 + C13127 * C5566 -
              C13131 * C5563) *
                 C30396) *
                C18743) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30702 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30702 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C13126 * C1267 - C13130 * C1258 + C13127 * C1279 -
               C13131 * C1264) *
                  C4702 +
              (C13126 * C1285 - C13130 * C1268 + C13127 * C1291 -
               C13131 * C1280) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C284 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30702 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30702 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C285 +
          (((((C13144 - C13143 + C13146 - C13145) * C4702 +
              (C13148 - C13147 + C13150 - C13149) * C30396) *
                 C18742 +
             ((C13507 - C13508 + C13509 - C13510) * C4702 +
              (C13511 - C13512 + C13513 - C13514) * C30396) *
                 C18743) *
                C30702 +
            (((C13508 - C13507 + C13510 - C13509) * C4702 +
              (C13512 - C13511 + C13514 - C13513) * C30396) *
                 C18742 +
             ((C13515 - C13516 + C13517 - C13518) * C4702 +
              (C13519 - C13520 + C13521 - C13522) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13330 - C13329 + C13332 - C13331) * C4702 +
              (C13334 - C13333 + C13336 - C13335) * C30396) *
                 C18742 +
             ((C14001 - C14002 + C14003 - C14004) * C4702 +
              (C14005 - C14006 + C14007 - C14008) * C30396) *
                 C18743) *
                C30702 +
            (((C14002 - C14001 + C14004 - C14003) * C4702 +
              (C14006 - C14005 + C14008 - C14007) * C30396) *
                 C18742 +
             ((C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
               C13131 * C1266) *
                  C4702 +
              (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
               C13131 * C1284) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C2248 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C2249 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C26227 - C26228 + C26229 - C26230) * C4702 +
             (C26231 - C26232 + C26233 - C26234) * C30396) *
                C18743) *
               C2250 +
           (((C26228 - C26227 + C26230 - C26229) * C4702 +
             (C26232 - C26231 + C26234 - C26233) * C30396) *
                C18742 +
            ((C26235 - C26236 + C26237 - C26238) * C4702 +
             (C26239 - C26240 + C26241 - C26242) * C30396) *
                C18743) *
               C30748) *
              C30701 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C2248 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C2249 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C26697 - C26698 + C26699 - C26700) * C4702 +
             (C26701 - C26702 + C26703 - C26704) * C30396) *
                C18743) *
               C2250 +
           (((C26698 - C26697 + C26700 - C26699) * C4702 +
             (C26702 - C26701 + C26704 - C26703) * C30396) *
                C18742 +
            ((C13126 * C6208 - C13130 * C6204 + C13127 * C6209 -
              C13131 * C6205) *
                 C4702 +
             (C13126 * C6213 - C13130 * C6210 + C13127 * C6214 -
              C13131 * C6211) *
                 C30396) *
                C18743) *
               C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C124 - C13130 * C117 + C13127 * C297 -
                 C13131 * C287) *
                    C4702 +
                (C13126 * C138 - C13130 * C125 + C13127 * C317 -
                 C13131 * C298) *
                    C30396) *
                   C18742 +
               ((C13126 * C478 - C13130 * C468 + C13127 * C911 -
                 C13131 * C906) *
                    C4702 +
                (C13126 * C498 - C13130 * C479 + C13127 * C921 -
                 C13131 * C912) *
                    C30396) *
                   C18743) *
                  C30466 * C30448 * C108 +
              (((C13136 - C13135 + C13138 - C13137) * C4702 +
                (C13140 - C13139 + C13142 - C13141) * C30396) *
                   C18742 +
               ((C13491 - C13492 + C13493 - C13494) * C4702 +
                (C13495 - C13496 + C13497 - C13498) * C30396) *
                   C18743) *
                  C30466 * C30448 * C109 +
              (((C13144 - C13143 + C13146 - C13145) * C4702 +
                (C13148 - C13147 + C13150 - C13149) * C30396) *
                   C18742 +
               ((C13507 - C13508 + C13509 - C13510) * C4702 +
                (C13511 - C13512 + C13513 - C13514) * C30396) *
                   C18743) *
                  C30466 * C30448 * C110 +
              (((C13152 - C13151 + C13154 - C13153) * C4702 +
                (C13156 - C13155 + C13158 - C13157) * C30396) *
                   C18742 +
               ((C13791 - C13792 + C13793 - C13794) * C4702 +
                (C13795 - C13796 + C13797 - C13798) * C30396) *
                   C18743) *
                  C30466 * C30448 * C111 +
              (((C13160 - C13159 + C13162 - C13161) * C4702 +
                (C13164 - C13163 + C13166 - C13165) * C30396) *
                   C18742 +
               ((C13126 * C494 - C13130 * C476 + C13127 * C919 -
                 C13131 * C910) *
                    C4702 +
                (C13126 * C506 - C13130 * C495 + C13127 * C925 -
                 C13131 * C920) *
                    C30396) *
                   C18743) *
                  C30466 * C30448 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C13126 * C124 - C13130 * C117 + C13127 * C297 -
                  C13131 * C287) *
                     C4702 +
                 (C13126 * C138 - C13130 * C125 + C13127 * C317 -
                  C13131 * C298) *
                     C30396) *
                    C18742 +
                ((C13126 * C478 - C13130 * C468 + C13127 * C911 -
                  C13131 * C906) *
                     C4702 +
                 (C13126 * C498 - C13130 * C479 + C13127 * C921 -
                  C13131 * C912) *
                     C30396) *
                    C18743) *
                   C30466 * C30769 +
               (((C13130 * C287 - C13126 * C297 + C13131 * C290 -
                  C13127 * C303) *
                     C4702 +
                 (C13130 * C298 - C13126 * C317 + C13131 * C304 -
                  C13127 * C320) *
                     C30396) *
                    C18742 +
                ((C13130 * C906 - C13126 * C911 + C13131 * C1261 -
                  C13127 * C1273) *
                     C4702 +
                 (C13130 * C912 - C13126 * C921 + C13131 * C1274 -
                  C13127 * C1288) *
                     C30396) *
                    C18743) *
                   C30466 * C30757 +
               (((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
                  C13131 * C1124) *
                     C4702 +
                 (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
                  C13131 * C1131) *
                     C30396) *
                    C18742 +
                ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
                  C13131 * C1666) *
                     C4702 +
                 (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
                  C13131 * C1670) *
                     C30396) *
                    C18743) *
                   C30466 * C30732) *
                  C284 +
              ((((C13136 - C13135 + C13138 - C13137) * C4702 +
                 (C13140 - C13139 + C13142 - C13141) * C30396) *
                    C18742 +
                ((C13491 - C13492 + C13493 - C13494) * C4702 +
                 (C13495 - C13496 + C13497 - C13498) * C30396) *
                    C18743) *
                   C30466 * C30769 +
               (((C13314 - C13313 + C13316 - C13315) * C4702 +
                 (C13318 - C13317 + C13320 - C13319) * C30396) *
                    C18742 +
                ((C13993 - C13994 + C13995 - C13996) * C4702 +
                 (C13997 - C13998 + C13999 - C14000) * C30396) *
                    C18743) *
                   C30466 * C30757 +
               (((C13322 - C13321 + C13324 - C13323) * C4702 +
                 (C13326 - C13325 + C13328 - C13327) * C30396) *
                    C18742 +
                ((C14715 - C14716 + C14717 - C14718) * C4702 +
                 (C14719 - C14720 + C14721 - C14722) * C30396) *
                    C18743) *
                   C30466 * C30732) *
                  C285 +
              ((((C13144 - C13143 + C13146 - C13145) * C4702 +
                 (C13148 - C13147 + C13150 - C13149) * C30396) *
                    C18742 +
                ((C13507 - C13508 + C13509 - C13510) * C4702 +
                 (C13511 - C13512 + C13513 - C13514) * C30396) *
                    C18743) *
                   C30466 * C30769 +
               (((C13330 - C13329 + C13332 - C13331) * C4702 +
                 (C13334 - C13333 + C13336 - C13335) * C30396) *
                    C18742 +
                ((C14001 - C14002 + C14003 - C14004) * C4702 +
                 (C14005 - C14006 + C14007 - C14008) * C30396) *
                    C18743) *
                   C30466 * C30757 +
               (((C13338 - C13337 + C13340 - C13339) * C4702 +
                 (C13342 - C13341 + C13344 - C13343) * C30396) *
                    C18742 +
                ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
                  C13131 * C1668) *
                     C4702 +
                 (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
                  C13131 * C1674) *
                     C30396) *
                    C18743) *
                   C30466 * C30732) *
                  C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30770 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30759 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30770 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30759 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C30735) *
              C30448 * C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30770 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30759 +
           (((C13516 - C13515 + C13518 - C13517) * C4702 +
             (C13520 - C13519 + C13522 - C13521) * C30396) *
                C18742 +
            ((C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
              C13131 * C2364) *
                 C4702 +
             (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
              C13131 * C2370) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C24515 - C24516 + C24517 - C24518) * C4702 +
            (C24519 - C24520 + C24521 - C24522) * C30396) *
               C18743) *
              C30466 * C1118 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C4702 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C30396) *
               C18742 +
           ((C24985 - C24986 + C24987 - C24988) * C4702 +
            (C24989 - C24990 + C24991 - C24992) * C30396) *
               C18743) *
              C30466 * C1119 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C4702 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C30396) *
               C18742 +
           ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
             C13131 * C1666) *
                C4702 +
            (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
             C13131 * C1670) *
                C30396) *
               C18743) *
              C30466 * C1120 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C4702 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C30396) *
               C18742 +
           ((C13130 * C1666 - C13126 * C1669 + C13131 * C5556 -
             C13127 * C5560) *
                C4702 +
            (C13130 * C1670 - C13126 * C1675 + C13131 * C5561 -
             C13127 * C5565) *
                C30396) *
               C18743) *
              C30466 * C1121 +
          (((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 -
             C13131 * C5437) *
                C4702 +
            (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 -
             C13131 * C5440) *
                C30396) *
               C18742 +
           ((C13126 * C5560 - C13130 * C5556 + C13127 * C5918 -
             C13131 * C5917) *
                C4702 +
            (C13126 * C5565 - C13130 * C5561 + C13127 * C5920 -
             C13131 * C5919) *
                C30396) *
               C18743) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30770 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30759 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C1050 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30770 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30759 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C13130 * C2362 - C13126 * C2365 + C13131 * C6203 -
              C13127 * C6206) *
                 C4702 +
             (C13130 * C2366 - C13126 * C2371 + C13131 * C6207 -
              C13127 * C6212) *
                 C30396) *
                C18743) *
               C30735) *
              C1051 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30770 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30759 +
           (((C25384 - C25383 + C25386 - C25385) * C4702 +
             (C25388 - C25387 + C25390 - C25389) * C30396) *
                C18742 +
            ((C13126 * C6206 - C13130 * C6203 + C13127 * C6566 -
              C13131 * C6565) *
                 C4702 +
             (C13126 * C6212 - C13130 * C6207 + C13127 * C6568 -
              C13131 * C6567) *
                 C30396) *
                C18743) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C1788 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C1789 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C1788 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C1789 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C30735) *
              C30448 * C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C1788 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C1789 +
           (((C13516 - C13515 + C13518 - C13517) * C4702 +
             (C13520 - C13519 + C13522 - C13521) * C30396) *
                C18742 +
            ((C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
              C13131 * C2364) *
                 C4702 +
             (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
              C13131 * C2370) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C1788 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C1789 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C30769 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C1788 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C1789 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C13130 * C2362 - C13126 * C2365 + C13131 * C6203 -
              C13127 * C6206) *
                 C4702 +
             (C13130 * C2366 - C13126 * C2371 + C13131 * C6207 -
              C13127 * C6212) *
                 C30396) *
                C18743) *
               C30735) *
              C30757 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C1788 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C1789 +
           (((C25384 - C25383 + C25386 - C25385) * C4702 +
             (C25388 - C25387 + C25390 - C25389) * C30396) *
                C18742 +
            ((C13126 * C6206 - C13130 * C6203 + C13127 * C6566 -
              C13131 * C6565) *
                 C4702 +
             (C13126 * C6212 - C13130 * C6207 + C13127 * C6568 -
              C13131 * C6567) *
                 C30396) *
                C18743) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C24515 - C24516 + C24517 - C24518) * C4702 +
            (C24519 - C24520 + C24521 - C24522) * C30396) *
               C18743) *
              C1963 +
          (((C24516 - C24515 + C24518 - C24517) * C4702 +
            (C24520 - C24519 + C24522 - C24521) * C30396) *
               C18742 +
           ((C24523 - C24524 + C24525 - C24526) * C4702 +
            (C24527 - C24528 + C24529 - C24530) * C30396) *
               C18743) *
              C1964 +
          (((C24524 - C24523 + C24526 - C24525) * C4702 +
            (C24528 - C24527 + C24530 - C24529) * C30396) *
               C18742 +
           ((C26227 - C26228 + C26229 - C26230) * C4702 +
            (C26231 - C26232 + C26233 - C26234) * C30396) *
               C18743) *
              C1965 +
          (((C26228 - C26227 + C26230 - C26229) * C4702 +
            (C26232 - C26231 + C26234 - C26233) * C30396) *
               C18742 +
           ((C26235 - C26236 + C26237 - C26238) * C4702 +
            (C26239 - C26240 + C26241 - C26242) * C30396) *
               C18743) *
              C1966 +
          (((C26236 - C26235 + C26238 - C26237) * C4702 +
            (C26240 - C26239 + C26242 - C26241) * C30396) *
               C18742 +
           ((C13126 * C10407 - C13130 * C10405 + C13127 * C10800 -
             C13131 * C10799) *
                C4702 +
            (C13126 * C10411 - C13130 * C10408 + C13127 * C10802 -
             C13131 * C10801) *
                C30396) *
               C18743) *
              C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30702 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C1050 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30702 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C1051 +
           ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
               C13131 * C1124) *
                  C4702 +
              (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
               C13131 * C1131) *
                  C30396) *
                 C18742 +
             ((C25375 - C25376 + C25377 - C25378) * C4702 +
              (C25379 - C25380 + C25381 - C25382) * C30396) *
                 C18743) *
                C30702 +
            (((C25376 - C25375 + C25378 - C25377) * C4702 +
              (C25380 - C25379 + C25382 - C25381) * C30396) *
                 C18742 +
             ((C25383 - C25384 + C25385 - C25386) * C4702 +
              (C25387 - C25388 + C25389 - C25390) * C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C30687 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30702 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C1050 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30702 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C1051 +
           ((((C13322 - C13321 + C13324 - C13323) * C4702 +
              (C13326 - C13325 + C13328 - C13327) * C30396) *
                 C18742 +
             ((C14715 - C14716 + C14717 - C14718) * C4702 +
              (C14719 - C14720 + C14721 - C14722) * C30396) *
                 C18743) *
                C30702 +
            (((C14716 - C14715 + C14718 - C14717) * C4702 +
              (C14720 - C14719 + C14722 - C14721) * C30396) *
                 C18742 +
             ((C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
               C13131 * C6361) *
                  C4702 +
              (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
               C13131 * C6363) *
                  C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30702 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C30448 * C636 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30702 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30553) *
              C30448 * C637 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30702 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30553) *
              C30448 * C638 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C30702 +
           (((C13792 - C13791 + C13794 - C13793) * C4702 +
             (C13796 - C13795 + C13798 - C13797) * C30396) *
                C18742 +
            ((C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                 C4702 +
             (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                 C30396) *
                C18743) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C2248 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C2249 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C26227 - C26228 + C26229 - C26230) * C4702 +
             (C26231 - C26232 + C26233 - C26234) * C30396) *
                C18743) *
               C2250 +
           (((C26228 - C26227 + C26230 - C26229) * C4702 +
             (C26232 - C26231 + C26234 - C26233) * C30396) *
                C18742 +
            ((C26235 - C26236 + C26237 - C26238) * C4702 +
             (C26239 - C26240 + C26241 - C26242) * C30396) *
                C18743) *
               C30748) *
              C30448 * C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C2248 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C2249 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C2250 +
           (((C15560 - C15559 + C15562 - C15561) * C4702 +
             (C15564 - C15563 + C15566 - C15565) * C30396) *
                C18742 +
            ((C13126 * C1982 - C13130 * C1972 + C13127 * C10578 -
              C13131 * C10577) *
                 C4702 +
             (C13126 * C1990 - C13130 * C1983 + C13127 * C10580 -
              C13131 * C10579) *
                 C30396) *
                C18743) *
               C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C13126 * C478 - C13130 * C468 + C13127 * C911 - C13131 * C906) *
                 C4702 +
             (C13126 * C498 - C13130 * C479 + C13127 * C921 - C13131 * C912) *
                 C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C13130 * C906 - C13126 * C911 + C13131 * C1261 - C13127 * C1273) *
                 C4702 +
             (C13130 * C912 - C13126 * C921 + C13131 * C1274 - C13127 * C1288) *
                 C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C13126 * C478 - C13130 * C468 + C13127 * C911 - C13131 * C906) *
                C4702 +
            (C13126 * C498 - C13130 * C479 + C13127 * C921 - C13131 * C912) *
                C30396) *
               C18743) *
              C30466 * C30448 * C108 +
          (((C13136 - C13135 + C13138 - C13137) * C4702 +
            (C13140 - C13139 + C13142 - C13141) * C30396) *
               C18742 +
           ((C13491 - C13492 + C13493 - C13494) * C4702 +
            (C13495 - C13496 + C13497 - C13498) * C30396) *
               C18743) *
              C30466 * C30448 * C109 +
          (((C13144 - C13143 + C13146 - C13145) * C4702 +
            (C13148 - C13147 + C13150 - C13149) * C30396) *
               C18742 +
           ((C13507 - C13508 + C13509 - C13510) * C4702 +
            (C13511 - C13512 + C13513 - C13514) * C30396) *
               C18743) *
              C30466 * C30448 * C110 +
          (((C13152 - C13151 + C13154 - C13153) * C4702 +
            (C13156 - C13155 + C13158 - C13157) * C30396) *
               C18742 +
           ((C13791 - C13792 + C13793 - C13794) * C4702 +
            (C13795 - C13796 + C13797 - C13798) * C30396) *
               C18743) *
              C30466 * C30448 * C111 +
          (((C13160 - C13159 + C13162 - C13161) * C4702 +
            (C13164 - C13163 + C13166 - C13165) * C30396) *
               C18742 +
           ((C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C4702 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C30396) *
               C18743) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C24515 - C24516 + C24517 - C24518) * C4702 +
            (C24519 - C24520 + C24521 - C24522) * C30396) *
               C18743) *
              C30466 * C1118 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C4702 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C30396) *
               C18742 +
           ((C24985 - C24986 + C24987 - C24988) * C4702 +
            (C24989 - C24990 + C24991 - C24992) * C30396) *
               C18743) *
              C30466 * C1119 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C4702 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C30396) *
               C18742 +
           ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
             C13131 * C1666) *
                C4702 +
            (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
             C13131 * C1670) *
                C30396) *
               C18743) *
              C30466 * C1120 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C4702 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C30396) *
               C18742 +
           ((C13130 * C1666 - C13126 * C1669 + C13131 * C5556 -
             C13127 * C5560) *
                C4702 +
            (C13130 * C1670 - C13126 * C1675 + C13131 * C5561 -
             C13127 * C5565) *
                C30396) *
               C18743) *
              C30466 * C1121 +
          (((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 -
             C13131 * C5437) *
                C4702 +
            (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 -
             C13131 * C5440) *
                C30396) *
               C18742 +
           ((C13126 * C5560 - C13130 * C5556 + C13127 * C5918 -
             C13131 * C5917) *
                C4702 +
            (C13126 * C5565 - C13130 * C5561 + C13127 * C5920 -
             C13131 * C5919) *
                C30396) *
               C18743) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C1788 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C1789 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C1788 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C1789 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C30735) *
              C30448 * C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C1788 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C1789 +
           (((C13516 - C13515 + C13518 - C13517) * C4702 +
             (C13520 - C13519 + C13522 - C13521) * C30396) *
                C18742 +
            ((C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
              C13131 * C2364) *
                 C4702 +
             (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
              C13131 * C2370) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C1788 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C1789 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C30769 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C1788 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C1789 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C13130 * C2362 - C13126 * C2365 + C13131 * C6203 -
              C13127 * C6206) *
                 C4702 +
             (C13130 * C2366 - C13126 * C2371 + C13131 * C6207 -
              C13127 * C6212) *
                 C30396) *
                C18743) *
               C30735) *
              C30757 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C1788 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C1789 +
           (((C25384 - C25383 + C25386 - C25385) * C4702 +
             (C25388 - C25387 + C25390 - C25389) * C30396) *
                C18742 +
            ((C13126 * C6206 - C13130 * C6203 + C13127 * C6566 -
              C13131 * C6565) *
                 C4702 +
             (C13126 * C6212 - C13130 * C6207 + C13127 * C6568 -
              C13131 * C6567) *
                 C30396) *
                C18743) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C3234 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C3234 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30425 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C3234 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C3234 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30434 +
          (((((C13144 - C13143 + C13146 - C13145) * C4702 +
              (C13148 - C13147 + C13150 - C13149) * C30396) *
                 C18742 +
             ((C13507 - C13508 + C13509 - C13510) * C4702 +
              (C13511 - C13512 + C13513 - C13514) * C30396) *
                 C18743) *
                C3234 +
            (((C13508 - C13507 + C13510 - C13509) * C4702 +
              (C13512 - C13511 + C13514 - C13513) * C30396) *
                 C18742 +
             ((C13515 - C13516 + C13517 - C13518) * C4702 +
              (C13519 - C13520 + C13521 - C13522) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13330 - C13329 + C13332 - C13331) * C4702 +
              (C13334 - C13333 + C13336 - C13335) * C30396) *
                 C18742 +
             ((C14001 - C14002 + C14003 - C14004) * C4702 +
              (C14005 - C14006 + C14007 - C14008) * C30396) *
                 C18743) *
                C3234 +
            (((C14002 - C14001 + C14004 - C14003) * C4702 +
              (C14006 - C14005 + C14008 - C14007) * C30396) *
                 C18742 +
             ((C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
               C13131 * C1266) *
                  C4702 +
              (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
               C13131 * C1284) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30549 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30556 +
            (((C24524 - C24523 + C24526 - C24525) * C4702 +
              (C24528 - C24527 + C24530 - C24529) * C30396) *
                 C18742 +
             ((C26227 - C26228 + C26229 - C26230) * C4702 +
              (C26231 - C26232 + C26233 - C26234) * C30396) *
                 C18743) *
                C3742) *
               C30701 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30549 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30556 +
            (((C25368 - C25367 + C25370 - C25369) * C4702 +
              (C25372 - C25371 + C25374 - C25373) * C30396) *
                 C18742 +
             ((C26697 - C26698 + C26699 - C26700) * C4702 +
              (C26701 - C26702 + C26703 - C26704) * C30396) *
                 C18743) *
                C3742) *
               C30511) *
              C2580 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30549 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30556 +
            (((C13500 - C13499 + C13502 - C13501) * C4702 +
              (C13504 - C13503 + C13506 - C13505) * C30396) *
                 C18742 +
             ((C15559 - C15560 + C15561 - C15562) * C4702 +
              (C15563 - C15564 + C15565 - C15566) * C30396) *
                 C18743) *
                C3742) *
               C30701 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30549 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30556 +
            (((C15422 - C15421 + C15424 - C15423) * C4702 +
              (C15426 - C15425 + C15428 - C15427) * C30396) *
                 C18742 +
             ((C13126 * C2367 - C13130 * C2363 + C13127 * C6464 -
               C13131 * C6463) *
                  C4702 +
              (C13126 * C2372 - C13130 * C2368 + C13127 * C6466 -
               C13131 * C6465) *
                  C30396) *
                 C18743) *
                C3742) *
               C30511) *
              C30431)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C3234 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30769 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C3234 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30757 +
           ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
               C13131 * C1124) *
                  C4702 +
              (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
               C13131 * C1131) *
                  C30396) *
                 C18742 +
             ((C25375 - C25376 + C25377 - C25378) * C4702 +
              (C25379 - C25380 + C25381 - C25382) * C30396) *
                 C18743) *
                C3234 +
            (((C25376 - C25375 + C25378 - C25377) * C4702 +
              (C25380 - C25379 + C25382 - C25381) * C30396) *
                 C18742 +
             ((C25383 - C25384 + C25385 - C25386) * C4702 +
              (C25387 - C25388 + C25389 - C25390) * C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C2580 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C3234 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30769 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C3234 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30757 +
           ((((C13322 - C13321 + C13324 - C13323) * C4702 +
              (C13326 - C13325 + C13328 - C13327) * C30396) *
                 C18742 +
             ((C14715 - C14716 + C14717 - C14718) * C4702 +
              (C14719 - C14720 + C14721 - C14722) * C30396) *
                 C18743) *
                C3234 +
            (((C14716 - C14715 + C14718 - C14717) * C4702 +
              (C14720 - C14719 + C14722 - C14721) * C30396) *
                 C18742 +
             ((C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
               C13131 * C6361) *
                  C4702 +
              (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
               C13131 * C6363) *
                  C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C3234 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C30448 * C30775 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C3234 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30553) *
              C30448 * C30768 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C3234 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30553) *
              C30448 * C30755 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C3234 +
           (((C13792 - C13791 + C13794 - C13793) * C4702 +
             (C13796 - C13795 + C13798 - C13797) * C30396) *
                C18742 +
            ((C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                 C4702 +
             (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                 C30396) *
                C18743) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30777 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30774 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C26227 - C26228 + C26229 - C26230) * C4702 +
             (C26231 - C26232 + C26233 - C26234) * C30396) *
                C18743) *
               C30765 +
           (((C26228 - C26227 + C26230 - C26229) * C4702 +
             (C26232 - C26231 + C26234 - C26233) * C30396) *
                C18742 +
            ((C26235 - C26236 + C26237 - C26238) * C4702 +
             (C26239 - C26240 + C26241 - C26242) * C30396) *
                C18743) *
               C30748) *
              C30448 * C2580 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30777 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30774 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C30765 +
           (((C15560 - C15559 + C15562 - C15561) * C4702 +
             (C15564 - C15563 + C15566 - C15565) * C30396) *
                C18742 +
            ((C13126 * C1982 - C13130 * C1972 + C13127 * C10578 -
              C13131 * C10577) *
                 C4702 +
             (C13126 * C1990 - C13130 * C1983 + C13127 * C10580 -
              C13131 * C10579) *
                 C30396) *
                C18743) *
               C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30549 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30556 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C26227 - C26228 + C26229 - C26230) * C4702 +
             (C26231 - C26232 + C26233 - C26234) * C30396) *
                C18743) *
               C3742) *
              C30448 * C30425 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30549 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30556 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C3742) *
              C30448 * C30434 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30549 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30556 +
           (((C13516 - C13515 + C13518 - C13517) * C4702 +
             (C13520 - C13519 + C13522 - C13521) * C30396) *
                C18742 +
            ((C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
              C13131 * C2364) *
                 C4702 +
             (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
              C13131 * C2370) *
                 C30396) *
                C18743) *
               C3742) *
              C30448 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C3234 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C30448 * C30775 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C3234 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30553) *
              C30448 * C30768 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C3234 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30553) *
              C30448 * C30755 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C3234 +
           (((C13792 - C13791 + C13794 - C13793) * C4702 +
             (C13796 - C13795 + C13798 - C13797) * C30396) *
                C18742 +
            ((C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                 C4702 +
             (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                 C30396) *
                C18743) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C3234 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30769 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C3234 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C30757 +
           ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
               C13131 * C1124) *
                  C4702 +
              (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
               C13131 * C1131) *
                  C30396) *
                 C18742 +
             ((C25375 - C25376 + C25377 - C25378) * C4702 +
              (C25379 - C25380 + C25381 - C25382) * C30396) *
                 C18743) *
                C3234 +
            (((C25376 - C25375 + C25378 - C25377) * C4702 +
              (C25380 - C25379 + C25382 - C25381) * C30396) *
                 C18742 +
             ((C25383 - C25384 + C25385 - C25386) * C4702 +
              (C25387 - C25388 + C25389 - C25390) * C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C2580 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C3234 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30769 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C3234 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30757 +
           ((((C13322 - C13321 + C13324 - C13323) * C4702 +
              (C13326 - C13325 + C13328 - C13327) * C30396) *
                 C18742 +
             ((C14715 - C14716 + C14717 - C14718) * C4702 +
              (C14719 - C14720 + C14721 - C14722) * C30396) *
                 C18743) *
                C3234 +
            (((C14716 - C14715 + C14718 - C14717) * C4702 +
              (C14720 - C14719 + C14722 - C14721) * C30396) *
                 C18742 +
             ((C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
               C13131 * C6361) *
                  C4702 +
              (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
               C13131 * C6363) *
                  C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C13130 * C906 - C13126 * C911 + C13131 * C1261 - C13127 * C1273) *
                 C4702 +
             (C13130 * C912 - C13126 * C921 + C13131 * C1274 - C13127 * C1288) *
                 C30396) *
                C18743) *
               C30466 * C30511) *
              C636 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30511) *
              C637 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30511) *
              C638 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C30466 * C30701 +
           (((C13654 - C13653 + C13656 - C13655) * C4702 +
             (C13658 - C13657 + C13660 - C13659) * C30396) *
                C18742 +
            ((C13126 * C917 - C13130 * C909 + C13127 * C1557 - C13131 * C1556) *
                 C4702 +
             (C13126 * C924 - C13130 * C918 + C13127 * C1559 - C13131 * C1558) *
                 C30396) *
                C18743) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C1392 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C1393 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30466 * C1394 +
           (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C13130 * C1666 - C13126 * C1669 + C13131 * C5556 -
              C13127 * C5560) *
                 C4702 +
             (C13130 * C1670 - C13126 * C1675 + C13131 * C5561 -
              C13127 * C5565) *
                 C30396) *
                C18743) *
               C30466 * C30742) *
              C30687 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C1392 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C1393 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C1394 +
           (((C14514 - C14513 + C14516 - C14515) * C4702 +
             (C14518 - C14517 + C14520 - C14519) * C30396) *
                C18742 +
            ((C13126 * C1671 - C13130 * C1667 + C13127 * C5816 -
              C13131 * C5815) *
                 C4702 +
             (C13126 * C1676 - C13130 * C1672 + C13127 * C5818 -
              C13131 * C5817) *
                 C30396) *
                C18743) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30702 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30702 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C13126 * C1267 - C13130 * C1258 + C13127 * C1279 -
               C13131 * C1264) *
                  C4702 +
              (C13126 * C1285 - C13130 * C1268 + C13127 * C1291 -
               C13131 * C1280) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C284 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30702 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30702 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C285 +
          (((((C13144 - C13143 + C13146 - C13145) * C4702 +
              (C13148 - C13147 + C13150 - C13149) * C30396) *
                 C18742 +
             ((C13507 - C13508 + C13509 - C13510) * C4702 +
              (C13511 - C13512 + C13513 - C13514) * C30396) *
                 C18743) *
                C30702 +
            (((C13508 - C13507 + C13510 - C13509) * C4702 +
              (C13512 - C13511 + C13514 - C13513) * C30396) *
                 C18742 +
             ((C13515 - C13516 + C13517 - C13518) * C4702 +
              (C13519 - C13520 + C13521 - C13522) * C30396) *
                 C18743) *
                C30553) *
               C30701 +
           ((((C13330 - C13329 + C13332 - C13331) * C4702 +
              (C13334 - C13333 + C13336 - C13335) * C30396) *
                 C18742 +
             ((C14001 - C14002 + C14003 - C14004) * C4702 +
              (C14005 - C14006 + C14007 - C14008) * C30396) *
                 C18743) *
                C30702 +
            (((C14002 - C14001 + C14004 - C14003) * C4702 +
              (C14006 - C14005 + C14008 - C14007) * C30396) *
                 C18742 +
             ((C13126 * C1271 - C13130 * C1260 + C13127 * C1283 -
               C13131 * C1266) *
                  C4702 +
              (C13126 * C1287 - C13130 * C1272 + C13127 * C1293 -
               C13131 * C1284) *
                  C30396) *
                 C18743) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30702 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C1392 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30702 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30553) *
              C1393 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30702 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30553) *
              C1394 +
          ((((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
              C13127 * C1136) *
                 C4702 +
             (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
              C13127 * C1145) *
                 C30396) *
                C18742 +
            ((C25845 - C25846 + C25847 - C25848) * C4702 +
             (C25849 - C25850 + C25851 - C25852) * C30396) *
                C18743) *
               C30702 +
           (((C25846 - C25845 + C25848 - C25847) * C4702 +
             (C25850 - C25849 + C25852 - C25851) * C30396) *
                C18742 +
            ((C13126 * C5558 - C13130 * C5555 + C13127 * C5562 -
              C13131 * C5557) *
                 C4702 +
             (C13126 * C5564 - C13130 * C5559 + C13127 * C5566 -
              C13131 * C5563) *
                 C30396) *
                C18743) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C13126 * C478 - C13130 * C468 + C13127 * C911 - C13131 * C906) *
                 C4702 +
             (C13126 * C498 - C13130 * C479 + C13127 * C921 - C13131 * C912) *
                 C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C13130 * C906 - C13126 * C911 + C13131 * C1261 - C13127 * C1273) *
                 C4702 +
             (C13130 * C912 - C13126 * C921 + C13131 * C1274 - C13127 * C1288) *
                 C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C13126 * C478 - C13130 * C468 + C13127 * C911 - C13131 * C906) *
                C4702 +
            (C13126 * C498 - C13130 * C479 + C13127 * C921 - C13131 * C912) *
                C30396) *
               C18743) *
              C30466 * C30448 * C108 +
          (((C13136 - C13135 + C13138 - C13137) * C4702 +
            (C13140 - C13139 + C13142 - C13141) * C30396) *
               C18742 +
           ((C13491 - C13492 + C13493 - C13494) * C4702 +
            (C13495 - C13496 + C13497 - C13498) * C30396) *
               C18743) *
              C30466 * C30448 * C109 +
          (((C13144 - C13143 + C13146 - C13145) * C4702 +
            (C13148 - C13147 + C13150 - C13149) * C30396) *
               C18742 +
           ((C13507 - C13508 + C13509 - C13510) * C4702 +
            (C13511 - C13512 + C13513 - C13514) * C30396) *
               C18743) *
              C30466 * C30448 * C110 +
          (((C13152 - C13151 + C13154 - C13153) * C4702 +
            (C13156 - C13155 + C13158 - C13157) * C30396) *
               C18742 +
           ((C13791 - C13792 + C13793 - C13794) * C4702 +
            (C13795 - C13796 + C13797 - C13798) * C30396) *
               C18743) *
              C30466 * C30448 * C111 +
          (((C13160 - C13159 + C13162 - C13161) * C4702 +
            (C13164 - C13163 + C13166 - C13165) * C30396) *
               C18742 +
           ((C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C4702 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C30396) *
               C18743) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30770 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30759 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30770 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30759 +
           (((C13500 - C13499 + C13502 - C13501) * C4702 +
             (C13504 - C13503 + C13506 - C13505) * C30396) *
                C18742 +
            ((C15559 - C15560 + C15561 - C15562) * C4702 +
             (C15563 - C15564 + C15565 - C15566) * C30396) *
                C18743) *
               C30735) *
              C30448 * C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30770 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30759 +
           (((C13516 - C13515 + C13518 - C13517) * C4702 +
             (C13520 - C13519 + C13522 - C13521) * C30396) *
                C18742 +
            ((C13126 * C1978 - C13130 * C1970 + C13127 * C2369 -
              C13131 * C2364) *
                 C4702 +
             (C13126 * C1988 - C13130 * C1979 + C13127 * C2373 -
              C13131 * C2370) *
                 C30396) *
                C18743) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C24515 - C24516 + C24517 - C24518) * C4702 +
            (C24519 - C24520 + C24521 - C24522) * C30396) *
               C18743) *
              C30466 * C1118 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C4702 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C30396) *
               C18742 +
           ((C24985 - C24986 + C24987 - C24988) * C4702 +
            (C24989 - C24990 + C24991 - C24992) * C30396) *
               C18743) *
              C30466 * C1119 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C4702 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C30396) *
               C18742 +
           ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
             C13131 * C1666) *
                C4702 +
            (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
             C13131 * C1670) *
                C30396) *
               C18743) *
              C30466 * C1120 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C4702 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C30396) *
               C18742 +
           ((C13130 * C1666 - C13126 * C1669 + C13131 * C5556 -
             C13127 * C5560) *
                C4702 +
            (C13130 * C1670 - C13126 * C1675 + C13131 * C5561 -
             C13127 * C5565) *
                C30396) *
               C18743) *
              C30466 * C1121 +
          (((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 -
             C13131 * C5437) *
                C4702 +
            (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 -
             C13131 * C5440) *
                C30396) *
               C18742 +
           ((C13126 * C5560 - C13130 * C5556 + C13127 * C5918 -
             C13131 * C5917) *
                C4702 +
            (C13126 * C5565 - C13130 * C5561 + C13127 * C5920 -
             C13131 * C5919) *
                C30396) *
               C18743) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30770 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30759 +
           (((C24524 - C24523 + C24526 - C24525) * C4702 +
             (C24528 - C24527 + C24530 - C24529) * C30396) *
                C18742 +
            ((C13126 * C1974 - C13130 * C1968 + C13127 * C2365 -
              C13131 * C2362) *
                 C4702 +
             (C13126 * C1986 - C13130 * C1975 + C13127 * C2371 -
              C13131 * C2366) *
                 C30396) *
                C18743) *
               C30735) *
              C1050 +
          ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30770 +
           (((C24986 - C24985 + C24988 - C24987) * C4702 +
             (C24990 - C24989 + C24992 - C24991) * C30396) *
                C18742 +
            ((C25367 - C25368 + C25369 - C25370) * C4702 +
             (C25371 - C25372 + C25373 - C25374) * C30396) *
                C18743) *
               C30759 +
           (((C25368 - C25367 + C25370 - C25369) * C4702 +
             (C25372 - C25371 + C25374 - C25373) * C30396) *
                C18742 +
            ((C13130 * C2362 - C13126 * C2365 + C13131 * C6203 -
              C13127 * C6206) *
                 C4702 +
             (C13130 * C2366 - C13126 * C2371 + C13131 * C6207 -
              C13127 * C6212) *
                 C30396) *
                C18743) *
               C30735) *
              C1051 +
          ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C25375 - C25376 + C25377 - C25378) * C4702 +
             (C25379 - C25380 + C25381 - C25382) * C30396) *
                C18743) *
               C30770 +
           (((C25376 - C25375 + C25378 - C25377) * C4702 +
             (C25380 - C25379 + C25382 - C25381) * C30396) *
                C18742 +
            ((C25383 - C25384 + C25385 - C25386) * C4702 +
             (C25387 - C25388 + C25389 - C25390) * C30396) *
                C18743) *
               C30759 +
           (((C25384 - C25383 + C25386 - C25385) * C4702 +
             (C25388 - C25387 + C25390 - C25389) * C30396) *
                C18742 +
            ((C13126 * C6206 - C13130 * C6203 + C13127 * C6566 -
              C13131 * C6565) *
                 C4702 +
             (C13126 * C6212 - C13130 * C6207 + C13127 * C6568 -
              C13131 * C6567) *
                 C30396) *
                C18743) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30702 +
           (((C24516 - C24515 + C24518 - C24517) * C4702 +
             (C24520 - C24519 + C24522 - C24521) * C30396) *
                C18742 +
            ((C24523 - C24524 + C24525 - C24526) * C4702 +
             (C24527 - C24528 + C24529 - C24530) * C30396) *
                C18743) *
               C30553) *
              C30448 * C636 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30702 +
           (((C13492 - C13491 + C13494 - C13493) * C4702 +
             (C13496 - C13495 + C13498 - C13497) * C30396) *
                C18742 +
            ((C13499 - C13500 + C13501 - C13502) * C4702 +
             (C13503 - C13504 + C13505 - C13506) * C30396) *
                C18743) *
               C30553) *
              C30448 * C637 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30702 +
           (((C13508 - C13507 + C13510 - C13509) * C4702 +
             (C13512 - C13511 + C13514 - C13513) * C30396) *
                C18742 +
            ((C13515 - C13516 + C13517 - C13518) * C4702 +
             (C13519 - C13520 + C13521 - C13522) * C30396) *
                C18743) *
               C30553) *
              C30448 * C638 +
          ((((C13152 - C13151 + C13154 - C13153) * C4702 +
             (C13156 - C13155 + C13158 - C13157) * C30396) *
                C18742 +
            ((C13791 - C13792 + C13793 - C13794) * C4702 +
             (C13795 - C13796 + C13797 - C13798) * C30396) *
                C18743) *
               C30702 +
           (((C13792 - C13791 + C13794 - C13793) * C4702 +
             (C13796 - C13795 + C13798 - C13797) * C30396) *
                C18742 +
            ((C13126 * C492 - C13130 * C475 + C13127 * C2139 - C13131 * C2138) *
                 C4702 +
             (C13126 * C505 - C13130 * C493 + C13127 * C2141 - C13131 * C2140) *
                 C30396) *
                C18743) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                  C4702 +
              (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                  C30396) *
                 C18742 +
             ((C24515 - C24516 + C24517 - C24518) * C4702 +
              (C24519 - C24520 + C24521 - C24522) * C30396) *
                 C18743) *
                C30702 +
            (((C24516 - C24515 + C24518 - C24517) * C4702 +
              (C24520 - C24519 + C24522 - C24521) * C30396) *
                 C18742 +
             ((C24523 - C24524 + C24525 - C24526) * C4702 +
              (C24527 - C24528 + C24529 - C24530) * C30396) *
                 C18743) *
                C30553) *
               C1050 +
           ((((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                  C4702 +
              (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                  C30396) *
                 C18742 +
             ((C24985 - C24986 + C24987 - C24988) * C4702 +
              (C24989 - C24990 + C24991 - C24992) * C30396) *
                 C18743) *
                C30702 +
            (((C24986 - C24985 + C24988 - C24987) * C4702 +
              (C24990 - C24989 + C24992 - C24991) * C30396) *
                 C18742 +
             ((C25367 - C25368 + C25369 - C25370) * C4702 +
              (C25371 - C25372 + C25373 - C25374) * C30396) *
                 C18743) *
                C30553) *
               C1051 +
           ((((C13126 * C303 - C13130 * C290 + C13127 * C1130 -
               C13131 * C1124) *
                  C4702 +
              (C13126 * C320 - C13130 * C304 + C13127 * C1142 -
               C13131 * C1131) *
                  C30396) *
                 C18742 +
             ((C25375 - C25376 + C25377 - C25378) * C4702 +
              (C25379 - C25380 + C25381 - C25382) * C30396) *
                 C18743) *
                C30702 +
            (((C25376 - C25375 + C25378 - C25377) * C4702 +
              (C25380 - C25379 + C25382 - C25381) * C30396) *
                 C18742 +
             ((C25383 - C25384 + C25385 - C25386) * C4702 +
              (C25387 - C25388 + C25389 - C25390) * C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C30687 +
          (((((C13136 - C13135 + C13138 - C13137) * C4702 +
              (C13140 - C13139 + C13142 - C13141) * C30396) *
                 C18742 +
             ((C13491 - C13492 + C13493 - C13494) * C4702 +
              (C13495 - C13496 + C13497 - C13498) * C30396) *
                 C18743) *
                C30702 +
            (((C13492 - C13491 + C13494 - C13493) * C4702 +
              (C13496 - C13495 + C13498 - C13497) * C30396) *
                 C18742 +
             ((C13499 - C13500 + C13501 - C13502) * C4702 +
              (C13503 - C13504 + C13505 - C13506) * C30396) *
                 C18743) *
                C30553) *
               C1050 +
           ((((C13314 - C13313 + C13316 - C13315) * C4702 +
              (C13318 - C13317 + C13320 - C13319) * C30396) *
                 C18742 +
             ((C13993 - C13994 + C13995 - C13996) * C4702 +
              (C13997 - C13998 + C13999 - C14000) * C30396) *
                 C18743) *
                C30702 +
            (((C13994 - C13993 + C13996 - C13995) * C4702 +
              (C13998 - C13997 + C14000 - C13999) * C30396) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C4702 +
              (C15425 - C15426 + C15427 - C15428) * C30396) *
                 C18743) *
                C30553) *
               C1051 +
           ((((C13322 - C13321 + C13324 - C13323) * C4702 +
              (C13326 - C13325 + C13328 - C13327) * C30396) *
                 C18742 +
             ((C14715 - C14716 + C14717 - C14718) * C4702 +
              (C14719 - C14720 + C14721 - C14722) * C30396) *
                 C18743) *
                C30702 +
            (((C14716 - C14715 + C14718 - C14717) * C4702 +
              (C14720 - C14719 + C14722 - C14721) * C30396) *
                 C18742 +
             ((C13126 * C1281 - C13130 * C1265 + C13127 * C6362 -
               C13131 * C6361) *
                  C4702 +
              (C13126 * C1292 - C13130 * C1282 + C13127 * C6364 -
               C13131 * C6363) *
                  C30396) *
                 C18743) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C13126 * C478 - C13130 * C468 + C13127 * C911 - C13131 * C906) *
                C4702 +
            (C13126 * C498 - C13130 * C479 + C13127 * C921 - C13131 * C912) *
                C30396) *
               C18743) *
              C30466 * C30448 * C108 +
          (((C13136 - C13135 + C13138 - C13137) * C4702 +
            (C13140 - C13139 + C13142 - C13141) * C30396) *
               C18742 +
           ((C13491 - C13492 + C13493 - C13494) * C4702 +
            (C13495 - C13496 + C13497 - C13498) * C30396) *
               C18743) *
              C30466 * C30448 * C109 +
          (((C13144 - C13143 + C13146 - C13145) * C4702 +
            (C13148 - C13147 + C13150 - C13149) * C30396) *
               C18742 +
           ((C13507 - C13508 + C13509 - C13510) * C4702 +
            (C13511 - C13512 + C13513 - C13514) * C30396) *
               C18743) *
              C30466 * C30448 * C110 +
          (((C13152 - C13151 + C13154 - C13153) * C4702 +
            (C13156 - C13155 + C13158 - C13157) * C30396) *
               C18742 +
           ((C13791 - C13792 + C13793 - C13794) * C4702 +
            (C13795 - C13796 + C13797 - C13798) * C30396) *
               C18743) *
              C30466 * C30448 * C111 +
          (((C13160 - C13159 + C13162 - C13161) * C4702 +
            (C13164 - C13163 + C13166 - C13165) * C30396) *
               C18742 +
           ((C13126 * C494 - C13130 * C476 + C13127 * C919 - C13131 * C910) *
                C4702 +
            (C13126 * C506 - C13130 * C495 + C13127 * C925 - C13131 * C920) *
                C30396) *
               C18743) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C13126 * C478 - C13130 * C468 + C13127 * C911 - C13131 * C906) *
                 C4702 +
             (C13126 * C498 - C13130 * C479 + C13127 * C921 - C13131 * C912) *
                 C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C13130 * C906 - C13126 * C911 + C13131 * C1261 - C13127 * C1273) *
                 C4702 +
             (C13130 * C912 - C13126 * C921 + C13131 * C1274 - C13127 * C1288) *
                 C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C284 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C285 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C30769 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C30757 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                 C4702 +
             (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                 C30396) *
                C18742 +
            ((C24515 - C24516 + C24517 - C24518) * C4702 +
             (C24519 - C24520 + C24521 - C24522) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                 C4702 +
             (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                 C30396) *
                C18742 +
            ((C24985 - C24986 + C24987 - C24988) * C4702 +
             (C24989 - C24990 + C24991 - C24992) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                 C4702 +
             (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                 C30396) *
                C18742 +
            ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
              C13131 * C1666) *
                 C4702 +
             (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
              C13131 * C1670) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30766 +
          ((((C13136 - C13135 + C13138 - C13137) * C4702 +
             (C13140 - C13139 + C13142 - C13141) * C30396) *
                C18742 +
            ((C13491 - C13492 + C13493 - C13494) * C4702 +
             (C13495 - C13496 + C13497 - C13498) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13314 - C13313 + C13316 - C13315) * C4702 +
             (C13318 - C13317 + C13320 - C13319) * C30396) *
                C18742 +
            ((C13993 - C13994 + C13995 - C13996) * C4702 +
             (C13997 - C13998 + C13999 - C14000) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13322 - C13321 + C13324 - C13323) * C4702 +
             (C13326 - C13325 + C13328 - C13327) * C30396) *
                C18742 +
            ((C14715 - C14716 + C14717 - C14718) * C4702 +
             (C14719 - C14720 + C14721 - C14722) * C30396) *
                C18743) *
               C30466 * C30732) *
              C30753 +
          ((((C13144 - C13143 + C13146 - C13145) * C4702 +
             (C13148 - C13147 + C13150 - C13149) * C30396) *
                C18742 +
            ((C13507 - C13508 + C13509 - C13510) * C4702 +
             (C13511 - C13512 + C13513 - C13514) * C30396) *
                C18743) *
               C30466 * C1050 +
           (((C13330 - C13329 + C13332 - C13331) * C4702 +
             (C13334 - C13333 + C13336 - C13335) * C30396) *
                C18742 +
            ((C14001 - C14002 + C14003 - C14004) * C4702 +
             (C14005 - C14006 + C14007 - C14008) * C30396) *
                C18743) *
               C30466 * C1051 +
           (((C13338 - C13337 + C13340 - C13339) * C4702 +
             (C13342 - C13341 + C13344 - C13343) * C30396) *
                C18742 +
            ((C13126 * C1277 - C13130 * C1263 + C13127 * C1673 -
              C13131 * C1668) *
                 C4702 +
             (C13126 * C1290 - C13130 * C1278 + C13127 * C1677 -
              C13131 * C1674) *
                 C30396) *
                C18743) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C297 - C13131 * C287) *
                C4702 +
            (C13126 * C138 - C13130 * C125 + C13127 * C317 - C13131 * C298) *
                C30396) *
               C18742 +
           ((C24515 - C24516 + C24517 - C24518) * C4702 +
            (C24519 - C24520 + C24521 - C24522) * C30396) *
               C18743) *
              C30466 * C1118 +
          (((C13130 * C287 - C13126 * C297 + C13131 * C290 - C13127 * C303) *
                C4702 +
            (C13130 * C298 - C13126 * C317 + C13131 * C304 - C13127 * C320) *
                C30396) *
               C18742 +
           ((C24985 - C24986 + C24987 - C24988) * C4702 +
            (C24989 - C24990 + C24991 - C24992) * C30396) *
               C18743) *
              C30466 * C1119 +
          (((C13126 * C303 - C13130 * C290 + C13127 * C1130 - C13131 * C1124) *
                C4702 +
            (C13126 * C320 - C13130 * C304 + C13127 * C1142 - C13131 * C1131) *
                C30396) *
               C18742 +
           ((C13126 * C1273 - C13130 * C1261 + C13127 * C1669 -
             C13131 * C1666) *
                C4702 +
            (C13126 * C1288 - C13130 * C1274 + C13127 * C1675 -
             C13131 * C1670) *
                C30396) *
               C18743) *
              C30466 * C1120 +
          (((C13130 * C1124 - C13126 * C1130 + C13131 * C1127 -
             C13127 * C1136) *
                C4702 +
            (C13130 * C1131 - C13126 * C1142 + C13131 * C1137 -
             C13127 * C1145) *
                C30396) *
               C18742 +
           ((C13130 * C1666 - C13126 * C1669 + C13131 * C5556 -
             C13127 * C5560) *
                C4702 +
            (C13130 * C1670 - C13126 * C1675 + C13131 * C5561 -
             C13127 * C5565) *
                C30396) *
               C18743) *
              C30466 * C1121 +
          (((C13126 * C1136 - C13130 * C1127 + C13127 * C5439 -
             C13131 * C5437) *
                C4702 +
            (C13126 * C1145 - C13130 * C1137 + C13127 * C5443 -
             C13131 * C5440) *
                C30396) *
               C18742 +
           ((C13126 * C5560 - C13130 * C5556 + C13127 * C5918 -
             C13131 * C5917) *
                C4702 +
            (C13126 * C5565 - C13130 * C5561 + C13127 * C5920 -
             C13131 * C5919) *
                C30396) *
               C18743) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30507 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30514 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C2840) *
              C30425 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30507 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30514 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C2840) *
              C30434 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30507 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30514 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C2840) *
              C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30507 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30514 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C2840) *
              C30425 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30507 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30514 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C2840) *
              C30434 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30507 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30514 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C2840) *
              C2843)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C30507 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C30514 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30466 * C2840) *
              C30425 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C30507 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            C10590 * C8865) *
               C30466 * C30514 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
               C30466 * C2840) *
              C30434 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C30507 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30514 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C2840) *
              C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30514 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C30702 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C2840) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30514 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C30702 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30702 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C30507 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30702 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30514 +
           ((((C30631 * C303 - C113 * C290) * C4702 +
              (C30631 * C320 - C113 * C304) * C30396) *
                 C8863 +
             ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
             C9769 * C8865) *
                C30702 +
            (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
             ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
             ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
                C30553) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30702 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C30507 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C30702 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30514 +
           ((((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
             ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
             ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
                C30702 +
            (((C1562 - C1561) * C4702 + (C1564 - C1563) * C30396) * C8863 +
             ((C10015 - C10014) * C4702 + (C10017 - C10016) * C30396) * C8864 +
             ((C30631 * C6464 - C113 * C6463) * C4702 +
              (C30631 * C6466 - C113 * C6465) * C30396) *
                 C8865) *
                C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C2472 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C30511) *
                  C30775 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C2472 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                C646 * C104) *
                   C30645 * C30466 * C30511) *
                  C30768 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30466 * C2472 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C647 - C648) * C116 +
                (C649 - C650) * C104) *
                   C30645 * C30466 * C30511) *
                  C30755 +
              ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
                (C161 - C160) * C103 + (C162 - C163) * C116 +
                (C164 - C165) * C104) *
                   C30645 * C30466 * C2472 +
               (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
                (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
                (C30631 * C643 - C113 * C642) * C104) *
                   C30645 * C30466 * C30511) *
                  C30736) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C30776 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C30772 +
               ((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30466 * C30762 +
               ((C113 * C1124 - C30631 * C1130) * C114 +
                (C113 * C1131 - C30631 * C1142) * C102 +
                (C1403 - C1404) * C115 + (C1405 - C1406) * C103 +
                (C1407 - C1408) * C116 + (C1409 - C1410) * C104) *
                   C30645 * C30466 * C30742) *
                  C2580 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C30776 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                C646 * C104) *
                   C30645 * C30466 * C30772 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C30645 * C30466 * C30762 +
               ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
                (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
                (C30631 * C1399 - C113 * C1398) * C116 +
                (C30631 * C1401 - C113 * C1400) * C104) *
                   C30645 * C30466 * C30742) *
                  C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30770 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30759 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C30735) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30770 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30759 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C30735) *
               C30511) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30770 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30759 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C30735) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30770 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30759 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30770 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30759 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C30735) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30770 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30759 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30770 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30759 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C30735) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30770 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30759 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C2472 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C30511) *
              C30775 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C2472 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            C10590 * C8865) *
               C30466 * C30511) *
              C30768 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C2472 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30511) *
              C30755 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C30466 * C2472 +
           ((C645 * C4702 + C646 * C30396) * C8863 +
            ((C936 - C935) * C4702 + (C938 - C937) * C30396) * C8864 +
            ((C30631 * C2139 - C113 * C2138) * C4702 +
             (C30631 * C2141 - C113 * C2140) * C30396) *
                C8865) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C30776 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C30772 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30466 * C30762 +
           (((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C10116 - C10117) * C4702 + (C10118 - C10119) * C30396) * C8864 +
            ((C10120 - C10121) * C4702 + (C10122 - C10123) * C30396) * C8865) *
               C30466 * C30742) *
              C2580 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C30776 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            C10590 * C8865) *
               C30466 * C30772 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
               C30466 * C30762 +
           (((C1404 - C1403) * C4702 + (C1406 - C1405) * C30396) * C8863 +
            ((C30631 * C1671 - C113 * C1667) * C4702 +
             (C30631 * C1676 - C113 * C1672) * C30396) *
                C8864 +
            ((C30631 * C6362 - C113 * C6361) * C4702 +
             (C30631 * C6364 - C113 * C6363) * C30396) *
                C8865) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30770 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30759 +
            (C9111 * C8863 +
             ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
             C10431 * C8865) *
                C30735) *
               C2472 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30770 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30759 +
            (C9766 * C8863 +
             ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
             ((C10806 - C10807) * C4702 + (C10808 - C10809) * C30396) * C8865) *
                C30735) *
               C30511) *
              C2580 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30770 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30759 +
            (C9110 * C8863 +
             ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
             ((C10695 - C10696) * C4702 + (C10697 - C10698) * C30396) * C8865) *
                C30735) *
               C2472 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C30770 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30759 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C4702 + (C10587 - C10586) * C30396) * C8864 +
             ((C30631 * C10578 - C113 * C10577) * C4702 +
              (C30631 * C10580 - C113 * C10579) * C30396) *
                 C8865) *
                C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C30702 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C30702 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30702 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C2472 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30702 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30511) *
              C30425 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30702 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C2472 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C30702 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30511) *
              C30434 +
          ((((C166 * C4702 + C167 * C30396) * C8863 +
             ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
             C9107 * C8865) *
                C30702 +
            ((C533 * C4702 + C534 * C30396) * C8863 +
             ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
             ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
                C30553) *
               C2472 +
           (((C352 * C4702 + C353 * C30396) * C8863 +
             ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
             ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
                C30702 +
            ((C939 * C4702 + C940 * C30396) * C8863 +
             ((C2148 - C2147) * C4702 + (C2150 - C2149) * C30396) * C8864 +
             ((C30631 * C2369 - C113 * C2364) * C4702 +
              (C30631 * C2373 - C113 * C2370) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30776 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30772 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30762 +
           ((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30776 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30772 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30762 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C30631 * C1399 - C113 * C1398) * C116 +
            (C30631 * C1401 - C113 * C1400) * C104) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C2472 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30511) *
              C30768 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30511) *
              C30755 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30466 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
            (C30631 * C643 - C113 * C642) * C104) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C2472 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C30511) *
              C30775 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C2472 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            C10590 * C8865) *
               C30466 * C30511) *
              C30768 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C2472 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30511) *
              C30755 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C30466 * C2472 +
           ((C645 * C4702 + C646 * C30396) * C8863 +
            ((C936 - C935) * C4702 + (C938 - C937) * C30396) * C8864 +
            ((C30631 * C2139 - C113 * C2138) * C4702 +
             (C30631 * C2141 - C113 * C2140) * C30396) *
                C8865) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C30776 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C30772 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30466 * C30762 +
           (((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C10116 - C10117) * C4702 + (C10118 - C10119) * C30396) * C8864 +
            ((C10120 - C10121) * C4702 + (C10122 - C10123) * C30396) * C8865) *
               C30466 * C30742) *
              C2580 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C30776 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            C10590 * C8865) *
               C30466 * C30772 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
               C30466 * C30762 +
           (((C1404 - C1403) * C4702 + (C1406 - C1405) * C30396) * C8863 +
            ((C30631 * C1671 - C113 * C1667) * C4702 +
             (C30631 * C1676 - C113 * C1672) * C30396) *
                C8864 +
            ((C30631 * C6362 - C113 * C6361) * C4702 +
             (C30631 * C6364 - C113 * C6363) * C30396) *
                C8865) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30514 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C3234 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C2840) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30514 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C3234 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C30507 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C3234 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30514 +
           ((((C30631 * C303 - C113 * C290) * C4702 +
              (C30631 * C320 - C113 * C304) * C30396) *
                 C8863 +
             ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
             C9769 * C8865) *
                C3234 +
            (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
             ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
             ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
                C30553) *
               C2840) *
              C30687 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C3234 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C30507 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C3234 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30514 +
           ((((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
             ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
             ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
                C3234 +
            (((C1562 - C1561) * C4702 + (C1564 - C1563) * C30396) * C8863 +
             ((C10015 - C10014) * C4702 + (C10017 - C10016) * C30396) * C8864 +
             ((C30631 * C6464 - C113 * C6463) * C4702 +
              (C30631 * C6466 - C113 * C6465) * C30396) *
                 C8865) *
                C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C3742) *
              C30507 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30549 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30556 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C3742) *
              C30514 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C3742) *
              C2840) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30549 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30556 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C3742) *
              C30507 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30549 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30556 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C30645 * C3742) *
              C30514 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30549 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30556 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C3742) *
              C2840) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30549 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30556 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            C10431 * C8865) *
               C3742) *
              C30507 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30549 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            C10812 * C8865) *
               C30556 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C10806 - C10807) * C4702 + (C10808 - C10809) * C30396) * C8865) *
               C3742) *
              C30514 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30549 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30556 +
           (C9769 * C8863 +
            ((C9759 - C9758) * C4702 + (C9761 - C9760) * C30396) * C8864 +
            ((C30631 * C6209 - C113 * C6205) * C4702 +
             (C30631 * C6214 - C113 * C6211) * C30396) *
                C8865) *
               C3742) *
              C2840) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30631 * C124 - C113 * C117) * C114 +
                 (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                 (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                    C30645 * C3234 +
                ((C113 * C468 - C30631 * C478) * C114 +
                 (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                 (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                    C30645 * C30553) *
                   C2472 +
               (((C113 * C287 - C30631 * C297) * C114 +
                 (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                 (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                    C30645 * C3234 +
                ((C30631 * C911 - C113 * C906) * C114 +
                 (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                 (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                    C30645 * C30553) *
                   C30511) *
                  C30766 +
              ((((C147 - C146) * C114 + (C149 - C148) * C102 +
                 (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                 C169 * C104) *
                    C30645 * C3234 +
                ((C510 - C509) * C114 + (C512 - C511) * C102 +
                 (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                 C756 * C104) *
                    C30645 * C30553) *
                   C2472 +
               (((C329 - C328) * C114 + (C331 - C330) * C102 +
                 (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                 C646 * C104) *
                    C30645 * C3234 +
                ((C928 - C927) * C114 + (C930 - C929) * C102 +
                 (C932 - C931) * C115 + (C934 - C933) * C103 +
                 (C935 - C936) * C116 + (C937 - C938) * C104) *
                    C30645 * C30553) *
                   C30511) *
                  C30753 +
              (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                 (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                    C30645 * C3234 +
                (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
                 (C528 - C527) * C103 + (C757 - C758) * C116 +
                 (C759 - C760) * C104) *
                    C30645 * C30553) *
                   C2472 +
               ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                 (C347 - C346) * C103 + (C647 - C648) * C116 +
                 (C649 - C650) * C104) *
                    C30645 * C3234 +
                (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
                 (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
                 (C30631 * C925 - C113 * C920) * C104) *
                    C30645 * C30553) *
                   C30511) *
                  C30726) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C3234 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C30553) *
                  C30776 +
              (((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C3234 +
               ((C30631 * C911 - C113 * C906) * C114 +
                (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                   C30645 * C30553) *
                  C30772 +
              (((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C3234 +
               ((C113 * C1261 - C30631 * C1273) * C114 +
                (C113 * C1274 - C30631 * C1288) * C102 +
                (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                   C30645 * C30553) *
                  C30762 +
              (((C113 * C1124 - C30631 * C1130) * C114 +
                (C113 * C1131 - C30631 * C1142) * C102 +
                (C1403 - C1404) * C115 + (C1405 - C1406) * C103 +
                (C1407 - C1408) * C116 + (C1409 - C1410) * C104) *
                   C30645 * C3234 +
               ((C30631 * C1669 - C113 * C1666) * C114 +
                (C30631 * C1675 - C113 * C1670) * C102 +
                (C30631 * C1671 - C113 * C1667) * C115 +
                (C30631 * C1676 - C113 * C1672) * C103 +
                (C30631 * C1673 - C113 * C1668) * C116 +
                (C30631 * C1677 - C113 * C1674) * C104) *
                   C30645 * C30553) *
                  C30742) *
             C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30777 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30774 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30765 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C2472 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30777 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30774 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C30645 * C30765 +
           ((C30631 * C2365 - C113 * C2362) * C114 +
            (C30631 * C2371 - C113 * C2366) * C102 +
            (C30631 * C2367 - C113 * C2363) * C115 +
            (C30631 * C2372 - C113 * C2368) * C103 +
            (C30631 * C2369 - C113 * C2364) * C116 +
            (C30631 * C2373 - C113 * C2370) * C104) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30776 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C30772 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C30762 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30777 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30774 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30765 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C2472 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30777 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30774 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30765 +
           ((C4695 * C2365 - C4699 * C2362 + C4696 * C6206 - C4700 * C6203 +
             C4697 * C6566 - C4701 * C6565) *
                C4702 +
            (C4695 * C2371 - C4699 * C2366 + C4696 * C6212 - C4700 * C6207 +
             C4697 * C6568 - C4701 * C6567) *
                C30396) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C3234 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C2472 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C3234 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30511) *
              C30766 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C3234 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C2472 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C3234 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30511) *
              C30753 +
          ((((C166 * C4702 + C167 * C30396) * C8863 +
             ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
             C9107 * C8865) *
                C3234 +
            ((C533 * C4702 + C534 * C30396) * C8863 +
             ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
             ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
                C30553) *
               C2472 +
           (((C352 * C4702 + C353 * C30396) * C8863 +
             ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
             ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
                C3234 +
            ((C939 * C4702 + C940 * C30396) * C8863 +
             ((C2148 - C2147) * C4702 + (C2150 - C2149) * C30396) * C8864 +
             ((C30631 * C2369 - C113 * C2364) * C4702 +
              (C30631 * C2373 - C113 * C2370) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C3234 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30553) *
              C30776 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C3234 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            C10812 * C8865) *
               C30553) *
              C30772 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C3234 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30553) *
              C30762 +
          ((((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C10116 - C10117) * C4702 + (C10118 - C10119) * C30396) * C8864 +
            ((C10120 - C10121) * C4702 + (C10122 - C10123) * C30396) * C8865) *
               C3234 +
           (((C10117 - C10116) * C4702 + (C10119 - C10118) * C30396) * C8863 +
            ((C10121 - C10120) * C4702 + (C10123 - C10122) * C30396) * C8864 +
            ((C30631 * C6566 - C113 * C6565) * C4702 +
             (C30631 * C6568 - C113 * C6567) * C30396) *
                C8865) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30777 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30774 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            C10431 * C8865) *
               C30765 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C4702 + (C10419 - C10418) * C30396) * C8864 +
            ((C10420 - C10421) * C4702 + (C10422 - C10423) * C30396) * C8865) *
               C30748) *
              C2472 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30777 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            C10812 * C8865) *
               C30774 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C10806 - C10807) * C4702 + (C10808 - C10809) * C30396) * C8865) *
               C30765 +
           (C10812 * C8863 +
            ((C10807 - C10806) * C4702 + (C10809 - C10808) * C30396) * C8864 +
            ((C30631 * C10800 - C113 * C10799) * C4702 +
             (C30631 * C10802 - C113 * C10801) * C30396) *
                C8865) *
               C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C3742) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C3742) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30549 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30556 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C3742) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30549 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30556 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C3742) *
               C30511) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30549 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30556 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C3742) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30549 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30556 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30549 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30556 +
            (C9111 * C8863 +
             ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
             C10431 * C8865) *
                C3742) *
               C2472 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30549 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30556 +
            (C9766 * C8863 +
             ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
             ((C10806 - C10807) * C4702 + (C10808 - C10809) * C30396) * C8865) *
                C3742) *
               C30511) *
              C30687 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30549 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30556 +
            (C9110 * C8863 +
             ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
             ((C10695 - C10696) * C4702 + (C10697 - C10698) * C30396) * C8865) *
                C3742) *
               C2472 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C30549 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30556 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C4702 + (C10587 - C10586) * C30396) * C8864 +
             ((C30631 * C10578 - C113 * C10577) * C4702 +
              (C30631 * C10580 - C113 * C10579) * C30396) *
                 C8865) *
                C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C3234 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30776 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C3234 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30553) *
              C30772 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C3234 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30553) *
              C30762 +
          (((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C3234 +
           ((C30631 * C1669 - C113 * C1666) * C114 +
            (C30631 * C1675 - C113 * C1670) * C102 +
            (C30631 * C1671 - C113 * C1667) * C115 +
            (C30631 * C1676 - C113 * C1672) * C103 +
            (C30631 * C1673 - C113 * C1668) * C116 +
            (C30631 * C1677 - C113 * C1674) * C104) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30776 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C30772 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C30762 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C3234 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C2472 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C3234 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30511) *
              C30766 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C3234 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C2472 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C3234 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30511) *
              C30753 +
          ((((C166 * C4702 + C167 * C30396) * C8863 +
             ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
             C9107 * C8865) *
                C3234 +
            ((C533 * C4702 + C534 * C30396) * C8863 +
             ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
             ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
                C30553) *
               C2472 +
           (((C352 * C4702 + C353 * C30396) * C8863 +
             ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
             ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
                C3234 +
            ((C939 * C4702 + C940 * C30396) * C8863 +
             ((C2148 - C2147) * C4702 + (C2150 - C2149) * C30396) * C8864 +
             ((C30631 * C2369 - C113 * C2364) * C4702 +
              (C30631 * C2373 - C113 * C2370) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C3234 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30553) *
              C30776 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C3234 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            C10812 * C8865) *
               C30553) *
              C30772 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C3234 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30553) *
              C30762 +
          ((((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C10116 - C10117) * C4702 + (C10118 - C10119) * C30396) * C8864 +
            ((C10120 - C10121) * C4702 + (C10122 - C10123) * C30396) * C8865) *
               C3234 +
           (((C10117 - C10116) * C4702 + (C10119 - C10118) * C30396) * C8863 +
            ((C10121 - C10120) * C4702 + (C10123 - C10122) * C30396) * C8864 +
            ((C30631 * C6566 - C113 * C6565) * C4702 +
             (C30631 * C6568 - C113 * C6567) * C30396) *
                C8865) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C30701 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C30511) *
                  C636 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C30701 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                C646 * C104) *
                   C30645 * C30466 * C30511) *
                  C637 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30466 * C30701 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C647 - C648) * C116 +
                (C649 - C650) * C104) *
                   C30645 * C30466 * C30511) *
                  C638 +
              ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
                (C161 - C160) * C103 + (C162 - C163) * C116 +
                (C164 - C165) * C104) *
                   C30645 * C30466 * C30701 +
               (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
                (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
                (C30631 * C643 - C113 * C642) * C104) *
                   C30645 * C30466 * C30511) *
                  C30736) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C1392 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C1393 +
               ((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30466 * C1394 +
               ((C113 * C1124 - C30631 * C1130) * C114 +
                (C113 * C1131 - C30631 * C1142) * C102 +
                (C1403 - C1404) * C115 + (C1405 - C1406) * C103 +
                (C1407 - C1408) * C116 + (C1409 - C1410) * C104) *
                   C30645 * C30466 * C30742) *
                  C30687 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C1392 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                C646 * C104) *
                   C30645 * C30466 * C1393 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C30645 * C30466 * C1394 +
               ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
                (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
                (C30631 * C1399 - C113 * C1398) * C116 +
                (C30631 * C1401 - C113 * C1400) * C104) *
                   C30645 * C30466 * C30742) *
                  C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C1788 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C1789 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C30735) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C1788 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C1789 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C30735) *
               C30511) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C1788 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C1789 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C30735) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C1788 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C1789 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C1788 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C1789 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C30735) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C1788 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C1789 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C1788 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C1789 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C30735) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C1788 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C1789 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C30701 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C113 * C906 - C30631 * C911) * C4702 +
             (C113 * C912 - C30631 * C921) * C30396) *
                C8864 +
            ((C113 * C1258 - C30631 * C1267) * C4702 +
             (C113 * C1268 - C30631 * C1285) * C30396) *
                C8865) *
               C30466 * C30511) *
              C636 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C30701 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C30511) *
              C637 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C30701 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30511) *
              C638 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C30466 * C30701 +
           ((C645 * C4702 + C646 * C30396) * C8863 +
            ((C936 - C935) * C4702 + (C938 - C937) * C30396) * C8864 +
            ((C30631 * C2139 - C113 * C2138) * C4702 +
             (C30631 * C2141 - C113 * C2140) * C30396) *
                C8865) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C1392 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C1393 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30466 * C1394 +
           (((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C113 * C1666 - C30631 * C1669) * C4702 +
             (C113 * C1670 - C30631 * C1675) * C30396) *
                C8864 +
            ((C113 * C5555 - C30631 * C5558) * C4702 +
             (C113 * C5559 - C30631 * C5564) * C30396) *
                C8865) *
               C30466 * C30742) *
              C30687 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C1392 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C1393 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C1394 +
           (((C1404 - C1403) * C4702 + (C1406 - C1405) * C30396) * C8863 +
            ((C30631 * C1671 - C113 * C1667) * C4702 +
             (C30631 * C1676 - C113 * C1672) * C30396) *
                C8864 +
            ((C30631 * C6362 - C113 * C6361) * C4702 +
             (C30631 * C6364 - C113 * C6363) * C30396) *
                C8865) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C1788 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C1789 +
            (C9111 * C8863 +
             ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
             C10431 * C8865) *
                C30735) *
               C30701 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C1788 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
                C1789 +
            (C9766 * C8863 +
             ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
             ((C113 * C6204 - C30631 * C6208) * C4702 +
              (C113 * C6210 - C30631 * C6213) * C30396) *
                 C8865) *
                C30735) *
               C30511) *
              C30687 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C1788 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
                C1789 +
            (C9110 * C8863 +
             ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
             ((C113 * C1972 - C30631 * C1982) * C4702 +
              (C113 * C1983 - C30631 * C1990) * C30396) *
                 C8865) *
                C30735) *
               C30701 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C1788 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C1789 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C4702 + (C10587 - C10586) * C30396) * C8864 +
             ((C30631 * C10578 - C113 * C10577) * C4702 +
              (C30631 * C10580 - C113 * C10579) * C30396) *
                 C8865) *
                C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30631 * C124 - C113 * C117) * C114 +
                 (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                 (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                    C30645 * C30702 +
                ((C113 * C468 - C30631 * C478) * C114 +
                 (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                 (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                    C30645 * C30553) *
                   C30701 +
               (((C113 * C287 - C30631 * C297) * C114 +
                 (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                 (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                    C30645 * C30702 +
                ((C30631 * C911 - C113 * C906) * C114 +
                 (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                 (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                    C30645 * C30553) *
                   C30511) *
                  C284 +
              ((((C147 - C146) * C114 + (C149 - C148) * C102 +
                 (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                 C169 * C104) *
                    C30645 * C30702 +
                ((C510 - C509) * C114 + (C512 - C511) * C102 +
                 (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                 C756 * C104) *
                    C30645 * C30553) *
                   C30701 +
               (((C329 - C328) * C114 + (C331 - C330) * C102 +
                 (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                 C646 * C104) *
                    C30645 * C30702 +
                ((C928 - C927) * C114 + (C930 - C929) * C102 +
                 (C932 - C931) * C115 + (C934 - C933) * C103 +
                 (C935 - C936) * C116 + (C937 - C938) * C104) *
                    C30645 * C30553) *
                   C30511) *
                  C285 +
              (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                 (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                    C30645 * C30702 +
                (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
                 (C528 - C527) * C103 + (C757 - C758) * C116 +
                 (C759 - C760) * C104) *
                    C30645 * C30553) *
                   C30701 +
               ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                 (C347 - C346) * C103 + (C647 - C648) * C116 +
                 (C649 - C650) * C104) *
                    C30645 * C30702 +
                (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
                 (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
                 (C30631 * C925 - C113 * C920) * C104) *
                    C30645 * C30553) *
                   C30511) *
                  C30726) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30702 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C30553) *
                  C1392 +
              (((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30702 +
               ((C30631 * C911 - C113 * C906) * C114 +
                (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                   C30645 * C30553) *
                  C1393 +
              (((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30702 +
               ((C113 * C1261 - C30631 * C1273) * C114 +
                (C113 * C1274 - C30631 * C1288) * C102 +
                (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                   C30645 * C30553) *
                  C1394 +
              (((C113 * C1124 - C30631 * C1130) * C114 +
                (C113 * C1131 - C30631 * C1142) * C102 +
                (C1403 - C1404) * C115 + (C1405 - C1406) * C103 +
                (C1407 - C1408) * C116 + (C1409 - C1410) * C104) *
                   C30645 * C30702 +
               ((C30631 * C1669 - C113 * C1666) * C114 +
                (C30631 * C1675 - C113 * C1670) * C102 +
                (C30631 * C1671 - C113 * C1667) * C115 +
                (C30631 * C1676 - C113 * C1672) * C103 +
                (C30631 * C1673 - C113 * C1668) * C116 +
                (C30631 * C1677 - C113 * C1674) * C104) *
                   C30645 * C30553) *
                  C30742) *
             C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C2248 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C2249 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C2250 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C30701 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C2248 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C2249 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C30645 * C2250 +
           ((C30631 * C2365 - C113 * C2362) * C114 +
            (C30631 * C2371 - C113 * C2366) * C102 +
            (C30631 * C2367 - C113 * C2363) * C115 +
            (C30631 * C2372 - C113 * C2368) * C103 +
            (C30631 * C2369 - C113 * C2364) * C116 +
            (C30631 * C2373 - C113 * C2370) * C104) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C285 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C1392 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C1393 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C1394 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C2248 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C2249 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C2250 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C30701 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C2248 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C2249 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C2250 +
           ((C4695 * C2365 - C4699 * C2362 + C4696 * C6206 - C4700 * C6203 +
             C4697 * C6566 - C4701 * C6565) *
                C4702 +
            (C4695 * C2371 - C4699 * C2366 + C4696 * C6212 - C4700 * C6207 +
             C4697 * C6568 - C4701 * C6567) *
                C30396) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30702 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
                C30553) *
               C30701 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
                C30702 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             ((C30631 * C2365 - C113 * C2362) * C4702 +
              (C30631 * C2371 - C113 * C2366) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C284 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30702 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
                C30553) *
               C30701 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
                C30702 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C113 * C2363 - C30631 * C2367) * C4702 +
              (C113 * C2368 - C30631 * C2372) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C285 +
          ((((C166 * C4702 + C167 * C30396) * C8863 +
             ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
             C9107 * C8865) *
                C30702 +
            ((C533 * C4702 + C534 * C30396) * C8863 +
             ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
             ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
                C30553) *
               C30701 +
           (((C352 * C4702 + C353 * C30396) * C8863 +
             ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
             ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
                C30702 +
            ((C939 * C4702 + C940 * C30396) * C8863 +
             ((C2148 - C2147) * C4702 + (C2150 - C2149) * C30396) * C8864 +
             ((C30631 * C2369 - C113 * C2364) * C4702 +
              (C30631 * C2373 - C113 * C2370) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30702 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30553) *
              C1392 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30702 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
               C30553) *
              C1393 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30702 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30553) *
              C1394 +
          ((((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C10116 - C10117) * C4702 + (C10118 - C10119) * C30396) * C8864 +
            ((C10120 - C10121) * C4702 + (C10122 - C10123) * C30396) * C8865) *
               C30702 +
           (((C10117 - C10116) * C4702 + (C10119 - C10118) * C30396) * C8863 +
            ((C10121 - C10120) * C4702 + (C10123 - C10122) * C30396) * C8864 +
            ((C30631 * C6566 - C113 * C6565) * C4702 +
             (C30631 * C6568 - C113 * C6567) * C30396) *
                C8865) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C2248 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C2249 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            C10431 * C8865) *
               C2250 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C4702 + (C10419 - C10418) * C30396) * C8864 +
            ((C10420 - C10421) * C4702 + (C10422 - C10423) * C30396) * C8865) *
               C30748) *
              C30701 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C2248 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            C10812 * C8865) *
               C2249 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C10806 - C10807) * C4702 + (C10808 - C10809) * C30396) * C8865) *
               C2250 +
           (C10812 * C8863 +
            ((C10807 - C10806) * C4702 + (C10809 - C10808) * C30396) * C8864 +
            ((C30631 * C10800 - C113 * C10799) * C4702 +
             (C30631 * C10802 - C113 * C10801) * C30396) *
                C8865) *
               C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C30631 * C124 - C113 * C117) * C114 +
               (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
               (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                  C30645 * C30466 * C30448 * C108 +
              ((C147 - C146) * C114 + (C149 - C148) * C102 +
               (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
               C169 * C104) *
                  C30645 * C30466 * C30448 * C109 +
              (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
               (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                  C30645 * C30466 * C30448 * C110 +
              (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
               (C161 - C160) * C103 + (C162 - C163) * C116 +
               (C164 - C165) * C104) *
                  C30645 * C30466 * C30448 * C111 +
              (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
               (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
               (C30631 * C144 - C113 * C137) * C104) *
                  C30645 * C30466 * C30448 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C30769 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C30757 +
               ((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30466 * C30732) *
                  C284 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C30769 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 +
                (C344 - C345) * C116 + (C346 - C347) * C104) *
                   C30645 * C30466 * C30757 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C30645 * C30466 * C30732) *
                  C285 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30466 * C30769 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
                (C113 * C314 - C30631 * C325) * C104) *
                   C30645 * C30466 * C30757 +
               (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
                (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
                (C30631 * C326 - C113 * C316) * C104) *
                   C30645 * C30466 * C30732) *
                  C30726) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30770 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C30759 +
               ((C30631 * C484 - C113 * C471) * C114 +
                (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
                (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                   C30645 * C30735) *
                  C30448 * C284 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30770 +
               ((C510 - C509) * C114 + (C512 - C511) * C102 +
                (C514 - C513) * C115 + (C516 - C515) * C103 +
                (C525 - C526) * C116 + (C527 - C528) * C104) *
                   C30645 * C30759 +
               ((C518 - C517) * C114 + (C520 - C519) * C102 +
                (C522 - C521) * C115 + (C524 - C523) * C103 +
                (C529 - C530) * C116 + (C531 - C532) * C104) *
                   C30645 * C30735) *
                  C30448 * C285 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30770 +
               (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
                (C528 - C527) * C103 + (C113 * C476 - C30631 * C494) * C116 +
                (C113 * C495 - C30631 * C506) * C104) *
                   C30645 * C30759 +
               (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
                (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
                (C30631 * C507 - C113 * C497) * C104) *
                   C30645 * C30735) *
                  C30448 * C30726) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C1050 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C1051 +
               ((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30466 * C30732) *
                  C30766 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C1050 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                C646 * C104) *
                   C30645 * C30466 * C1051 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C30645 * C30466 * C30732) *
                  C30753 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30466 * C1050 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C647 - C648) * C116 +
                (C649 - C650) * C104) *
                   C30645 * C30466 * C1051 +
               (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
                (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
                (C30631 * C326 - C113 * C316) * C104) *
                   C30645 * C30466 * C30732) *
                  C30726) -
         0.25 * std::pow(Pi, 2.5) *
             (((C30631 * C124 - C113 * C117) * C114 +
               (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
               (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                  C30645 * C30466 * C1118 +
              ((C113 * C287 - C30631 * C297) * C114 +
               (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
               (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                  C30645 * C30466 * C1119 +
              ((C30631 * C303 - C113 * C290) * C114 +
               (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
               (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                  C30645 * C30466 * C1120 +
              ((C113 * C1124 - C30631 * C1130) * C114 +
               (C113 * C1131 - C30631 * C1142) * C102 +
               (C113 * C1125 - C30631 * C1132) * C115 +
               (C113 * C1133 - C30631 * C1143) * C103 +
               (C113 * C1126 - C30631 * C1134) * C116 +
               (C113 * C1135 - C30631 * C1144) * C104) *
                  C30645 * C30466 * C1121 +
              ((C30631 * C1136 - C113 * C1127) * C114 +
               (C30631 * C1145 - C113 * C1137) * C102 +
               (C30631 * C1138 - C113 * C1128) * C115 +
               (C30631 * C1146 - C113 * C1139) * C103 +
               (C30631 * C1140 - C113 * C1129) * C116 +
               (C30631 * C1147 - C113 * C1141) * C104) *
                  C30645 * C30466 * C1122) *
             C30420 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30770 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C30759 +
               ((C30631 * C484 - C113 * C471) * C114 +
                (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
                (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                   C30645 * C30735) *
                  C1050 +
              (((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30770 +
               ((C30631 * C911 - C113 * C906) * C114 +
                (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                   C30645 * C30759 +
               ((C113 * C1258 - C30631 * C1267) * C114 +
                (C113 * C1268 - C30631 * C1285) * C102 +
                (C113 * C1259 - C30631 * C1269) * C115 +
                (C113 * C1270 - C30631 * C1286) * C103 +
                (C113 * C1260 - C30631 * C1271) * C116 +
                (C113 * C1272 - C30631 * C1287) * C104) *
                   C30645 * C30735) *
                  C1051 +
              (((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30770 +
               ((C113 * C1261 - C30631 * C1273) * C114 +
                (C113 * C1274 - C30631 * C1288) * C102 +
                (C113 * C1262 - C30631 * C1275) * C115 +
                (C113 * C1276 - C30631 * C1289) * C103 +
                (C113 * C1263 - C30631 * C1277) * C116 +
                (C113 * C1278 - C30631 * C1290) * C104) *
                   C30645 * C30759 +
               ((C30631 * C1279 - C113 * C1264) * C114 +
                (C30631 * C1291 - C113 * C1280) * C102 +
                (C30631 * C1281 - C113 * C1265) * C115 +
                (C30631 * C1292 - C113 * C1282) * C103 +
                (C30631 * C1283 - C113 * C1266) * C116 +
                (C30631 * C1293 - C113 * C1284) * C104) *
                   C30645 * C30735) *
                  C30732) *
             C30420 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C1788 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C1789 +
               ((C30631 * C484 - C113 * C471) * C114 +
                (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
                (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                   C30645 * C30735) *
                  C30448 * C30766 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C1788 +
               ((C510 - C509) * C114 + (C512 - C511) * C102 +
                (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                C756 * C104) *
                   C30645 * C1789 +
               ((C518 - C517) * C114 + (C520 - C519) * C102 +
                (C522 - C521) * C115 + (C524 - C523) * C103 +
                (C529 - C530) * C116 + (C531 - C532) * C104) *
                   C30645 * C30735) *
                  C30448 * C30753 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C1788 +
               (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
                (C528 - C527) * C103 + (C757 - C758) * C116 +
                (C759 - C760) * C104) *
                   C30645 * C1789 +
               (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
                (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
                (C30631 * C507 - C113 * C497) * C104) *
                   C30645 * C30735) *
                  C30448 * C30726) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C1788 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C1789 +
               ((C30631 * C484 - C113 * C471) * C114 +
                (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
                (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                   C30645 * C30735) *
                  C30769 +
              (((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C1788 +
               ((C30631 * C911 - C113 * C906) * C114 +
                (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                   C30645 * C1789 +
               ((C113 * C1258 - C30631 * C1267) * C114 +
                (C113 * C1268 - C30631 * C1285) * C102 +
                (C113 * C1259 - C30631 * C1269) * C115 +
                (C113 * C1270 - C30631 * C1286) * C103 +
                (C113 * C1260 - C30631 * C1271) * C116 +
                (C113 * C1272 - C30631 * C1287) * C104) *
                   C30645 * C30735) *
                  C30757 +
              (((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C1788 +
               ((C113 * C1261 - C30631 * C1273) * C114 +
                (C113 * C1274 - C30631 * C1288) * C102 +
                (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                   C30645 * C1789 +
               ((C30631 * C1279 - C113 * C1264) * C114 +
                (C30631 * C1291 - C113 * C1280) * C102 +
                (C30631 * C1281 - C113 * C1265) * C115 +
                (C30631 * C1292 - C113 * C1282) * C103 +
                (C30631 * C1283 - C113 * C1266) * C116 +
                (C30631 * C1293 - C113 * C1284) * C104) *
                   C30645 * C30735) *
                  C30732) *
             C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C1963 +
          ((C113 * C468 - C30631 * C478) * C114 +
           (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
           (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
              C30645 * C1964 +
          ((C30631 * C484 - C113 * C471) * C114 +
           (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
           (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
              C30645 * C1965 +
          ((C113 * C1968 - C30631 * C1974) * C114 +
           (C113 * C1975 - C30631 * C1986) * C102 +
           (C113 * C1969 - C30631 * C1976) * C115 +
           (C113 * C1977 - C30631 * C1987) * C103 +
           (C113 * C1970 - C30631 * C1978) * C116 +
           (C113 * C1979 - C30631 * C1988) * C104) *
              C30645 * C1966 +
          ((C30631 * C1980 - C113 * C1971) * C114 +
           (C30631 * C1989 - C113 * C1981) * C102 +
           (C30631 * C1982 - C113 * C1972) * C115 +
           (C30631 * C1990 - C113 * C1983) * C103 +
           (C30631 * C1984 - C113 * C1973) * C116 +
           (C30631 * C1991 - C113 * C1985) * C104) *
              C30645 * C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C1050 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C1051 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30769 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C30757 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C1963 +
          ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
            C4701 * C1261 - C4697 * C1273) *
               C4702 +
           (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
            C4701 * C1274 - C4697 * C1288) *
               C30396) *
              C30645 * C1964 +
          ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
            C4697 * C1279 - C4701 * C1264) *
               C4702 +
           (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
            C4697 * C1291 - C4701 * C1280) *
               C30396) *
              C30645 * C1965 +
          ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
            C4701 * C6203 - C4697 * C6206) *
               C4702 +
           (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
            C4701 * C6207 - C4697 * C6212) *
               C30396) *
              C30645 * C1966 +
          ((C4695 * C1980 - C4699 * C1971 + C4696 * C6208 - C4700 * C6204 +
            C4697 * C6209 - C4701 * C6205) *
               C4702 +
           (C4695 * C1989 - C4699 * C1981 + C4696 * C6213 - C4700 * C6210 +
            C4697 * C6214 - C4701 * C6211) *
               C30396) *
              C30645 * C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C30631 * C478 - C113 * C468) * C4702 +
            (C30631 * C498 - C113 * C479) * C30396) *
               C8864 +
           ((C30631 * C484 - C113 * C471) * C4702 +
            (C30631 * C501 - C113 * C485) * C30396) *
               C8865) *
              C30466 * C30448 * C108 +
          (((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
           ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
           ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
              C30466 * C30448 * C109 +
          ((C166 * C4702 + C167 * C30396) * C8863 +
           ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
           (C535 * C4702 + C536 * C30396) * C8865) *
              C30466 * C30448 * C110 +
          ((C168 * C4702 + C169 * C30396) * C8863 +
           ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
           ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
              C30466 * C30448 * C111 +
          ((C170 * C4702 + C171 * C30396) * C8863 +
           ((C758 - C757) * C4702 + (C760 - C759) * C30396) * C8864 +
           ((C30631 * C496 - C113 * C477) * C4702 +
            (C30631 * C507 - C113 * C497) * C30396) *
               C8865) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C30631 * C478 - C113 * C468) * C4702 +
             (C30631 * C498 - C113 * C479) * C30396) *
                C8864 +
            ((C30631 * C484 - C113 * C471) * C4702 +
             (C30631 * C501 - C113 * C485) * C30396) *
                C8865) *
               C30466 * C30769 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C113 * C906 - C30631 * C911) * C4702 +
             (C113 * C912 - C30631 * C921) * C30396) *
                C8864 +
            ((C113 * C1258 - C30631 * C1267) * C4702 +
             (C113 * C1268 - C30631 * C1285) * C30396) *
                C8865) *
               C30466 * C30757 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C284 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
               C30466 * C30769 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C30757 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C285 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            (C535 * C4702 + C536 * C30396) * C8865) *
               C30466 * C30769 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30757 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30770 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30759 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C30448 * C284 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30770 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
               C30759 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C113 * C1972 - C30631 * C1982) * C4702 +
             (C113 * C1983 - C30631 * C1990) * C30396) *
                C8865) *
               C30735) *
              C30448 * C285 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30770 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30759 +
           (C9107 * C8863 +
            ((C2262 - C2261) * C4702 + (C2264 - C2263) * C30396) * C8864 +
            ((C30631 * C1984 - C113 * C1973) * C4702 +
             (C30631 * C1991 - C113 * C1985) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C1050 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
               C30466 * C1051 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30766 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C1050 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C1051 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30753 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C1050 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C1051 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
           C9111 * C8865) *
              C30466 * C1118 +
          (((C113 * C287 - C30631 * C297) * C4702 +
            (C113 * C298 - C30631 * C317) * C30396) *
               C8863 +
           ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
           ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
              C30466 * C1119 +
          (((C30631 * C303 - C113 * C290) * C4702 +
            (C30631 * C320 - C113 * C304) * C30396) *
               C8863 +
           ((C30631 * C1273 - C113 * C1261) * C4702 +
            (C30631 * C1288 - C113 * C1274) * C30396) *
               C8864 +
           ((C30631 * C1279 - C113 * C1264) * C4702 +
            (C30631 * C1291 - C113 * C1280) * C30396) *
               C8865) *
              C30466 * C1120 +
          (((C113 * C1124 - C30631 * C1130) * C4702 +
            (C113 * C1131 - C30631 * C1142) * C30396) *
               C8863 +
           ((C113 * C1666 - C30631 * C1669) * C4702 +
            (C113 * C1670 - C30631 * C1675) * C30396) *
               C8864 +
           ((C113 * C5555 - C30631 * C5558) * C4702 +
            (C113 * C5559 - C30631 * C5564) * C30396) *
               C8865) *
              C30466 * C1121 +
          (((C30631 * C1136 - C113 * C1127) * C4702 +
            (C30631 * C1145 - C113 * C1137) * C30396) *
               C8863 +
           ((C30631 * C5560 - C113 * C5556) * C4702 +
            (C30631 * C5565 - C113 * C5561) * C30396) *
               C8864 +
           ((C30631 * C5562 - C113 * C5557) * C4702 +
            (C30631 * C5566 - C113 * C5563) * C30396) *
               C8865) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30770 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30759 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C1050 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30770 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
               C30759 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C113 * C6204 - C30631 * C6208) * C4702 +
             (C113 * C6210 - C30631 * C6213) * C30396) *
                C8865) *
               C30735) *
              C1051 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30770 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30759 +
           (C9769 * C8863 +
            ((C9759 - C9758) * C4702 + (C9761 - C9760) * C30396) * C8864 +
            ((C30631 * C6209 - C113 * C6205) * C4702 +
             (C30631 * C6214 - C113 * C6211) * C30396) *
                C8865) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C1788 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C1789 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30766 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C1788 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
               C1789 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C113 * C1972 - C30631 * C1982) * C4702 +
             (C113 * C1983 - C30631 * C1990) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30753 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C1788 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C1789 +
           (C9107 * C8863 +
            ((C2262 - C2261) * C4702 + (C2264 - C2263) * C30396) * C8864 +
            ((C30631 * C1984 - C113 * C1973) * C4702 +
             (C30631 * C1991 - C113 * C1985) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C1788 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C1789 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C30769 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C1788 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
               C1789 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C113 * C6204 - C30631 * C6208) * C4702 +
             (C113 * C6210 - C30631 * C6213) * C30396) *
                C8865) *
               C30735) *
              C30757 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C1788 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C1789 +
           (C9769 * C8863 +
            ((C9759 - C9758) * C4702 + (C9761 - C9760) * C30396) * C8864 +
            ((C30631 * C6209 - C113 * C6205) * C4702 +
             (C30631 * C6214 - C113 * C6211) * C30396) *
                C8865) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
           C9111 * C8865) *
              C1963 +
          (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
           ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
           C10428 * C8865) *
              C1964 +
          (C9111 * C8863 +
           ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
           C10431 * C8865) *
              C1965 +
          (C10428 * C8863 +
           ((C10417 - C10416) * C4702 + (C10419 - C10418) * C30396) * C8864 +
           ((C10420 - C10421) * C4702 + (C10422 - C10423) * C30396) * C8865) *
              C1966 +
          (C10431 * C8863 +
           ((C10421 - C10420) * C4702 + (C10423 - C10422) * C30396) * C8864 +
           ((C30631 * C10409 - C113 * C10406) * C4702 +
            (C30631 * C10412 - C113 * C10410) * C30396) *
               C8865) *
              C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30702 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C30553) *
                  C30448 * C636 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30702 +
               ((C510 - C509) * C114 + (C512 - C511) * C102 +
                (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                C756 * C104) *
                   C30645 * C30553) *
                  C30448 * C637 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30702 +
               (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
                (C528 - C527) * C103 + (C757 - C758) * C116 +
                (C759 - C760) * C104) *
                   C30645 * C30553) *
                  C30448 * C638 +
              ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
                (C161 - C160) * C103 + (C162 - C163) * C116 +
                (C164 - C165) * C104) *
                   C30645 * C30702 +
               (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
                (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
                (C30631 * C753 - C113 * C752) * C104) *
                   C30645 * C30553) *
                  C30448 * C30736) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30631 * C124 - C113 * C117) * C114 +
                 (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                 (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                    C30645 * C30702 +
                ((C113 * C468 - C30631 * C478) * C114 +
                 (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                 (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                    C30645 * C30553) *
                   C1050 +
               (((C113 * C287 - C30631 * C297) * C114 +
                 (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                 (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                    C30645 * C30702 +
                ((C30631 * C911 - C113 * C906) * C114 +
                 (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                 (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                    C30645 * C30553) *
                   C1051 +
               (((C30631 * C303 - C113 * C290) * C114 +
                 (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                 (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                    C30645 * C30702 +
                ((C113 * C1261 - C30631 * C1273) * C114 +
                 (C113 * C1274 - C30631 * C1288) * C102 +
                 (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                 (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                    C30645 * C30553) *
                   C30732) *
                  C30687 +
              ((((C147 - C146) * C114 + (C149 - C148) * C102 +
                 (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                 C169 * C104) *
                    C30645 * C30702 +
                ((C510 - C509) * C114 + (C512 - C511) * C102 +
                 (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                 C756 * C104) *
                    C30645 * C30553) *
                   C1050 +
               (((C329 - C328) * C114 + (C331 - C330) * C102 +
                 (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                 C646 * C104) *
                    C30645 * C30702 +
                ((C928 - C927) * C114 + (C930 - C929) * C102 +
                 (C932 - C931) * C115 + (C934 - C933) * C103 +
                 (C935 - C936) * C116 + (C937 - C938) * C104) *
                    C30645 * C30553) *
                   C1051 +
               (((C337 - C336) * C114 + (C339 - C338) * C102 +
                 (C341 - C340) * C115 + (C343 - C342) * C103 +
                 (C348 - C349) * C116 + (C350 - C351) * C104) *
                    C30645 * C30702 +
                ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
                 (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
                 (C30631 * C1557 - C113 * C1556) * C116 +
                 (C30631 * C1559 - C113 * C1558) * C104) *
                    C30645 * C30553) *
                   C30732) *
                  C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C2248 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C2249 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C2250 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C30448 * C30687 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C2248 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C2249 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C2250 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C30631 * C2253 - C113 * C2252) * C116 +
            (C30631 * C2255 - C113 * C2254) * C104) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C2248 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C2249 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C2250 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C30448 * C30687 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C2248 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C2249 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C2250 +
           ((C4695 * C1976 - C4699 * C1969 + C4696 * C2367 - C4700 * C2363 +
             C4697 * C6464 - C4701 * C6463) *
                C4702 +
            (C4695 * C1987 - C4699 * C1977 + C4696 * C2372 - C4700 * C2368 +
             C4697 * C6466 - C4701 * C6465) *
                C30396) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30702 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30553) *
              C30448 * C636 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30702 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
               C30553) *
              C30448 * C637 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30702 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30553) *
              C30448 * C638 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C30702 +
           ((C755 * C4702 + C756 * C30396) * C8863 +
            ((C530 - C529) * C4702 + (C532 - C531) * C30396) * C8864 +
            ((C30631 * C2253 - C113 * C2252) * C4702 +
             (C30631 * C2255 - C113 * C2254) * C30396) *
                C8865) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30702 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
                C30553) *
               C1050 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30702 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
                C30553) *
               C1051 +
           ((((C30631 * C303 - C113 * C290) * C4702 +
              (C30631 * C320 - C113 * C304) * C30396) *
                 C8863 +
             ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
             C9769 * C8865) *
                C30702 +
            (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
             ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
             ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
                C30553) *
               C30732) *
              C30687 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30702 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
                C30553) *
               C1050 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
                C30702 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C113 * C2363 - C30631 * C2367) * C4702 +
              (C113 * C2368 - C30631 * C2372) * C30396) *
                 C8865) *
                C30553) *
               C1051 +
           ((((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
             ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
             ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
                C30702 +
            (((C1562 - C1561) * C4702 + (C1564 - C1563) * C30396) * C8863 +
             ((C10015 - C10014) * C4702 + (C10017 - C10016) * C30396) * C8864 +
             ((C30631 * C6464 - C113 * C6463) * C4702 +
              (C30631 * C6466 - C113 * C6465) * C30396) *
                 C8865) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C2248 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C2249 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            C10431 * C8865) *
               C2250 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C4702 + (C10419 - C10418) * C30396) * C8864 +
            ((C10420 - C10421) * C4702 + (C10422 - C10423) * C30396) * C8865) *
               C30748) *
              C30448 * C30687 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C2248 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            C10701 * C8865) *
               C2249 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C10695 - C10696) * C4702 + (C10697 - C10698) * C30396) * C8865) *
               C2250 +
           (C10701 * C8863 +
            ((C10696 - C10695) * C4702 + (C10698 - C10697) * C30396) * C8864 +
            ((C30631 * C10689 - C113 * C10688) * C4702 +
             (C30631 * C10691 - C113 * C10690) * C30396) *
                C8865) *
               C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C30448 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C30645 * C30466 * C30448 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C30645 * C30466 * C30448 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C30645 * C30466 * C30448 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
           (C30631 * C144 - C113 * C137) * C104) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30769 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30757 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30769 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C30645 * C30466 * C30757 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30769 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
            (C113 * C314 - C30631 * C325) * C104) *
               C30645 * C30466 * C30757 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C1788 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C1789 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30735) *
              C30448 * C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C1788 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C1789 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30769 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C1788 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C1789 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 +
            (C113 * C1259 - C30631 * C1269) * C115 +
            (C113 * C1270 - C30631 * C1286) * C103 +
            (C113 * C1260 - C30631 * C1271) * C116 +
            (C113 * C1272 - C30631 * C1287) * C104) *
               C30645 * C30735) *
              C30757 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C1788 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C1789 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30769 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C30757 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C30631 * C478 - C113 * C468) * C4702 +
            (C30631 * C498 - C113 * C479) * C30396) *
               C8864 +
           ((C30631 * C484 - C113 * C471) * C4702 +
            (C30631 * C501 - C113 * C485) * C30396) *
               C8865) *
              C30466 * C30448 * C108 +
          (((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
           ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
           ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
              C30466 * C30448 * C109 +
          ((C166 * C4702 + C167 * C30396) * C8863 +
           ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
           (C535 * C4702 + C536 * C30396) * C8865) *
              C30466 * C30448 * C110 +
          ((C168 * C4702 + C169 * C30396) * C8863 +
           ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
           ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
              C30466 * C30448 * C111 +
          ((C170 * C4702 + C171 * C30396) * C8863 +
           ((C758 - C757) * C4702 + (C760 - C759) * C30396) * C8864 +
           ((C30631 * C496 - C113 * C477) * C4702 +
            (C30631 * C507 - C113 * C497) * C30396) *
               C8865) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C30631 * C478 - C113 * C468) * C4702 +
             (C30631 * C498 - C113 * C479) * C30396) *
                C8864 +
            ((C30631 * C484 - C113 * C471) * C4702 +
             (C30631 * C501 - C113 * C485) * C30396) *
                C8865) *
               C30466 * C30769 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C113 * C906 - C30631 * C911) * C4702 +
             (C113 * C912 - C30631 * C921) * C30396) *
                C8864 +
            ((C113 * C1258 - C30631 * C1267) * C4702 +
             (C113 * C1268 - C30631 * C1285) * C30396) *
                C8865) *
               C30466 * C30757 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C284 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
               C30466 * C30769 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C30757 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C285 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            (C535 * C4702 + C536 * C30396) * C8865) *
               C30466 * C30769 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30757 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C1050 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
               C30466 * C1051 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30766 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C1050 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C1051 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30753 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C1050 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C1051 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
           C9111 * C8865) *
              C30466 * C1118 +
          (((C113 * C287 - C30631 * C297) * C4702 +
            (C113 * C298 - C30631 * C317) * C30396) *
               C8863 +
           ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
           ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
              C30466 * C1119 +
          (((C30631 * C303 - C113 * C290) * C4702 +
            (C30631 * C320 - C113 * C304) * C30396) *
               C8863 +
           ((C30631 * C1273 - C113 * C1261) * C4702 +
            (C30631 * C1288 - C113 * C1274) * C30396) *
               C8864 +
           ((C30631 * C1279 - C113 * C1264) * C4702 +
            (C30631 * C1291 - C113 * C1280) * C30396) *
               C8865) *
              C30466 * C1120 +
          (((C113 * C1124 - C30631 * C1130) * C4702 +
            (C113 * C1131 - C30631 * C1142) * C30396) *
               C8863 +
           ((C113 * C1666 - C30631 * C1669) * C4702 +
            (C113 * C1670 - C30631 * C1675) * C30396) *
               C8864 +
           ((C113 * C5555 - C30631 * C5558) * C4702 +
            (C113 * C5559 - C30631 * C5564) * C30396) *
               C8865) *
              C30466 * C1121 +
          (((C30631 * C1136 - C113 * C1127) * C4702 +
            (C30631 * C1145 - C113 * C1137) * C30396) *
               C8863 +
           ((C30631 * C5560 - C113 * C5556) * C4702 +
            (C30631 * C5565 - C113 * C5561) * C30396) *
               C8864 +
           ((C30631 * C5562 - C113 * C5557) * C4702 +
            (C30631 * C5566 - C113 * C5563) * C30396) *
               C8865) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C1788 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C1789 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30766 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C1788 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
               C1789 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C113 * C1972 - C30631 * C1982) * C4702 +
             (C113 * C1983 - C30631 * C1990) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30753 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C1788 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C1789 +
           (C9107 * C8863 +
            ((C2262 - C2261) * C4702 + (C2264 - C2263) * C30396) * C8864 +
            ((C30631 * C1984 - C113 * C1973) * C4702 +
             (C30631 * C1991 - C113 * C1985) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C1788 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C1789 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C30769 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C1788 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
               C1789 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C113 * C6204 - C30631 * C6208) * C4702 +
             (C113 * C6210 - C30631 * C6213) * C30396) *
                C8865) *
               C30735) *
              C30757 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C1788 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C1789 +
           (C9769 * C8863 +
            ((C9759 - C9758) * C4702 + (C9761 - C9760) * C30396) * C8864 +
            ((C30631 * C6209 - C113 * C6205) * C4702 +
             (C30631 * C6214 - C113 * C6211) * C30396) *
                C8865) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C30701 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C3234 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C30701 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C3234 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30511) *
              C30425 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C3234 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C30701 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C3234 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30511) *
              C30434 +
          ((((C166 * C4702 + C167 * C30396) * C8863 +
             ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
             C9107 * C8865) *
                C3234 +
            ((C533 * C4702 + C534 * C30396) * C8863 +
             ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
             ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
                C30553) *
               C30701 +
           (((C352 * C4702 + C353 * C30396) * C8863 +
             ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
             ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
                C3234 +
            ((C939 * C4702 + C940 * C30396) * C8863 +
             ((C2148 - C2147) * C4702 + (C2150 - C2149) * C30396) * C8864 +
             ((C30631 * C2369 - C113 * C2364) * C4702 +
              (C30631 * C2373 - C113 * C2370) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C3742) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C3742) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30549 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30556 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C3742) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30549 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30556 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C3742) *
               C30511) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30549 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30556 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C3742) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30549 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30556 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30549 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30556 +
            (C9111 * C8863 +
             ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
             C10431 * C8865) *
                C3742) *
               C30701 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30549 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30556 +
            (C9766 * C8863 +
             ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
             ((C10806 - C10807) * C4702 + (C10808 - C10809) * C30396) * C8865) *
                C3742) *
               C30511) *
              C2580 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30549 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30556 +
            (C9110 * C8863 +
             ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
             ((C10695 - C10696) * C4702 + (C10697 - C10698) * C30396) * C8865) *
                C3742) *
               C30701 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C30549 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30556 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C4702 + (C10587 - C10586) * C30396) * C8864 +
             ((C30631 * C10578 - C113 * C10577) * C4702 +
              (C30631 * C10580 - C113 * C10579) * C30396) *
                 C8865) *
                C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C3234 +
               ((C113 * C468 - C30631 * C478) * C114 +
                (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                   C30645 * C30553) *
                  C30448 * C30775 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C3234 +
               ((C510 - C509) * C114 + (C512 - C511) * C102 +
                (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                C756 * C104) *
                   C30645 * C30553) *
                  C30448 * C30768 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C3234 +
               (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
                (C528 - C527) * C103 + (C757 - C758) * C116 +
                (C759 - C760) * C104) *
                   C30645 * C30553) *
                  C30448 * C30755 +
              ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
                (C161 - C160) * C103 + (C162 - C163) * C116 +
                (C164 - C165) * C104) *
                   C30645 * C3234 +
               (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
                (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
                (C30631 * C753 - C113 * C752) * C104) *
                   C30645 * C30553) *
                  C30448 * C30736) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30631 * C124 - C113 * C117) * C114 +
                 (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                 (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                    C30645 * C3234 +
                ((C113 * C468 - C30631 * C478) * C114 +
                 (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
                 (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                    C30645 * C30553) *
                   C30769 +
               (((C113 * C287 - C30631 * C297) * C114 +
                 (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                 (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                    C30645 * C3234 +
                ((C30631 * C911 - C113 * C906) * C114 +
                 (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                 (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                    C30645 * C30553) *
                   C30757 +
               (((C30631 * C303 - C113 * C290) * C114 +
                 (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                 (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                    C30645 * C3234 +
                ((C113 * C1261 - C30631 * C1273) * C114 +
                 (C113 * C1274 - C30631 * C1288) * C102 +
                 (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                 (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                    C30645 * C30553) *
                   C30732) *
                  C2580 +
              ((((C147 - C146) * C114 + (C149 - C148) * C102 +
                 (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                 C169 * C104) *
                    C30645 * C3234 +
                ((C510 - C509) * C114 + (C512 - C511) * C102 +
                 (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
                 C756 * C104) *
                    C30645 * C30553) *
                   C30769 +
               (((C329 - C328) * C114 + (C331 - C330) * C102 +
                 (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
                 C646 * C104) *
                    C30645 * C3234 +
                ((C928 - C927) * C114 + (C930 - C929) * C102 +
                 (C932 - C931) * C115 + (C934 - C933) * C103 +
                 (C935 - C936) * C116 + (C937 - C938) * C104) *
                    C30645 * C30553) *
                   C30757 +
               (((C337 - C336) * C114 + (C339 - C338) * C102 +
                 (C341 - C340) * C115 + (C343 - C342) * C103 +
                 (C348 - C349) * C116 + (C350 - C351) * C104) *
                    C30645 * C3234 +
                ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
                 (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
                 (C30631 * C1557 - C113 * C1556) * C116 +
                 (C30631 * C1559 - C113 * C1558) * C104) *
                    C30645 * C30553) *
                   C30732) *
                  C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30777 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30774 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30765 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C30448 * C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30777 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30774 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30765 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C30631 * C2253 - C113 * C2252) * C116 +
            (C30631 * C2255 - C113 * C2254) * C104) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30777 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30774 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30765 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C30448 * C2580 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30777 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30774 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30765 +
           ((C4695 * C1976 - C4699 * C1969 + C4696 * C2367 - C4700 * C2363 +
             C4697 * C6464 - C4701 * C6463) *
                C4702 +
            (C4695 * C1987 - C4699 * C1977 + C4696 * C2372 - C4700 * C2368 +
             C4697 * C6466 - C4701 * C6465) *
                C30396) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C3234 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30553) *
              C30448 * C30775 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C3234 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            C10701 * C8865) *
               C30553) *
              C30448 * C30768 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C3234 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30553) *
              C30448 * C30755 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C3234 +
           ((C755 * C4702 + C756 * C30396) * C8863 +
            ((C530 - C529) * C4702 + (C532 - C531) * C30396) * C8864 +
            ((C30631 * C2253 - C113 * C2252) * C4702 +
             (C30631 * C2255 - C113 * C2254) * C30396) *
                C8865) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C3234 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C30769 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C3234 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30757 +
           ((((C30631 * C303 - C113 * C290) * C4702 +
              (C30631 * C320 - C113 * C304) * C30396) *
                 C8863 +
             ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
             C9769 * C8865) *
                C3234 +
            (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
             ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
             ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
                C30553) *
               C30732) *
              C2580 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C3234 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C30769 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C3234 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30757 +
           ((((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
             ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
             ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
                C3234 +
            (((C1562 - C1561) * C4702 + (C1564 - C1563) * C30396) * C8863 +
             ((C10015 - C10014) * C4702 + (C10017 - C10016) * C30396) * C8864 +
             ((C30631 * C6464 - C113 * C6463) * C4702 +
              (C30631 * C6466 - C113 * C6465) * C30396) *
                 C8865) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30777 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30774 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            C10431 * C8865) *
               C30765 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C4702 + (C10419 - C10418) * C30396) * C8864 +
            ((C10420 - C10421) * C4702 + (C10422 - C10423) * C30396) * C8865) *
               C30748) *
              C30448 * C2580 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30777 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            C10701 * C8865) *
               C30774 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C10695 - C10696) * C4702 + (C10697 - C10698) * C30396) * C8865) *
               C30765 +
           (C10701 * C8863 +
            ((C10696 - C10695) * C4702 + (C10698 - C10697) * C30396) * C8864 +
            ((C30631 * C10689 - C113 * C10688) * C4702 +
             (C30631 * C10691 - C113 * C10690) * C30396) *
                C8865) *
               C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C3742) *
              C30448 * C30425 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30549 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30556 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C3742) *
              C30448 * C30434 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C3742) *
              C30448 * C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30549 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30556 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C3742) *
              C30448 * C30425 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30549 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30556 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C3742) *
              C30448 * C30434 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30549 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30556 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C3742) *
              C30448 * C2843)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30549 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30556 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            C10431 * C8865) *
               C3742) *
              C30448 * C30425 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30549 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            C10701 * C8865) *
               C30556 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C10695 - C10696) * C4702 + (C10697 - C10698) * C30396) * C8865) *
               C3742) *
              C30448 * C30434 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30549 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30556 +
           (C9107 * C8863 +
            ((C2262 - C2261) * C4702 + (C2264 - C2263) * C30396) * C8864 +
            ((C30631 * C1984 - C113 * C1973) * C4702 +
             (C30631 * C1991 - C113 * C1985) * C30396) *
                C8865) *
               C3742) *
              C30448 * C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30769 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30757 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C3234 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30769 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30757 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C3234 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30553) *
              C30448 * C30768 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30553) *
              C30448 * C30755 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
            (C30631 * C753 - C113 * C752) * C104) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C3234 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            C10428 * C8865) *
               C30553) *
              C30448 * C30775 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C3234 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            C10701 * C8865) *
               C30553) *
              C30448 * C30768 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C3234 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30553) *
              C30448 * C30755 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C3234 +
           ((C755 * C4702 + C756 * C30396) * C8863 +
            ((C530 - C529) * C4702 + (C532 - C531) * C30396) * C8864 +
            ((C30631 * C2253 - C113 * C2252) * C4702 +
             (C30631 * C2255 - C113 * C2254) * C30396) *
                C8865) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C3234 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             C10428 * C8865) *
                C30553) *
               C30769 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C3234 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             C10812 * C8865) *
                C30553) *
               C30757 +
           ((((C30631 * C303 - C113 * C290) * C4702 +
              (C30631 * C320 - C113 * C304) * C30396) *
                 C8863 +
             ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
             C9769 * C8865) *
                C3234 +
            (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
             ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
             ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
                C30553) *
               C30732) *
              C2580 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C3234 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             C10701 * C8865) *
                C30553) *
               C30769 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             C10590 * C8865) *
                C3234 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C10584 - C10585) * C4702 + (C10586 - C10587) * C30396) * C8865) *
                C30553) *
               C30757 +
           ((((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
             ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
             ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
                C3234 +
            (((C1562 - C1561) * C4702 + (C1564 - C1563) * C30396) * C8863 +
             ((C10015 - C10014) * C4702 + (C10017 - C10016) * C30396) * C8864 +
             ((C30631 * C6464 - C113 * C6463) * C4702 +
              (C30631 * C6466 - C113 * C6465) * C30396) *
                 C8865) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1392 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1393 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C1394 +
           ((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C30631 * C1399 - C113 * C1398) * C116 +
            (C30631 * C1401 - C113 * C1400) * C104) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30701 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30701 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30511) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30701 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30511) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30466 * C30701 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
            (C30631 * C643 - C113 * C642) * C104) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C30701 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C113 * C906 - C30631 * C911) * C4702 +
             (C113 * C912 - C30631 * C921) * C30396) *
                C8864 +
            ((C113 * C1258 - C30631 * C1267) * C4702 +
             (C113 * C1268 - C30631 * C1285) * C30396) *
                C8865) *
               C30466 * C30511) *
              C636 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C30701 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C30511) *
              C637 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C30701 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30511) *
              C638 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C30466 * C30701 +
           ((C645 * C4702 + C646 * C30396) * C8863 +
            ((C936 - C935) * C4702 + (C938 - C937) * C30396) * C8864 +
            ((C30631 * C2139 - C113 * C2138) * C4702 +
             (C30631 * C2141 - C113 * C2140) * C30396) *
                C8865) *
               C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C1392 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30466 * C1393 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30466 * C1394 +
           (((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C113 * C1666 - C30631 * C1669) * C4702 +
             (C113 * C1670 - C30631 * C1675) * C30396) *
                C8864 +
            ((C113 * C5555 - C30631 * C5558) * C4702 +
             (C113 * C5559 - C30631 * C5564) * C30396) *
                C8865) *
               C30466 * C30742) *
              C30687 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C1392 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C1393 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C1394 +
           (((C1404 - C1403) * C4702 + (C1406 - C1405) * C30396) * C8863 +
            ((C30631 * C1671 - C113 * C1667) * C4702 +
             (C30631 * C1676 - C113 * C1672) * C30396) *
                C8864 +
            ((C30631 * C6362 - C113 * C6361) * C4702 +
             (C30631 * C6364 - C113 * C6363) * C30396) *
                C8865) *
               C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30702 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C1392 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30702 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30553) *
              C1393 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30702 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30553) *
              C1394 +
          (((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30702 +
           ((C30631 * C1669 - C113 * C1666) * C114 +
            (C30631 * C1675 - C113 * C1670) * C102 +
            (C30631 * C1671 - C113 * C1667) * C115 +
            (C30631 * C1676 - C113 * C1672) * C103 +
            (C30631 * C1673 - C113 * C1668) * C116 +
            (C30631 * C1677 - C113 * C1674) * C104) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C30702 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C30701 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C30702 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C285 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C1392 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C1393 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C1394 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30702 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
                C30553) *
               C30701 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
                C30702 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             ((C30631 * C2365 - C113 * C2362) * C4702 +
              (C30631 * C2371 - C113 * C2366) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C284 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30702 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
                C30553) *
               C30701 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
                C30702 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C113 * C2363 - C30631 * C2367) * C4702 +
              (C113 * C2368 - C30631 * C2372) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C285 +
          ((((C166 * C4702 + C167 * C30396) * C8863 +
             ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
             C9107 * C8865) *
                C30702 +
            ((C533 * C4702 + C534 * C30396) * C8863 +
             ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
             ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
                C30553) *
               C30701 +
           (((C352 * C4702 + C353 * C30396) * C8863 +
             ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
             ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
                C30702 +
            ((C939 * C4702 + C940 * C30396) * C8863 +
             ((C2148 - C2147) * C4702 + (C2150 - C2149) * C30396) * C8864 +
             ((C30631 * C2369 - C113 * C2364) * C4702 +
              (C30631 * C2373 - C113 * C2370) * C30396) *
                 C8865) *
                C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30702 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30553) *
              C1392 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30702 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
               C30553) *
              C1393 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30702 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30553) *
              C1394 +
          ((((C113 * C1124 - C30631 * C1130) * C4702 +
             (C113 * C1131 - C30631 * C1142) * C30396) *
                C8863 +
            ((C10116 - C10117) * C4702 + (C10118 - C10119) * C30396) * C8864 +
            ((C10120 - C10121) * C4702 + (C10122 - C10123) * C30396) * C8865) *
               C30702 +
           (((C10117 - C10116) * C4702 + (C10119 - C10118) * C30396) * C8863 +
            ((C10121 - C10120) * C4702 + (C10123 - C10122) * C30396) * C8864 +
            ((C30631 * C6566 - C113 * C6565) * C4702 +
             (C30631 * C6568 - C113 * C6567) * C30396) *
                C8865) *
               C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C30631 * C124 - C113 * C117) * C114 +
               (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
               (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                  C30645 * C30466 * C30448 * C108 +
              ((C147 - C146) * C114 + (C149 - C148) * C102 +
               (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
               C169 * C104) *
                  C30645 * C30466 * C30448 * C109 +
              (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
               (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                  C30645 * C30466 * C30448 * C110 +
              (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
               (C161 - C160) * C103 + (C162 - C163) * C116 +
               (C164 - C165) * C104) *
                  C30645 * C30466 * C30448 * C111 +
              (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
               (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
               (C30631 * C144 - C113 * C137) * C104) *
                  C30645 * C30466 * C30448 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C30769 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C30757 +
               ((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30466 * C30732) *
                  C284 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C30769 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 +
                (C344 - C345) * C116 + (C346 - C347) * C104) *
                   C30645 * C30466 * C30757 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C30645 * C30466 * C30732) *
                  C285 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30466 * C30769 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
                (C113 * C314 - C30631 * C325) * C104) *
                   C30645 * C30466 * C30757 +
               (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
                (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
                (C30631 * C326 - C113 * C316) * C104) *
                   C30645 * C30466 * C30732) *
                  C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30770 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30759 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30770 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C30645 * C30759 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30735) *
              C30448 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30770 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C30631 * C494) * C116 +
            (C113 * C495 - C30631 * C506) * C104) *
               C30645 * C30759 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30770 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30759 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C1050 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30770 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30759 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 +
            (C113 * C1259 - C30631 * C1269) * C115 +
            (C113 * C1270 - C30631 * C1286) * C103 +
            (C113 * C1260 - C30631 * C1271) * C116 +
            (C113 * C1272 - C30631 * C1287) * C104) *
               C30645 * C30735) *
              C1051 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30770 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 +
            (C113 * C1262 - C30631 * C1275) * C115 +
            (C113 * C1276 - C30631 * C1289) * C103 +
            (C113 * C1263 - C30631 * C1277) * C116 +
            (C113 * C1278 - C30631 * C1290) * C104) *
               C30645 * C30759 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C1050 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C1051 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C30631 * C478 - C113 * C468) * C4702 +
            (C30631 * C498 - C113 * C479) * C30396) *
               C8864 +
           ((C30631 * C484 - C113 * C471) * C4702 +
            (C30631 * C501 - C113 * C485) * C30396) *
               C8865) *
              C30466 * C30448 * C108 +
          (((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
           ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
           ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
              C30466 * C30448 * C109 +
          ((C166 * C4702 + C167 * C30396) * C8863 +
           ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
           (C535 * C4702 + C536 * C30396) * C8865) *
              C30466 * C30448 * C110 +
          ((C168 * C4702 + C169 * C30396) * C8863 +
           ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
           ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
              C30466 * C30448 * C111 +
          ((C170 * C4702 + C171 * C30396) * C8863 +
           ((C758 - C757) * C4702 + (C760 - C759) * C30396) * C8864 +
           ((C30631 * C496 - C113 * C477) * C4702 +
            (C30631 * C507 - C113 * C497) * C30396) *
               C8865) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C30631 * C478 - C113 * C468) * C4702 +
             (C30631 * C498 - C113 * C479) * C30396) *
                C8864 +
            ((C30631 * C484 - C113 * C471) * C4702 +
             (C30631 * C501 - C113 * C485) * C30396) *
                C8865) *
               C30466 * C30769 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C113 * C906 - C30631 * C911) * C4702 +
             (C113 * C912 - C30631 * C921) * C30396) *
                C8864 +
            ((C113 * C1258 - C30631 * C1267) * C4702 +
             (C113 * C1268 - C30631 * C1285) * C30396) *
                C8865) *
               C30466 * C30757 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C284 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
               C30466 * C30769 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C30757 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C285 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            (C535 * C4702 + C536 * C30396) * C8865) *
               C30466 * C30769 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30757 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30770 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30759 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C30448 * C284 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30770 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
               C30759 +
           (C9110 * C8863 +
            ((C2257 - C2258) * C4702 + (C2259 - C2260) * C30396) * C8864 +
            ((C113 * C1972 - C30631 * C1982) * C4702 +
             (C113 * C1983 - C30631 * C1990) * C30396) *
                C8865) *
               C30735) *
              C30448 * C285 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30770 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30759 +
           (C9107 * C8863 +
            ((C2262 - C2261) * C4702 + (C2264 - C2263) * C30396) * C8864 +
            ((C30631 * C1984 - C113 * C1973) * C4702 +
             (C30631 * C1991 - C113 * C1985) * C30396) *
                C8865) *
               C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C1050 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
               C30466 * C1051 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30766 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C1050 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C1051 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30753 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C1050 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C1051 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
           C9111 * C8865) *
              C30466 * C1118 +
          (((C113 * C287 - C30631 * C297) * C4702 +
            (C113 * C298 - C30631 * C317) * C30396) *
               C8863 +
           ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
           ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
              C30466 * C1119 +
          (((C30631 * C303 - C113 * C290) * C4702 +
            (C30631 * C320 - C113 * C304) * C30396) *
               C8863 +
           ((C30631 * C1273 - C113 * C1261) * C4702 +
            (C30631 * C1288 - C113 * C1274) * C30396) *
               C8864 +
           ((C30631 * C1279 - C113 * C1264) * C4702 +
            (C30631 * C1291 - C113 * C1280) * C30396) *
               C8865) *
              C30466 * C1120 +
          (((C113 * C1124 - C30631 * C1130) * C4702 +
            (C113 * C1131 - C30631 * C1142) * C30396) *
               C8863 +
           ((C113 * C1666 - C30631 * C1669) * C4702 +
            (C113 * C1670 - C30631 * C1675) * C30396) *
               C8864 +
           ((C113 * C5555 - C30631 * C5558) * C4702 +
            (C113 * C5559 - C30631 * C5564) * C30396) *
               C8865) *
              C30466 * C1121 +
          (((C30631 * C1136 - C113 * C1127) * C4702 +
            (C30631 * C1145 - C113 * C1137) * C30396) *
               C8863 +
           ((C30631 * C5560 - C113 * C5556) * C4702 +
            (C30631 * C5565 - C113 * C5561) * C30396) *
               C8864 +
           ((C30631 * C5562 - C113 * C5557) * C4702 +
            (C30631 * C5566 - C113 * C5563) * C30396) *
               C8865) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30770 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30759 +
           (C9111 * C8863 +
            ((C9096 - C9095) * C4702 + (C9098 - C9097) * C30396) * C8864 +
            ((C30631 * C1980 - C113 * C1971) * C4702 +
             (C30631 * C1989 - C113 * C1981) * C30396) *
                C8865) *
               C30735) *
              C1050 +
          ((((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            C9766 * C8865) *
               C30770 +
           (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
            ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
            ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
               C30759 +
           (C9766 * C8863 +
            ((C9747 - C9746) * C4702 + (C9749 - C9748) * C30396) * C8864 +
            ((C113 * C6204 - C30631 * C6208) * C4702 +
             (C113 * C6210 - C30631 * C6213) * C30396) *
                C8865) *
               C30735) *
              C1051 +
          ((((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
            C9769 * C8865) *
               C30770 +
           (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
            ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
            ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
               C30759 +
           (C9769 * C8863 +
            ((C9759 - C9758) * C4702 + (C9761 - C9760) * C30396) * C8864 +
            ((C30631 * C6209 - C113 * C6205) * C4702 +
             (C30631 * C6214 - C113 * C6211) * C30396) *
                C8865) *
               C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C1050 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C1051 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C30702 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C30702 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30702 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30702 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30553) *
              C30448 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30702 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30553) *
              C30448 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30702 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
            (C30631 * C753 - C113 * C752) * C104) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30702 +
           (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
            ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
            ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
               C30553) *
              C30448 * C636 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30702 +
           (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
            ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
            ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
               C30553) *
              C30448 * C637 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30702 +
           ((C533 * C4702 + C534 * C30396) * C8863 +
            ((C522 - C521) * C4702 + (C524 - C523) * C30396) * C8864 +
            ((C2261 - C2262) * C4702 + (C2263 - C2264) * C30396) * C8865) *
               C30553) *
              C30448 * C638 +
          (((C168 * C4702 + C169 * C30396) * C8863 +
            ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
            ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
               C30702 +
           ((C755 * C4702 + C756 * C30396) * C8863 +
            ((C530 - C529) * C4702 + (C532 - C531) * C30396) * C8864 +
            ((C30631 * C2253 - C113 * C2252) * C4702 +
             (C30631 * C2255 - C113 * C2254) * C30396) *
                C8865) *
               C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30631 * C124 - C113 * C117) * C4702 +
              (C30631 * C138 - C113 * C125) * C30396) *
                 C8863 +
             ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
             C9111 * C8865) *
                C30702 +
            (((C9088 - C9087) * C4702 + (C9090 - C9089) * C30396) * C8863 +
             ((C9092 - C9091) * C4702 + (C9094 - C9093) * C30396) * C8864 +
             ((C9095 - C9096) * C4702 + (C9097 - C9098) * C30396) * C8865) *
                C30553) *
               C1050 +
           ((((C113 * C287 - C30631 * C297) * C4702 +
              (C113 * C298 - C30631 * C317) * C30396) *
                 C8863 +
             ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
             C9766 * C8865) *
                C30702 +
            (((C9455 - C9454) * C4702 + (C9457 - C9456) * C30396) * C8863 +
             ((C9459 - C9458) * C4702 + (C9461 - C9460) * C30396) * C8864 +
             ((C9746 - C9747) * C4702 + (C9748 - C9749) * C30396) * C8865) *
                C30553) *
               C1051 +
           ((((C30631 * C303 - C113 * C290) * C4702 +
              (C30631 * C320 - C113 * C304) * C30396) *
                 C8863 +
             ((C9750 - C9751) * C4702 + (C9752 - C9753) * C30396) * C8864 +
             C9769 * C8865) *
                C30702 +
            (((C9751 - C9750) * C4702 + (C9753 - C9752) * C30396) * C8863 +
             ((C9755 - C9754) * C4702 + (C9757 - C9756) * C30396) * C8864 +
             ((C9758 - C9759) * C4702 + (C9760 - C9761) * C30396) * C8865) *
                C30553) *
               C30732) *
              C30687 +
          (((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
             ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
             C9110 * C8865) *
                C30702 +
            (((C510 - C509) * C4702 + (C512 - C511) * C30396) * C8863 +
             ((C517 - C518) * C4702 + (C519 - C520) * C30396) * C8864 +
             ((C2258 - C2257) * C4702 + (C2260 - C2259) * C30396) * C8865) *
                C30553) *
               C1050 +
           ((((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
             ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
             ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
                C30702 +
            (((C928 - C927) * C4702 + (C930 - C929) * C30396) * C8863 +
             ((C2143 - C2144) * C4702 + (C2145 - C2146) * C30396) * C8864 +
             ((C113 * C2363 - C30631 * C2367) * C4702 +
              (C113 * C2368 - C30631 * C2372) * C30396) *
                 C8865) *
                C30553) *
               C1051 +
           ((((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
             ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
             ((C10014 - C10015) * C4702 + (C10016 - C10017) * C30396) * C8865) *
                C30702 +
            (((C1562 - C1561) * C4702 + (C1564 - C1563) * C30396) * C8863 +
             ((C10015 - C10014) * C4702 + (C10017 - C10016) * C30396) * C8864 +
             ((C30631 * C6464 - C113 * C6463) * C4702 +
              (C30631 * C6466 - C113 * C6465) * C30396) *
                 C8865) *
                C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30769 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30757 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30769 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C30645 * C30466 * C30757 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30769 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
            (C113 * C314 - C30631 * C325) * C104) *
               C30645 * C30466 * C30757 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C30448 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C30645 * C30466 * C30448 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C30645 * C30466 * C30448 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C30645 * C30466 * C30448 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
           (C30631 * C144 - C113 * C137) * C104) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C30631 * C478 - C113 * C468) * C4702 +
            (C30631 * C498 - C113 * C479) * C30396) *
               C8864 +
           ((C30631 * C484 - C113 * C471) * C4702 +
            (C30631 * C501 - C113 * C485) * C30396) *
               C8865) *
              C30466 * C30448 * C108 +
          (((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
           ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
           ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
              C30466 * C30448 * C109 +
          ((C166 * C4702 + C167 * C30396) * C8863 +
           ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
           (C535 * C4702 + C536 * C30396) * C8865) *
              C30466 * C30448 * C110 +
          ((C168 * C4702 + C169 * C30396) * C8863 +
           ((C526 - C525) * C4702 + (C528 - C527) * C30396) * C8864 +
           ((C529 - C530) * C4702 + (C531 - C532) * C30396) * C8865) *
              C30466 * C30448 * C111 +
          ((C170 * C4702 + C171 * C30396) * C8863 +
           ((C758 - C757) * C4702 + (C760 - C759) * C30396) * C8864 +
           ((C30631 * C496 - C113 * C477) * C4702 +
            (C30631 * C507 - C113 * C497) * C30396) *
               C8865) *
              C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C30631 * C478 - C113 * C468) * C4702 +
             (C30631 * C498 - C113 * C479) * C30396) *
                C8864 +
            ((C30631 * C484 - C113 * C471) * C4702 +
             (C30631 * C501 - C113 * C485) * C30396) *
                C8865) *
               C30466 * C30769 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C113 * C906 - C30631 * C911) * C4702 +
             (C113 * C912 - C30631 * C921) * C30396) *
                C8864 +
            ((C113 * C1258 - C30631 * C1267) * C4702 +
             (C113 * C1268 - C30631 * C1285) * C30396) *
                C8865) *
               C30466 * C30757 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C284 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            ((C518 - C517) * C4702 + (C520 - C519) * C30396) * C8865) *
               C30466 * C30769 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C30757 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C285 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            (C535 * C4702 + C536 * C30396) * C8865) *
               C30466 * C30769 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C30757 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C4702 +
             (C30631 * C138 - C113 * C125) * C30396) *
                C8863 +
            ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
            C9111 * C8865) *
               C30466 * C1050 +
           (((C113 * C287 - C30631 * C297) * C4702 +
             (C113 * C298 - C30631 * C317) * C30396) *
                C8863 +
            ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
            ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
               C30466 * C1051 +
           (((C30631 * C303 - C113 * C290) * C4702 +
             (C30631 * C320 - C113 * C304) * C30396) *
                C8863 +
            ((C30631 * C1273 - C113 * C1261) * C4702 +
             (C30631 * C1288 - C113 * C1274) * C30396) *
                C8864 +
            ((C30631 * C1279 - C113 * C1264) * C4702 +
             (C30631 * C1291 - C113 * C1280) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30766 +
          ((((C147 - C146) * C4702 + (C149 - C148) * C30396) * C8863 +
            ((C509 - C510) * C4702 + (C511 - C512) * C30396) * C8864 +
            C9110 * C8865) *
               C30466 * C1050 +
           (((C329 - C328) * C4702 + (C331 - C330) * C30396) * C8863 +
            ((C927 - C928) * C4702 + (C929 - C930) * C30396) * C8864 +
            ((C2144 - C2143) * C4702 + (C2146 - C2145) * C30396) * C8865) *
               C30466 * C1051 +
           (((C337 - C336) * C4702 + (C339 - C338) * C30396) * C8863 +
            ((C1561 - C1562) * C4702 + (C1563 - C1564) * C30396) * C8864 +
            ((C113 * C1265 - C30631 * C1281) * C4702 +
             (C113 * C1282 - C30631 * C1292) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30753 +
          (((C166 * C4702 + C167 * C30396) * C8863 +
            ((C514 - C513) * C4702 + (C516 - C515) * C30396) * C8864 +
            C9107 * C8865) *
               C30466 * C1050 +
           ((C352 * C4702 + C353 * C30396) * C8863 +
            ((C932 - C931) * C4702 + (C934 - C933) * C30396) * C8864 +
            ((C2147 - C2148) * C4702 + (C2149 - C2150) * C30396) * C8865) *
               C30466 * C1051 +
           ((C354 * C4702 + C355 * C30396) * C8863 +
            ((C1566 - C1565) * C4702 + (C1568 - C1567) * C30396) * C8864 +
            ((C30631 * C1283 - C113 * C1266) * C4702 +
             (C30631 * C1293 - C113 * C1284) * C30396) *
                C8865) *
               C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C4702 +
            (C30631 * C138 - C113 * C125) * C30396) *
               C8863 +
           ((C9087 - C9088) * C4702 + (C9089 - C9090) * C30396) * C8864 +
           C9111 * C8865) *
              C30466 * C1118 +
          (((C113 * C287 - C30631 * C297) * C4702 +
            (C113 * C298 - C30631 * C317) * C30396) *
               C8863 +
           ((C9454 - C9455) * C4702 + (C9456 - C9457) * C30396) * C8864 +
           ((C9458 - C9459) * C4702 + (C9460 - C9461) * C30396) * C8865) *
              C30466 * C1119 +
          (((C30631 * C303 - C113 * C290) * C4702 +
            (C30631 * C320 - C113 * C304) * C30396) *
               C8863 +
           ((C30631 * C1273 - C113 * C1261) * C4702 +
            (C30631 * C1288 - C113 * C1274) * C30396) *
               C8864 +
           ((C30631 * C1279 - C113 * C1264) * C4702 +
            (C30631 * C1291 - C113 * C1280) * C30396) *
               C8865) *
              C30466 * C1120 +
          (((C113 * C1124 - C30631 * C1130) * C4702 +
            (C113 * C1131 - C30631 * C1142) * C30396) *
               C8863 +
           ((C113 * C1666 - C30631 * C1669) * C4702 +
            (C113 * C1670 - C30631 * C1675) * C30396) *
               C8864 +
           ((C113 * C5555 - C30631 * C5558) * C4702 +
            (C113 * C5559 - C30631 * C5564) * C30396) *
               C8865) *
              C30466 * C1121 +
          (((C30631 * C1136 - C113 * C1127) * C4702 +
            (C30631 * C1145 - C113 * C1137) * C30396) *
               C8863 +
           ((C30631 * C5560 - C113 * C5556) * C4702 +
            (C30631 * C5565 - C113 * C5561) * C30396) *
               C8864 +
           ((C30631 * C5562 - C113 * C5557) * C4702 +
            (C30631 * C5566 - C113 * C5563) * C30396) *
               C8865) *
              C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C30507 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C30514 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C30466 * C2840) *
                      C30425 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C30507 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C30514 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    (C20213 * C13132 + C20214 * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C2840) *
                      C30434 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C30507 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30514 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C2840) *
                      C2843)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30507 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30514 +
                   ((((C30631 * C303 - C113 * C290) * C13132 +
                      (C30631 * C320 - C113 * C304) * C13128 +
                      (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                         C18742 +
                     ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                      C20211 * C13133 + C20212 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                      C20213 * C13133 + C20214 * C13129) *
                         C18742 +
                     ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                      (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                         C18743) *
                        C30553) *
                       C2840) *
                      C2580 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30507 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30514 +
                   ((((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                      (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                         C18742 +
                     (C20213 * C13132 + C20214 * C13128 +
                      (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                         C18743) *
                        C30702 +
                    ((C20211 * C13132 + C20212 * C13128 +
                      (C1566 - C1565) * C13133 + (C1568 - C1567) * C13129) *
                         C18742 +
                     ((C10015 - C10014) * C13132 + (C10017 - C10016) * C13128 +
                      (C30631 * C1283 - C113 * C1266) * C13133 +
                      (C30631 * C1293 - C113 * C1284) * C13129) *
                         C18743) *
                        C30553) *
                       C2840) *
                      C30431)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C30776 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C30772 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C30466 * C30762 +
                   (((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C2580 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C30776 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C30772 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    (C20213 * C13132 + C20214 * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30762 +
                   (((C1404 - C1403) * C13132 + (C1406 - C1405) * C13128 +
                     (C1408 - C1407) * C13133 + (C1410 - C1409) * C13129) *
                        C18742 +
                    ((C20014 - C20013) * C13132 + (C20016 - C20015) * C13128 +
                     (C30631 * C1673 - C113 * C1668) * C13133 +
                     (C30631 * C1677 - C113 * C1674) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C30431)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30775 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30768 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30755 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    (C19307 * C13132 + C19308 * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   ((C645 * C13132 + C646 * C13128 + (C648 - C647) * C13133 +
                     (C650 - C649) * C13129) *
                        C18742 +
                    ((C936 - C935) * C13132 + (C938 - C937) * C13128 +
                     (C30631 * C919 - C113 * C910) * C13133 +
                     (C30631 * C925 - C113 * C920) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30736)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30770 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30759 +
                    ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                      C19042 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10693 * C13133 + C10694 * C13129) *
                         C18743) *
                        C30735) *
                       C2472 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30770 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30759 +
                    ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                      C20914 * C13129) *
                         C18742 +
                     ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C30735) *
                       C30511) *
                      C2580 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30770 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30759 +
                    ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                      C19046 * C13129) *
                         C18742 +
                     (C21045 * C13132 + C21046 * C13128 +
                      (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                         C18743) *
                        C30735) *
                       C2472 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30770 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30759 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C2148 - C2147) * C13133 + (C2150 - C2149) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30631 * C2369 - C113 * C2364) * C13133 +
                      (C30631 * C2373 - C113 * C2370) * C13129) *
                         C18743) *
                        C30735) *
                       C30511) *
                      C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30425 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30434 +
                  ((((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                      (C157 - C156) * C13129) *
                         C18742 +
                     (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                      C756 * C13129) *
                         C18743) *
                        C30702 +
                    ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                      C19308 * C13129) *
                         C18742 +
                     (C19045 * C13132 + C19046 * C13128 +
                      (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   (((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                      (C347 - C346) * C13129) *
                         C18742 +
                     (C19507 * C13132 + C19508 * C13128 +
                      (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                         C18743) *
                        C30702 +
                    ((C939 * C13132 + C940 * C13128 + (C936 - C935) * C13133 +
                      (C938 - C937) * C13129) *
                         C18742 +
                     ((C2148 - C2147) * C13132 + (C2150 - C2149) * C13128 +
                      (C30631 * C2139 - C113 * C2138) * C13133 +
                      (C30631 * C2141 - C113 * C2140) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C2843)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30775 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30768 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30755 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    (C19307 * C13132 + C19308 * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C30466 * C2472 +
                   ((C645 * C13132 + C646 * C13128 + (C648 - C647) * C13133 +
                     (C650 - C649) * C13129) *
                        C18742 +
                    ((C936 - C935) * C13132 + (C938 - C937) * C13128 +
                     (C30631 * C919 - C113 * C910) * C13133 +
                     (C30631 * C925 - C113 * C920) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30736)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C30776 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C30772 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C30466 * C30762 +
                   (((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C2580 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C30776 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C30772 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    (C20213 * C13132 + C20214 * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30762 +
                   (((C1404 - C1403) * C13132 + (C1406 - C1405) * C13128 +
                     (C1408 - C1407) * C13133 + (C1410 - C1409) * C13129) *
                        C18742 +
                    ((C20014 - C20013) * C13132 + (C20016 - C20015) * C13128 +
                     (C30631 * C1673 - C113 * C1668) * C13133 +
                     (C30631 * C1677 - C113 * C1674) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30507 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30514 +
                   ((((C30631 * C303 - C113 * C290) * C13132 +
                      (C30631 * C320 - C113 * C304) * C13128 +
                      (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                         C18742 +
                     ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                      C20211 * C13133 + C20212 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                      C20213 * C13133 + C20214 * C13129) *
                         C18742 +
                     ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                      (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                         C18743) *
                        C30553) *
                       C2840) *
                      C30687 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30507 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30514 +
                   ((((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                      (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                         C18742 +
                     (C20213 * C13132 + C20214 * C13128 +
                      (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                         C18743) *
                        C3234 +
                    ((C20211 * C13132 + C20212 * C13128 +
                      (C1566 - C1565) * C13133 + (C1568 - C1567) * C13129) *
                         C18742 +
                     ((C10015 - C10014) * C13132 + (C10017 - C10016) * C13128 +
                      (C30631 * C1283 - C113 * C1266) * C13133 +
                      (C30631 * C1293 - C113 * C1284) * C13129) *
                         C18743) *
                        C30553) *
                       C2840) *
                      C30431)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30549 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30556 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C3742) *
                      C30507 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30549 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30556 +
                   ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                     C20914 * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C3742) *
                      C30514 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C30549 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30556 +
                   ((C9764 * C13132 + C9765 * C13128 +
                     (C10015 - C10014) * C13133 + (C10017 - C10016) * C13129) *
                        C18742 +
                    ((C9759 - C9758) * C13132 + (C9761 - C9760) * C13128 +
                     (C30631 * C6464 - C113 * C6463) * C13133 +
                     (C30631 * C6466 - C113 * C6465) * C13129) *
                        C18743) *
                       C3742) *
                      C2840) *
                 C30420) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C30776 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30553) *
                      C30772 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30553) *
                      C30762 +
                  ((((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C3234 +
                   (((C10117 - C10116) * C13132 + (C10119 - C10118) * C13128 +
                     (C20014 - C20013) * C13133 + (C20016 - C20015) * C13129) *
                        C18742 +
                    ((C10121 - C10120) * C13132 + (C10123 - C10122) * C13128 +
                     (C30631 * C6362 - C113 * C6361) * C13133 +
                     (C30631 * C6364 - C113 * C6363) * C13129) *
                        C18743) *
                       C30553) *
                      C30742) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30766 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30753 +
                  ((((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                      (C157 - C156) * C13129) *
                         C18742 +
                     (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                      C756 * C13129) *
                         C18743) *
                        C3234 +
                    ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                      C19308 * C13129) *
                         C18742 +
                     (C19045 * C13132 + C19046 * C13128 +
                      (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   (((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                      (C347 - C346) * C13129) *
                         C18742 +
                     (C19507 * C13132 + C19508 * C13128 +
                      (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                         C18743) *
                        C3234 +
                    ((C939 * C13132 + C940 * C13128 + (C936 - C935) * C13133 +
                      (C938 - C937) * C13129) *
                         C18742 +
                     ((C2148 - C2147) * C13132 + (C2150 - C2149) * C13128 +
                      (C30631 * C2139 - C113 * C2138) * C13133 +
                      (C30631 * C2141 - C113 * C2140) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30777 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30774 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30765 +
                   ((C10414 * C13132 + C10415 * C13128 + C21045 * C13133 +
                     C21046 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10695 - C10696) * C13133 + (C10697 - C10698) * C13129) *
                        C18743) *
                       C30748) *
                      C2472 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30777 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30774 +
                   ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                     C20914 * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30765 +
                   ((C10804 * C13132 + C10805 * C13128 +
                     (C10585 - C10584) * C13133 + (C10587 - C10586) * C13129) *
                        C18742 +
                    ((C10807 - C10806) * C13132 + (C10809 - C10808) * C13128 +
                     (C30631 * C10578 - C113 * C10577) * C13133 +
                     (C30631 * C10580 - C113 * C10579) * C13129) *
                        C18743) *
                       C30748) *
                      C30511) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30549 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30556 +
                    ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                      C19042 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10693 * C13133 + C10694 * C13129) *
                         C18743) *
                        C3742) *
                       C2472 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30549 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30556 +
                    ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                      C20914 * C13129) *
                         C18742 +
                     ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C3742) *
                       C30511) *
                      C30687 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30549 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30556 +
                    ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                      C19046 * C13129) *
                         C18742 +
                     (C21045 * C13132 + C21046 * C13128 +
                      (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                         C18743) *
                        C3742) *
                       C2472 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30549 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30556 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C2148 - C2147) * C13133 + (C2150 - C2149) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30631 * C2369 - C113 * C2364) * C13133 +
                      (C30631 * C2373 - C113 * C2370) * C13129) *
                         C18743) *
                        C3742) *
                       C30511) *
                      C30431)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30766 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30753 +
                  ((((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                      (C157 - C156) * C13129) *
                         C18742 +
                     (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                      C756 * C13129) *
                         C18743) *
                        C3234 +
                    ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                      C19308 * C13129) *
                         C18742 +
                     (C19045 * C13132 + C19046 * C13128 +
                      (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                         C18743) *
                        C30553) *
                       C2472 +
                   (((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                      (C347 - C346) * C13129) *
                         C18742 +
                     (C19507 * C13132 + C19508 * C13128 +
                      (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                         C18743) *
                        C3234 +
                    ((C939 * C13132 + C940 * C13128 + (C936 - C935) * C13133 +
                      (C938 - C937) * C13129) *
                         C18742 +
                     ((C2148 - C2147) * C13132 + (C2150 - C2149) * C13128 +
                      (C30631 * C2139 - C113 * C2138) * C13133 +
                      (C30631 * C2141 - C113 * C2140) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C30776 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30553) *
                      C30772 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30553) *
                      C30762 +
                  ((((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C3234 +
                   (((C10117 - C10116) * C13132 + (C10119 - C10118) * C13128 +
                     (C20014 - C20013) * C13133 + (C20016 - C20015) * C13129) *
                        C18742 +
                    ((C10121 - C10120) * C13132 + (C10123 - C10122) * C13128 +
                     (C30631 * C6362 - C113 * C6361) * C13133 +
                     (C30631 * C6364 - C113 * C6363) * C13129) *
                        C18743) *
                       C30553) *
                      C30742) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C1392 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C1393 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C1394 +
                   (((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C30687 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C1392 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C1393 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C1394 +
                   (((C1404 - C1403) * C13132 + (C1406 - C1405) * C13128 +
                     (C1408 - C1407) * C13133 + (C1410 - C1409) * C13129) *
                        C18742 +
                    ((C20014 - C20013) * C13132 + (C20016 - C20015) * C13128 +
                     (C30631 * C1673 - C113 * C1668) * C13133 +
                     (C30631 * C1677 - C113 * C1674) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C30431)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     (C928 - C927) * C13133 + (C930 - C929) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C636 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    ((C927 - C928) * C13132 + (C929 - C930) * C13128 +
                     C939 * C13133 + C940 * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C637 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    ((C932 - C931) * C13132 + (C934 - C933) * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C638 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    ((C526 - C525) * C13132 + (C528 - C527) * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   ((C645 * C13132 + C646 * C13128 + (C648 - C647) * C13133 +
                     (C650 - C649) * C13129) *
                        C18742 +
                    ((C936 - C935) * C13132 + (C938 - C937) * C13128 +
                     (C30631 * C919 - C113 * C910) * C13133 +
                     (C30631 * C925 - C113 * C920) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30736)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C1788 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C1789 +
                    ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                      C19042 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10693 * C13133 + C10694 * C13129) *
                         C18743) *
                        C30735) *
                       C30701 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C1788 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C1789 +
                    ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                      C20914 * C13129) *
                         C18742 +
                     ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C30735) *
                       C30511) *
                      C30687 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C1788 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C1789 +
                    ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                      C19046 * C13129) *
                         C18742 +
                     ((C2257 - C2258) * C13132 + (C2259 - C2260) * C13128 +
                      (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                         C18743) *
                        C30735) *
                       C30701 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C1788 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C1789 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C2148 - C2147) * C13133 + (C2150 - C2149) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30631 * C2369 - C113 * C2364) * C13133 +
                      (C30631 * C2373 - C113 * C2370) * C13129) *
                         C18743) *
                        C30735) *
                       C30511) *
                      C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[86] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C1392 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30553) *
                      C1393 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30553) *
                      C1394 +
                  ((((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C30702 +
                   (((C10117 - C10116) * C13132 + (C10119 - C10118) * C13128 +
                     (C20014 - C20013) * C13133 + (C20016 - C20015) * C13129) *
                        C18742 +
                    ((C10121 - C10120) * C13132 + (C10123 - C10122) * C13128 +
                     (C30631 * C6362 - C113 * C6361) * C13133 +
                     (C30631 * C6364 - C113 * C6363) * C13129) *
                        C18743) *
                       C30553) *
                      C30742) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C284 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     ((C2143 - C2144) * C13132 + (C2145 - C2146) * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C285 +
                  ((((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                      (C157 - C156) * C13129) *
                         C18742 +
                     (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                      C756 * C13129) *
                         C18743) *
                        C30702 +
                    ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                      C19308 * C13129) *
                         C18742 +
                     (C19045 * C13132 + C19046 * C13128 +
                      (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   (((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                      (C347 - C346) * C13129) *
                         C18742 +
                     (C19507 * C13132 + C19508 * C13128 +
                      (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                         C18743) *
                        C30702 +
                    ((C939 * C13132 + C940 * C13128 + (C936 - C935) * C13133 +
                      (C938 - C937) * C13129) *
                         C18742 +
                     ((C2148 - C2147) * C13132 + (C2150 - C2149) * C13128 +
                      (C30631 * C2139 - C113 * C2138) * C13133 +
                      (C30631 * C2141 - C113 * C2140) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C2248 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C2249 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C2250 +
                   ((C10414 * C13132 + C10415 * C13128 + C21045 * C13133 +
                     C21046 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10695 - C10696) * C13133 + (C10697 - C10698) * C13129) *
                        C18743) *
                       C30748) *
                      C30701 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C2248 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C2249 +
                   ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                     C20914 * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C2250 +
                   ((C10804 * C13132 + C10805 * C13128 +
                     (C10585 - C10584) * C13133 + (C10587 - C10586) * C13129) *
                        C18742 +
                    ((C10807 - C10806) * C13132 + (C10809 - C10808) * C13128 +
                     (C30631 * C10578 - C113 * C10577) * C13133 +
                     (C30631 * C10580 - C113 * C10579) * C13129) *
                        C18743) *
                       C30748) *
                      C30511) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[87] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C30631 * C124 - C113 * C117) * C13132 +
                        (C30631 * C138 - C113 * C125) * C13128 +
                        (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                           C18742 +
                       ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                        (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                           C18743) *
                          C30466 * C30448 * C108 +
                      (((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                        (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                           C18742 +
                       ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                        C533 * C13133 + C534 * C13129) *
                           C18743) *
                          C30466 * C30448 * C109 +
                      ((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                        (C157 - C156) * C13129) *
                           C18742 +
                       ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                        C755 * C13133 + C756 * C13129) *
                           C18743) *
                          C30466 * C30448 * C110 +
                      ((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                        (C161 - C160) * C13129) *
                           C18742 +
                       ((C526 - C525) * C13132 + (C528 - C527) * C13128 +
                        (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                           C18743) *
                          C30466 * C30448 * C111 +
                      ((C170 * C13132 + C171 * C13128 + (C163 - C162) * C13133 +
                        (C165 - C164) * C13129) *
                           C18742 +
                       ((C758 - C757) * C13132 + (C760 - C759) * C13128 +
                        (C30631 * C751 - C113 * C750) * C13133 +
                        (C30631 * C753 - C113 * C752) * C13129) *
                           C18743) *
                          C30466 * C30448 * C112) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((((C30631 * C124 - C113 * C117) * C13132 +
                         (C30631 * C138 - C113 * C125) * C13128 +
                         (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                            C18742 +
                        ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                         (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                            C18743) *
                           C30466 * C30769 +
                       (((C113 * C287 - C30631 * C297) * C13132 +
                         (C113 * C298 - C30631 * C317) * C13128 +
                         (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                            C18742 +
                        ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                         (C928 - C927) * C13133 + (C930 - C929) * C13129) *
                            C18743) *
                           C30466 * C30757 +
                       (((C30631 * C303 - C113 * C290) * C13132 +
                         (C30631 * C320 - C113 * C304) * C13128 +
                         (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                            C18742 +
                        ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                         (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                            C18743) *
                           C30466 * C30732) *
                          C284 +
                      ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                         (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                            C18742 +
                        ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                         C533 * C13133 + C534 * C13129) *
                            C18743) *
                           C30466 * C30769 +
                       (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                         (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                            C18742 +
                        ((C927 - C928) * C13132 + (C929 - C930) * C13128 +
                         C939 * C13133 + C940 * C13129) *
                            C18743) *
                           C30466 * C30757 +
                       (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                         (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                            C18742 +
                        ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                         (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                            C18743) *
                           C30466 * C30732) *
                          C285 +
                      (((C166 * C13132 + C167 * C13128 +
                         (C155 - C154) * C13133 + (C157 - C156) * C13129) *
                            C18742 +
                        ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                         C755 * C13133 + C756 * C13129) *
                            C18743) *
                           C30466 * C30769 +
                       ((C352 * C13132 + C353 * C13128 +
                         (C345 - C344) * C13133 + (C347 - C346) * C13129) *
                            C18742 +
                        ((C932 - C931) * C13132 + (C934 - C933) * C13128 +
                         (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                            C18743) *
                           C30466 * C30757 +
                       ((C354 * C13132 + C355 * C13128 +
                         (C349 - C348) * C13133 + (C351 - C350) * C13129) *
                            C18742 +
                        ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                         (C30631 * C1557 - C113 * C1556) * C13133 +
                         (C30631 * C1559 - C113 * C1558) * C13129) *
                            C18743) *
                           C30466 * C30732) *
                          C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30770 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C284 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30770 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    ((C2257 - C2258) * C13132 + (C2259 - C2260) * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C285 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30770 +
                   ((C533 * C13132 + C534 * C13128 + (C526 - C525) * C13133 +
                     (C528 - C527) * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30759 +
                   ((C535 * C13132 + C536 * C13128 + (C530 - C529) * C13133 +
                     (C532 - C531) * C13129) *
                        C18742 +
                    ((C2262 - C2261) * C13132 + (C2264 - C2263) * C13128 +
                     (C30631 * C2253 - C113 * C2252) * C13133 +
                     (C30631 * C2255 - C113 * C2254) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30766 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30753 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C19037 * C13133 + C19038 * C13129) *
                       C18743) *
                      C30466 * C1118 +
                  (((C113 * C287 - C30631 * C297) * C13132 +
                    (C113 * C298 - C30631 * C317) * C13128 +
                    (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                       C18742 +
                   ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                    C19503 * C13133 + C19504 * C13129) *
                       C18743) *
                      C30466 * C1119 +
                  (((C30631 * C303 - C113 * C290) * C13132 +
                    (C30631 * C320 - C113 * C304) * C13128 +
                    (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                       C18742 +
                   ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                    (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                       C18743) *
                      C30466 * C1120 +
                  (((C113 * C1124 - C30631 * C1130) * C13132 +
                    (C113 * C1131 - C30631 * C1142) * C13128 +
                    (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                       C18742 +
                   ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                    (C113 * C1667 - C30631 * C1671) * C13133 +
                    (C113 * C1672 - C30631 * C1676) * C13129) *
                       C18743) *
                      C30466 * C1121 +
                  (((C30631 * C1136 - C113 * C1127) * C13132 +
                    (C30631 * C1145 - C113 * C1137) * C13128 +
                    (C30631 * C1138 - C113 * C1128) * C13133 +
                    (C30631 * C1146 - C113 * C1139) * C13129) *
                       C18742 +
                   ((C30631 * C5560 - C113 * C5556) * C13132 +
                    (C30631 * C5565 - C113 * C5561) * C13128 +
                    (C30631 * C5816 - C113 * C5815) * C13133 +
                    (C30631 * C5818 - C113 * C5817) * C13129) *
                       C18743) *
                      C30466 * C1122) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30770 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C1050 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30770 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9744 * C13132 + C9745 * C13128 +
                     (C2143 - C2144) * C13133 + (C2145 - C2146) * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30735) *
                      C1051 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30770 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     (C1561 - C1562) * C13133 + (C1563 - C1564) * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30759 +
                   ((C9764 * C13132 + C9765 * C13128 +
                     (C10015 - C10014) * C13133 + (C10017 - C10016) * C13129) *
                        C18742 +
                    ((C9759 - C9758) * C13132 + (C9761 - C9760) * C13128 +
                     (C30631 * C6464 - C113 * C6463) * C13133 +
                     (C30631 * C6466 - C113 * C6465) * C13129) *
                        C18743) *
                       C30735) *
                      C30732) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30766 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C1788 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    ((C2257 - C2258) * C13132 + (C2259 - C2260) * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30753 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C1788 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C1789 +
                   ((C535 * C13132 + C536 * C13128 + (C530 - C529) * C13133 +
                     (C532 - C531) * C13129) *
                        C18742 +
                    ((C2262 - C2261) * C13132 + (C2264 - C2263) * C13128 +
                     (C30631 * C2253 - C113 * C2252) * C13133 +
                     (C30631 * C2255 - C113 * C2254) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C30769 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9744 * C13132 + C9745 * C13128 +
                     (C2143 - C2144) * C13133 + (C2145 - C2146) * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30735) *
                      C30757 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C1789 +
                   ((C9764 * C13132 + C9765 * C13128 +
                     (C10015 - C10014) * C13133 + (C10017 - C10016) * C13129) *
                        C18742 +
                    ((C9759 - C9758) * C13132 + (C9761 - C9760) * C13128 +
                     (C30631 * C6464 - C113 * C6463) * C13133 +
                     (C30631 * C6466 - C113 * C6465) * C13129) *
                        C18743) *
                       C30735) *
                      C30732) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C19037 * C13133 + C19038 * C13129) *
                       C18743) *
                      C1963 +
                  (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                    C19039 * C13133 + C19040 * C13129) *
                       C18742 +
                   ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                    C9099 * C13133 + C9100 * C13129) *
                       C18743) *
                      C1964 +
                  ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                    C19042 * C13129) *
                       C18742 +
                   ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                    C10693 * C13133 + C10694 * C13129) *
                       C18743) *
                      C1965 +
                  ((C10414 * C13132 + C10415 * C13128 +
                    (C2257 - C2258) * C13133 + (C2259 - C2260) * C13129) *
                       C18742 +
                   ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                    (C10695 - C10696) * C13133 + (C10697 - C10698) * C13129) *
                       C18743) *
                      C1966 +
                  ((C10426 * C13132 + C10427 * C13128 +
                    (C10696 - C10695) * C13133 + (C10698 - C10697) * C13129) *
                       C18742 +
                   ((C10421 - C10420) * C13132 + (C10423 - C10422) * C13128 +
                    (C30631 * C10689 - C113 * C10688) * C13133 +
                    (C30631 * C10691 - C113 * C10690) * C13129) *
                       C18743) *
                      C1967) *
                 C30448 * C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C1050 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C1051 +
                   ((((C30631 * C303 - C113 * C290) * C13132 +
                      (C30631 * C320 - C113 * C304) * C13128 +
                      (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                         C18742 +
                     ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                      C20211 * C13133 + C20212 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                      C20213 * C13133 + C20214 * C13129) *
                         C18742 +
                     ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                      (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C30687 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C1050 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     ((C2143 - C2144) * C13132 + (C2145 - C2146) * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C1051 +
                   ((((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                      (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                         C18742 +
                     (C20213 * C13132 + C20214 * C13128 +
                      (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                         C18743) *
                        C30702 +
                    ((C20211 * C13132 + C20212 * C13128 +
                      (C1566 - C1565) * C13133 + (C1568 - C1567) * C13129) *
                         C18742 +
                     ((C10015 - C10014) * C13132 + (C10017 - C10016) * C13128 +
                      (C30631 * C1283 - C113 * C1266) * C13133 +
                      (C30631 * C1293 - C113 * C1284) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C30431)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C636 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30702 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C637 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30702 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C638 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    (C19307 * C13132 + C19308 * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C30702 +
                   ((C755 * C13132 + C756 * C13128 + (C758 - C757) * C13133 +
                     (C760 - C759) * C13129) *
                        C18742 +
                    ((C530 - C529) * C13132 + (C532 - C531) * C13128 +
                     (C30631 * C496 - C113 * C477) * C13133 +
                     (C30631 * C507 - C113 * C497) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30736)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C2248 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C2249 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C2250 +
                   ((C10414 * C13132 + C10415 * C13128 + C21045 * C13133 +
                     C21046 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10695 - C10696) * C13133 + (C10697 - C10698) * C13129) *
                        C18743) *
                       C30748) *
                      C30448 * C30687 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C2248 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C2249 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    (C21045 * C13132 + C21046 * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C2250 +
                   ((C10693 * C13132 + C10694 * C13128 +
                     (C2262 - C2261) * C13133 + (C2264 - C2263) * C13129) *
                        C18742 +
                    ((C10696 - C10695) * C13132 + (C10698 - C10697) * C13128 +
                     (C30631 * C1984 - C113 * C1973) * C13133 +
                     (C30631 * C1991 - C113 * C1985) * C13129) *
                        C18743) *
                       C30748) *
                      C30448 * C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     (C928 - C927) * C13133 + (C930 - C929) * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C284 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                     C533 * C13133 + C534 * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    ((C927 - C928) * C13132 + (C929 - C930) * C13128 +
                     C939 * C13133 + C940 * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C285 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                     C755 * C13133 + C756 * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    ((C932 - C931) * C13132 + (C934 - C933) * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                       C18743) *
                      C30466 * C30448 * C108 +
                  (((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                    (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                       C18742 +
                   ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                    C533 * C13133 + C534 * C13129) *
                       C18743) *
                      C30466 * C30448 * C109 +
                  ((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                    (C157 - C156) * C13129) *
                       C18742 +
                   ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                    C755 * C13133 + C756 * C13129) *
                       C18743) *
                      C30466 * C30448 * C110 +
                  ((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                    (C161 - C160) * C13129) *
                       C18742 +
                   ((C526 - C525) * C13132 + (C528 - C527) * C13128 +
                    (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                       C18743) *
                      C30466 * C30448 * C111 +
                  ((C170 * C13132 + C171 * C13128 + (C163 - C162) * C13133 +
                    (C165 - C164) * C13129) *
                       C18742 +
                   ((C758 - C757) * C13132 + (C760 - C759) * C13128 +
                    (C30631 * C751 - C113 * C750) * C13133 +
                    (C30631 * C753 - C113 * C752) * C13129) *
                       C18743) *
                      C30466 * C30448 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30766 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30753 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C19037 * C13133 + C19038 * C13129) *
                       C18743) *
                      C30466 * C1118 +
                  (((C113 * C287 - C30631 * C297) * C13132 +
                    (C113 * C298 - C30631 * C317) * C13128 +
                    (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                       C18742 +
                   ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                    C19503 * C13133 + C19504 * C13129) *
                       C18743) *
                      C30466 * C1119 +
                  (((C30631 * C303 - C113 * C290) * C13132 +
                    (C30631 * C320 - C113 * C304) * C13128 +
                    (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                       C18742 +
                   ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                    (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                       C18743) *
                      C30466 * C1120 +
                  (((C113 * C1124 - C30631 * C1130) * C13132 +
                    (C113 * C1131 - C30631 * C1142) * C13128 +
                    (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                       C18742 +
                   ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                    (C113 * C1667 - C30631 * C1671) * C13133 +
                    (C113 * C1672 - C30631 * C1676) * C13129) *
                       C18743) *
                      C30466 * C1121 +
                  (((C30631 * C1136 - C113 * C1127) * C13132 +
                    (C30631 * C1145 - C113 * C1137) * C13128 +
                    (C30631 * C1138 - C113 * C1128) * C13133 +
                    (C30631 * C1146 - C113 * C1139) * C13129) *
                       C18742 +
                   ((C30631 * C5560 - C113 * C5556) * C13132 +
                    (C30631 * C5565 - C113 * C5561) * C13128 +
                    (C30631 * C5816 - C113 * C5815) * C13133 +
                    (C30631 * C5818 - C113 * C5817) * C13129) *
                       C18743) *
                      C30466 * C1122) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30766 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C1788 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    ((C2257 - C2258) * C13132 + (C2259 - C2260) * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30753 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C1788 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C1789 +
                   ((C535 * C13132 + C536 * C13128 + (C530 - C529) * C13133 +
                     (C532 - C531) * C13129) *
                        C18742 +
                    ((C2262 - C2261) * C13132 + (C2264 - C2263) * C13128 +
                     (C30631 * C2253 - C113 * C2252) * C13133 +
                     (C30631 * C2255 - C113 * C2254) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C30769 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C1789 +
                   ((C9744 * C13132 + C9745 * C13128 +
                     (C2143 - C2144) * C13133 + (C2145 - C2146) * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30735) *
                      C30757 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C1788 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C1789 +
                   ((C9764 * C13132 + C9765 * C13128 +
                     (C10015 - C10014) * C13133 + (C10017 - C10016) * C13129) *
                        C18742 +
                    ((C9759 - C9758) * C13132 + (C9761 - C9760) * C13128 +
                     (C30631 * C6464 - C113 * C6463) * C13133 +
                     (C30631 * C6466 - C113 * C6465) * C13129) *
                        C18743) *
                       C30735) *
                      C30732) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30425 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30434 +
                  ((((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                      (C157 - C156) * C13129) *
                         C18742 +
                     (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                      C756 * C13129) *
                         C18743) *
                        C3234 +
                    ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                      C19308 * C13129) *
                         C18742 +
                     (C19045 * C13132 + C19046 * C13128 +
                      (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   (((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                      (C347 - C346) * C13129) *
                         C18742 +
                     (C19507 * C13132 + C19508 * C13128 +
                      (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                         C18743) *
                        C3234 +
                    ((C939 * C13132 + C940 * C13128 + (C936 - C935) * C13133 +
                      (C938 - C937) * C13129) *
                         C18742 +
                     ((C2148 - C2147) * C13132 + (C2150 - C2149) * C13128 +
                      (C30631 * C2139 - C113 * C2138) * C13133 +
                      (C30631 * C2141 - C113 * C2140) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C2843)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30549 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30556 +
                    ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                      C19042 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10693 * C13133 + C10694 * C13129) *
                         C18743) *
                        C3742) *
                       C30701 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30549 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30556 +
                    ((C9744 * C13132 + C9745 * C13128 + C20913 * C13133 +
                      C20914 * C13129) *
                         C18742 +
                     ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C3742) *
                       C30511) *
                      C2580 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30549 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30556 +
                    ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                      C19046 * C13129) *
                         C18742 +
                     (C21045 * C13132 + C21046 * C13128 +
                      (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                         C18743) *
                        C3742) *
                       C30701 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30549 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30556 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C2148 - C2147) * C13133 + (C2150 - C2149) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30631 * C2369 - C113 * C2364) * C13133 +
                      (C30631 * C2373 - C113 * C2370) * C13129) *
                         C18743) *
                        C3742) *
                       C30511) *
                      C30431)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30769 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30757 +
                   ((((C30631 * C303 - C113 * C290) * C13132 +
                      (C30631 * C320 - C113 * C304) * C13128 +
                      (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                         C18742 +
                     ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                      C20211 * C13133 + C20212 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                      C20213 * C13133 + C20214 * C13129) *
                         C18742 +
                     ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                      (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C2580 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30769 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30757 +
                   ((((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                      (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                         C18742 +
                     (C20213 * C13132 + C20214 * C13128 +
                      (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                         C18743) *
                        C3234 +
                    ((C20211 * C13132 + C20212 * C13128 +
                      (C1566 - C1565) * C13133 + (C1568 - C1567) * C13129) *
                         C18742 +
                     ((C10015 - C10014) * C13132 + (C10017 - C10016) * C13128 +
                      (C30631 * C1283 - C113 * C1266) * C13133 +
                      (C30631 * C1293 - C113 * C1284) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C30431)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30775 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C3234 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30768 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C3234 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30755 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    (C19307 * C13132 + C19308 * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C3234 +
                   ((C755 * C13132 + C756 * C13128 + (C758 - C757) * C13133 +
                     (C760 - C759) * C13129) *
                        C18742 +
                    ((C530 - C529) * C13132 + (C532 - C531) * C13128 +
                     (C30631 * C496 - C113 * C477) * C13133 +
                     (C30631 * C507 - C113 * C497) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30736)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30777 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30774 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30765 +
                   ((C10414 * C13132 + C10415 * C13128 + C21045 * C13133 +
                     C21046 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10695 - C10696) * C13133 + (C10697 - C10698) * C13129) *
                        C18743) *
                       C30748) *
                      C30448 * C2580 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30777 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30774 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    (C21045 * C13132 + C21046 * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C30765 +
                   ((C10693 * C13132 + C10694 * C13128 +
                     (C2262 - C2261) * C13133 + (C2264 - C2263) * C13129) *
                        C18742 +
                    ((C10696 - C10695) * C13132 + (C10698 - C10697) * C13128 +
                     (C30631 * C1984 - C113 * C1973) * C13133 +
                     (C30631 * C1991 - C113 * C1985) * C13129) *
                        C18743) *
                       C30748) *
                      C30448 * C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30549 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30556 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C3742) *
                      C30448 * C30425 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30549 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30556 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    (C21045 * C13132 + C21046 * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C3742) *
                      C30448 * C30434 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30549 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30556 +
                   ((C535 * C13132 + C536 * C13128 + (C530 - C529) * C13133 +
                     (C532 - C531) * C13129) *
                        C18742 +
                    ((C2262 - C2261) * C13132 + (C2264 - C2263) * C13128 +
                     (C30631 * C2253 - C113 * C2252) * C13133 +
                     (C30631 * C2255 - C113 * C2254) * C13129) *
                        C18743) *
                       C3742) *
                      C30448 * C2843)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C3234 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30775 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C3234 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30768 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C3234 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30755 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    (C19307 * C13132 + C19308 * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C3234 +
                   ((C755 * C13132 + C756 * C13128 + (C758 - C757) * C13133 +
                     (C760 - C759) * C13129) *
                        C18742 +
                    ((C530 - C529) * C13132 + (C532 - C531) * C13128 +
                     (C30631 * C496 - C113 * C477) * C13133 +
                     (C30631 * C507 - C113 * C497) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30736)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30769 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30757 +
                   ((((C30631 * C303 - C113 * C290) * C13132 +
                      (C30631 * C320 - C113 * C304) * C13128 +
                      (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                         C18742 +
                     ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                      C20211 * C13133 + C20212 * C13129) *
                         C18743) *
                        C3234 +
                    (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                      C20213 * C13133 + C20214 * C13129) *
                         C18742 +
                     ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                      (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C2580 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30769 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C3234 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     (C20913 * C13132 + C20914 * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30757 +
                   ((((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                      (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                         C18742 +
                     (C20213 * C13132 + C20214 * C13128 +
                      (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                         C18743) *
                        C3234 +
                    ((C20211 * C13132 + C20212 * C13128 +
                      (C1566 - C1565) * C13133 + (C1568 - C1567) * C13129) *
                         C18742 +
                     ((C10015 - C10014) * C13132 + (C10017 - C10016) * C13128 +
                      (C30631 * C1283 - C113 * C1266) * C13133 +
                      (C30631 * C1293 - C113 * C1284) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     (C928 - C927) * C13133 + (C930 - C929) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C636 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    ((C927 - C928) * C13132 + (C929 - C930) * C13128 +
                     C939 * C13133 + C940 * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C637 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    ((C932 - C931) * C13132 + (C934 - C933) * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C638 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    ((C526 - C525) * C13132 + (C528 - C527) * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C30466 * C30701 +
                   ((C645 * C13132 + C646 * C13128 + (C648 - C647) * C13133 +
                     (C650 - C649) * C13129) *
                        C18742 +
                    ((C936 - C935) * C13132 + (C938 - C937) * C13128 +
                     (C30631 * C919 - C113 * C910) * C13133 +
                     (C30631 * C925 - C113 * C920) * C13129) *
                        C18743) *
                       C30466 * C30511) *
                      C30736)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C1392 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C1393 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C1394 +
                   (((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C30687 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C1392 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C1393 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C1394 +
                   (((C1404 - C1403) * C13132 + (C1406 - C1405) * C13128 +
                     (C1408 - C1407) * C13133 + (C1410 - C1409) * C13129) *
                        C18742 +
                    ((C20014 - C20013) * C13132 + (C20016 - C20015) * C13128 +
                     (C30631 * C1673 - C113 * C1668) * C13133 +
                     (C30631 * C1677 - C113 * C1674) * C13129) *
                        C18743) *
                       C30466 * C30742) *
                      C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C284 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     ((C2143 - C2144) * C13132 + (C2145 - C2146) * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C285 +
                  ((((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                      (C157 - C156) * C13129) *
                         C18742 +
                     (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                      C756 * C13129) *
                         C18743) *
                        C30702 +
                    ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                      C19308 * C13129) *
                         C18742 +
                     (C19045 * C13132 + C19046 * C13128 +
                      (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                         C18743) *
                        C30553) *
                       C30701 +
                   (((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                      (C347 - C346) * C13129) *
                         C18742 +
                     (C19507 * C13132 + C19508 * C13128 +
                      (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                         C18743) *
                        C30702 +
                    ((C939 * C13132 + C940 * C13128 + (C936 - C935) * C13133 +
                      (C938 - C937) * C13129) *
                         C18742 +
                     ((C2148 - C2147) * C13132 + (C2150 - C2149) * C13128 +
                      (C30631 * C2139 - C113 * C2138) * C13133 +
                      (C30631 * C2141 - C113 * C2140) * C13129) *
                         C18743) *
                        C30553) *
                       C30511) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C1392 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30553) *
                      C1393 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     C20211 * C13133 + C20212 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     C20213 * C13133 + C20214 * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30553) *
                      C1394 +
                  ((((C113 * C1124 - C30631 * C1130) * C13132 +
                     (C113 * C1131 - C30631 * C1142) * C13128 +
                     (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                        C18742 +
                    ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                     (C20013 - C20014) * C13133 + (C20015 - C20016) * C13129) *
                        C18743) *
                       C30702 +
                   (((C10117 - C10116) * C13132 + (C10119 - C10118) * C13128 +
                     (C20014 - C20013) * C13133 + (C20016 - C20015) * C13129) *
                        C18742 +
                    ((C10121 - C10120) * C13132 + (C10123 - C10122) * C13128 +
                     (C30631 * C6362 - C113 * C6361) * C13133 +
                     (C30631 * C6364 - C113 * C6363) * C13129) *
                        C18743) *
                       C30553) *
                      C30742) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     (C928 - C927) * C13133 + (C930 - C929) * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C284 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                     C533 * C13133 + C534 * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    ((C927 - C928) * C13132 + (C929 - C930) * C13128 +
                     C939 * C13133 + C940 * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C285 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                     C755 * C13133 + C756 * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    ((C932 - C931) * C13132 + (C934 - C933) * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                       C18743) *
                      C30466 * C30448 * C108 +
                  (((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                    (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                       C18742 +
                   ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                    C533 * C13133 + C534 * C13129) *
                       C18743) *
                      C30466 * C30448 * C109 +
                  ((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                    (C157 - C156) * C13129) *
                       C18742 +
                   ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                    C755 * C13133 + C756 * C13129) *
                       C18743) *
                      C30466 * C30448 * C110 +
                  ((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                    (C161 - C160) * C13129) *
                       C18742 +
                   ((C526 - C525) * C13132 + (C528 - C527) * C13128 +
                    (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                       C18743) *
                      C30466 * C30448 * C111 +
                  ((C170 * C13132 + C171 * C13128 + (C163 - C162) * C13133 +
                    (C165 - C164) * C13129) *
                       C18742 +
                   ((C758 - C757) * C13132 + (C760 - C759) * C13128 +
                    (C30631 * C751 - C113 * C750) * C13133 +
                    (C30631 * C753 - C113 * C752) * C13129) *
                       C18743) *
                      C30466 * C30448 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30770 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C284 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30770 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9099 * C13132 + C9100 * C13128 + C19045 * C13133 +
                     C19046 * C13129) *
                        C18742 +
                    ((C2257 - C2258) * C13132 + (C2259 - C2260) * C13128 +
                     (C2261 - C2262) * C13133 + (C2263 - C2264) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C285 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30770 +
                   ((C533 * C13132 + C534 * C13128 + (C526 - C525) * C13133 +
                     (C528 - C527) * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30759 +
                   ((C535 * C13132 + C536 * C13128 + (C530 - C529) * C13133 +
                     (C532 - C531) * C13129) *
                        C18742 +
                    ((C2262 - C2261) * C13132 + (C2264 - C2263) * C13128 +
                     (C30631 * C2253 - C113 * C2252) * C13133 +
                     (C30631 * C2255 - C113 * C2254) * C13129) *
                        C18743) *
                       C30735) *
                      C30448 * C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30766 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30753 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C19037 * C13133 + C19038 * C13129) *
                       C18743) *
                      C30466 * C1118 +
                  (((C113 * C287 - C30631 * C297) * C13132 +
                    (C113 * C298 - C30631 * C317) * C13128 +
                    (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                       C18742 +
                   ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                    C19503 * C13133 + C19504 * C13129) *
                       C18743) *
                      C30466 * C1119 +
                  (((C30631 * C303 - C113 * C290) * C13132 +
                    (C30631 * C320 - C113 * C304) * C13128 +
                    (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                       C18742 +
                   ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                    (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                       C18743) *
                      C30466 * C1120 +
                  (((C113 * C1124 - C30631 * C1130) * C13132 +
                    (C113 * C1131 - C30631 * C1142) * C13128 +
                    (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                       C18742 +
                   ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                    (C113 * C1667 - C30631 * C1671) * C13133 +
                    (C113 * C1672 - C30631 * C1676) * C13129) *
                       C18743) *
                      C30466 * C1121 +
                  (((C30631 * C1136 - C113 * C1127) * C13132 +
                    (C30631 * C1145 - C113 * C1137) * C13128 +
                    (C30631 * C1138 - C113 * C1128) * C13133 +
                    (C30631 * C1146 - C113 * C1139) * C13129) *
                       C18742 +
                   ((C30631 * C5560 - C113 * C5556) * C13132 +
                    (C30631 * C5565 - C113 * C5561) * C13128 +
                    (C30631 * C5816 - C113 * C5815) * C13133 +
                    (C30631 * C5818 - C113 * C5817) * C13129) *
                       C18743) *
                      C30466 * C1122) *
                 C30420) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30770 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9103 * C13132 + C9104 * C13128 + C19041 * C13133 +
                     C19042 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10693 * C13133 + C10694 * C13129) *
                        C18743) *
                       C30735) *
                      C1050 +
                  ((((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30770 +
                   (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                     C19505 * C13133 + C19506 * C13129) *
                        C18742 +
                    ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30759 +
                   ((C9744 * C13132 + C9745 * C13128 +
                     (C2143 - C2144) * C13133 + (C2145 - C2146) * C13129) *
                        C18742 +
                    ((C9747 - C9746) * C13132 + (C9749 - C9748) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30735) *
                      C1051 +
                  ((((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30770 +
                   (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                     (C1561 - C1562) * C13133 + (C1563 - C1564) * C13129) *
                        C18742 +
                    ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                     (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                        C18743) *
                       C30759 +
                   ((C9764 * C13132 + C9765 * C13128 +
                     (C10015 - C10014) * C13133 + (C10017 - C10016) * C13129) *
                        C18742 +
                    ((C9759 - C9758) * C13132 + (C9761 - C9760) * C13128 +
                     (C30631 * C6464 - C113 * C6463) * C13133 +
                     (C30631 * C6466 - C113 * C6465) * C13129) *
                        C18743) *
                       C30735) *
                      C30732) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30702 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C19039 * C13133 + C19040 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9099 * C13133 + C9100 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C636 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30702 +
                   ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                     C19044 * C13129) *
                        C18742 +
                    (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                     C536 * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C637 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30702 +
                   ((C533 * C13132 + C534 * C13128 + C19307 * C13133 +
                     C19308 * C13129) *
                        C18742 +
                    (C19045 * C13132 + C19046 * C13128 +
                     (C529 - C530) * C13133 + (C531 - C532) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C638 +
                  (((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                     (C161 - C160) * C13129) *
                        C18742 +
                    (C19307 * C13132 + C19308 * C13128 +
                     (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                        C18743) *
                       C30702 +
                   ((C755 * C13132 + C756 * C13128 + (C758 - C757) * C13133 +
                     (C760 - C759) * C13129) *
                        C18742 +
                    ((C530 - C529) * C13132 + (C532 - C531) * C13128 +
                     (C30631 * C496 - C113 * C477) * C13133 +
                     (C30631 * C507 - C113 * C497) * C13129) *
                        C18743) *
                       C30553) *
                      C30448 * C30736)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30631 * C124 - C113 * C117) * C13132 +
                      (C30631 * C138 - C113 * C125) * C13128 +
                      (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C19037 * C13133 + C19038 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C19039 * C13133 + C19040 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9099 * C13133 + C9100 * C13129) *
                         C18743) *
                        C30553) *
                       C1050 +
                   ((((C113 * C287 - C30631 * C297) * C13132 +
                      (C113 * C298 - C30631 * C317) * C13128 +
                      (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                         C18742 +
                     ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                      C19503 * C13133 + C19504 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9455 - C9454) * C13132 + (C9457 - C9456) * C13128 +
                      C19505 * C13133 + C19506 * C13129) *
                         C18742 +
                     ((C9459 - C9458) * C13132 + (C9461 - C9460) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30553) *
                       C1051 +
                   ((((C30631 * C303 - C113 * C290) * C13132 +
                      (C30631 * C320 - C113 * C304) * C13128 +
                      (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                         C18742 +
                     ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                      C20211 * C13133 + C20212 * C13129) *
                         C18743) *
                        C30702 +
                    (((C9751 - C9750) * C13132 + (C9753 - C9752) * C13128 +
                      C20213 * C13133 + C20214 * C13129) *
                         C18742 +
                     ((C9755 - C9754) * C13132 + (C9757 - C9756) * C13128 +
                      (C10014 - C10015) * C13133 + (C10016 - C10017) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C30687 +
                  (((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                      (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                         C18742 +
                     (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                      C534 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19037 * C13132 + C19038 * C13128 + C19043 * C13133 +
                      C19044 * C13129) *
                         C18742 +
                     (C19041 * C13132 + C19042 * C13128 + C535 * C13133 +
                      C536 * C13129) *
                         C18743) *
                        C30553) *
                       C1050 +
                   ((((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                      (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                         C18742 +
                     (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                      C940 * C13129) *
                         C18743) *
                        C30702 +
                    ((C19503 * C13132 + C19504 * C13128 + C19507 * C13133 +
                      C19508 * C13129) *
                         C18742 +
                     ((C2143 - C2144) * C13132 + (C2145 - C2146) * C13128 +
                      (C2147 - C2148) * C13133 + (C2149 - C2150) * C13129) *
                         C18743) *
                        C30553) *
                       C1051 +
                   ((((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                      (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                         C18742 +
                     (C20213 * C13132 + C20214 * C13128 +
                      (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                         C18743) *
                        C30702 +
                    ((C20211 * C13132 + C20212 * C13128 +
                      (C1566 - C1565) * C13133 + (C1568 - C1567) * C13129) *
                         C18742 +
                     ((C10015 - C10014) * C13132 + (C10017 - C10016) * C13128 +
                      (C30631 * C1283 - C113 * C1266) * C13133 +
                      (C30631 * C1293 - C113 * C1284) * C13129) *
                         C18743) *
                        C30553) *
                       C30732) *
                      C30431)) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                       C18743) *
                      C30466 * C30448 * C108 +
                  (((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                    (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                       C18742 +
                   ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                    C533 * C13133 + C534 * C13129) *
                       C18743) *
                      C30466 * C30448 * C109 +
                  ((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                    (C157 - C156) * C13129) *
                       C18742 +
                   ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                    C755 * C13133 + C756 * C13129) *
                       C18743) *
                      C30466 * C30448 * C110 +
                  ((C168 * C13132 + C169 * C13128 + (C159 - C158) * C13133 +
                    (C161 - C160) * C13129) *
                       C18742 +
                   ((C526 - C525) * C13132 + (C528 - C527) * C13128 +
                    (C757 - C758) * C13133 + (C759 - C760) * C13129) *
                       C18743) *
                      C30466 * C30448 * C111 +
                  ((C170 * C13132 + C171 * C13128 + (C163 - C162) * C13133 +
                    (C165 - C164) * C13129) *
                       C18742 +
                   ((C758 - C757) * C13132 + (C760 - C759) * C13128 +
                    (C30631 * C751 - C113 * C750) * C13133 +
                    (C30631 * C753 - C113 * C752) * C13129) *
                       C18743) *
                      C30466 * C30448 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C510 - C509) * C13133 + (C512 - C511) * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     (C928 - C927) * C13133 + (C930 - C929) * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C284 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    ((C509 - C510) * C13132 + (C511 - C512) * C13128 +
                     C533 * C13133 + C534 * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    ((C927 - C928) * C13132 + (C929 - C930) * C13128 +
                     C939 * C13133 + C940 * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C285 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    ((C514 - C513) * C13132 + (C516 - C515) * C13128 +
                     C755 * C13133 + C756 * C13129) *
                        C18743) *
                       C30466 * C30769 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    ((C932 - C931) * C13132 + (C934 - C933) * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C30757 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30631 * C124 - C113 * C117) * C13132 +
                     (C30631 * C138 - C113 * C125) * C13128 +
                     (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C19037 * C13133 + C19038 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C113 * C287 - C30631 * C297) * C13132 +
                     (C113 * C298 - C30631 * C317) * C13128 +
                     (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                        C18742 +
                    ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                     C19503 * C13133 + C19504 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C30631 * C303 - C113 * C290) * C13132 +
                     (C30631 * C320 - C113 * C304) * C13128 +
                     (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                        C18742 +
                    ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                     (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30766 +
                  ((((C147 - C146) * C13132 + (C149 - C148) * C13128 +
                     (C151 - C150) * C13133 + (C153 - C152) * C13129) *
                        C18742 +
                    (C19039 * C13132 + C19040 * C13128 + C533 * C13133 +
                     C534 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   (((C329 - C328) * C13132 + (C331 - C330) * C13128 +
                     (C333 - C332) * C13133 + (C335 - C334) * C13129) *
                        C18742 +
                    (C19505 * C13132 + C19506 * C13128 + C939 * C13133 +
                     C940 * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   (((C337 - C336) * C13132 + (C339 - C338) * C13128 +
                     (C341 - C340) * C13133 + (C343 - C342) * C13129) *
                        C18742 +
                    ((C1561 - C1562) * C13132 + (C1563 - C1564) * C13128 +
                     (C1565 - C1566) * C13133 + (C1567 - C1568) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30753 +
                  (((C166 * C13132 + C167 * C13128 + (C155 - C154) * C13133 +
                     (C157 - C156) * C13129) *
                        C18742 +
                    (C19043 * C13132 + C19044 * C13128 + C755 * C13133 +
                     C756 * C13129) *
                        C18743) *
                       C30466 * C1050 +
                   ((C352 * C13132 + C353 * C13128 + (C345 - C344) * C13133 +
                     (C347 - C346) * C13129) *
                        C18742 +
                    (C19507 * C13132 + C19508 * C13128 +
                     (C935 - C936) * C13133 + (C937 - C938) * C13129) *
                        C18743) *
                       C30466 * C1051 +
                   ((C354 * C13132 + C355 * C13128 + (C349 - C348) * C13133 +
                     (C351 - C350) * C13129) *
                        C18742 +
                    ((C1566 - C1565) * C13132 + (C1568 - C1567) * C13128 +
                     (C30631 * C1557 - C113 * C1556) * C13133 +
                     (C30631 * C1559 - C113 * C1558) * C13129) *
                        C18743) *
                       C30466 * C30732) *
                      C30726)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30631 * C124 - C113 * C117) * C13132 +
                    (C30631 * C138 - C113 * C125) * C13128 +
                    (C146 - C147) * C13133 + (C148 - C149) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C19037 * C13133 + C19038 * C13129) *
                       C18743) *
                      C30466 * C1118 +
                  (((C113 * C287 - C30631 * C297) * C13132 +
                    (C113 * C298 - C30631 * C317) * C13128 +
                    (C328 - C329) * C13133 + (C330 - C331) * C13129) *
                       C18742 +
                   ((C9454 - C9455) * C13132 + (C9456 - C9457) * C13128 +
                    C19503 * C13133 + C19504 * C13129) *
                       C18743) *
                      C30466 * C1119 +
                  (((C30631 * C303 - C113 * C290) * C13132 +
                    (C30631 * C320 - C113 * C304) * C13128 +
                    (C336 - C337) * C13133 + (C338 - C339) * C13129) *
                       C18742 +
                   ((C9750 - C9751) * C13132 + (C9752 - C9753) * C13128 +
                    (C1562 - C1561) * C13133 + (C1564 - C1563) * C13129) *
                       C18743) *
                      C30466 * C1120 +
                  (((C113 * C1124 - C30631 * C1130) * C13132 +
                    (C113 * C1131 - C30631 * C1142) * C13128 +
                    (C1403 - C1404) * C13133 + (C1405 - C1406) * C13129) *
                       C18742 +
                   ((C10116 - C10117) * C13132 + (C10118 - C10119) * C13128 +
                    (C113 * C1667 - C30631 * C1671) * C13133 +
                    (C113 * C1672 - C30631 * C1676) * C13129) *
                       C18743) *
                      C30466 * C1121 +
                  (((C30631 * C1136 - C113 * C1127) * C13132 +
                    (C30631 * C1145 - C113 * C1137) * C13128 +
                    (C30631 * C1138 - C113 * C1128) * C13133 +
                    (C30631 * C1146 - C113 * C1139) * C13129) *
                       C18742 +
                   ((C30631 * C5560 - C113 * C5556) * C13132 +
                    (C30631 * C5565 - C113 * C5561) * C13128 +
                    (C30631 * C5816 - C113 * C5815) * C13133 +
                    (C30631 * C5818 - C113 * C5817) * C13129) *
                       C18743) *
                      C30466 * C1122) *
                 C30420) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30507 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30514 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C2840) *
              C30425 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30507 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30514 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C2840) *
              C30434 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30507 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30514 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C2840) *
              C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30507 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30514 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C2840) *
              C30425 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30507 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30514 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C2840) *
              C30434 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30507 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30514 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C2840) *
              C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30514 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C30702 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C2840) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30514 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C30702 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30776 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30772 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30762 +
           ((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30776 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30772 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30762 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C30631 * C1399 - C113 * C1398) * C116 +
            (C30631 * C1401 - C113 * C1400) * C104) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C2472 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30511) *
              C30768 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30511) *
              C30755 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30466 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
            (C30631 * C643 - C113 * C642) * C104) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30770 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30759 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C30735) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30770 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30759 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C30735) *
               C30511) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30770 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30759 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C30735) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30770 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30759 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30770 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30759 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C30735) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30770 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30759 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30770 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30759 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C30735) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30770 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30759 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C30702 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C30702 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C2472 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30511) *
              C30768 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30511) *
              C30755 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30466 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
            (C30631 * C643 - C113 * C642) * C104) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30776 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30772 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30762 +
           ((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30776 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30772 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30762 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C30631 * C1399 - C113 * C1398) * C116 +
            (C30631 * C1401 - C113 * C1400) * C104) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C2472 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C2580 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30776 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30772 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30762 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30514 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C3234 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C2840) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30507 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30514 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30507 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30514 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C2840) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30549 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30556 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C3742) *
              C30507 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30549 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30556 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C30645 * C3742) *
              C30514 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30549 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30556 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C3742) *
              C2840) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C3742) *
              C30507 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30549 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30556 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C3742) *
              C30514 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C3742) *
              C2840) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C3234 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30776 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C3234 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30553) *
              C30772 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C3234 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30553) *
              C30762 +
          (((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C3234 +
           ((C30631 * C1669 - C113 * C1666) * C114 +
            (C30631 * C1675 - C113 * C1670) * C102 +
            (C30631 * C1671 - C113 * C1667) * C115 +
            (C30631 * C1676 - C113 * C1672) * C103 +
            (C30631 * C1673 - C113 * C1668) * C116 +
            (C30631 * C1677 - C113 * C1674) * C104) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30777 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30774 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30765 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C2472 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30777 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30774 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C30645 * C30765 +
           ((C30631 * C2365 - C113 * C2362) * C114 +
            (C30631 * C2371 - C113 * C2366) * C102 +
            (C30631 * C2367 - C113 * C2363) * C115 +
            (C30631 * C2372 - C113 * C2368) * C103 +
            (C30631 * C2369 - C113 * C2364) * C116 +
            (C30631 * C2373 - C113 * C2370) * C104) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30776 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C30772 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C30762 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30777 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30774 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30765 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C2472 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30777 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30774 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30765 +
           ((C4695 * C2365 - C4699 * C2362 + C4696 * C6206 - C4700 * C6203 +
             C4697 * C6566 - C4701 * C6565) *
                C4702 +
            (C4695 * C2371 - C4699 * C2366 + C4696 * C6212 - C4700 * C6207 +
             C4697 * C6568 - C4701 * C6567) *
                C30396) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30549 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30556 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C3742) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30549 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30556 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C3742) *
               C30511) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30549 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30556 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C3742) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30549 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30556 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C3742) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C3742) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C3234 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30776 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C3234 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30553) *
              C30772 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C3234 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30553) *
              C30762 +
          (((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C3234 +
           ((C30631 * C1669 - C113 * C1666) * C114 +
            (C30631 * C1675 - C113 * C1670) * C102 +
            (C30631 * C1671 - C113 * C1667) * C115 +
            (C30631 * C1676 - C113 * C1672) * C103 +
            (C30631 * C1673 - C113 * C1668) * C116 +
            (C30631 * C1677 - C113 * C1674) * C104) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30766 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30753 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C2472 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30776 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C30772 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C30762 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1392 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1393 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C1394 +
           ((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C30631 * C1399 - C113 * C1398) * C116 +
            (C30631 * C1401 - C113 * C1400) * C104) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30701 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30701 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30511) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30701 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30511) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30466 * C30701 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
            (C30631 * C643 - C113 * C642) * C104) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C1788 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C1789 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C30735) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C1788 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C1789 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C30735) *
               C30511) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C1788 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C1789 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C30735) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C1788 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C1789 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C1788 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C1789 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C30735) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C1788 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C1789 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C1788 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C1789 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C30735) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C1788 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C1789 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C30735) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30702 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C1392 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30702 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30553) *
              C1393 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30702 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30553) *
              C1394 +
          (((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30702 +
           ((C30631 * C1669 - C113 * C1666) * C114 +
            (C30631 * C1675 - C113 * C1670) * C102 +
            (C30631 * C1671 - C113 * C1667) * C115 +
            (C30631 * C1676 - C113 * C1672) * C103 +
            (C30631 * C1673 - C113 * C1668) * C116 +
            (C30631 * C1677 - C113 * C1674) * C104) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C30702 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C30701 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C30702 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C2248 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C2249 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C2250 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C30701 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C2248 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C2249 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C30645 * C2250 +
           ((C30631 * C2365 - C113 * C2362) * C114 +
            (C30631 * C2371 - C113 * C2366) * C102 +
            (C30631 * C2367 - C113 * C2363) * C115 +
            (C30631 * C2372 - C113 * C2368) * C103 +
            (C30631 * C2369 - C113 * C2364) * C116 +
            (C30631 * C2373 - C113 * C2370) * C104) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C285 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C1392 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C1393 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C1394 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C2248 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C2249 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C2250 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C30701 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C2248 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C2249 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C2250 +
           ((C4695 * C2365 - C4699 * C2362 + C4696 * C6206 - C4700 * C6203 +
             C4697 * C6566 - C4701 * C6565) *
                C4702 +
            (C4695 * C2371 - C4699 * C2366 + C4696 * C6212 - C4700 * C6207 +
             C4697 * C6568 - C4701 * C6567) *
                C30396) *
               C30645 * C30748) *
              C30511) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C30631 * C124 - C113 * C117) * C114 +
               (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
               (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                  C30645 * C30466 * C30448 * C108 +
              ((C147 - C146) * C114 + (C149 - C148) * C102 +
               (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
               C169 * C104) *
                  C30645 * C30466 * C30448 * C109 +
              (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
               (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                  C30645 * C30466 * C30448 * C110 +
              (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
               (C161 - C160) * C103 + (C162 - C163) * C116 +
               (C164 - C165) * C104) *
                  C30645 * C30466 * C30448 * C111 +
              (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
               (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
               (C30631 * C144 - C113 * C137) * C104) *
                  C30645 * C30466 * C30448 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C30631 * C124 - C113 * C117) * C114 +
                (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C30645 * C30466 * C30769 +
               ((C113 * C287 - C30631 * C297) * C114 +
                (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C30645 * C30466 * C30757 +
               ((C30631 * C303 - C113 * C290) * C114 +
                (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C30645 * C30466 * C30732) *
                  C284 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C30645 * C30466 * C30769 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 +
                (C344 - C345) * C116 + (C346 - C347) * C104) *
                   C30645 * C30466 * C30757 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C30645 * C30466 * C30732) *
                  C285 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C30645 * C30466 * C30769 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
                (C113 * C314 - C30631 * C325) * C104) *
                   C30645 * C30466 * C30757 +
               (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
                (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
                (C30631 * C326 - C113 * C316) * C104) *
                   C30645 * C30466 * C30732) *
                  C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30770 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30759 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30770 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C30645 * C30759 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30735) *
              C30448 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30770 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C30631 * C494) * C116 +
            (C113 * C495 - C30631 * C506) * C104) *
               C30645 * C30759 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30770 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30759 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C1050 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30770 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30759 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 +
            (C113 * C1259 - C30631 * C1269) * C115 +
            (C113 * C1270 - C30631 * C1286) * C103 +
            (C113 * C1260 - C30631 * C1271) * C116 +
            (C113 * C1272 - C30631 * C1287) * C104) *
               C30645 * C30735) *
              C1051 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30770 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 +
            (C113 * C1262 - C30631 * C1275) * C115 +
            (C113 * C1276 - C30631 * C1289) * C103 +
            (C113 * C1263 - C30631 * C1277) * C116 +
            (C113 * C1278 - C30631 * C1290) * C104) *
               C30645 * C30759 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C1788 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C1789 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30735) *
              C30448 * C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C1788 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C1789 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30769 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C1788 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C1789 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 +
            (C113 * C1259 - C30631 * C1269) * C115 +
            (C113 * C1270 - C30631 * C1286) * C103 +
            (C113 * C1260 - C30631 * C1271) * C116 +
            (C113 * C1272 - C30631 * C1287) * C104) *
               C30645 * C30735) *
              C30757 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C1788 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C1789 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C1963 +
          ((C113 * C468 - C30631 * C478) * C114 +
           (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
           (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
              C30645 * C1964 +
          ((C30631 * C484 - C113 * C471) * C114 +
           (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
           (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
              C30645 * C1965 +
          ((C113 * C1968 - C30631 * C1974) * C114 +
           (C113 * C1975 - C30631 * C1986) * C102 +
           (C113 * C1969 - C30631 * C1976) * C115 +
           (C113 * C1977 - C30631 * C1987) * C103 +
           (C113 * C1970 - C30631 * C1978) * C116 +
           (C113 * C1979 - C30631 * C1988) * C104) *
              C30645 * C1966 +
          ((C30631 * C1980 - C113 * C1971) * C114 +
           (C30631 * C1989 - C113 * C1981) * C102 +
           (C30631 * C1982 - C113 * C1972) * C115 +
           (C30631 * C1990 - C113 * C1983) * C103 +
           (C30631 * C1984 - C113 * C1973) * C116 +
           (C30631 * C1991 - C113 * C1985) * C104) *
              C30645 * C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C1050 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C1051 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30769 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C30757 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C1963 +
          ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
            C4701 * C1261 - C4697 * C1273) *
               C4702 +
           (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
            C4701 * C1274 - C4697 * C1288) *
               C30396) *
              C30645 * C1964 +
          ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
            C4697 * C1279 - C4701 * C1264) *
               C4702 +
           (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
            C4697 * C1291 - C4701 * C1280) *
               C30396) *
              C30645 * C1965 +
          ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
            C4701 * C6203 - C4697 * C6206) *
               C4702 +
           (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
            C4701 * C6207 - C4697 * C6212) *
               C30396) *
              C30645 * C1966 +
          ((C4695 * C1980 - C4699 * C1971 + C4696 * C6208 - C4700 * C6204 +
            C4697 * C6209 - C4701 * C6205) *
               C4702 +
           (C4695 * C1989 - C4699 * C1981 + C4696 * C6213 - C4700 * C6210 +
            C4697 * C6214 - C4701 * C6211) *
               C30396) *
              C30645 * C1967) *
         C30448 * C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C1050 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C1051 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C30702 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C30702 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30702 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30702 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30553) *
              C30448 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30702 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30553) *
              C30448 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30702 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
            (C30631 * C753 - C113 * C752) * C104) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C2248 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C2249 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C2250 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C30448 * C30687 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C2248 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C2249 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C2250 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C30631 * C2253 - C113 * C2252) * C116 +
            (C30631 * C2255 - C113 * C2254) * C104) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C2248 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C2249 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C2250 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C30448 * C30687 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C2248 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C2249 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C2250 +
           ((C4695 * C1976 - C4699 * C1969 + C4696 * C2367 - C4700 * C2363 +
             C4697 * C6464 - C4701 * C6463) *
                C4702 +
            (C4695 * C1987 - C4699 * C1977 + C4696 * C2372 - C4700 * C2368 +
             C4697 * C6466 - C4701 * C6465) *
                C30396) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30769 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30757 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30769 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C30645 * C30466 * C30757 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30769 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
            (C113 * C314 - C30631 * C325) * C104) *
               C30645 * C30466 * C30757 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C30448 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C30645 * C30466 * C30448 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C30645 * C30466 * C30448 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C30645 * C30466 * C30448 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
           (C30631 * C144 - C113 * C137) * C104) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C1788 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C1789 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30735) *
              C30448 * C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C1788 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C1789 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30769 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C1788 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C1789 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 +
            (C113 * C1259 - C30631 * C1269) * C115 +
            (C113 * C1270 - C30631 * C1286) * C103 +
            (C113 * C1260 - C30631 * C1271) * C116 +
            (C113 * C1272 - C30631 * C1287) * C104) *
               C30645 * C30735) *
              C30757 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C1788 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C1789 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30769 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C1788 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C1789 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C30757 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C1788 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C1789 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C30701 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30425 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30434 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30549 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30556 +
            ((C30631 * C484 - C113 * C471) * C114 +
             (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C30645 * C3742) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30549 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30556 +
            ((C113 * C1258 - C30631 * C1267) * C114 +
             (C113 * C1268 - C30631 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C30645 * C3742) *
               C30511) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30549 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30556 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C30645 * C3742) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30549 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30556 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C30631 * C2139 - C113 * C2138) * C116 +
             (C30631 * C2141 - C113 * C2140) * C104) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
              C4697 * C1279 - C4701 * C1264) *
                 C4702 +
             (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
              C4697 * C1291 - C4701 * C1280) *
                 C30396) *
                C30645 * C3742) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
              C4701 * C5555 - C4697 * C5558) *
                 C4702 +
             (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
              C4701 * C5559 - C4697 * C5564) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30549 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30556 +
            ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
              C4701 * C1265 - C4697 * C1281) *
                 C4702 +
             (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
              C4701 * C1282 - C4697 * C1292) *
                 C30396) *
                C30645 * C3742) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30549 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30556 +
            ((C4695 * C1269 - C4699 * C1259 + C4696 * C1281 - C4700 * C1265 +
              C4697 * C6362 - C4701 * C6361) *
                 C4702 +
             (C4695 * C1286 - C4699 * C1270 + C4696 * C1292 - C4700 * C1282 +
              C4697 * C6364 - C4701 * C6363) *
                 C30396) *
                C30645 * C3742) *
               C30511) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30769 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30757 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C3234 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30769 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30757 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C3234 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30553) *
              C30448 * C30768 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30553) *
              C30448 * C30755 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
            (C30631 * C753 - C113 * C752) * C104) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30777 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30774 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30765 +
           ((C113 * C1968 - C30631 * C1974) * C114 +
            (C113 * C1975 - C30631 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C30645 * C30748) *
              C30448 * C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30777 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30774 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30765 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C30631 * C2253 - C113 * C2252) * C116 +
            (C30631 * C2255 - C113 * C2254) * C104) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30777 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30774 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30765 +
           ((C4699 * C1968 - C4695 * C1974 + C4700 * C2362 - C4696 * C2365 +
             C4701 * C6203 - C4697 * C6206) *
                C4702 +
            (C4699 * C1975 - C4695 * C1986 + C4700 * C2366 - C4696 * C2371 +
             C4701 * C6207 - C4697 * C6212) *
                C30396) *
               C30645 * C30748) *
              C30448 * C2580 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30777 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30774 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30765 +
           ((C4695 * C1976 - C4699 * C1969 + C4696 * C2367 - C4700 * C2363 +
             C4697 * C6464 - C4701 * C6463) *
                C4702 +
            (C4695 * C1987 - C4699 * C1977 + C4696 * C2372 - C4700 * C2368 +
             C4697 * C6466 - C4701 * C6465) *
                C30396) *
               C30645 * C30748) *
              C30448 * C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30549 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30556 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C3742) *
              C30448 * C30425 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30549 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30556 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C3742) *
              C30448 * C30434 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30549 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30556 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C3742) *
              C30448 * C2843)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C3742) *
              C30448 * C30425 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30549 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30556 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C3742) *
              C30448 * C30434 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30549 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30556 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C3742) *
              C30448 * C2843)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C3234 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30553) *
              C30448 * C30768 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30553) *
              C30448 * C30755 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
            (C30631 * C753 - C113 * C752) * C104) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C3234 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30769 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C3234 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30757 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C3234 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30769 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30757 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30775 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30768 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C3234 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30755 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C3234 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C2580 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30769 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C3234 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30757 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C3234 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30701 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30701 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C30511) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30701 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C30511) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30466 * C30701 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C30631 * C641 - C113 * C640) * C116 +
            (C30631 * C643 - C113 * C642) * C104) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1392 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1393 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C1394 +
           ((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C30631 * C1399 - C113 * C1398) * C116 +
            (C30631 * C1401 - C113 * C1400) * C104) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30511) *
              C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30511) *
              C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30511) *
              C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30466 * C30701 +
           ((C4695 * C309 - C4699 * C293 + C4696 * C311 - C4700 * C294 +
             C4697 * C1399 - C4701 * C1398) *
                C4702 +
            (C4695 * C323 - C4699 * C310 + C4696 * C324 - C4700 * C312 +
             C4697 * C1401 - C4701 * C1400) *
                C30396) *
               C30645 * C30466 * C30511) *
              C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30687 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1392 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1393 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C1394 +
           ((C4695 * C1132 - C4699 * C1125 + C4696 * C1138 - C4700 * C1128 +
             C4697 * C5666 - C4701 * C5665) *
                C4702 +
            (C4695 * C1143 - C4699 * C1133 + C4696 * C1146 - C4700 * C1139 +
             C4697 * C5668 - C4701 * C5667) *
                C30396) *
               C30645 * C30466 * C30742) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C30701 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C30511) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C30645 * C30702 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C30645 * C30553) *
               C30701 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C30645 * C30702 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C30631 * C919 - C113 * C910) * C116 +
             (C30631 * C925 - C113 * C920) * C104) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30702 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C1392 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30702 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30553) *
              C1393 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30702 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C30645 * C30553) *
              C1394 +
          (((C113 * C1124 - C30631 * C1130) * C114 +
            (C113 * C1131 - C30631 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C30645 * C30702 +
           ((C30631 * C1669 - C113 * C1666) * C114 +
            (C30631 * C1675 - C113 * C1670) * C102 +
            (C30631 * C1671 - C113 * C1667) * C115 +
            (C30631 * C1676 - C113 * C1672) * C103 +
            (C30631 * C1673 - C113 * C1668) * C116 +
            (C30631 * C1677 - C113 * C1674) * C104) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C284 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C285 +
          ((((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
              C4697 * C307 - C4701 * C292) *
                 C4702 +
             (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
              C4697 * C322 - C4701 * C308) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
              C4701 * C1263 - C4697 * C1277) *
                 C4702 +
             (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
              C4701 * C1278 - C4697 * C1290) *
                 C30396) *
                C30645 * C30553) *
               C30701 +
           (((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
              C4701 * C1126 - C4697 * C1134) *
                 C4702 +
             (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
              C4701 * C1135 - C4697 * C1144) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C915 - C4699 * C908 + C4696 * C1277 - C4700 * C1263 +
              C4697 * C1673 - C4701 * C1668) *
                 C4702 +
             (C4695 * C923 - C4699 * C916 + C4696 * C1290 - C4700 * C1278 +
              C4697 * C1677 - C4701 * C1674) *
                 C30396) *
                C30645 * C30553) *
               C30511) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C1392 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30553) *
              C1393 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30553) *
              C1394 +
          (((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
             C4701 * C5437 - C4697 * C5439) *
                C4702 +
            (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
             C4701 * C5440 - C4697 * C5443) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C1669 - C4699 * C1666 + C4696 * C5560 - C4700 * C5556 +
             C4697 * C5918 - C4701 * C5917) *
                C4702 +
            (C4695 * C1675 - C4699 * C1670 + C4696 * C5565 - C4700 * C5561 +
             C4697 * C5920 - C4701 * C5919) *
                C30396) *
               C30645 * C30553) *
              C30742) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30769 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30757 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30769 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C30645 * C30466 * C30757 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30769 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
            (C113 * C314 - C30631 * C325) * C104) *
               C30645 * C30466 * C30757 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C30448 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C30645 * C30466 * C30448 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C30645 * C30466 * C30448 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C30645 * C30466 * C30448 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
           (C30631 * C144 - C113 * C137) * C104) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30770 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30759 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30770 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C30645 * C30759 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C30645 * C30735) *
              C30448 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30770 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C30631 * C494) * C116 +
            (C113 * C495 - C30631 * C506) * C104) *
               C30645 * C30759 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C30631 * C496 - C113 * C477) * C116 +
            (C30631 * C507 - C113 * C497) * C104) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30770 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30759 +
           ((C30631 * C484 - C113 * C471) * C114 +
            (C30631 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C30645 * C30735) *
              C1050 +
          (((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30770 +
           ((C30631 * C911 - C113 * C906) * C114 +
            (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C30645 * C30759 +
           ((C113 * C1258 - C30631 * C1267) * C114 +
            (C113 * C1268 - C30631 * C1285) * C102 +
            (C113 * C1259 - C30631 * C1269) * C115 +
            (C113 * C1270 - C30631 * C1286) * C103 +
            (C113 * C1260 - C30631 * C1271) * C116 +
            (C113 * C1272 - C30631 * C1287) * C104) *
               C30645 * C30735) *
              C1051 +
          (((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30770 +
           ((C113 * C1261 - C30631 * C1273) * C114 +
            (C113 * C1274 - C30631 * C1288) * C102 +
            (C113 * C1262 - C30631 * C1275) * C115 +
            (C113 * C1276 - C30631 * C1289) * C103 +
            (C113 * C1263 - C30631 * C1277) * C116 +
            (C113 * C1278 - C30631 * C1290) * C104) *
               C30645 * C30759 +
           ((C30631 * C1279 - C113 * C1264) * C114 +
            (C30631 * C1291 - C113 * C1280) * C102 +
            (C30631 * C1281 - C113 * C1265) * C115 +
            (C30631 * C1292 - C113 * C1282) * C103 +
            (C30631 * C1283 - C113 * C1266) * C116 +
            (C30631 * C1293 - C113 * C1284) * C104) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C30448 * C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C472 - C4695 * C486 + C4700 * C1259 - C4696 * C1269 +
             C4701 * C1265 - C4697 * C1281) *
                C4702 +
            (C4699 * C487 - C4695 * C502 + C4700 * C1270 - C4696 * C1286 +
             C4701 * C1282 - C4697 * C1292) *
                C30396) *
               C30645 * C30735) *
              C30448 * C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C488 - C4699 * C473 + C4696 * C1271 - C4700 * C1260 +
             C4697 * C1283 - C4701 * C1266) *
                C4702 +
            (C4695 * C503 - C4699 * C489 + C4696 * C1287 - C4700 * C1272 +
             C4697 * C1293 - C4701 * C1284) *
                C30396) *
               C30645 * C30735) *
              C30448 * C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C484 - C4699 * C471 + C4696 * C1267 - C4700 * C1258 +
             C4697 * C1279 - C4701 * C1264) *
                C4702 +
            (C4695 * C501 - C4699 * C485 + C4696 * C1285 - C4700 * C1268 +
             C4697 * C1291 - C4701 * C1280) *
                C30396) *
               C30645 * C30735) *
              C1050 +
          (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30770 +
           ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
             C4697 * C1669 - C4701 * C1666) *
                C4702 +
            (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
             C4697 * C1675 - C4701 * C1670) *
                C30396) *
               C30645 * C30759 +
           ((C4699 * C1258 - C4695 * C1267 + C4700 * C1264 - C4696 * C1279 +
             C4701 * C5555 - C4697 * C5558) *
                C4702 +
            (C4699 * C1268 - C4695 * C1285 + C4700 * C1280 - C4696 * C1291 +
             C4701 * C5559 - C4697 * C5564) *
                C30396) *
               C30645 * C30735) *
              C1051 +
          (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30770 +
           ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
             C4701 * C5556 - C4697 * C5560) *
                C4702 +
            (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
             C4701 * C5561 - C4697 * C5565) *
                C30396) *
               C30645 * C30759 +
           ((C4695 * C1279 - C4699 * C1264 + C4696 * C5558 - C4700 * C5555 +
             C4697 * C5562 - C4701 * C5557) *
                C4702 +
            (C4695 * C1291 - C4699 * C1280 + C4696 * C5564 - C4700 * C5559 +
             C4697 * C5566 - C4701 * C5563) *
                C30396) *
               C30645 * C30735) *
              C30732) *
         C30420) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30702 +
           ((C113 * C468 - C30631 * C478) * C114 +
            (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30702 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C30645 * C30553) *
              C30448 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30702 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C30645 * C30553) *
              C30448 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C30645 * C30702 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C30631 * C751 - C113 * C750) * C116 +
            (C30631 * C753 - C113 * C752) * C104) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30631 * C124 - C113 * C117) * C114 +
             (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C30645 * C30702 +
            ((C113 * C468 - C30631 * C478) * C114 +
             (C113 * C479 - C30631 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C30645 * C30553) *
               C1050 +
           (((C113 * C287 - C30631 * C297) * C114 +
             (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C30645 * C30702 +
            ((C30631 * C911 - C113 * C906) * C114 +
             (C30631 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C30645 * C30553) *
               C1051 +
           (((C30631 * C303 - C113 * C290) * C114 +
             (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C30645 * C30702 +
            ((C113 * C1261 - C30631 * C1273) * C114 +
             (C113 * C1274 - C30631 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C30645 * C30702 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C30645 * C30553) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C30645 * C30702 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C30645 * C30553) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C30645 * C30702 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C30631 * C1557 - C113 * C1556) * C116 +
             (C30631 * C1559 - C113 * C1558) * C104) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
             C4701 * C1261 - C4697 * C1273) *
                C4702 +
            (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
             C4701 * C1274 - C4697 * C1288) *
                C30396) *
               C30645 * C30553) *
              C30448 * C636 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
             C4697 * C1275 - C4701 * C1262) *
                C4702 +
            (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
             C4697 * C1289 - C4701 * C1276) *
                C30396) *
               C30645 * C30553) *
              C30448 * C637 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30702 +
           ((C4699 * C470 - C4695 * C482 + C4700 * C908 - C4696 * C915 +
             C4701 * C1263 - C4697 * C1277) *
                C4702 +
            (C4699 * C483 - C4695 * C500 + C4700 * C916 - C4696 * C923 +
             C4701 * C1278 - C4697 * C1290) *
                C30396) *
               C30645 * C30553) *
              C30448 * C638 +
          (((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
             C4701 * C294 - C4697 * C311) *
                C4702 +
            (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
             C4701 * C312 - C4697 * C324) *
                C30396) *
               C30645 * C30702 +
           ((C4695 * C490 - C4699 * C474 + C4696 * C917 - C4700 * C909 +
             C4697 * C1557 - C4701 * C1556) *
                C4702 +
            (C4695 * C504 - C4699 * C491 + C4696 * C924 - C4700 * C918 +
             C4697 * C1559 - C4701 * C1558) *
                C30396) *
               C30645 * C30553) *
              C30448 * C30736)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
              C4697 * C303 - C4701 * C290) *
                 C4702 +
             (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
              C4697 * C320 - C4701 * C304) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C468 - C4695 * C478 + C4700 * C906 - C4696 * C911 +
              C4701 * C1261 - C4697 * C1273) *
                 C4702 +
             (C4699 * C479 - C4695 * C498 + C4700 * C912 - C4696 * C921 +
              C4701 * C1274 - C4697 * C1288) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
              C4701 * C1124 - C4697 * C1130) *
                 C4702 +
             (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
              C4701 * C1131 - C4697 * C1142) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C911 - C4699 * C906 + C4696 * C1273 - C4700 * C1261 +
              C4697 * C1669 - C4701 * C1666) *
                 C4702 +
             (C4695 * C921 - C4699 * C912 + C4696 * C1288 - C4700 * C1274 +
              C4697 * C1675 - C4701 * C1670) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
              C4697 * C1136 - C4701 * C1127) *
                 C4702 +
             (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
              C4697 * C1145 - C4701 * C1137) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C1261 - C4695 * C1273 + C4700 * C1666 - C4696 * C1669 +
              C4701 * C5556 - C4697 * C5560) *
                 C4702 +
             (C4699 * C1274 - C4695 * C1288 + C4700 * C1670 - C4696 * C1675 +
              C4701 * C5561 - C4697 * C5565) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30687 +
          ((((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
              C4701 * C291 - C4697 * C305) *
                 C4702 +
             (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
              C4701 * C306 - C4697 * C321) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C480 - C4699 * C469 + C4696 * C913 - C4700 * C907 +
              C4697 * C1275 - C4701 * C1262) *
                 C4702 +
             (C4695 * C499 - C4699 * C481 + C4696 * C922 - C4700 * C914 +
              C4697 * C1289 - C4701 * C1276) *
                 C30396) *
                C30645 * C30553) *
               C1050 +
           (((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
              C4697 * C1132 - C4701 * C1125) *
                 C4702 +
             (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
              C4697 * C1143 - C4701 * C1133) *
                 C30396) *
                C30645 * C30702 +
            ((C4699 * C907 - C4695 * C913 + C4700 * C1262 - C4696 * C1275 +
              C4701 * C1667 - C4697 * C1671) *
                 C4702 +
             (C4699 * C914 - C4695 * C922 + C4700 * C1276 - C4696 * C1289 +
              C4701 * C1672 - C4697 * C1676) *
                 C30396) *
                C30645 * C30553) *
               C1051 +
           (((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
              C4701 * C1128 - C4697 * C1138) *
                 C4702 +
             (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
              C4701 * C1139 - C4697 * C1146) *
                 C30396) *
                C30645 * C30702 +
            ((C4695 * C1275 - C4699 * C1262 + C4696 * C1671 - C4700 * C1667 +
              C4697 * C5816 - C4701 * C5815) *
                 C4702 +
             (C4695 * C1289 - C4699 * C1276 + C4696 * C1676 - C4700 * C1672 +
              C4697 * C5818 - C4701 * C5817) *
                 C30396) *
                C30645 * C30553) *
               C30732) *
              C30431)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C30448 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C30645 * C30466 * C30448 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C30645 * C30466 * C30448 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C30645 * C30466 * C30448 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C30631 * C136 - C113 * C123) * C116 +
           (C30631 * C144 - C113 * C137) * C104) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C30769 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C30757 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C30769 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C30645 * C30466 * C30757 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C30769 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C30631 * C313) * C116 +
            (C113 * C314 - C30631 * C325) * C104) *
               C30645 * C30466 * C30757 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C30631 * C124 - C113 * C117) * C114 +
            (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C30645 * C30466 * C1050 +
           ((C113 * C287 - C30631 * C297) * C114 +
            (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C30645 * C30466 * C1051 +
           ((C30631 * C303 - C113 * C290) * C114 +
            (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C30645 * C30466 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C30645 * C30466 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C30645 * C30466 * C30732) *
              C30753 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C30645 * C30466 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C30645 * C30466 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C30631 * C315 - C113 * C296) * C116 +
            (C30631 * C326 - C113 * C316) * C104) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C30631 * C124 - C113 * C117) * C114 +
           (C30631 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C30645 * C30466 * C1118 +
          ((C113 * C287 - C30631 * C297) * C114 +
           (C113 * C298 - C30631 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C30645 * C30466 * C1119 +
          ((C30631 * C303 - C113 * C290) * C114 +
           (C30631 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C30645 * C30466 * C1120 +
          ((C113 * C1124 - C30631 * C1130) * C114 +
           (C113 * C1131 - C30631 * C1142) * C102 +
           (C113 * C1125 - C30631 * C1132) * C115 +
           (C113 * C1133 - C30631 * C1143) * C103 +
           (C113 * C1126 - C30631 * C1134) * C116 +
           (C113 * C1135 - C30631 * C1144) * C104) *
              C30645 * C30466 * C1121 +
          ((C30631 * C1136 - C113 * C1127) * C114 +
           (C30631 * C1145 - C113 * C1137) * C102 +
           (C30631 * C1138 - C113 * C1128) * C115 +
           (C30631 * C1146 - C113 * C1139) * C103 +
           (C30631 * C1140 - C113 * C1129) * C116 +
           (C30631 * C1147 - C113 * C1141) * C104) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C30448 * C108 +
          ((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
            C4701 * C291 - C4697 * C305) *
               C4702 +
           (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
            C4701 * C306 - C4697 * C321) *
               C30396) *
              C30645 * C30466 * C30448 * C109 +
          ((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
            C4697 * C307 - C4701 * C292) *
               C4702 +
           (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
            C4697 * C322 - C4701 * C308) *
               C30396) *
              C30645 * C30466 * C30448 * C110 +
          ((C4699 * C120 - C4695 * C130 + C4700 * C293 - C4696 * C309 +
            C4701 * C294 - C4697 * C311) *
               C4702 +
           (C4699 * C131 - C4695 * C141 + C4700 * C310 - C4696 * C323 +
            C4701 * C312 - C4697 * C324) *
               C30396) *
              C30645 * C30466 * C30448 * C111 +
          ((C4695 * C132 - C4699 * C121 + C4696 * C313 - C4700 * C295 +
            C4697 * C315 - C4701 * C296) *
               C4702 +
           (C4695 * C142 - C4699 * C133 + C4696 * C325 - C4700 * C314 +
            C4697 * C326 - C4701 * C316) *
               C30396) *
              C30645 * C30466 * C30448 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C284 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C285 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C30769 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C30757 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
             C4697 * C303 - C4701 * C290) *
                C4702 +
            (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
             C4697 * C320 - C4701 * C304) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
             C4701 * C1124 - C4697 * C1130) *
                C4702 +
            (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
             C4701 * C1131 - C4697 * C1142) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
             C4697 * C1136 - C4701 * C1127) *
                C4702 +
            (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
             C4697 * C1145 - C4701 * C1137) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30766 +
          (((C4699 * C118 - C4695 * C126 + C4700 * C288 - C4696 * C299 +
             C4701 * C291 - C4697 * C305) *
                C4702 +
            (C4699 * C127 - C4695 * C139 + C4700 * C300 - C4696 * C318 +
             C4701 * C306 - C4697 * C321) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4695 * C299 - C4699 * C288 + C4696 * C305 - C4700 * C291 +
             C4697 * C1132 - C4701 * C1125) *
                C4702 +
            (C4695 * C318 - C4699 * C300 + C4696 * C321 - C4700 * C306 +
             C4697 * C1143 - C4701 * C1133) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4699 * C291 - C4695 * C305 + C4700 * C1125 - C4696 * C1132 +
             C4701 * C1128 - C4697 * C1138) *
                C4702 +
            (C4699 * C306 - C4695 * C321 + C4700 * C1133 - C4696 * C1143 +
             C4701 * C1139 - C4697 * C1146) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30753 +
          (((C4695 * C128 - C4699 * C119 + C4696 * C301 - C4700 * C289 +
             C4697 * C307 - C4701 * C292) *
                C4702 +
            (C4695 * C140 - C4699 * C129 + C4696 * C319 - C4700 * C302 +
             C4697 * C322 - C4701 * C308) *
                C30396) *
               C30645 * C30466 * C1050 +
           ((C4699 * C289 - C4695 * C301 + C4700 * C292 - C4696 * C307 +
             C4701 * C1126 - C4697 * C1134) *
                C4702 +
            (C4699 * C302 - C4695 * C319 + C4700 * C308 - C4696 * C322 +
             C4701 * C1135 - C4697 * C1144) *
                C30396) *
               C30645 * C30466 * C1051 +
           ((C4695 * C307 - C4699 * C292 + C4696 * C1134 - C4700 * C1126 +
             C4697 * C1140 - C4701 * C1129) *
                C4702 +
            (C4695 * C322 - C4699 * C308 + C4696 * C1144 - C4700 * C1135 +
             C4697 * C1147 - C4701 * C1141) *
                C30396) *
               C30645 * C30466 * C30732) *
              C30726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4695 * C124 - C4699 * C117 + C4696 * C297 - C4700 * C287 +
            C4697 * C303 - C4701 * C290) *
               C4702 +
           (C4695 * C138 - C4699 * C125 + C4696 * C317 - C4700 * C298 +
            C4697 * C320 - C4701 * C304) *
               C30396) *
              C30645 * C30466 * C1118 +
          ((C4699 * C287 - C4695 * C297 + C4700 * C290 - C4696 * C303 +
            C4701 * C1124 - C4697 * C1130) *
               C4702 +
           (C4699 * C298 - C4695 * C317 + C4700 * C304 - C4696 * C320 +
            C4701 * C1131 - C4697 * C1142) *
               C30396) *
              C30645 * C30466 * C1119 +
          ((C4695 * C303 - C4699 * C290 + C4696 * C1130 - C4700 * C1124 +
            C4697 * C1136 - C4701 * C1127) *
               C4702 +
           (C4695 * C320 - C4699 * C304 + C4696 * C1142 - C4700 * C1131 +
            C4697 * C1145 - C4701 * C1137) *
               C30396) *
              C30645 * C30466 * C1120 +
          ((C4699 * C1124 - C4695 * C1130 + C4700 * C1127 - C4696 * C1136 +
            C4701 * C5437 - C4697 * C5439) *
               C4702 +
           (C4699 * C1131 - C4695 * C1142 + C4700 * C1137 - C4696 * C1145 +
            C4701 * C5440 - C4697 * C5443) *
               C30396) *
              C30645 * C30466 * C1121 +
          ((C4695 * C1136 - C4699 * C1127 + C4696 * C5439 - C4700 * C5437 +
            C4697 * C5441 - C4701 * C5438) *
               C4702 +
           (C4695 * C1145 - C4699 * C1137 + C4696 * C5443 - C4700 * C5440 +
            C4697 * C5444 - C4701 * C5442) *
               C30396) *
              C30645 * C30466 * C1122) *
         C30420) /
            (p * q * std::sqrt(p + q));
}
