/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AB_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_12_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29678 = ae * be;
    const double C29677 = ae + be;
    const double C29676 = 0 * be;
    const double C29675 = xA - xB;
    const double C29699 = 0 * be;
    const double C29698 = yA - yB;
    const double C29720 = xP - xQ;
    const double C29719 = yP - yQ;
    const double C29718 = p + q;
    const double C29717 = p * q;
    const double C29725 = bs[3];
    const double C29735 = bs[4];
    const double C29744 = bs[5];
    const double C29758 = bs[6];
    const double C29780 = bs[7];
    const double C29889 = zP - zQ;
    const double C30052 = bs[2];
    const double C117 = bs[0];
    const double C30433 = ce + de;
    const double C30432 = ce * de;
    const double C30431 = xC - xD;
    const double C30465 = yC - yD;
    const double C30483 = zC - zD;
    const double C30662 = zA - zB;
    const double C29679 = std::pow(C29677, 2);
    const double C30706 = 2 * C29677;
    const double C29680 = C29678 * C29675;
    const double C30412 = std::pow(C29675, 2);
    const double C30705 = C29675 * ae;
    const double C29700 = C29678 * C29698;
    const double C30651 = std::pow(C29698, 2);
    const double C30737 = C29698 * ae;
    const double C29745 = std::pow(C29720, 2);
    const double C29805 = C29720 * be;
    const double C29727 = C29719 * ae;
    const double C29726 = C29719 * C29720;
    const double C29901 = std::pow(C29719, 2);
    const double C29721 = 2 * C29717;
    const double C29920 = std::pow(C29889, 2);
    const double C30437 = 2 * C30433;
    const double C30436 = std::pow(C30433, 2);
    const double C30438 = C30431 * de;
    const double C30435 = C30431 * ce;
    const double C30434 = std::pow(C30431, 2);
    const double C30466 = std::pow(C30465, 2);
    const double C30525 = C30465 * de;
    const double C30523 = C30465 * ce;
    const double C30484 = std::pow(C30483, 2);
    const double C30567 = C30483 * de;
    const double C30565 = C30483 * ce;
    const double C30663 = std::pow(C30662, 2);
    const double C30738 = C30662 * ae;
    const double C29681 = 2 * C29679;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * ae * be) /
                        C29679;
    const double C30741 = std::pow(C30706, -2);
    const double C30739 = std::pow(C30706, -1);
    const double C30413 = C30412 * C29678;
    const double C30652 = C30651 * C29678;
    const double C29808 = C29725 * C29805;
    const double C29811 = C29735 * C29805;
    const double C29817 = C29744 * C29805;
    const double C29831 = C29758 * C29805;
    const double C29852 = C29780 * C29805;
    const double C29730 = C29725 * C29727;
    const double C29737 = C29735 * C29727;
    const double C29747 = C29744 * C29727;
    const double C29762 = C29758 * C29727;
    const double C29786 = C29780 * C29727;
    const double C29729 = C29726 * ae;
    const double C29722 = C29721 / C29718;
    const double C124 = (-(bs[1] * C29805 * C29721) / C29718) / C29677;
    const double C127 = (-(bs[1] * C29727 * C29721) / C29718) / C29677;
    const double C118 = -(C29720 * bs[1] * C29721) / C29718;
    const double C261 = -(C29719 * bs[1] * C29721) / C29718;
    const double C414 = -(C29889 * bs[1] * C29721) / C29718;
    const double C30450 = std::pow(C30437, -1);
    const double C30714 = std::pow(C30437, -2);
    const double C30451 = 2 * C30436;
    const double C30718 = C30436 * C30437;
    const double C30717 = 4 * C30436;
    const double C30707 = std::pow(C30435, 2);
    const double C30439 = C30434 * C30432;
    const double C30467 = C30466 * C30432;
    const double C30719 = std::pow(C30523, 2);
    const double C30485 = C30484 * C30432;
    const double C30721 = std::pow(C30565, 2);
    const double C30664 = C30663 * C29678;
    const double C30414 = C30413 / C29677;
    const double C30653 = C30652 / C29677;
    const double C29731 = C29729 * be;
    const double C29724 = -C29722;
    const double C29734 = std::pow(C29722, 4);
    const double C29757 = std::pow(C29722, 6);
    const double C139 =
        (be * std::pow(C29722, 2) * bs[2] * C29719 * ae +
         C29720 * std::pow(-C29722, 3) * bs[3] * C29719 * C29720 * ae * be) /
        C29679;
    const double C30051 = std::pow(C29722, 2);
    const double C125 =
        (C29720 * std::pow(C29722, 2) * bs[2] * C29805) / C29677 -
        (be * bs[1] * C29721) / (C29718 * C29677);
    const double C30751 = 4 * C30718;
    const double C30750 = C30433 * C30717;
    const double C30440 = C30439 / C30433;
    const double C30468 = C30467 / C30433;
    const double C30486 = C30485 / C30433;
    const double C30665 = C30664 / C29677;
    const double C30415 = -C30414;
    const double C30654 = -C30653;
    const double C29736 = C29735 * C29731;
    const double C29746 = C29744 * C29731;
    const double C29760 = C29758 * C29731;
    const double C29784 = C29780 * C29731;
    const double C29728 = std::pow(C29724, 3);
    const double C29743 = std::pow(C29724, 5);
    const double C29779 = std::pow(C29724, 7);
    const double C29739 = C29734 * C29737;
    const double C29813 = C29734 * C29811;
    const double C29818 = C29735 * C29734;
    const double C29765 = C29757 * C29762;
    const double C29833 = C29757 * C29831;
    const double C29853 = C29758 * C29757;
    const double C30053 = C30052 * C30051;
    const double C128 = (C29720 * C30051 * C30052 * C29727) / C29677;
    const double C271 = (C29719 * C30051 * C30052 * C29805) / C29677;
    const double C274 = (C29719 * C30051 * C30052 * C29727) / C29677 -
                        (ae * bs[1] * C29721) / (C29718 * C29677);
    const double C424 = (C29889 * C30051 * C30052 * C29805) / C29677;
    const double C427 = (C29889 * C30051 * C30052 * C29727) / C29677;
    const double C30441 = -C30440;
    const double C30469 = -C30468;
    const double C30487 = -C30486;
    const double C30666 = -C30665;
    const double C30416 = std::exp(C30415);
    const double C30655 = std::exp(C30654);
    const double C29738 = C29734 * C29736;
    const double C29764 = C29757 * C29760;
    const double C29732 = C29728 * C29730;
    const double C29806 = C29725 * C29728;
    const double C29809 = C29728 * C29808;
    const double C291 = (ae * std::pow(C29722, 2) * bs[2] * C29720 * be +
                         C29719 * C29728 * C29725 * C29731) /
                        C29679;
    const double C444 = ((zP - zQ) * C29728 * C29725 * C29731) / C29679;
    const double C29749 = C29743 * C29747;
    const double C29748 = C29743 * C29746;
    const double C29819 = C29743 * C29817;
    const double C29832 = C29744 * C29743;
    const double C29789 = C29779 * C29786;
    const double C29788 = C29779 * C29784;
    const double C29855 = C29779 * C29852;
    const double C29742 = be * C29739;
    const double C29741 = C29720 * C29739;
    const double C30138 = C29719 * C29739;
    const double C29814 = C29720 * C29813;
    const double C29899 = ae * C29813;
    const double C29898 = C29719 * C29813;
    const double C29821 = C29720 * C29818;
    const double C29820 = C29818 * be;
    const double C30061 = C29818 * C29745;
    const double C30141 = C29818 * C29901;
    const double C30212 = C29719 * C29818;
    const double C30211 = C29818 * ae;
    const double C30394 = C29818 * C29920;
    const double C30397 = C29889 * C29818;
    const double C29767 = C29765 * C29745;
    const double C29778 = be * C29765;
    const double C29777 = C29720 * C29765;
    const double C30226 = C29719 * C29765;
    const double C30295 = C29765 * C29920;
    const double C29837 = C29720 * C29833;
    const double C29952 = C29833 * C29901;
    const double C29966 = ae * C29833;
    const double C29965 = C29719 * C29833;
    const double C29994 = C29833 * C29920;
    const double C30023 = C29889 * C29833;
    const double C29858 = C29853 * C29745;
    const double C29857 = C29720 * C29853;
    const double C29856 = C29853 * be;
    const double C30230 = C29853 * C29901;
    const double C119 = C30053 * C29745 - (bs[1] * C29721) / C29718;
    const double C262 = C29719 * C29720 * C30053;
    const double C264 = C30053 * C29901 - (bs[1] * C29721) / C29718;
    const double C415 = C29889 * C29720 * C30053;
    const double C417 = C30053 * C29920 - (bs[1] * C29721) / C29718;
    const double C812 = C29889 * C29719 * C30053;
    const double C30442 = std::exp(C30441);
    const double C30470 = std::exp(C30469);
    const double C30488 = std::exp(C30487);
    const double C30667 = std::exp(C30666);
    const double C4674 = C30416 * C271;
    const double C9087 = C30416 * C424;
    const double C29682 = C29680 * C30416;
    const double C30740 = C30416 * C30705;
    const double C101 =
        (C30416 * std::pow(C30705, 2)) / C29679 + C30416 / C30706;
    const double C103 = C30741 * C30416;
    const double C13127 = C30739 * C30416;
    const double C29701 = C29700 * C30655;
    const double C116 = -(2 * C29678 * (yA - yB) * C30655) / C29677;
    const double C30771 = C30655 * C30737;
    const double C4556 =
        (C30655 * std::pow(C30737, 2)) / C29679 + C30655 / C30706;
    const double C4558 = C30741 * C30655;
    const double C13129 = C30739 * C30655;
    const double C447 =
        (C29728 * C29725 * C29731 + C29738 * std::pow(zP - zQ, 2)) / C29679;
    const double C29766 = C29720 * C29764;
    const double C29951 = C29719 * C29764;
    const double C29985 = C29764 * C29920;
    const double C29989 = C29889 * C29764;
    const double C140 = (C29728 * C29725 * C29731 + be * C29720 * C29732 +
                         C29720 * (be * C29732 + C29720 * std::pow(C29722, 4) *
                                                     bs[4] * C29731)) /
                        C29679;
    const double C141 =
        (2 * (be * C29732 + C29720 * C29738) +
         be * (C29732 + C29739 * std::pow(C29720, 2)) +
         C29720 * (C29738 + be * C29720 * C29739 +
                   C29720 * (be * C29739 +
                             C29720 * std::pow(C29724, 5) * bs[5] * C29731))) /
        C29679;
    const double C292 = (ae * (C29720 * C29728 * C29725 * C29720 * be +
                               bs[2] * std::pow(C29722, 2) * be) +
                         C29719 * (be * C29732 + C29720 * C29738)) /
                        C29679;
    const double C445 = ((zP - zQ) * (be * C29732 + C29720 * C29738)) / C29679;
    const double C129 = (C30051 * C30052 * C29727 + C29732 * C29745) / C29677;
    const double C131 =
        (2 * C29720 * C29732 + C29720 * (C29732 + C29739 * C29745)) / C29677;
    const double C275 =
        (C29719 * C29720 * C29732 + C29720 * C30053 * ae) / C29677;
    const double C280 =
        (C30051 * C30052 * C29727 + C29719 * (C29719 * C29732 + C30053 * ae) +
         C29719 * C30053 * ae) /
        C29677;
    const double C428 = (C29889 * C29720 * C29732) / C29677;
    const double C429 = (C29889 * (C29732 + C29739 * C29745)) / C29677;
    const double C433 = (C30051 * C30052 * C29727 + C29732 * C29920) / C29677;
    const double C820 = (C29889 * (C29719 * C29732 + C30053 * ae)) / C29677;
    const double C1853 =
        (2 * C29889 * C29732 + C29889 * (C29732 + C29739 * C29920)) / C29677;
    const double C29812 = C29806 * be;
    const double C30060 = C29720 * C29806;
    const double C30140 = C29719 * C29806;
    const double C30139 = C29806 * ae;
    const double C276 = (C29719 * (C29732 + C29739 * C29745) +
                         (C30053 + C29806 * C29745) * ae) /
                        C29677;
    const double C1025 =
        (2 * (C29719 * C29732 + C30053 * ae) +
         C29719 * (C29732 + C29719 * (C29719 * C29739 + C29806 * ae) +
                   C29719 * C29806 * ae) +
         (C30053 + C29806 * C29901) * ae) /
        C29677;
    const double C120 =
        2 * C29720 * C30053 + C29720 * (C30053 + C29806 * C29745);
    const double C263 = C29719 * (C30053 + C29806 * C29745);
    const double C416 = C29889 * (C30053 + C29806 * C29745);
    const double C1016 =
        2 * C29719 * C30053 + C29719 * (C30053 + C29806 * C29901);
    const double C1153 = C29889 * (C30053 + C29806 * C29901);
    const double C1844 =
        2 * C29889 * C30053 + C29889 * (C30053 + C29806 * C29920);
    const double C1847 =
        3 * (C30053 + C29806 * C29920) +
        C29889 * (2 * C29889 * C29806 + C29889 * (C29806 + C29818 * C29920));
    const double C294 = (C29728 * C29725 * C29731 + ae * C29719 * C29809 +
                         C29719 * (ae * C29809 + C29719 * C29738)) /
                        C29679;
    const double C827 =
        (ae * C29889 * C29809 + C29719 * C29889 * C29738) / C29679;
    const double C126 =
        (C30051 * C30052 * C29805 + C29720 * (C29720 * C29809 + C30053 * be) +
         C29720 * C30053 * be) /
        C29677;
    const double C272 = (C29719 * (C29720 * C29809 + C30053 * be)) / C29677;
    const double C277 = (C30051 * C30052 * C29805 + C29809 * C29901) / C29677;
    const double C425 = (C29889 * (C29720 * C29809 + C30053 * be)) / C29677;
    const double C430 = (C30051 * C30052 * C29805 + C29809 * C29920) / C29677;
    const double C817 = (C29889 * C29719 * C29809) / C29677;
    const double C1022 =
        (2 * C29719 * C29809 + C29719 * (C29809 + C29813 * C29901)) / C29677;
    const double C1165 = (C29889 * (C29809 + C29813 * C29901)) / C29677;
    const double C1850 =
        (2 * C29889 * C29809 + C29889 * (C29809 + C29813 * C29920)) / C29677;
    const double C4676 = C30416 * C291;
    const double C9089 = C30416 * C444;
    const double C29751 = C29749 * C29745;
    const double C29756 = be * C29749;
    const double C29755 = C29720 * C29749;
    const double C30210 = C29719 * C29749;
    const double C30287 = C29749 * C29920;
    const double C30294 = C29889 * C29749;
    const double C1859 =
        (3 * (C29732 + C29739 * C29920) +
         C29889 * (2 * C29889 * C29739 + C29889 * (C29739 + C29749 * C29920))) /
        C29677;
    const double C29750 = C29720 * C29748;
    const double C29900 = C29719 * C29748;
    const double C29932 = C29889 * C29748;
    const double C1034 = (2 * (ae * C29809 + C29719 * C29738) +
                          ae * (C29809 + C29813 * std::pow(C29719, 2)) +
                          C29719 * (C29738 + ae * C29719 * C29813 +
                                    C29719 * (ae * C29813 + C29719 * C29748))) /
                         C29679;
    const double C1177 = (ae * (C29809 + C29813 * C29920) +
                          C29719 * (C29738 + C29748 * C29920)) /
                         C29679;
    const double C1862 =
        (2 * C29889 * C29738 + C29889 * (C29738 + C29748 * C29920)) / C29679;
    const double C29822 = C29720 * C29819;
    const double C29903 = C29819 * C29901;
    const double C29950 = ae * C29819;
    const double C29949 = C29719 * C29819;
    const double C29988 = C29889 * C29819;
    const double C30284 = C29819 * C29920;
    const double C1856 =
        (3 * (C29809 + C29813 * C29920) +
         C29889 * (2 * C29889 * C29813 + C29889 * (C29813 + C29819 * C29920))) /
        C29677;
    const double C29836 = C29832 * C29745;
    const double C29835 = C29720 * C29832;
    const double C29834 = C29832 * be;
    const double C30213 = C29832 * C29901;
    const double C30228 = C29719 * C29832;
    const double C30227 = C29832 * ae;
    const double C30398 = C29832 * C29920;
    const double C29791 = C29789 * C29745;
    const double C29790 = C29720 * C29788;
    const double C29967 = C29719 * C29788;
    const double C29995 = C29788 * C29920;
    const double C30024 = C29889 * C29788;
    const double C29859 = C29720 * C29855;
    const double C29969 = C29855 * C29901;
    const double C434 = (C29720 * C29732 + C29741 * C29920) / C29677;
    const double C1180 =
        (C29889 * C29738 + ae * C29889 * C29898 +
         C29719 * (ae * C29889 * C29813 + C29719 * C29889 * C29748)) /
        C29679;
    const double C1183 =
        (C29738 + C29748 * C29920 + ae * (C29898 + C29719 * C29819 * C29920) +
         C29719 * (ae * (C29813 + C29819 * C29920) +
                   C29719 * (C29748 + C29764 * C29920))) /
        C29679;
    const double C1159 = (C29719 * C29809 + C29898 * C29920) / C29677;
    const double C29823 = C29821 * be;
    const double C30065 = 2 * C29821;
    const double C30147 = C29719 * C29821;
    const double C30146 = C29821 * ae;
    const double C30062 = C29806 + C30061;
    const double C30143 = C29806 + C30141;
    const double C30217 = 2 * C30212;
    const double C30215 = C30212 * ae;
    const double C30395 = C29806 + C30394;
    const double C30399 = 2 * C30397;
    const double C29769 = C29749 + C29767;
    const double C29785 = 2 * C29777;
    const double C29783 = be * C29777;
    const double C30254 = C29719 * C29777;
    const double C30306 = C29777 * C29920;
    const double C30297 = C29749 + C30295;
    const double C29956 = C29819 + C29952;
    const double C29973 = 2 * C29965;
    const double C29971 = ae * C29965;
    const double C30022 = C29889 * C29965;
    const double C30309 = C29965 * C29920;
    const double C29996 = C29819 + C29994;
    const double C30026 = ae * C30023;
    const double C29861 = C29832 + C29858;
    const double C29860 = C29857 * be;
    const double C30257 = C29857 * C29901;
    const double C30234 = C29832 + C30230;
    const double C30444 = C30442 * C30435;
    const double C30443 = C30442 / C30437;
    const double C30453 = C30450 * C30442;
    const double C30710 = C30442 * C30438;
    const double C30748 = C30714 * C30442;
    const double C30742 = C30442 * C30707;
    const double C30524 = C30470 / C30437;
    const double C30526 = C30470 * C30523;
    const double C30533 = C30450 * C30470;
    const double C30725 = C30470 * C30525;
    const double C30754 = C30714 * C30470;
    const double C30752 = C30470 * C30719;
    const double C30566 = C30488 / C30437;
    const double C30568 = C30488 * C30565;
    const double C30575 = C30450 * C30488;
    const double C30731 = C30488 * C30567;
    const double C30757 = C30714 * C30488;
    const double C30755 = C30488 * C30721;
    const double C30772 = C30667 * C30738;
    const double C8863 =
        (C30667 * std::pow(C30738, 2)) / C29679 + C30667 / C30706;
    const double C8865 = C30741 * C30667;
    const double C18743 = C30739 * C30667;
    const double C115 = ((0 * ae) / C29677 - C29682 / C29679) / (2 * C29677) +
                        (0 * ae) / C29677;
    const double C4559 = -(2 * C29682) / C29677;
    const double C13130 =
        ((C30416 - (C29675 * 2 * C29682) / C29677) * ae) / C29677 -
        C29676 / C29681;
    const double C13131 = (0 * ae) / C29677 - C29682 / C29679;
    const double C102 = (2 * C30739 * C30740) / C29677;
    const double C13126 = C30740 / C29677;
    const double C114 =
        (((C30416 - (C29675 * 2 * C29682) / C29677) * ae) / C29677 -
         C29676 / C29681) /
            (2 * C29677) +
        ((C29675 * ((0 * ae) / C29677 - C29682 / C29679) + C13127) * ae) /
            C29677;
    const double C4562 = ((0 * ae) / C29677 - C29701 / C29679) / (2 * C29677) +
                         (0 * ae) / C29677;
    const double C13132 =
        ((C30655 - (C29698 * 2 * C29701) / C29677) * ae) / C29677 -
        C29699 / C29681;
    const double C13133 = (0 * ae) / C29677 - C29701 / C29679;
    const double C4557 = (2 * C30739 * C30771) / C29677;
    const double C13128 = C30771 / C29677;
    const double C4561 =
        (((C30655 - (C29698 * 2 * C29701) / C29677) * ae) / C29677 -
         C29699 / C29681) /
            (2 * C29677) +
        ((C29698 * ((0 * ae) / C29677 - C29701 / C29679) + C13129) * ae) /
            C29677;
    const double C9093 = C30416 * C447;
    const double C29986 = C29748 + C29985;
    const double C29991 = C29719 * C29989;
    const double C30040 = 2 * C29989;
    const double C4689 = C30416 * C292;
    const double C13287 = C13127 * C292;
    const double C9102 = C30416 * C445;
    const double C19043 = C13127 * C445;
    const double C29815 = C29814 + C29812;
    const double C281 =
        (C29720 * C29732 + C29719 * (C29719 * C29741 + C30060 * ae) +
         C29719 * C30060 * ae) /
        C29677;
    const double C821 = (C29889 * (C29719 * C29741 + C30060 * ae)) / C29677;
    const double C265 = C29720 * C30053 + C30060 * C29901;
    const double C418 = C29720 * C30053 + C30060 * C29920;
    const double C813 = C29889 * C29719 * C30060;
    const double C1017 =
        2 * C29719 * C30060 + C29719 * (C30060 + C29821 * C29901);
    const double C1154 = C29889 * (C30060 + C29821 * C29901);
    const double C1845 =
        2 * C29889 * C30060 + C29889 * (C30060 + C29821 * C29920);
    const double C1150 = C29719 * C30053 + C30140 * C29920;
    const double C2222 =
        2 * C29889 * C30140 + C29889 * (C30140 + C30212 * C29920);
    const double C30142 = C30138 + C30139;
    const double C4680 = C30416 * C294;
    const double C5179 = C30416 * C827;
    const double C4687 = C30416 * C272;
    const double C13283 = C13127 * C272;
    const double C4678 = C30416 * C277;
    const double C9100 = C30416 * C425;
    const double C19039 = C13127 * C425;
    const double C9091 = C30416 * C430;
    const double C5177 = C30416 * C817;
    const double C4683 = C30416 * C1022;
    const double C5181 = C30416 * C1165;
    const double C9096 = C30416 * C1850;
    const double C29753 = C29739 + C29751;
    const double C29768 = C29756 + C29766;
    const double C29761 = 2 * C29755;
    const double C29759 = be * C29755;
    const double C30145 = C29719 * C29755;
    const double C1026 =
        (2 * (C29719 * C29741 + C30060 * ae) +
         C29719 * (C29741 + C29719 * (C29719 * C29755 + C29821 * ae) +
                   C29719 * C29821 * ae) +
         (C30060 + C29821 * C29901) * ae) /
        C29677;
    const double C1854 =
        (2 * C29889 * C29741 + C29889 * (C29741 + C29755 * C29920)) / C29677;
    const double C1860 =
        (3 * (C29741 + C29755 * C29920) +
         C29889 * (2 * C29889 * C29755 + C29889 * (C29755 + C29777 * C29920))) /
        C29677;
    const double C30214 = C30210 + C30211;
    const double C30288 = C29739 + C30287;
    const double C30296 = 2 * C30294;
    const double C29752 = C29742 + C29750;
    const double C29902 = C29899 + C29900;
    const double C1865 =
        (3 * (C29738 + C29748 * C29920) +
         C29889 * (2 * C29932 + C29889 * (C29748 + C29764 * C29920))) /
        C29679;
    const double C2231 =
        (ae * (2 * C29889 * C29813 + C29889 * (C29813 + C29819 * C29920)) +
         C29719 * (2 * C29932 + C29889 * (C29748 + C29764 * C29920))) /
        C29679;
    const double C4685 = C30416 * C1034;
    const double C5518 = C30416 * C1177;
    const double C9098 = C30416 * C1862;
    const double C29824 = C29822 + C29820;
    const double C29904 = C29813 + C29903;
    const double C29954 = C29950 + C29951;
    const double C29955 = 2 * C29949;
    const double C29953 = ae * C29949;
    const double C2225 =
        (2 * C29889 * C29898 + C29889 * (C29898 + C29949 * C29920)) / C29677;
    const double C6192 =
        (3 * (C29898 + C29949 * C29920) +
         C29889 * (2 * C29889 * C29949 + C29889 * (C29949 + C29965 * C29920))) /
        C29677;
    const double C29990 = ae * C29988;
    const double C30290 = 2 * C29988;
    const double C30285 = C29813 + C30284;
    const double C10416 = C30416 * C1856;
    const double C29839 = C29818 + C29836;
    const double C29838 = C29835 * be;
    const double C29854 = 2 * C29835;
    const double C30148 = C29835 * C29901;
    const double C30256 = C29719 * C29835;
    const double C30255 = C29835 * ae;
    const double C30405 = C29835 * C29920;
    const double C1848 =
        3 * (C30060 + C29821 * C29920) +
        C29889 * (2 * C29889 * C29821 + C29889 * (C29821 + C29835 * C29920));
    const double C29840 = C29837 + C29834;
    const double C30216 = C29818 + C30213;
    const double C30235 = 2 * C30228;
    const double C30233 = C30228 * ae;
    const double C30408 = C30228 * C29920;
    const double C6188 =
        3 * (C30140 + C30212 * C29920) +
        C29889 * (2 * C29889 * C30212 + C29889 * (C30212 + C30228 * C29920));
    const double C30232 = C30226 + C30227;
    const double C30400 = C29818 + C30398;
    const double C29793 = C29765 + C29791;
    const double C29792 = C29778 + C29790;
    const double C29972 = C29966 + C29967;
    const double C29997 = C29764 + C29995;
    const double C30027 = C29719 * C30024;
    const double C29862 = C29859 + C29856;
    const double C29974 = C29833 + C29969;
    const double C5183 = C30416 * C1180;
    const double C5522 = C30416 * C1183;
    const double C5516 = C30416 * C1159;
    const double C1151 = C29719 * C30060 + C30147 * C29920;
    const double C121 = 3 * (C30053 + C29806 * C29745) +
                        C29720 * (2 * C30060 + C29720 * C30062);
    const double C266 = C30053 + C29806 * C29745 + C30062 * C29901;
    const double C267 = C29719 * (2 * C30060 + C29720 * C30062);
    const double C419 = C30053 + C29806 * C29745 + C30062 * C29920;
    const double C420 = C29889 * (2 * C30060 + C29720 * C30062);
    const double C814 = C29889 * C29719 * C30062;
    const double C1019 = 3 * (C30053 + C29806 * C29901) +
                         C29719 * (2 * C30140 + C29719 * C30143);
    const double C1156 = C30053 + C29806 * C29901 + C30143 * C29920;
    const double C1542 = C29889 * (2 * C30140 + C29719 * C30143);
    const double C10405 =
        4 * (2 * C29889 * C29806 + C29889 * C30395) +
        C29889 * (3 * C30395 + C29889 * (2 * C29889 * C29818 +
                                         C29889 * (C29818 + C29832 * C29920)));
    const double C29771 = C29720 * C29769;
    const double C29781 = 3 * C29769;
    const double C29776 = be * C29769;
    const double C30152 = C29719 * C29769;
    const double C29787 = C29764 + C29783;
    const double C30307 = C29755 + C30306;
    const double C30298 = C29889 * C30297;
    const double C29959 = C29719 * C29956;
    const double C29968 = 3 * C29956;
    const double C29964 = ae * C29956;
    const double C29975 = C29764 + C29971;
    const double C30025 = ae * C30022;
    const double C30310 = C29949 + C30309;
    const double C29998 = ae * C29996;
    const double C30291 = C29889 * C29996;
    const double C29864 = C29720 * C29861;
    const double C29863 = C29861 * be;
    const double C30155 = C29861 * C29901;
    const double C30260 = C29835 + C30257;
    const double C30237 = C29719 * C30234;
    const double C30445 = C30444 * C30438;
    const double C30452 = C30444 / C30451;
    const double C30711 = C30450 * C30444;
    const double C30709 = C30444 / C30433;
    const double C258 = (C30442 * std::pow(C30438, 2)) / C30436 + C30443;
    const double C30454 = C30453 * C30438;
    const double C30715 = C30435 * C30453;
    const double C30713 = 2 * C30453;
    const double C30758 = C30453 / C30717;
    const double C112 = C30453 / C30751;
    const double C2703 = C30453 / C30437;
    const double C30744 = C30710 / C30433;
    const double C259 = (-2 * C30450 * C30710) / C30433;
    const double C30773 = C30742 / C30436;
    const double C942 = (C30470 * std::pow(C30525, 2)) / C30436 + C30524;
    const double C30527 = C30526 * C30525;
    const double C30532 = C30526 / C30451;
    const double C30723 = C30526 / C30433;
    const double C30720 = C30450 * C30526;
    const double C30534 = C30533 * C30525;
    const double C30729 = C30523 * C30533;
    const double C30728 = 2 * C30533;
    const double C30764 = C30533 / C30717;
    const double C1014 = C30533 / C30751;
    const double C2700 = C30533 / C30437;
    const double C30760 = C30725 / C30433;
    const double C943 = (-2 * C30450 * C30725) / C30433;
    const double C30778 = C30752 / C30436;
    const double C1664 = (C30488 * std::pow(C30567, 2)) / C30436 + C30566;
    const double C30569 = C30568 * C30567;
    const double C30574 = C30568 / C30451;
    const double C30724 = C30568 / C30433;
    const double C30722 = C30450 * C30568;
    const double C30576 = C30575 * C30567;
    const double C30735 = C30565 * C30575;
    const double C30734 = 2 * C30575;
    const double C30770 = C30575 / C30717;
    const double C1843 = C30575 / C30751;
    const double C3602 = C30575 / C30437;
    const double C30766 = C30731 / C30433;
    const double C1665 = (-2 * C30450 * C30731) / C30433;
    const double C30780 = C30755 / C30436;
    const double C8864 = (2 * C30739 * C30772) / C29677;
    const double C18742 = C30772 / C29677;
    const double C4701 = C4559 * C276;
    const double C4699 = C4559 * C263;
    const double C4688 = C4559 * C275;
    const double C4686 = C4559 * C262;
    const double C4684 = C4559 * C1025;
    const double C4682 = C4559 * C1016;
    const double C4681 = C4559 * C280;
    const double C4679 = C4559 * C264;
    const double C4677 = C4559 * C274;
    const double C4675 = C4559 * C261;
    const double C5180 = C4559 * C1153;
    const double C5178 = C4559 * C820;
    const double C5176 = C4559 * C812;
    const double C9114 = C4559 * C429;
    const double C9112 = C4559 * C416;
    const double C9105 = C4559 * C434;
    const double C9101 = C4559 * C428;
    const double C9099 = C4559 * C415;
    const double C9097 = C4559 * C1853;
    const double C9095 = C4559 * C1844;
    const double C9094 = C4559 * C433;
    const double C9092 = C4559 * C417;
    const double C9090 = C4559 * C427;
    const double C9088 = C4559 * C414;
    const double C10419 = C4559 * C1859;
    const double C10417 = C4559 * C1847;
    const double C13318 = C13130 * C276;
    const double C13314 = C13130 * C263;
    const double C13301 = C13130 * C275;
    const double C13297 = C13130 * C262;
    const double C13293 = C13130 * C280;
    const double C13289 = C13130 * C264;
    const double C13286 = C13130 * C274;
    const double C13282 = C13130 * C261;
    const double C13941 = C13130 * C820;
    const double C13937 = C13130 * C812;
    const double C14194 = C13130 * C1025;
    const double C14190 = C13130 * C1016;
    const double C14360 = C13130 * C1153;
    const double C19074 = C13130 * C429;
    const double C19070 = C13130 * C416;
    const double C19066 = C13130 * C434;
    const double C19057 = C13130 * C428;
    const double C19053 = C13130 * C415;
    const double C19049 = C13130 * C433;
    const double C19045 = C13130 * C417;
    const double C19042 = C13130 * C427;
    const double C19038 = C13130 * C414;
    const double C20761 = C13130 * C1859;
    const double C20757 = C13130 * C1847;
    const double C20754 = C13130 * C1853;
    const double C20750 = C13130 * C1844;
    const double C13303 = C13131 * C276;
    const double C13299 = C13131 * C263;
    const double C13288 = C13131 * C275;
    const double C13284 = C13131 * C262;
    const double C19059 = C13131 * C429;
    const double C19055 = C13131 * C416;
    const double C19051 = C13131 * C434;
    const double C19044 = C13131 * C428;
    const double C19040 = C13131 * C415;
    const double C13302 = C13126 * C292;
    const double C13298 = C13126 * C272;
    const double C13294 = C13126 * C294;
    const double C13290 = C13126 * C277;
    const double C13285 = C13126 * C291;
    const double C13281 = C13126 * C271;
    const double C13942 = C13126 * C827;
    const double C13938 = C13126 * C817;
    const double C14193 = C13126 * C1034;
    const double C14189 = C13126 * C1022;
    const double C14372 = C13126 * C1183;
    const double C14363 = C13126 * C1180;
    const double C14359 = C13126 * C1165;
    const double C14355 = C13126 * C1177;
    const double C14351 = C13126 * C1159;
    const double C19058 = C13126 * C445;
    const double C19054 = C13126 * C425;
    const double C19050 = C13126 * C447;
    const double C19046 = C13126 * C430;
    const double C19041 = C13126 * C444;
    const double C19037 = C13126 * C424;
    const double C20758 = C13126 * C1856;
    const double C20753 = C13126 * C1862;
    const double C20749 = C13126 * C1850;
    const double C113 =
        (((0 - (C29675 * C29676) / C29677) * ae) / C29677 - (0 * be) / C29681) /
            (2 * C29677) +
        ((C29675 * (((C30416 - (C29675 * 2 * C29682) / C29677) * ae) / C29677 -
                    C29676 / C29681) +
          C13126) *
         ae) /
            C29677 +
        (0 * ae) / C29677 - C29682 / C29679;
    const double C4560 =
        (((0 - (C29698 * C29699) / C29677) * ae) / C29677 - (0 * be) / C29681) /
            (2 * C29677) +
        ((C29698 * (((C30655 - (C29698 * 2 * C29701) / C29677) * ae) / C29677 -
                    C29699 / C29681) +
          C13128) *
         ae) /
            C29677 +
        (0 * ae) / C29677 - C29701 / C29679;
    const double C130 =
        (2 * (C29720 * C29809 + C30053 * be) +
         C29720 * (C29809 + C29720 * C29815 + C29720 * C29806 * be) +
         (C30053 + C29806 * C29745) * be) /
        C29677;
    const double C273 =
        (C29719 * (C29809 + C29720 * C29815 + C30060 * be)) / C29677;
    const double C278 =
        (C29720 * C29809 + C30053 * be + C29815 * C29901) / C29677;
    const double C426 =
        (C29889 * (C29809 + C29720 * C29815 + C30060 * be)) / C29677;
    const double C431 =
        (C29720 * C29809 + C30053 * be + C29815 * C29920) / C29677;
    const double C818 = (C29889 * C29719 * C29815) / C29677;
    const double C4692 = C4559 * C281;
    const double C13310 = C13130 * C281;
    const double C13295 = C13131 * C281;
    const double C5187 = C4559 * C821;
    const double C13950 = C13130 * C821;
    const double C13943 = C13131 * C821;
    const double C4690 = C4559 * C265;
    const double C13306 = C13130 * C265;
    const double C13291 = C13131 * C265;
    const double C9103 = C4559 * C418;
    const double C19062 = C13130 * C418;
    const double C19047 = C13131 * C418;
    const double C5185 = C4559 * C813;
    const double C13946 = C13130 * C813;
    const double C13939 = C13131 * C813;
    const double C4695 = C4559 * C1017;
    const double C14192 = C13131 * C1017;
    const double C14505 = C13130 * C1017;
    const double C5189 = C4559 * C1154;
    const double C14362 = C13131 * C1154;
    const double C14707 = C13130 * C1154;
    const double C9108 = C4559 * C1845;
    const double C20752 = C13131 * C1845;
    const double C21089 = C13130 * C1845;
    const double C5517 = C4559 * C1150;
    const double C14352 = C13130 * C1150;
    const double C6562 = C4559 * C2222;
    const double C15689 = C13130 * C2222;
    const double C1031 =
        (3 * (C29732 + C29719 * C30142 + C30140 * ae) +
         C29719 * (2 * C30142 +
                   C29719 * (C29739 + C29719 * (C29719 * C29749 + C29818 * ae) +
                             C29719 * C29818 * ae) +
                   C30143 * ae) +
         (2 * C30140 + C29719 * C30143) * ae) /
        C29677;
    const double C1162 =
        (C29719 * C29732 + C30053 * ae + C30142 * C29920) / C29677;
    const double C1168 =
        (C29889 * (C29732 + C29719 * C30142 + C30140 * ae)) / C29677;
    const double C1174 = (C29732 + C29719 * C30142 + C30140 * ae +
                          (C29739 + C29719 * (C29719 * C29749 + C29818 * ae) +
                           C29719 * C29818 * ae) *
                              C29920) /
                         C29677;
    const double C1548 =
        (C29889 * (2 * C30142 +
                   C29719 * (C29739 + C29719 * (C29719 * C29749 + C29818 * ae) +
                             C29719 * C29818 * ae) +
                   C30143 * ae)) /
        C29677;
    const double C2228 =
        (2 * C29889 * C30142 +
         C29889 * (C30142 + (C29719 * C29749 + C29818 * ae) * C29920)) /
        C29677;
    const double C133 = (3 * (C29732 + C29739 * C29745) +
                         C29720 * (2 * C29741 + C29720 * C29753)) /
                        C29677;
    const double C282 =
        (C29732 + C29739 * C29745 + C29719 * (C29719 * C29753 + C30062 * ae) +
         C29719 * C30062 * ae) /
        C29677;
    const double C284 = (C29719 * (2 * C29741 + C29720 * C29753) +
                         (2 * C30060 + C29720 * C30062) * ae) /
                        C29677;
    const double C435 = (C29732 + C29739 * C29745 + C29753 * C29920) / C29677;
    const double C437 = (C29889 * (2 * C29741 + C29720 * C29753)) / C29677;
    const double C822 = (C29889 * (C29719 * C29753 + C30062 * ae)) / C29677;
    const double C1855 =
        (2 * C29889 * C29753 + C29889 * (C29753 + C29769 * C29920)) / C29677;
    const double C29770 = C29720 * C29768;
    const double C29775 = 2 * C29768;
    const double C29908 = C29719 * C29768;
    const double C29934 = C29889 * C29768;
    const double C29763 = C29748 + C29759;
    const double C30149 = C30145 + C30146;
    const double C4697 = C4559 * C1026;
    const double C14196 = C13131 * C1026;
    const double C14509 = C13130 * C1026;
    const double C9110 = C4559 * C1854;
    const double C20756 = C13131 * C1854;
    const double C21093 = C13130 * C1854;
    const double C10697 = C4559 * C1860;
    const double C20763 = C13131 * C1860;
    const double C30218 = C29719 * C30214;
    const double C30225 = 2 * C30214;
    const double C10408 =
        (4 * (2 * C29889 * C29739 + C29889 * C30288) +
         C29889 *
             (3 * C30288 + C29889 * (2 * C29889 * C29749 +
                                     C29889 * (C29749 + C29765 * C29920)))) /
        C29677;
    const double C142 =
        (3 * (C29738 + be * C29741 + C29720 * C29752) +
         be * (2 * C29741 + C29720 * C29753) +
         C29720 *
             (2 * C29752 + be * C29753 +
              C29720 * (C29748 + be * C29720 * C29749 +
                        C29720 * (be * C29749 + C29720 * std::pow(C29722, 6) *
                                                    bs[6] * C29731)))) /
        C29679;
    const double C293 =
        (ae * (C29728 * C29725 * C29805 +
               C29720 * (C29720 * C29734 * C29735 * C29805 + C29806 * be) +
               C29720 * C29806 * be) +
         C29719 * (C29738 + be * C29741 + C29720 * C29752)) /
        C29679;
    const double C295 = (be * C29732 + C29720 * C29738 + ae * C29719 * C29815 +
                         C29719 * (ae * C29815 + C29719 * C29752)) /
                        C29679;
    const double C446 =
        ((zP - zQ) * (C29738 + be * C29741 + C29720 * C29752)) / C29679;
    const double C448 =
        (be * C29732 + C29720 * C29738 + C29752 * std::pow(zP - zQ, 2)) /
        C29679;
    const double C828 =
        (ae * C29889 * C29815 + C29719 * C29889 * C29752) / C29679;
    const double C1863 =
        (2 * C29889 * C29752 + C29889 * (C29752 + C29768 * C29920)) / C29679;
    const double C10418 = C30416 * C1865;
    const double C20762 = C13126 * C1865;
    const double C6565 = C30416 * C2231;
    const double C15694 = C13126 * C2231;
    const double C29825 = C29720 * C29824;
    const double C29830 = 2 * C29824;
    const double C29907 = ae * C29824;
    const double C29906 = C29719 * C29824;
    const double C1035 = (2 * (ae * C29815 + C29719 * C29752) +
                          ae * (C29815 + C29824 * std::pow(C29719, 2)) +
                          C29719 * (C29752 + ae * C29719 * C29824 +
                                    C29719 * (ae * C29824 + C29719 * C29768))) /
                         C29679;
    const double C1178 = (ae * (C29815 + C29824 * C29920) +
                          C29719 * (C29752 + C29768 * C29920)) /
                         C29679;
    const double C1023 =
        (2 * C29719 * C29815 + C29719 * (C29815 + C29824 * C29901)) / C29677;
    const double C1166 = (C29889 * (C29815 + C29824 * C29901)) / C29677;
    const double C1851 =
        (2 * C29889 * C29815 + C29889 * (C29815 + C29824 * C29920)) / C29677;
    const double C1037 =
        (3 * (C29738 + ae * C29898 + C29719 * C29902) +
         ae * (2 * C29898 + C29719 * C29904) +
         C29719 * (2 * C29902 + ae * C29904 +
                   C29719 * (C29748 + ae * C29719 * C29819 +
                             C29719 * (ae * C29819 + C29719 * C29764)))) /
        C29679;
    const double C1551 =
        (2 * (ae * C29889 * C29813 + C29719 * C29932) + ae * C29889 * C29904 +
         C29719 *
             (C29932 + ae * C29889 * C29719 * C29819 +
              C29719 * (ae * C29889 * C29819 + C29719 * C29889 * C29764))) /
        C29679;
    const double C5510 =
        (2 * (ae * (C29813 + C29819 * C29920) + C29719 * C29986) +
         ae * (C29904 + C29956 * C29920) +
         C29719 * (C29986 + ae * (C29949 + C29965 * C29920) +
                   C29719 * (ae * (C29819 + C29833 * C29920) +
                             C29719 * (C29764 + C29788 * C29920)))) /
        C29679;
    const double C1028 = (3 * (C29809 + C29813 * C29901) +
                          C29719 * (2 * C29898 + C29719 * C29904)) /
                         C29677;
    const double C1171 = (C29809 + C29813 * C29901 + C29904 * C29920) / C29677;
    const double C1545 = (C29889 * (2 * C29898 + C29719 * C29904)) / C29677;
    const double C6190 =
        (2 * C29889 * C29904 + C29889 * (C29904 + C29956 * C29920)) / C29677;
    const double C29958 = C29719 * C29954;
    const double C29963 = 2 * C29954;
    const double C29957 = C29748 + C29953;
    const double C6563 = C30416 * C2225;
    const double C15690 = C13126 * C2225;
    const double C10807 = C30416 * C6192;
    const double C29992 = C29990 + C29991;
    const double C10407 =
        (4 * (2 * C29889 * C29813 + C29889 * C30285) +
         C29889 * (3 * C30285 + C29889 * (2 * C29988 + C29889 * C29996))) /
        C29677;
    const double C29841 = C29839 * be;
    const double C30066 = C29720 * C29839;
    const double C30070 = 3 * C29839;
    const double C30154 = C29719 * C29839;
    const double C30153 = C29839 * ae;
    const double C1027 =
        (2 * (C29719 * C29753 + C30062 * ae) +
         C29719 * (C29753 + C29719 * (C29719 * C29769 + C29839 * ae) +
                   C29719 * C29839 * ae) +
         (C30062 + C29839 * C29901) * ae) /
        C29677;
    const double C1018 =
        2 * C29719 * C30062 + C29719 * (C30062 + C29839 * C29901);
    const double C1155 = C29889 * (C30062 + C29839 * C29901);
    const double C1846 =
        2 * C29889 * C30062 + C29889 * (C30062 + C29839 * C29920);
    const double C1849 =
        3 * (C30062 + C29839 * C29920) +
        C29889 * (2 * C29889 * C29839 + C29889 * (C29839 + C29861 * C29920));
    const double C30150 = C29821 + C30148;
    const double C30261 = 2 * C30256;
    const double C30259 = C30256 * ae;
    const double C2223 =
        2 * C29889 * C30147 + C29889 * (C30147 + C30256 * C29920);
    const double C10577 =
        3 * (C30147 + C30256 * C29920) +
        C29889 * (2 * C29889 * C30256 +
                  C29889 * (C30256 + C29719 * C29857 * C29920));
    const double C30258 = C30254 + C30255;
    const double C30406 = C29821 + C30405;
    const double C10695 = C4559 * C1848;
    const double C20759 = C13131 * C1848;
    const double C29842 = C29720 * C29840;
    const double C29851 = 2 * C29840;
    const double C29909 = C29840 * C29901;
    const double C30003 = ae * C29840;
    const double C30002 = C29719 * C29840;
    const double C30016 = C29889 * C29840;
    const double C30303 = C29840 * C29920;
    const double C1857 =
        (3 * (C29815 + C29824 * C29920) +
         C29889 * (2 * C29889 * C29824 + C29889 * (C29824 + C29840 * C29920))) /
        C29677;
    const double C30219 = C29719 * C30216;
    const double C30231 = 3 * C30216;
    const double C30229 = C30216 * ae;
    const double C6187 =
        2 * C29889 * C30143 + C29889 * (C30143 + C30216 * C29920);
    const double C6189 =
        3 * (C30143 + C30216 * C29920) +
        C29889 * (2 * C29889 * C30216 + C29889 * (C30216 + C30234 * C29920));
    const double C30409 = C30212 + C30408;
    const double C10806 = C4559 * C6188;
    const double C30236 = C29719 * C30232;
    const double C30312 = C30232 * C29920;
    const double C6193 =
        (3 * (C30142 + C30214 * C29920) +
         C29889 * (2 * C29889 * C30214 + C29889 * (C30214 + C30232 * C29920))) /
        C29677;
    const double C30401 = C29889 * C30400;
    const double C29795 = C29720 * C29793;
    const double C1861 =
        (3 * (C29753 + C29769 * C29920) +
         C29889 * (2 * C29889 * C29769 + C29889 * (C29769 + C29793 * C29920))) /
        C29677;
    const double C29794 = C29720 * C29792;
    const double C30004 = C29719 * C29792;
    const double C30017 = C29889 * C29792;
    const double C30036 = C29792 * C29920;
    const double C29976 = C29719 * C29972;
    const double C29999 = C29719 * C29997;
    const double C30041 = C29889 * C29997;
    const double C6196 =
        (2 * C29932 + C29889 * C29986 +
         ae * (2 * C29889 * C29949 + C29889 * (C29949 + C29965 * C29920)) +
         C29719 * (ae * (2 * C29988 + C29889 * C29996) +
                   C29719 * (2 * C29989 + C29889 * C29997))) /
        C29679;
    const double C6197 =
        (ae * (3 * (C29813 + C29819 * C29920) +
               C29889 * (2 * C29988 + C29889 * C29996)) +
         C29719 * (3 * C29986 + C29889 * (2 * C29989 + C29889 * C29997))) /
        C29679;
    const double C6198 =
        (3 * C29986 + C29889 * (2 * C29989 + C29889 * C29997) +
         ae * (3 * (C29949 + C29965 * C29920) +
               C29889 * (2 * C30022 +
                         C29889 * (C29965 + C29719 * C29855 * C29920))) +
         C29719 * (ae * (3 * C29996 +
                         C29889 * (2 * C30023 +
                                   C29889 * (C29833 + C29855 * C29920))) +
                   C29719 * (3 * C29997 +
                             C29889 * (2 * C30024 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29920))))) /
        C29679;
    const double C30029 = C30026 + C30027;
    const double C29865 = C29720 * C29862;
    const double C30005 = C29862 * C29901;
    const double C29977 = C29719 * C29974;
    const double C6194 =
        (3 * (C29904 + C29956 * C29920) +
         C29889 * (2 * C29889 * C29956 + C29889 * (C29956 + C29974 * C29920))) /
        C29677;
    const double C6350 = C4559 * C1151;
    const double C14354 = C13131 * C1151;
    const double C15421 = C13130 * C1151;
    const double C4703 = C4559 * C266;
    const double C13321 = C13130 * C266;
    const double C13308 = C13131 * C266;
    const double C4924 = C4559 * C267;
    const double C13316 = C13131 * C267;
    const double C13605 = C13130 * C267;
    const double C9116 = C4559 * C419;
    const double C19077 = C13130 * C419;
    const double C19064 = C13131 * C419;
    const double C9334 = C4559 * C420;
    const double C19072 = C13131 * C420;
    const double C19345 = C13130 * C420;
    const double C5192 = C4559 * C814;
    const double C13953 = C13130 * C814;
    const double C13948 = C13131 * C814;
    const double C5383 = C4559 * C1019;
    const double C14197 = C13130 * C1019;
    const double C5521 = C4559 * C1156;
    const double C14367 = C13130 * C1156;
    const double C5525 = C4559 * C1542;
    const double C14845 = C13130 * C1542;
    const double C10420 = C4559 * C10405;
    const double C29773 = C29761 + C29771;
    const double C10690 =
        (4 * (2 * C29889 * C29755 + C29889 * C30307) +
         C29889 * (3 * C30307 +
                   C29889 * (2 * C29889 * C29777 +
                             C29889 * (C29777 + C29720 * C29789 * C29920)))) /
        C29677;
    const double C30299 = C30296 + C30298;
    const double C29961 = C29955 + C29959;
    const double C30028 = C29989 + C30025;
    const double C10800 =
        (4 * (2 * C29889 * C29949 + C29889 * C30310) +
         C29889 * (3 * C30310 +
                   C29889 * (2 * C30022 +
                             C29889 * (C29965 + C29719 * C29855 * C29920)))) /
        C29677;
    const double C30292 = C30290 + C30291;
    const double C29866 = C29854 + C29864;
    const double C30157 = C29839 + C30155;
    const double C30263 = C29719 * C30260;
    const double C30239 = C30235 + C30237;
    const double C30446 = C30445 / C30436;
    const double C30745 = 2 * C30711;
    const double C30455 = C30454 / C30433;
    const double C30749 = C30715 / C30451;
    const double C30774 = C30709 - C30744;
    const double C2440 = -C30744;
    const double C30788 = C30773 + C30443;
    const double C30528 = C30527 / C30436;
    const double C30753 = 2 * C30720;
    const double C30535 = C30534 / C30433;
    const double C30763 = C30729 / C30451;
    const double C30782 = C30723 - C30760;
    const double C2332 = -C30760;
    const double C30791 = C30778 + C30524;
    const double C30570 = C30569 / C30436;
    const double C30756 = 2 * C30722;
    const double C30577 = C30576 / C30433;
    const double C30769 = C30735 / C30451;
    const double C30785 = C30724 - C30766;
    const double C3094 = -C30766;
    const double C30792 = C30780 + C30566;
    const double C5381 = C4684 - C4685;
    const double C5380 = C4682 - C4683;
    const double C4711 = C4680 - C4681;
    const double C4710 = C4678 - C4679;
    const double C5514 = C5180 - C5181;
    const double C25411 = C5181 - C5180;
    const double C25026 = C5178 - C5179;
    const double C25024 = C5179 - C5178;
    const double C25025 = C5176 - C5177;
    const double C25023 = C5177 - C5176;
    const double C10415 = C9097 - C9098;
    const double C10414 = C9095 - C9096;
    const double C9124 = C9093 - C9094;
    const double C9123 = C9091 - C9092;
    const double C10426 = C10416 - C10417;
    const double C4698 = C30416 * C273;
    const double C13313 = C13126 * C273;
    const double C13300 = C13127 * C273;
    const double C4691 = C30416 * C278;
    const double C13305 = C13126 * C278;
    const double C13292 = C13127 * C278;
    const double C9111 = C30416 * C426;
    const double C19069 = C13126 * C426;
    const double C19056 = C13127 * C426;
    const double C9104 = C30416 * C431;
    const double C19061 = C13126 * C431;
    const double C19048 = C13127 * C431;
    const double C5184 = C30416 * C818;
    const double C13945 = C13126 * C818;
    const double C13940 = C13127 * C818;
    const double C9774 = C5517 - C5516;
    const double C25409 = C5516 - C5517;
    const double C5385 = C4559 * C1031;
    const double C14201 = C13130 * C1031;
    const double C5519 = C4559 * C1162;
    const double C14356 = C13130 * C1162;
    const double C5182 = C4559 * C1168;
    const double C14364 = C13130 * C1168;
    const double C5523 = C4559 * C1174;
    const double C14371 = C13130 * C1174;
    const double C5527 = C4559 * C1548;
    const double C14849 = C13130 * C1548;
    const double C6564 = C4559 * C2228;
    const double C15693 = C13130 * C2228;
    const double C4705 = C4559 * C282;
    const double C13325 = C13130 * C282;
    const double C13312 = C13131 * C282;
    const double C4926 = C4559 * C284;
    const double C13320 = C13131 * C284;
    const double C13609 = C13130 * C284;
    const double C9118 = C4559 * C435;
    const double C19081 = C13130 * C435;
    const double C19068 = C13131 * C435;
    const double C9336 = C4559 * C437;
    const double C19076 = C13131 * C437;
    const double C19349 = C13130 * C437;
    const double C5194 = C4559 * C822;
    const double C13957 = C13130 * C822;
    const double C13952 = C13131 * C822;
    const double C9121 = C4559 * C1855;
    const double C21095 = C13131 * C1855;
    const double C29782 = C29775 + C29776;
    const double C1866 =
        (3 * (C29752 + C29768 * C29920) +
         C29889 * (2 * C29934 + C29889 * (C29768 + C29792 * C29920))) /
        C29679;
    const double C2232 =
        (ae * (2 * C29889 * C29824 + C29889 * (C29824 + C29840 * C29920)) +
         C29719 * (2 * C29934 + C29889 * (C29768 + C29792 * C29920))) /
        C29679;
    const double C29772 = C29763 + C29770;
    const double C1163 =
        (C29719 * C29741 + C30060 * ae + C30149 * C29920) / C29677;
    const double C1169 =
        (C29889 * (C29741 + C29719 * C30149 + C30147 * ae)) / C29677;
    const double C1175 = (C29741 + C29719 * C30149 + C30147 * ae +
                          (C29755 + C29719 * (C29719 * C29777 + C29835 * ae) +
                           C29719 * C29835 * ae) *
                              C29920) /
                         C29677;
    const double C2229 =
        (2 * C29889 * C30149 +
         C29889 * (C30149 + (C29719 * C29777 + C29835 * ae) * C29920)) /
        C29677;
    const double C30220 = C29739 + C30218;
    const double C10422 = C4559 * C10408;
    const double C4700 = C30416 * C293;
    const double C13317 = C13126 * C293;
    const double C13304 = C13127 * C293;
    const double C4693 = C30416 * C295;
    const double C13309 = C13126 * C295;
    const double C13296 = C13127 * C295;
    const double C9113 = C30416 * C446;
    const double C19073 = C13126 * C446;
    const double C19060 = C13127 * C446;
    const double C9106 = C30416 * C448;
    const double C19065 = C13126 * C448;
    const double C19052 = C13127 * C448;
    const double C5186 = C30416 * C828;
    const double C13949 = C13126 * C828;
    const double C13944 = C13127 * C828;
    const double C9109 = C30416 * C1863;
    const double C20755 = C13127 * C1863;
    const double C21094 = C13126 * C1863;
    const double C10427 = C10418 - C10419;
    const double C29826 = C29813 + C29825;
    const double C29910 = C29907 + C29908;
    const double C1181 =
        (C29889 * C29752 + ae * C29889 * C29906 +
         C29719 * (ae * C29889 * C29824 + C29719 * C29889 * C29768)) /
        C29679;
    const double C1184 =
        (C29752 + C29768 * C29920 + ae * (C29906 + C29719 * C29840 * C29920) +
         C29719 * (ae * (C29824 + C29840 * C29920) +
                   C29719 * (C29768 + C29792 * C29920))) /
        C29679;
    const double C1160 = (C29719 * C29815 + C29906 * C29920) / C29677;
    const double C4696 = C30416 * C1035;
    const double C14195 = C13127 * C1035;
    const double C14510 = C13126 * C1035;
    const double C6353 = C30416 * C1178;
    const double C14357 = C13127 * C1178;
    const double C15426 = C13126 * C1178;
    const double C4694 = C30416 * C1023;
    const double C14191 = C13127 * C1023;
    const double C14506 = C13126 * C1023;
    const double C5188 = C30416 * C1166;
    const double C14361 = C13127 * C1166;
    const double C14708 = C13126 * C1166;
    const double C9107 = C30416 * C1851;
    const double C20751 = C13127 * C1851;
    const double C21090 = C13126 * C1851;
    const double C5384 = C30416 * C1037;
    const double C14202 = C13126 * C1037;
    const double C5526 = C30416 * C1551;
    const double C14850 = C13126 * C1551;
    const double C5531 = C30416 * C5510;
    const double C5382 = C30416 * C1028;
    const double C14198 = C13126 * C1028;
    const double C5520 = C30416 * C1171;
    const double C14368 = C13126 * C1171;
    const double C5524 = C30416 * C1545;
    const double C14846 = C13126 * C1545;
    const double C6567 = C30416 * C6190;
    const double C29970 = C29963 + C29964;
    const double C29960 = C29957 + C29958;
    const double C10804 = C6563 - C6562;
    const double C26703 = C6562 - C6563;
    const double C10421 = C30416 * C10407;
    const double C30067 = C30065 + C30066;
    const double C1152 = C29719 * C30062 + C30154 * C29920;
    const double C2224 =
        2 * C29889 * C30154 + C29889 * (C30154 + C29719 * C29861 * C29920);
    const double C30156 = C30152 + C30153;
    const double C4708 = C4559 * C1027;
    const double C14511 = C13131 * C1027;
    const double C4706 = C4559 * C1018;
    const double C14507 = C13131 * C1018;
    const double C5196 = C4559 * C1155;
    const double C14709 = C13131 * C1155;
    const double C9119 = C4559 * C1846;
    const double C21091 = C13131 * C1846;
    const double C1032 =
        (3 * (C29741 + C29719 * C30149 + C30147 * ae) +
         C29719 * (2 * C30149 +
                   C29719 * (C29755 + C29719 * (C29719 * C29777 + C29835 * ae) +
                             C29719 * C29835 * ae) +
                   C30150 * ae) +
         (2 * C30147 + C29719 * C30150) * ae) /
        C29677;
    const double C1549 =
        (C29889 * (2 * C30149 +
                   C29719 * (C29755 + C29719 * (C29719 * C29777 + C29835 * ae) +
                             C29719 * C29835 * ae) +
                   C30150 * ae)) /
        C29677;
    const double C1020 = 3 * (C30060 + C29821 * C29901) +
                         C29719 * (2 * C30147 + C29719 * C30150);
    const double C1157 = C30060 + C29821 * C29901 + C30150 * C29920;
    const double C1543 = C29889 * (2 * C30147 + C29719 * C30150);
    const double C6455 =
        2 * C29889 * C30150 + C29889 * (C30150 + C30260 * C29920);
    const double C10584 = C4559 * C2223;
    const double C15691 = C13131 * C2223;
    const double C30262 = C29719 * C30258;
    const double C10579 =
        (3 * (C30149 + C30258 * C29920) +
         C29889 * (2 * C29889 * C30258 +
                   C29889 * (C30258 + (C29719 * C29720 * C29789 + C29857 * ae) *
                                          C29920))) /
        C29677;
    const double C10688 =
        4 * (2 * C29889 * C29821 + C29889 * C30406) +
        C29889 * (3 * C30406 + C29889 * (2 * C29889 * C29835 +
                                         C29889 * (C29835 + C29857 * C29920)));
    const double C29843 = C29819 + C29842;
    const double C29911 = C29824 + C29909;
    const double C30008 = 2 * C30002;
    const double C30006 = ae * C30002;
    const double C2226 =
        (2 * C29889 * C29906 + C29889 * (C29906 + C30002 * C29920)) / C29677;
    const double C10578 =
        (3 * (C29906 + C30002 * C29920) +
         C29889 * (2 * C29889 * C30002 +
                   C29889 * (C30002 + C29719 * C29862 * C29920))) /
        C29677;
    const double C30018 = ae * C30016;
    const double C30304 = C29824 + C30303;
    const double C10696 = C30416 * C1857;
    const double C20760 = C13127 * C1857;
    const double C30221 = C30217 + C30219;
    const double C6566 = C4559 * C6187;
    const double C10799 =
        4 * (2 * C29889 * C30212 + C29889 * C30409) +
        C29889 * (3 * C30409 +
                  C29889 * (2 * C29889 * C30228 +
                            C29889 * (C30228 + C29719 * C29853 * C29920)));
    const double C30238 = C29749 + C30236;
    const double C30313 = C30214 + C30312;
    const double C10808 = C4559 * C6193;
    const double C30402 = C30399 + C30401;
    const double C29797 = C29785 + C29795;
    const double C29796 = C29787 + C29794;
    const double C30007 = C30003 + C30004;
    const double C30019 = C29719 * C30017;
    const double C30037 = C29768 + C30036;
    const double C29978 = C29975 + C29976;
    const double C30000 = C29998 + C29999;
    const double C30042 = C30040 + C30041;
    const double C6569 = C30416 * C6196;
    const double C10809 = C30416 * C6197;
    const double C30030 = C29719 * C30029;
    const double C29867 = C29833 + C29865;
    const double C30009 = C29840 + C30005;
    const double C29979 = C29973 + C29977;
    const double C135 = (4 * (2 * C29741 + C29720 * C29753) +
                         C29720 * (3 * C29753 + C29720 * C29773)) /
                        C29677;
    const double C439 =
        (2 * C29741 + C29720 * C29753 + C29773 * C29920) / C29677;
    const double C441 = (C29889 * (3 * C29753 + C29720 * C29773)) / C29677;
    const double C10410 =
        (5 * (3 * C30288 + C29889 * C30299) +
         C29889 * (4 * C30299 +
                   C29889 * (3 * C30297 +
                             C29889 * (2 * C29889 * C29765 +
                                       C29889 * (C29765 + C29789 * C29920))))) /
        C29677;
    const double C5511 =
        (3 * (C29932 + ae * C29889 * C29949 + C29719 * C29992) +
         ae * C29889 * C29961 +
         C29719 * (2 * C29992 + ae * C29889 * C29956 +
                   C29719 * (C29989 + ae * C29889 * C29965 +
                             C29719 * (ae * C29889 * C29833 +
                                       C29719 * C29889 * C29788)))) /
        C29679;
    const double C5373 = (4 * (2 * C29898 + C29719 * C29904) +
                          C29719 * (3 * C29904 + C29719 * C29961)) /
                         C29677;
    const double C5504 =
        (2 * C29898 + C29719 * C29904 + C29961 * C29920) / C29677;
    const double C5506 = (C29889 * (3 * C29904 + C29719 * C29961)) / C29677;
    const double C10409 =
        (5 * (3 * C30285 + C29889 * C30292) +
         C29889 * (4 * C30292 +
                   C29889 * (3 * C29996 +
                             C29889 * (2 * C30023 +
                                       C29889 * (C29833 + C29855 * C29920))))) /
        C29677;
    const double C29868 = C29866 * be;
    const double C30071 = C29720 * C29866;
    const double C1021 = 3 * (C30062 + C29839 * C29901) +
                         C29719 * (2 * C30154 + C29719 * C30157);
    const double C1158 = C30062 + C29839 * C29901 + C30157 * C29920;
    const double C1544 = C29889 * (2 * C30154 + C29719 * C30157);
    const double C30265 = C30261 + C30263;
    const double C30241 = C29719 * C30239;
    const double C30447 = C30443 - C30446;
    const double C30775 = C30745 / C30433;
    const double C30456 = C30452 - C30455;
    const double C30789 = C30774 / C30437;
    const double C30529 = C30524 - C30528;
    const double C30779 = C30753 / C30433;
    const double C30536 = C30532 - C30535;
    const double C30793 = C30782 / C30437;
    const double C30571 = C30566 - C30570;
    const double C30781 = C30756 / C30433;
    const double C30578 = C30574 - C30577;
    const double C30795 = C30785 / C30437;
    const double C10425 = C10415 * C30655;
    const double C10424 = C10414 * C116;
    const double C9130 = C9124 * C30655;
    const double C9129 = C9123 * C116;
    const double C10429 = C10426 * C116;
    const double C4712 = C4690 - C4691;
    const double C9125 = C9103 - C9104;
    const double C25029 = C5184 - C5185;
    const double C25027 = C5185 - C5184;
    const double C9778 = C9774 * C116;
    const double C9775 = C5519 - C5518;
    const double C25410 = C5518 - C5519;
    const double C5515 = C5182 - C5183;
    const double C25412 = C5183 - C5182;
    const double C5533 = C5522 - C5523;
    const double C25414 = C5523 - C5522;
    const double C10805 = C6565 - C6564;
    const double C26704 = C6564 - C6565;
    const double C10698 = C30416 * C1866;
    const double C20764 = C13127 * C1866;
    const double C10587 = C30416 * C2232;
    const double C15696 = C13127 * C2232;
    const double C143 =
        (4 * (2 * C29752 + be * C29753 + C29720 * C29772) +
         be * (3 * C29753 + C29720 * C29773) +
         C29720 * (3 * C29772 + be * C29773 +
                   C29720 * (2 * C29768 + be * C29769 +
                             C29720 * (C29764 + be * C29720 * C29765 +
                                       C29720 * (be * C29765 +
                                                 C29720 * std::pow(C29724, 7) *
                                                     bs[7] * C29731))))) /
        C29679;
    const double C449 = (C29738 + be * C29741 + C29720 * C29752 +
                         C29772 * std::pow(zP - zQ, 2)) /
                        C29679;
    const double C450 =
        ((zP - zQ) * (2 * C29752 + be * C29753 + C29720 * C29772)) / C29679;
    const double C6352 = C4559 * C1163;
    const double C14358 = C13131 * C1163;
    const double C15425 = C13130 * C1163;
    const double C5191 = C4559 * C1169;
    const double C14366 = C13131 * C1169;
    const double C14711 = C13130 * C1169;
    const double C6356 = C4559 * C1175;
    const double C14373 = C13131 * C1175;
    const double C10586 = C4559 * C2229;
    const double C15695 = C13131 * C2229;
    const double C30222 = C30220 + C30215;
    const double C4713 = C4692 - C4693;
    const double C9126 = C9105 - C9106;
    const double C25030 = C5186 - C5187;
    const double C25028 = C5187 - C5186;
    const double C10694 = C9109 - C9110;
    const double C10430 = C10427 * C30655;
    const double C29827 = C29826 + C29823;
    const double C5190 = C30416 * C1181;
    const double C14365 = C13127 * C1181;
    const double C14712 = C13126 * C1181;
    const double C6357 = C30416 * C1184;
    const double C14374 = C13127 * C1184;
    const double C6351 = C30416 * C1160;
    const double C14353 = C13127 * C1160;
    const double C15422 = C13126 * C1160;
    const double C5637 = C4696 - C4697;
    const double C5636 = C4694 - C4695;
    const double C5792 = C5188 - C5189;
    const double C25739 = C5189 - C5188;
    const double C10693 = C9107 - C9108;
    const double C5391 = C5384 - C5385;
    const double C5901 = C5526 - C5527;
    const double C25872 = C5527 - C5526;
    const double C5390 = C5382 - C5383;
    const double C5532 = C5520 - C5521;
    const double C25413 = C5521 - C5520;
    const double C5900 = C5524 - C5525;
    const double C25871 = C5525 - C5524;
    const double C5377 =
        (4 * (2 * C29902 + ae * C29904 + C29719 * C29960) +
         ae * (3 * C29904 + C29719 * C29961) +
         C29719 *
             (3 * C29960 + ae * C29961 +
              C29719 * (2 * C29954 + ae * C29956 +
                        C29719 * (C29764 + ae * C29719 * C29833 +
                                  C29719 * (ae * C29833 + C29719 * C29788))))) /
        C29679;
    const double C10810 = C10804 * C116;
    const double C286 =
        (2 * C29741 + C29720 * C29753 +
         C29719 * (C29719 * C29773 + C30067 * ae) + C29719 * C30067 * ae) /
        C29677;
    const double C288 = (C29719 * (3 * C29753 + C29720 * C29773) +
                         (3 * C30062 + C29720 * C30067) * ae) /
                        C29677;
    const double C824 = (C29889 * (C29719 * C29773 + C30067 * ae)) / C29677;
    const double C122 = 4 * (2 * C30060 + C29720 * C30062) +
                        C29720 * (3 * C30062 + C29720 * C30067);
    const double C268 = 2 * C30060 + C29720 * C30062 + C30067 * C29901;
    const double C269 = C29719 * (3 * C30062 + C29720 * C30067);
    const double C421 = 2 * C30060 + C29720 * C30062 + C30067 * C29920;
    const double C422 = C29889 * (3 * C30062 + C29720 * C30067);
    const double C815 = C29889 * C29719 * C30067;
    const double C1290 =
        2 * C29719 * C30067 + C29719 * (C30067 + C29866 * C29901);
    const double C1440 = C29889 * (C30067 + C29866 * C29901);
    const double C2014 = C29719 * C30067 + C29719 * C29866 * C29920;
    const double C2120 =
        2 * C29889 * C30067 + C29889 * (C30067 + C29866 * C29920);
    const double C9488 = C4559 * C1152;
    const double C15423 = C13131 * C1152;
    const double C1033 =
        (3 * (C29753 + C29719 * C30156 + C30154 * ae) +
         C29719 * (2 * C30156 +
                   C29719 * (C29769 + C29719 * (C29719 * C29793 + C29861 * ae) +
                             C29719 * C29861 * ae) +
                   C30157 * ae) +
         (2 * C30154 + C29719 * C30157) * ae) /
        C29677;
    const double C1164 =
        (C29719 * C29753 + C30062 * ae + C30156 * C29920) / C29677;
    const double C1170 =
        (C29889 * (C29753 + C29719 * C30156 + C30154 * ae)) / C29677;
    const double C1176 = (C29753 + C29719 * C30156 + C30154 * ae +
                          (C29769 + C29719 * (C29719 * C29793 + C29861 * ae) +
                           C29719 * C29861 * ae) *
                              C29920) /
                         C29677;
    const double C1550 =
        (C29889 * (2 * C30156 +
                   C29719 * (C29769 + C29719 * (C29719 * C29793 + C29861 * ae) +
                             C29719 * C29861 * ae) +
                   C30157 * ae)) /
        C29677;
    const double C2230 =
        (2 * C29889 * C30156 +
         C29889 * (C30156 + (C29719 * C29793 + C29861 * ae) * C29920)) /
        C29677;
    const double C5640 = C4559 * C1032;
    const double C14203 = C13131 * C1032;
    const double C5796 = C4559 * C1549;
    const double C14851 = C13131 * C1549;
    const double C5638 = C4559 * C1020;
    const double C14199 = C13131 * C1020;
    const double C6354 = C4559 * C1157;
    const double C14369 = C13131 * C1157;
    const double C5794 = C4559 * C1543;
    const double C14847 = C13131 * C1543;
    const double C30264 = C29755 + C30262;
    const double C29844 = C29843 + C29838;
    const double C1038 =
        (3 * (C29752 + ae * C29906 + C29719 * C29910) +
         ae * (2 * C29906 + C29719 * C29911) +
         C29719 * (2 * C29910 + ae * C29911 +
                   C29719 * (C29768 + ae * C29719 * C29840 +
                             C29719 * (ae * C29840 + C29719 * C29792)))) /
        C29679;
    const double C1552 =
        (2 * (ae * C29889 * C29824 + C29719 * C29934) + ae * C29889 * C29911 +
         C29719 *
             (C29934 + ae * C29889 * C29719 * C29840 +
              C29719 * (ae * C29889 * C29840 + C29719 * C29889 * C29792))) /
        C29679;
    const double C1029 = (3 * (C29815 + C29824 * C29901) +
                          C29719 * (2 * C29906 + C29719 * C29911)) /
                         C29677;
    const double C1172 = (C29815 + C29824 * C29901 + C29911 * C29920) / C29677;
    const double C1546 = (C29889 * (2 * C29906 + C29719 * C29911)) / C29677;
    const double C30010 = C29768 + C30006;
    const double C10585 = C30416 * C2226;
    const double C15692 = C13127 * C2226;
    const double C10689 =
        (4 * (2 * C29889 * C29824 + C29889 * C30304) +
         C29889 *
             (3 * C30304 +
              C29889 * (2 * C30016 + C29889 * (C29840 + C29862 * C29920)))) /
        C29677;
    const double C5371 = 4 * (2 * C30140 + C29719 * C30143) +
                         C29719 * (3 * C30143 + C29719 * C30221);
    const double C5501 = 2 * C30140 + C29719 * C30143 + C30221 * C29920;
    const double C5502 = C29889 * (3 * C30143 + C29719 * C30221);
    const double C6557 =
        2 * C29889 * C30221 + C29889 * (C30221 + C30239 * C29920);
    const double C30240 = C30238 + C30233;
    const double C10801 =
        (4 * (2 * C29889 * C30214 + C29889 * C30313) +
         C29889 * (3 * C30313 + C29889 * (2 * C29889 * C30232 +
                                          C29889 * (C30232 + (C29719 * C29789 +
                                                              C29853 * ae) *
                                                                 C29920)))) /
        C29677;
    const double C10406 =
        5 * (3 * C30395 + C29889 * C30402) +
        C29889 * (4 * C30402 +
                  C29889 * (3 * C30400 +
                            C29889 * (2 * C29889 * C29832 +
                                      C29889 * (C29832 + C29853 * C29920))));
    const double C29799 = C29720 * C29797;
    const double C1292 =
        (2 * (C29719 * C29773 + C30067 * ae) +
         C29719 * (C29773 + C29719 * (C29719 * C29797 + C29866 * ae) +
                   C29719 * C29866 * ae) +
         (C30067 + C29866 * C29901) * ae) /
        C29677;
    const double C1442 =
        (C29889 * (C29773 + C29719 * (C29719 * C29797 + C29866 * ae) +
                   C29719 * C29866 * ae)) /
        C29677;
    const double C2016 = (C29719 * C29773 + C30067 * ae +
                          (C29719 * C29797 + C29866 * ae) * C29920) /
                         C29677;
    const double C2122 =
        (2 * C29889 * C29773 + C29889 * (C29773 + C29797 * C29920)) / C29677;
    const double C29798 = C29720 * C29796;
    const double C29915 = C29719 * C29796;
    const double C29936 = C29889 * C29796;
    const double C1864 =
        (2 * C29889 * C29772 + C29889 * (C29772 + C29796 * C29920)) / C29679;
    const double C30011 = C29719 * C30007;
    const double C30020 = C30018 + C30019;
    const double C6458 =
        (2 * C29934 + C29889 * C30037 +
         ae * (2 * C29889 * C30002 +
               C29889 * (C30002 + C29719 * C29862 * C29920)) +
         C29719 * (ae * (2 * C30016 + C29889 * (C29840 + C29862 * C29920)) +
                   C29719 * (2 * C30017 +
                             C29889 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29920)))) /
        C29679;
    const double C10580 =
        (ae * (3 * (C29824 + C29840 * C29920) +
               C29889 * (2 * C30016 + C29889 * (C29840 + C29862 * C29920))) +
         C29719 * (3 * C30037 +
                   C29889 * (2 * C30017 +
                             C29889 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29920)))) /
        C29679;
    const double C10691 =
        (4 * (2 * C29934 + C29889 * C30037) +
         C29889 * (3 * C30037 +
                   C29889 * (2 * C30017 +
                             C29889 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29920)))) /
        C29679;
    const double C29980 = C29719 * C29978;
    const double C6560 =
        (2 * (ae * (2 * C29988 + C29889 * C29996) + C29719 * C30042) +
         ae * (2 * C29889 * C29956 + C29889 * (C29956 + C29974 * C29920)) +
         C29719 *
             (C30042 +
              ae * (2 * C30022 + C29889 * (C29965 + C29719 * C29855 * C29920)) +
              C29719 *
                  (ae * (2 * C30023 + C29889 * (C29833 + C29855 * C29920)) +
                   C29719 * (2 * C30024 +
                             C29889 * (C29788 + std::pow(C29722, 8) * bs[8] *
                                                    C29731 * C29920))))) /
        C29679;
    const double C10411 = (4 * (2 * C29932 + C29889 * C29986) +
                           C29889 * (3 * C29986 + C29889 * C30042)) /
                          C29679;
    const double C10412 =
        (5 * (3 * C29986 + C29889 * C30042) +
         C29889 * (4 * C30042 +
                   C29889 * (3 * C29997 +
                             C29889 * (2 * C30024 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29920))))) /
        C29679;
    const double C10802 =
        (ae * (4 * (2 * C29988 + C29889 * C29996) +
               C29889 * (3 * C29996 +
                         C29889 * (2 * C30023 +
                                   C29889 * (C29833 + C29855 * C29920)))) +
         C29719 * (4 * C30042 +
                   C29889 * (3 * C29997 +
                             C29889 * (2 * C30024 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29920))))) /
        C29679;
    const double C30031 = C30028 + C30030;
    const double C29869 = C29867 + C29860;
    const double C30012 = C29719 * C30009;
    const double C6348 =
        (2 * (ae * (C29824 + C29840 * C29920) + C29719 * C30037) +
         ae * (C29911 + C30009 * C29920) +
         C29719 * (C30037 + ae * (C30002 + C29719 * C29862 * C29920) +
                   C29719 * (ae * (C29840 + C29862 * C29920) +
                             C29719 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29920)))) /
        C29679;
    const double C6456 =
        (2 * C29889 * C29911 + C29889 * (C29911 + C30009 * C29920)) / C29677;
    const double C29981 = C29719 * C29979;
    const double C5512 =
        (3 * (C29986 + ae * (C29949 + C29965 * C29920) + C29719 * C30000) +
         ae * (C29961 + C29979 * C29920) +
         C29719 * (2 * C30000 + ae * (C29956 + C29974 * C29920) +
                   C29719 * (C29997 + ae * (C29965 + C29719 * C29855 * C29920) +
                             C29719 * (ae * (C29833 + C29855 * C29920) +
                                       C29719 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29920))))) /
        C29679;
    const double C6558 =
        (2 * C29889 * C29961 + C29889 * (C29961 + C29979 * C29920)) / C29677;
    const double C9340 = C4559 * C439;
    const double C19083 = C13131 * C439;
    const double C19351 = C13131 * C441;
    const double C5905 = C30416 * C5511;
    const double C5387 = C30416 * C5373;
    const double C5529 = C30416 * C5504;
    const double C5903 = C30416 * C5506;
    const double C30072 = C30070 + C30071;
    const double C5631 = 4 * (2 * C30147 + C29719 * C30150) +
                         C29719 * (3 * C30150 + C29719 * C30265);
    const double C5787 = C29889 * (3 * C30150 + C29719 * C30265);
    const double C6345 = 2 * C30147 + C29719 * C30150 + C30265 * C29920;
    const double C30243 = C30231 + C30241;
    const double C30708 = C30447 * C30435;
    const double C30747 = C30713 + C30447;
    const double C30716 = C30456 / C30437;
    const double C30712 = C30456 * C30435;
    const double C554 = C30789 - (C30447 * C30438) / C30433;
    const double C30726 = C30529 * C30523;
    const double C30762 = C30728 + C30529;
    const double C30730 = C30536 / C30437;
    const double C30727 = C30536 * C30523;
    const double C1284 = C30793 - (C30529 * C30525) / C30433;
    const double C30732 = C30571 * C30565;
    const double C30768 = C30734 + C30571;
    const double C30736 = C30578 / C30437;
    const double C30733 = C30578 * C30565;
    const double C2116 = C30795 - (C30571 * C30567) / C30433;
    const double C10428 = C10424 + C10425;
    const double C9135 = C9129 + C9130;
    const double C9131 = C9125 * C116;
    const double C9779 = C9775 * C30655;
    const double C9777 = C5533 * C30655;
    const double C10811 = C10805 * C30655;
    const double C9117 = C30416 * C449;
    const double C19082 = C13126 * C449;
    const double C19067 = C13127 * C449;
    const double C9337 = C30416 * C450;
    const double C19075 = C13127 * C450;
    const double C19350 = C13126 * C450;
    const double C10583 = C6353 - C6352;
    const double C26442 = C6352 - C6353;
    const double C5374 =
        (4 * (2 * C30142 + C29719 * C30222 + C30143 * ae) +
         C29719 *
             (3 * C30222 +
              C29719 *
                  (2 * C30214 +
                   C29719 * (C29749 + C29719 * (C29719 * C29765 + C29832 * ae) +
                             C29719 * C29832 * ae) +
                   C30216 * ae) +
              C30221 * ae) +
         (3 * C30143 + C29719 * C30221) * ae) /
        C29677;
    const double C9132 = C9126 * C30655;
    const double C10700 = C10694 * C30655;
    const double C10431 = C10429 + C10430;
    const double C296 =
        (C29738 + be * C29741 + C29720 * C29752 + ae * C29719 * C29827 +
         C29719 * (ae * C29827 + C29719 * C29772)) /
        C29679;
    const double C297 =
        (ae * (2 * C29815 + C29720 * C29827 + (C29806 + C29818 * C29745) * be) +
         C29719 * (2 * C29752 + be * C29753 + C29720 * C29772)) /
        C29679;
    const double C829 =
        (ae * C29889 * C29827 + C29719 * C29889 * C29772) / C29679;
    const double C132 = (3 * (C29809 + C29720 * C29815 + C30060 * be) +
                         C29720 * (2 * C29815 + C29720 * C29827 + C30062 * be) +
                         (2 * C30060 + C29720 * C30062) * be) /
                        C29677;
    const double C279 =
        (C29809 + C29720 * C29815 + C30060 * be + C29827 * C29901) / C29677;
    const double C283 =
        (C29719 * (2 * C29815 + C29720 * C29827 + C30062 * be)) / C29677;
    const double C432 =
        (C29809 + C29720 * C29815 + C30060 * be + C29827 * C29920) / C29677;
    const double C436 =
        (C29889 * (2 * C29815 + C29720 * C29827 + C30062 * be)) / C29677;
    const double C819 = (C29889 * C29719 * C29827) / C29677;
    const double C5793 = C5190 - C5191;
    const double C25740 = C5191 - C5190;
    const double C10582 = C6351 - C6350;
    const double C26441 = C6350 - C6351;
    const double C10699 = C10693 * C116;
    const double C9776 = C5532 * C116;
    const double C5389 = C30416 * C5377;
    const double C4930 = C4559 * C286;
    const double C13327 = C13131 * C286;
    const double C13611 = C13131 * C288;
    const double C13959 = C13131 * C824;
    const double C24697 = C4559 * C824;
    const double C4928 = C4559 * C268;
    const double C13323 = C13131 * C268;
    const double C13607 = C13131 * C269;
    const double C9338 = C4559 * C421;
    const double C19079 = C13131 * C421;
    const double C19347 = C13131 * C422;
    const double C13955 = C13131 * C815;
    const double C24695 = C4559 * C815;
    const double C9490 = C4559 * C1164;
    const double C15427 = C13131 * C1164;
    const double C5198 = C4559 * C1170;
    const double C14713 = C13131 * C1170;
    const double C30266 = C30264 + C30259;
    const double C29845 = C29720 * C29844;
    const double C29850 = 3 * C29844;
    const double C29914 = ae * C29844;
    const double C29913 = C29719 * C29844;
    const double C1036 = (2 * (ae * C29827 + C29719 * C29772) +
                          ae * (C29827 + C29844 * std::pow(C29719, 2)) +
                          C29719 * (C29772 + ae * C29719 * C29844 +
                                    C29719 * (ae * C29844 + C29719 * C29796))) /
                         C29679;
    const double C1179 = (ae * (C29827 + C29844 * C29920) +
                          C29719 * (C29772 + C29796 * C29920)) /
                         C29679;
    const double C1024 =
        (2 * C29719 * C29827 + C29719 * (C29827 + C29844 * C29901)) / C29677;
    const double C1167 = (C29889 * (C29827 + C29844 * C29901)) / C29677;
    const double C1852 =
        (2 * C29889 * C29827 + C29889 * (C29827 + C29844 * C29920)) / C29677;
    const double C5641 = C30416 * C1038;
    const double C14204 = C13127 * C1038;
    const double C5797 = C30416 * C1552;
    const double C14852 = C13127 * C1552;
    const double C5639 = C30416 * C1029;
    const double C14200 = C13127 * C1029;
    const double C6355 = C30416 * C1172;
    const double C14370 = C13127 * C1172;
    const double C5795 = C30416 * C1546;
    const double C14848 = C13127 * C1546;
    const double C5386 = C4559 * C5371;
    const double C5528 = C4559 * C5501;
    const double C5902 = C4559 * C5502;
    const double C30242 = C29719 * C30240;
    const double C6191 =
        (2 * C29889 * C30222 + C29889 * (C30222 + C30240 * C29920)) / C29677;
    const double C6195 =
        (3 * (C30222 + C30240 * C29920) +
         C29889 *
             (2 * C29889 * C30240 +
              C29889 *
                  (C30240 + (C29765 + C29719 * (C29719 * C29789 + C29853 * ae) +
                             C29719 * C29853 * ae) *
                                C29920))) /
        C29677;
    const double C29801 = C29781 + C29799;
    const double C29800 = C29782 + C29798;
    const double C1867 =
        (3 * (C29772 + C29796 * C29920) +
         C29889 * (2 * C29936 +
                   C29889 * (C29796 + (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29920))) /
        C29679;
    const double C9122 = C30416 * C1864;
    const double C21096 = C13127 * C1864;
    const double C30013 = C30010 + C30011;
    const double C29982 = C29970 + C29980;
    const double C10423 = C30416 * C10411;
    const double C29870 = C29720 * C29869;
    const double C29916 = C29869 * C29901;
    const double C2233 =
        (ae * (2 * C29889 * C29844 + C29889 * (C29844 + C29869 * C29920)) +
         C29719 * (2 * C29936 +
                   C29889 * (C29796 + (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29920))) /
        C29679;
    const double C1858 =
        (3 * (C29827 + C29844 * C29920) +
         C29889 * (2 * C29889 * C29844 + C29889 * (C29844 + C29869 * C29920))) /
        C29677;
    const double C30014 = C30008 + C30012;
    const double C29983 = C29968 + C29981;
    const double C123 = 5 * (3 * C30062 + C29720 * C30067) +
                        C29720 * (4 * C30067 + C29720 * C30072);
    const double C270 = 3 * C30062 + C29720 * C30067 + C30072 * C29901;
    const double C423 = 3 * C30062 + C29720 * C30067 + C30072 * C29920;
    const double C558 = C29719 * (4 * C30067 + C29720 * C30072);
    const double C662 = C29889 * (4 * C30067 + C29720 * C30072);
    const double C816 = C29889 * C29719 * C30072;
    const double C5372 = 5 * (3 * C30143 + C29719 * C30221) +
                         C29719 * (4 * C30221 + C29719 * C30243);
    const double C5503 = 3 * C30143 + C29719 * C30221 + C30243 * C29920;
    const double C5895 = C29889 * (4 * C30221 + C29719 * C30243);
    const double C30743 = C30708 / C30433;
    const double C30776 = C30747 / C30437;
    const double C30777 = C30749 + C30716;
    const double C556 = C30716 - C30454 / C30451;
    const double C30746 = C30712 / C30433;
    const double C30759 = C30726 / C30433;
    const double C30783 = C30762 / C30437;
    const double C30784 = C30763 + C30730;
    const double C1286 = C30730 - C30534 / C30451;
    const double C30761 = C30727 / C30433;
    const double C30765 = C30732 / C30433;
    const double C30786 = C30768 / C30437;
    const double C30787 = C30769 + C30736;
    const double C2118 = C30736 - C30576 / C30451;
    const double C30767 = C30733 / C30433;
    const double C9781 = C9778 + C9779;
    const double C10812 = C10810 + C10811;
    const double C9128 = C9117 - C9118;
    const double C10589 = C10583 * C30655;
    const double C5388 = C4559 * C5374;
    const double C9136 = C9131 + C9132;
    const double C4704 = C30416 * C296;
    const double C13326 = C13126 * C296;
    const double C13311 = C13127 * C296;
    const double C4927 = C30416 * C297;
    const double C13319 = C13127 * C297;
    const double C13610 = C13126 * C297;
    const double C5195 = C30416 * C829;
    const double C13958 = C13126 * C829;
    const double C13951 = C13127 * C829;
    const double C4702 = C30416 * C279;
    const double C13322 = C13126 * C279;
    const double C13307 = C13127 * C279;
    const double C4925 = C30416 * C283;
    const double C13315 = C13127 * C283;
    const double C13606 = C13126 * C283;
    const double C9115 = C30416 * C432;
    const double C19078 = C13126 * C432;
    const double C19063 = C13127 * C432;
    const double C9335 = C30416 * C436;
    const double C19071 = C13127 * C436;
    const double C19346 = C13126 * C436;
    const double C5193 = C30416 * C819;
    const double C13954 = C13126 * C819;
    const double C13947 = C13127 * C819;
    const double C10588 = C10582 * C116;
    const double C10701 = C10699 + C10700;
    const double C9780 = C9776 + C9777;
    const double C5633 =
        (4 * (2 * C30149 + C29719 * C30266 + C30150 * ae) +
         C29719 * (3 * C30266 +
                   C29719 * (2 * C30258 +
                             C29719 * (C29777 +
                                       C29719 * (C29719 * C29720 * C29789 +
                                                 C29857 * ae) +
                                       C29719 * C29857 * ae) +
                             C30260 * ae) +
                   C30265 * ae) +
         (3 * C30150 + C29719 * C30265) * ae) /
        C29677;
    const double C5789 =
        (C29889 * (3 * C30266 +
                   C29719 * (2 * C30258 +
                             C29719 * (C29777 +
                                       C29719 * (C29719 * C29720 * C29789 +
                                                 C29857 * ae) +
                                       C29719 * C29857 * ae) +
                             C30260 * ae) +
                   C30265 * ae)) /
        C29677;
    const double C6347 =
        (2 * C30149 + C29719 * C30266 + C30150 * ae +
         (2 * C30258 +
          C29719 * (C29777 + C29719 * (C29719 * C29720 * C29789 + C29857 * ae) +
                    C29719 * C29857 * ae) +
          C30260 * ae) *
             C29920) /
        C29677;
    const double C6457 =
        (2 * C29889 * C30266 +
         C29889 * (C30266 +
                   (C29777 + C29719 * (C29719 * C29720 * C29789 + C29857 * ae) +
                    C29719 * C29857 * ae) *
                       C29920)) /
        C29677;
    const double C29846 = C29830 + C29845;
    const double C29917 = C29914 + C29915;
    const double C1182 =
        (C29889 * C29772 + ae * C29889 * C29913 +
         C29719 * (ae * C29889 * C29844 + C29719 * C29889 * C29796)) /
        C29679;
    const double C1185 =
        (C29772 + C29796 * C29920 + ae * (C29913 + C29719 * C29869 * C29920) +
         C29719 * (ae * (C29844 + C29869 * C29920) +
                   C29719 * (C29796 + (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29920))) /
        C29679;
    const double C1161 = (C29719 * C29827 + C29913 * C29920) / C29677;
    const double C2227 =
        (2 * C29889 * C29913 + C29889 * (C29913 + C29719 * C29869 * C29920)) /
        C29677;
    const double C4709 = C30416 * C1036;
    const double C14512 = C13127 * C1036;
    const double C9491 = C30416 * C1179;
    const double C15428 = C13127 * C1179;
    const double C4707 = C30416 * C1024;
    const double C14508 = C13127 * C1024;
    const double C5197 = C30416 * C1167;
    const double C14710 = C13127 * C1167;
    const double C9120 = C30416 * C1852;
    const double C21092 = C13127 * C1852;
    const double C30244 = C30225 + C30242;
    const double C6568 = C4559 * C6191;
    const double C137 = (5 * (3 * C29753 + C29720 * C29773) +
                         C29720 * (4 * C29773 + C29720 * C29801)) /
                        C29677;
    const double C290 =
        (3 * C29753 + C29720 * C29773 +
         C29719 * (C29719 * C29801 + C30072 * ae) + C29719 * C30072 * ae) /
        C29677;
    const double C443 =
        (3 * C29753 + C29720 * C29773 + C29801 * C29920) / C29677;
    const double C560 = (C29719 * (4 * C29773 + C29720 * C29801) +
                         (4 * C30067 + C29720 * C30072) * ae) /
                        C29677;
    const double C664 = (C29889 * (4 * C29773 + C29720 * C29801)) / C29677;
    const double C826 = (C29889 * (C29719 * C29801 + C30072 * ae)) / C29677;
    const double C144 =
        (5 * (3 * C29772 + be * C29773 + C29720 * C29800) +
         be * (4 * C29773 + C29720 * C29801) +
         C29720 *
             (4 * C29800 + be * C29801 +
              C29720 *
                  (3 * C29796 + be * C29797 +
                   C29720 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C451 = (2 * C29752 + be * C29753 + C29720 * C29772 +
                         C29800 * std::pow(zP - zQ, 2)) /
                        C29679;
    const double C452 =
        ((zP - zQ) * (3 * C29772 + be * C29773 + C29720 * C29800)) / C29679;
    const double C453 =
        (3 * C29772 + be * C29773 + C29720 * C29800 +
         (3 * C29796 + be * C29797 +
          C29720 *
              (2 * C29792 + be * C29793 +
               C29720 * (C29788 + be * C29720 * C29789 +
                         C29720 * (be * C29789 + C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             std::pow(zP - zQ, 2)) /
        C29679;
    const double C665 =
        ((zP - zQ) *
         (4 * C29800 + be * C29801 +
          C29720 * (3 * C29796 + be * C29797 +
                    C29720 * (2 * C29792 + be * C29793 +
                              C29720 * (C29788 + be * C29720 * C29789 +
                                        C29720 * (be * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29679;
    const double C2123 =
        (2 * C29889 * C29800 +
         C29889 * (C29800 + (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29920)) /
        C29679;
    const double C29871 = C29851 + C29870;
    const double C29918 = C29844 + C29916;
    const double C5634 =
        (4 * (2 * C29910 + ae * C29911 + C29719 * C30013) +
         ae * (3 * C29911 + C29719 * C30014) +
         C29719 *
             (3 * C30013 + ae * C30014 +
              C29719 *
                  (2 * C30007 + ae * C30009 +
                   C29719 * (C29792 + ae * C29719 * C29862 +
                             C29719 * (ae * C29862 +
                                       C29719 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C5790 =
        (3 * (C29934 + ae * C29889 * C30002 + C29719 * C30020) +
         ae * C29889 * C30014 +
         C29719 * (2 * C30020 + ae * C29889 * C30009 +
                   C29719 * (C30017 + ae * C29889 * C29719 * C29862 +
                             C29719 * (ae * C29889 * C29862 +
                                       C29719 * C29889 *
                                           (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C5632 = (4 * (2 * C29906 + C29719 * C29911) +
                          C29719 * (3 * C29911 + C29719 * C30014)) /
                         C29677;
    const double C5788 = (C29889 * (3 * C29911 + C29719 * C30014)) / C29677;
    const double C6346 =
        (2 * C29906 + C29719 * C29911 + C30014 * C29920) / C29677;
    const double C5378 =
        (5 * (3 * C29960 + ae * C29961 + C29719 * C29982) +
         ae * (4 * C29961 + C29719 * C29983) +
         C29719 *
             (4 * C29982 + ae * C29983 +
              C29719 *
                  (3 * C29978 + ae * C29979 +
                   C29719 * (2 * C29972 + ae * C29974 +
                             C29719 * (C29788 + ae * C29719 * C29855 +
                                       C29719 * (ae * C29855 +
                                                 C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C5898 =
        (4 * (2 * C29992 + ae * C29889 * C29956 + C29719 * C30031) +
         ae * C29889 * C29983 +
         C29719 * (3 * C30031 + ae * C29889 * C29979 +
                   C29719 * (2 * C30029 + ae * C29889 * C29974 +
                             C29719 * (C30024 + ae * C29889 * C29719 * C29855 +
                                       C29719 * (ae * C29889 * C29855 +
                                                 C29719 * C29889 *
                                                     std::pow(C29722, 8) *
                                                     bs[8] * C29731))))) /
        C29679;
    const double C5375 = (5 * (3 * C29904 + C29719 * C29961) +
                          C29719 * (4 * C29961 + C29719 * C29983)) /
                         C29677;
    const double C5508 =
        (3 * C29904 + C29719 * C29961 + C29983 * C29920) / C29677;
    const double C5896 = (C29889 * (4 * C29961 + C29719 * C29983)) / C29677;
    const double C30797 = C30743 + C30789;
    const double C555 = C30776 - (C30456 * C30438) / C30433;
    const double C111 = C30777 / C30437 - C30454 / C30750;
    const double C30790 = C30746 + C30776;
    const double C30798 = C30759 + C30793;
    const double C1285 = C30783 - (C30536 * C30525) / C30433;
    const double C1013 = C30784 / C30437 - C30534 / C30750;
    const double C30794 = C30761 + C30783;
    const double C30799 = C30765 + C30795;
    const double C2117 = C30786 - (C30578 * C30567) / C30433;
    const double C1842 = C30787 / C30437 - C30576 / C30750;
    const double C30796 = C30767 + C30786;
    const double C9134 = C9128 * C30655;
    const double C4715 = C4704 - C4705;
    const double C25034 = C5194 - C5195;
    const double C25032 = C5195 - C5194;
    const double C4714 = C4702 - C4703;
    const double C9127 = C9115 - C9116;
    const double C25033 = C5192 - C5193;
    const double C25031 = C5193 - C5192;
    const double C10590 = C10588 + C10589;
    const double C29847 = C29846 + C29841;
    const double C5199 = C30416 * C1182;
    const double C14714 = C13127 * C1182;
    const double C9489 = C30416 * C1161;
    const double C15424 = C13127 * C1161;
    const double C30245 = C30244 + C30229;
    const double C9341 = C30416 * C451;
    const double C19084 = C13127 * C451;
    const double C19352 = C13127 * C452;
    const double C29872 = C29871 + C29863;
    const double C1039 =
        (3 * (C29772 + ae * C29913 + C29719 * C29917) +
         ae * (2 * C29913 + C29719 * C29918) +
         C29719 *
             (2 * C29917 + ae * C29918 +
              C29719 *
                  (C29796 + ae * C29719 * C29869 +
                   C29719 * (ae * C29869 +
                             C29719 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C1553 =
        (2 * (ae * C29889 * C29844 + C29719 * C29936) + ae * C29889 * C29918 +
         C29719 * (C29936 + ae * C29889 * C29719 * C29869 +
                   C29719 * (ae * C29889 * C29869 +
                             C29719 * C29889 *
                                 (C29788 + be * C29720 * C29789 +
                                  C29720 * (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C1030 = (3 * (C29827 + C29844 * C29901) +
                          C29719 * (2 * C29913 + C29719 * C29918)) /
                         C29677;
    const double C1173 = (C29827 + C29844 * C29901 + C29918 * C29920) / C29677;
    const double C1547 = (C29889 * (2 * C29913 + C29719 * C29918)) / C29677;
    const double C108 =
        (C30788 + 2 * C30447) / C30437 - (C30797 * C30438) / C30433;
    const double C109 =
        (C30775 + 2 * C30456 + C30797) / C30437 - (C30790 * C30438) / C30433;
    const double C110 = (C30748 + C30453 / C30433 + C30790) / C30437 -
                        (C30777 * C30438) / C30433;
    const double C1010 =
        (C30791 + 2 * C30529) / C30437 - (C30798 * C30525) / C30433;
    const double C1011 =
        (C30779 + 2 * C30536 + C30798) / C30437 - (C30794 * C30525) / C30433;
    const double C1012 = (C30754 + C30533 / C30433 + C30794) / C30437 -
                         (C30784 * C30525) / C30433;
    const double C1839 =
        (C30792 + 2 * C30571) / C30437 - (C30799 * C30567) / C30433;
    const double C1840 =
        (C30781 + 2 * C30578 + C30799) / C30437 - (C30796 * C30567) / C30433;
    const double C1841 = (C30757 + C30575 / C30433 + C30796) / C30437 -
                         (C30787 * C30567) / C30433;
    const double C9133 = C9127 * C116;
    const double C298 =
        (2 * C29752 + be * C29753 + C29720 * C29772 + ae * C29719 * C29847 +
         C29719 * (ae * C29847 + C29719 * C29800)) /
        C29679;
    const double C299 =
        (ae * (3 * C29827 + C29720 * C29847 +
               (2 * C29821 + C29720 * C29839) * be) +
         C29719 * (3 * C29772 + be * C29773 + C29720 * C29800)) /
        C29679;
    const double C830 =
        (ae * C29889 * C29847 + C29719 * C29889 * C29800) / C29679;
    const double C134 = (4 * (2 * C29815 + C29720 * C29827 + C30062 * be) +
                         C29720 * (3 * C29827 + C29720 * C29847 + C30067 * be) +
                         (3 * C30062 + C29720 * C30067) * be) /
                        C29677;
    const double C285 =
        (2 * C29815 + C29720 * C29827 + C30062 * be + C29847 * C29901) / C29677;
    const double C287 =
        (C29719 * (3 * C29827 + C29720 * C29847 + C30067 * be)) / C29677;
    const double C438 =
        (2 * C29815 + C29720 * C29827 + C30062 * be + C29847 * C29920) / C29677;
    const double C440 =
        (C29889 * (3 * C29827 + C29720 * C29847 + C30067 * be)) / C29677;
    const double C823 = (C29889 * C29719 * C29847) / C29677;
    const double C5376 =
        (5 * (3 * C30222 + C29719 * C30245 + C30221 * ae) +
         C29719 * (4 * C30245 +
                   C29719 * (3 * C30240 +
                             C29719 * (2 * C30232 +
                                       C29719 * (C29765 +
                                                 C29719 * (C29719 * C29789 +
                                                           C29853 * ae) +
                                                 C29719 * C29853 * ae) +
                                       C30234 * ae) +
                             C30239 * ae) +
                   C30243 * ae) +
         (4 * C30221 + C29719 * C30243) * ae) /
        C29677;
    const double C5505 =
        (2 * C30142 + C29719 * C30222 + C30143 * ae + C30245 * C29920) / C29677;
    const double C5507 =
        (C29889 * (3 * C30222 + C29719 * C30245 + C30221 * ae)) / C29677;
    const double C5509 =
        (3 * C30222 + C29719 * C30245 + C30221 * ae +
         (3 * C30240 +
          C29719 *
              (2 * C30232 +
               C29719 * (C29765 + C29719 * (C29719 * C29789 + C29853 * ae) +
                         C29719 * C29853 * ae) +
               C30234 * ae) +
          C30239 * ae) *
             C29920) /
        C29677;
    const double C5897 =
        (C29889 *
         (4 * C30245 +
          C29719 *
              (3 * C30240 +
               C29719 * (2 * C30232 +
                         C29719 * (C29765 +
                                   C29719 * (C29719 * C29789 + C29853 * ae) +
                                   C29719 * C29853 * ae) +
                         C30234 * ae) +
               C30239 * ae) +
          C30243 * ae)) /
        C29677;
    const double C6559 =
        (2 * C29889 * C30245 +
         C29889 *
             (C30245 +
              (2 * C30232 +
               C29719 * (C29765 + C29719 * (C29719 * C29789 + C29853 * ae) +
                         C29719 * C29853 * ae) +
               C30234 * ae) *
                  C29920)) /
        C29677;
    const double C29873 = C29720 * C29872;
    const double C1293 =
        (2 * (ae * C29847 + C29719 * C29800) + ae * (C29847 + C29872 * C29901) +
         C29719 *
             (C29800 + ae * C29719 * C29872 +
              C29719 *
                  (ae * C29872 +
                   C29719 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C1443 =
        (C29889 * C29800 + ae * C29889 * C29719 * C29872 +
         C29719 * (ae * C29889 * C29872 +
                   C29719 * C29889 *
                       (2 * C29792 + be * C29793 +
                        C29720 * (C29788 + be * C29720 * C29789 +
                                  C29720 * (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C2017 =
        (ae * (C29847 + C29872 * C29920) +
         C29719 * (C29800 + (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29920)) /
        C29679;
    const double C1291 =
        (2 * C29719 * C29847 + C29719 * (C29847 + C29872 * C29901)) / C29677;
    const double C1441 = (C29889 * (C29847 + C29872 * C29901)) / C29677;
    const double C2015 = (C29719 * C29847 + C29719 * C29872 * C29920) / C29677;
    const double C2121 =
        (2 * C29889 * C29847 + C29889 * (C29847 + C29872 * C29920)) / C29677;
    const double C9137 = C9133 + C9134;
    const double C4931 = C30416 * C298;
    const double C13328 = C13127 * C298;
    const double C13612 = C13127 * C299;
    const double C13960 = C13127 * C830;
    const double C24698 = C30416 * C830;
    const double C4929 = C30416 * C285;
    const double C13324 = C13127 * C285;
    const double C13608 = C13127 * C287;
    const double C9339 = C30416 * C438;
    const double C19080 = C13127 * C438;
    const double C19348 = C13127 * C440;
    const double C13956 = C13127 * C823;
    const double C24696 = C30416 * C823;
    const double C5530 = C4559 * C5505;
    const double C5904 = C4559 * C5507;
    const double C29874 = C29850 + C29873;
    const double C29875 = C29874 + C29868;
    const double C300 =
        (3 * C29772 + be * C29773 + C29720 * C29800 + ae * C29719 * C29875 +
         C29719 *
             (ae * C29875 +
              C29719 *
                  (3 * C29796 + be * C29797 +
                   C29720 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C561 =
        (ae * (4 * C29847 + C29720 * C29875 +
               (3 * C29839 + C29720 * C29866) * be) +
         C29719 *
             (4 * C29800 + be * C29801 +
              C29720 *
                  (3 * C29796 + be * C29797 +
                   C29720 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C831 =
        (ae * C29889 * C29875 +
         C29719 * C29889 *
             (3 * C29796 + be * C29797 +
              C29720 * (2 * C29792 + be * C29793 +
                        C29720 * (C29788 + be * C29720 * C29789 +
                                  C29720 * (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C136 = (5 * (3 * C29827 + C29720 * C29847 + C30067 * be) +
                         C29720 * (4 * C29847 + C29720 * C29875 + C30072 * be) +
                         (4 * C30067 + C29720 * C30072) * be) /
                        C29677;
    const double C289 =
        (3 * C29827 + C29720 * C29847 + C30067 * be + C29875 * C29901) / C29677;
    const double C442 =
        (3 * C29827 + C29720 * C29847 + C30067 * be + C29875 * C29920) / C29677;
    const double C559 =
        (C29719 * (4 * C29847 + C29720 * C29875 + C30072 * be)) / C29677;
    const double C663 =
        (C29889 * (4 * C29847 + C29720 * C29875 + C30072 * be)) / C29677;
    const double C825 = (C29889 * C29719 * C29875) / C29677;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30529 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30536 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30488 * C2700) *
              C30447 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30529 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30536 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C14505 - C14506 + C14507 - C14508) * C13133 +
            (C14509 - C14510 + C14511 - C14512) * C13129) *
               C30667 * C30488 * C2700) *
              C30456 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C30529 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30536 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30724 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30529 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30724 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30536 +
           (((C13290 - C13289 + C13292 - C13291) * C13132 +
             (C13294 - C13293 + C13296 - C13295) * C13128 +
             (C14189 - C14190 + C14191 - C14192) * C13133 +
             (C14193 - C14194 + C14195 - C14196) * C13129) *
                C30667 * C30724 +
            ((C14360 - C14359 + C14362 - C14361) * C13132 +
             (C14364 - C14363 + C14366 - C14365) * C13128 +
             (C14845 - C14846 + C14847 - C14848) * C13133 +
             (C14849 - C14850 + C14851 - C14852) * C13129) *
                C30667 * C30575) *
               C2700) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30724 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30529 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30724 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30536 +
           (((C13306 - C13305 + C13308 - C13307) * C13132 +
             (C13310 - C13309 + C13312 - C13311) * C13128 +
             (C14505 - C14506 + C14507 - C14508) * C13133 +
             (C14509 - C14510 + C14511 - C14512) * C13129) *
                C30667 * C30724 +
            ((C14708 - C14707 + C14710 - C14709) * C13132 +
             (C14712 - C14711 + C14714 - C14713) * C13128 +
             (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C13133 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C13129) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30798 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30794 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30488 * C30784 +
           ((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30798 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30794 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C14505 - C14506 + C14507 - C14508) * C13133 +
            (C14509 - C14510 + C14511 - C14512) * C13129) *
               C30667 * C30488 * C30784 +
           ((C14506 - C14505 + C14508 - C14507) * C13132 +
            (C14510 - C14509 + C14512 - C14511) * C13128 +
            (C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
             C13131 * C1021) *
                C13133 +
            (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
             C13131 * C1033) *
                C13129) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13606 - C13605 + C13608 - C13607) * C13132 +
            (C13610 - C13609 + C13612 - C13611) * C13128 +
            (C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                C13133 +
            (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                C13129) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30792 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30781 +
            ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C13132 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C13128 +
             (C14351 - C14352 + C14353 - C14354) * C13133 +
             (C14355 - C14356 + C14357 - C14358) * C13129) *
                C30667 * C30757) *
               C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30792 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30781 +
            ((C14352 - C14351 + C14354 - C14353) * C13132 +
             (C14356 - C14355 + C14358 - C14357) * C13128 +
             (C14367 - C14368 + C14369 - C14370) * C13133 +
             (C14371 - C14372 + C14373 - C14374) * C13129) *
                C30667 * C30757) *
               C30533) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30792 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30781 +
            ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C13132 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30667 * C30757) *
               C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30792 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30781 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C13133 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C13129) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30724 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30724 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30724 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30724 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C13132 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30667 * C30724 +
            ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C13132 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C13128 +
             (C13953 - C13954 + C13955 - C13956) * C13133 +
             (C13957 - C13958 + C13959 - C13960) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30667 * C30724 +
            ((C13954 - C13953 + C13956 - C13955) * C13132 +
             (C13958 - C13957 + C13960 - C13959) * C13128 +
             (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C13133 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C30488 * C2332 +
           ((C13606 - C13605 + C13608 - C13607) * C13132 +
            (C13610 - C13609 + C13612 - C13611) * C13128 +
            (C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                C13133 +
            (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                C13129) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30798 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30794 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30488 * C30784 +
           ((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30798 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30794 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C14505 - C14506 + C14507 - C14508) * C13133 +
            (C14509 - C14510 + C14511 - C14512) * C13129) *
               C30667 * C30488 * C30784 +
           ((C14506 - C14505 + C14508 - C14507) * C13132 +
            (C14510 - C14509 + C14512 - C14511) * C13128 +
            (C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
             C13131 * C1021) *
                C13133 +
            (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
             C13131 * C1033) *
                C13129) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C3094 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30529 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C3094 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30536 +
           (((C13290 - C13289 + C13292 - C13291) * C13132 +
             (C13294 - C13293 + C13296 - C13295) * C13128 +
             (C14189 - C14190 + C14191 - C14192) * C13133 +
             (C14193 - C14194 + C14195 - C14196) * C13129) *
                C30667 * C3094 +
            ((C14360 - C14359 + C14362 - C14361) * C13132 +
             (C14364 - C14363 + C14366 - C14365) * C13128 +
             (C14845 - C14846 + C14847 - C14848) * C13133 +
             (C14849 - C14850 + C14851 - C14852) * C13129) *
                C30667 * C30575) *
               C2700) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C3094 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30529 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C3094 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30536 +
           (((C13306 - C13305 + C13308 - C13307) * C13132 +
             (C13310 - C13309 + C13312 - C13311) * C13128 +
             (C14505 - C14506 + C14507 - C14508) * C13133 +
             (C14509 - C14510 + C14511 - C14512) * C13129) *
                C30667 * C3094 +
            ((C14708 - C14707 + C14710 - C14709) * C13132 +
             (C14712 - C14711 + C14714 - C14713) * C13128 +
             (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C13133 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C13129) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30571 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30578 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C3602) *
              C30529 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30571 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30578 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C3602) *
              C30536 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30571 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C30578 +
           ((C14368 - C14367 + C14370 - C14369) * C13132 +
            (C14372 - C14371 + C14374 - C14373) * C13128 +
            (C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
             C13131 * C6345) *
                C13133 +
            (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
             C13131 * C6347) *
                C13129) *
               C30667 * C3602) *
              C2700) *
         C30442) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C3094 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30575) *
              C30798 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C3094 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30575) *
              C30794 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C3094 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C30575) *
              C30784 +
          (((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C3094 +
           ((C14846 - C14845 + C14848 - C14847) * C13132 +
            (C14850 - C14849 + C14852 - C14851) * C13128 +
            (C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C13133 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C13129) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C3094 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C3094 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C3094 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C3094 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C13132 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30667 * C3094 +
            ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C13132 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C13128 +
             (C13953 - C13954 + C13955 - C13956) * C13133 +
             (C13957 - C13958 + C13959 - C13960) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30667 * C3094 +
            ((C13954 - C13953 + C13956 - C13955) * C13132 +
             (C13958 - C13957 + C13960 - C13959) * C13128 +
             (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C13133 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30799 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30796 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30787 +
           ((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
             C13127 * C1851) *
                C13132 +
            (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
             C13127 * C1863) *
                C13128 +
            (C15689 - C15690 + C15691 - C15692) * C13133 +
            (C15693 - C15694 + C15695 - C15696) * C13129) *
               C30667 * C30770) *
              C2332 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30799 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30796 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C30787 +
           ((C15690 - C15689 + C15692 - C15691) * C13132 +
            (C15694 - C15693 + C15696 - C15695) * C13128 +
            (C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
             C13131 * C6455) *
                C13133 +
            (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
             C13131 * C6457) *
                C13129) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30571 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30578 +
            ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C13132 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C13128 +
             (C14351 - C14352 + C14353 - C14354) * C13133 +
             (C14355 - C14356 + C14357 - C14358) * C13129) *
                C30667 * C3602) *
               C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30571 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30578 +
            ((C14352 - C14351 + C14354 - C14353) * C13132 +
             (C14356 - C14355 + C14358 - C14357) * C13128 +
             (C14367 - C14368 + C14369 - C14370) * C13133 +
             (C14371 - C14372 + C14373 - C14374) * C13129) *
                C30667 * C3602) *
               C30533) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30571 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30578 +
            ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C13132 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30667 * C3602) *
               C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30571 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30578 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C13133 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C13129) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C3094 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C3094 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C3094 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C3094 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C13132 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30667 * C3094 +
            ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C13132 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C13128 +
             (C13953 - C13954 + C13955 - C13956) * C13133 +
             (C13957 - C13958 + C13959 - C13960) * C13129) *
                C30667 * C30575) *
               C2332 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30667 * C3094 +
            ((C13954 - C13953 + C13956 - C13955) * C13132 +
             (C13958 - C13957 + C13960 - C13959) * C13128 +
             (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C13133 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C3094 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30575) *
              C30798 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C3094 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30575) *
              C30794 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C3094 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C30575) *
              C30784 +
          (((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C3094 +
           ((C14846 - C14845 + C14848 - C14847) * C13132 +
            (C14850 - C14849 + C14852 - C14851) * C13128 +
            (C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C13133 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C13129) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C1284 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C1285 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30488 * C1286 +
           ((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C1284 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C1285 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C14505 - C14506 + C14507 - C14508) * C13133 +
            (C14509 - C14510 + C14511 - C14512) * C13129) *
               C30667 * C30488 * C1286 +
           ((C14506 - C14505 + C14508 - C14507) * C13132 +
            (C14510 - C14509 + C14512 - C14511) * C13128 +
            (C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
             C13131 * C1021) *
                C13133 +
            (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
             C13131 * C1033) *
                C13129) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13606 - C13605 + C13608 - C13607) * C13132 +
            (C13610 - C13609 + C13612 - C13611) * C13128 +
            (C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                C13133 +
            (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                C13129) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C1664 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C1665 +
            ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C13132 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C13128 +
             (C14351 - C14352 + C14353 - C14354) * C13133 +
             (C14355 - C14356 + C14357 - C14358) * C13129) *
                C30667 * C30757) *
               C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C1664 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C1665 +
            ((C14352 - C14351 + C14354 - C14353) * C13132 +
             (C14356 - C14355 + C14358 - C14357) * C13128 +
             (C14367 - C14368 + C14369 - C14370) * C13133 +
             (C14371 - C14372 + C14373 - C14374) * C13129) *
                C30667 * C30757) *
               C30533) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C1664 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C1665 +
            ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C13132 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30667 * C30757) *
               C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C1664 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C1665 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C13133 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C13129) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30724 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30575) *
              C1284 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30724 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30575) *
              C1285 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30724 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C30575) *
              C1286 +
          (((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C30724 +
           ((C14846 - C14845 + C14848 - C14847) * C13132 +
            (C14850 - C14849 + C14852 - C14851) * C13128 +
            (C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C13133 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C13129) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30724 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30724 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C13126 * C1165 - C13130 * C1153 + C13127 * C1166 -
              C13131 * C1154) *
                 C13133 +
             (C13126 * C1180 - C13130 * C1168 + C13127 * C1181 -
              C13131 * C1169) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30724 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30724 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C13130 * C1154 - C13126 * C1166 + C13131 * C1155 -
              C13127 * C1167) *
                 C13133 +
             (C13130 * C1169 - C13126 * C1181 + C13131 * C1170 -
              C13127 * C1182) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C13132 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30667 * C30724 +
            ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C13132 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C13128 +
             (C13953 - C13954 + C13955 - C13956) * C13133 +
             (C13957 - C13958 + C13959 - C13960) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30667 * C30724 +
            ((C13954 - C13953 + C13956 - C13955) * C13132 +
             (C13958 - C13957 + C13960 - C13959) * C13128 +
             (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C13133 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C2116 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C2117 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C2118 +
           ((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
             C13127 * C1851) *
                C13132 +
            (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
             C13127 * C1863) *
                C13128 +
            (C15689 - C15690 + C15691 - C15692) * C13133 +
            (C15693 - C15694 + C15695 - C15696) * C13129) *
               C30667 * C30770) *
              C30723 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C2116 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C2117 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C2118 +
           ((C15690 - C15689 + C15692 - C15691) * C13132 +
            (C15694 - C15693 + C15696 - C15695) * C13128 +
            (C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
             C13131 * C6455) *
                C13133 +
            (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
             C13131 * C6457) *
                C13129) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                   C13132 +
               (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                   C13128 +
               (C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
                   C13133 +
               (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
                   C13129) *
                  C30667 * C30488 * C30470 * C108 +
              ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                   C13132 +
               (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                   C13128 +
               (C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
                   C13133 +
               (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
                   C13129) *
                  C30667 * C30488 * C30470 * C109 +
              ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                   C13132 +
               (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                   C13128 +
               (C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
                   C13133 +
               (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
                   C13129) *
                  C30667 * C30488 * C30470 * C110 +
              ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                   C13132 +
               (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                   C13128 +
               (C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
                   C13133 +
               (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
                   C13129) *
                  C30667 * C30488 * C30470 * C111 +
              ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                   C13132 +
               (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                   C13128 +
               (C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
                   C13133 +
               (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
                   C13129) *
                  C30667 * C30488 * C30470 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C124 - C13130 * C117 + C13127 * C125 -
                 C13131 * C118) *
                    C13132 +
                (C13126 * C138 - C13130 * C127 + C13127 * C139 -
                 C13131 * C128) *
                    C13128 +
                (C13281 - C13282 + C13283 - C13284) * C13133 +
                (C13285 - C13286 + C13287 - C13288) * C13129) *
                   C30667 * C30488 * C30791 +
               ((C13282 - C13281 + C13284 - C13283) * C13132 +
                (C13286 - C13285 + C13288 - C13287) * C13128 +
                (C13289 - C13290 + C13291 - C13292) * C13133 +
                (C13293 - C13294 + C13295 - C13296) * C13129) *
                   C30667 * C30488 * C30779 +
               ((C13290 - C13289 + C13292 - C13291) * C13132 +
                (C13294 - C13293 + C13296 - C13295) * C13128 +
                (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
                 C13131 * C1017) *
                    C13133 +
                (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
                 C13131 * C1026) *
                    C13129) *
                   C30667 * C30488 * C30754) *
                  C258 +
              (((C13130 * C118 - C13126 * C125 + C13131 * C119 -
                 C13127 * C126) *
                    C13132 +
                (C13130 * C128 - C13126 * C139 + C13131 * C129 -
                 C13127 * C140) *
                    C13128 +
                (C13297 - C13298 + C13299 - C13300) * C13133 +
                (C13301 - C13302 + C13303 - C13304) * C13129) *
                   C30667 * C30488 * C30791 +
               ((C13298 - C13297 + C13300 - C13299) * C13132 +
                (C13302 - C13301 + C13304 - C13303) * C13128 +
                (C13305 - C13306 + C13307 - C13308) * C13133 +
                (C13309 - C13310 + C13311 - C13312) * C13129) *
                   C30667 * C30488 * C30779 +
               ((C13306 - C13305 + C13308 - C13307) * C13132 +
                (C13310 - C13309 + C13312 - C13311) * C13128 +
                (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
                 C13127 * C1024) *
                    C13133 +
                (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
                 C13127 * C1036) *
                    C13129) *
                   C30667 * C30488 * C30754) *
                  C259 +
              (((C13126 * C126 - C13130 * C119 + C13127 * C130 -
                 C13131 * C120) *
                    C13132 +
                (C13126 * C140 - C13130 * C129 + C13127 * C141 -
                 C13131 * C131) *
                    C13128 +
                (C13313 - C13314 + C13315 - C13316) * C13133 +
                (C13317 - C13318 + C13319 - C13320) * C13129) *
                   C30667 * C30488 * C30791 +
               ((C13314 - C13313 + C13316 - C13315) * C13132 +
                (C13318 - C13317 + C13320 - C13319) * C13128 +
                (C13321 - C13322 + C13323 - C13324) * C13133 +
                (C13325 - C13326 + C13327 - C13328) * C13129) *
                   C30667 * C30488 * C30779 +
               ((C13322 - C13321 + C13324 - C13323) * C13132 +
                (C13326 - C13325 + C13328 - C13327) * C13128 +
                (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
                 C13131 * C1290) *
                    C13133 +
                (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
                 C13131 * C1292) *
                    C13129) *
                   C30667 * C30488 * C30754) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30792 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                C13133 +
            (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                C13129) *
               C30667 * C30781 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C13126 * C1159 - C13130 * C1150 + C13127 * C1160 -
             C13131 * C1151) *
                C13133 +
            (C13126 * C1177 - C13130 * C1162 + C13127 * C1178 -
             C13131 * C1163) *
                C13129) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30792 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                C13133 +
            (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                C13129) *
               C30667 * C30781 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
             C13127 * C1161) *
                C13133 +
            (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
             C13127 * C1179) *
                C13129) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30792 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                C13133 +
            (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                C13129) *
               C30667 * C30781 +
           ((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                C13132 +
            (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                C13128 +
            (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
             C13131 * C2014) *
                C13133 +
            (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
             C13131 * C2016) *
                C13129) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C942 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C943 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C942 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C943 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C942 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C943 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13281 - C13282 + C13283 - C13284) * C13133 +
           (C13285 - C13286 + C13287 - C13288) * C13129) *
              C30667 * C30488 * C1010 +
          ((C13282 - C13281 + C13284 - C13283) * C13132 +
           (C13286 - C13285 + C13288 - C13287) * C13128 +
           (C13289 - C13290 + C13291 - C13292) * C13133 +
           (C13293 - C13294 + C13295 - C13296) * C13129) *
              C30667 * C30488 * C1011 +
          ((C13290 - C13289 + C13292 - C13291) * C13132 +
           (C13294 - C13293 + C13296 - C13295) * C13128 +
           (C14189 - C14190 + C14191 - C14192) * C13133 +
           (C14193 - C14194 + C14195 - C14196) * C13129) *
              C30667 * C30488 * C1012 +
          ((C14190 - C14189 + C14192 - C14191) * C13132 +
           (C14194 - C14193 + C14196 - C14195) * C13128 +
           (C14197 - C14198 + C14199 - C14200) * C13133 +
           (C14201 - C14202 + C14203 - C14204) * C13129) *
              C30667 * C30488 * C1013 +
          ((C14198 - C14197 + C14200 - C14199) * C13132 +
           (C14202 - C14201 + C14204 - C14203) * C13128 +
           (C13126 * C5373 - C13130 * C5371 + C13127 * C5632 - C13131 * C5631) *
               C13133 +
           (C13126 * C5377 - C13130 * C5374 + C13127 * C5634 - C13131 * C5633) *
               C13129) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30792 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30781 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30757) *
              C942 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30792 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30781 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C30757) *
              C943 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30792 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
             C13127 * C1546) *
                C13133 +
            (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
             C13127 * C1552) *
                C13129) *
               C30667 * C30781 +
           ((C14368 - C14367 + C14370 - C14369) * C13132 +
            (C14372 - C14371 + C14374 - C14373) * C13128 +
            (C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
             C13131 * C6345) *
                C13133 +
            (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
             C13131 * C6347) *
                C13129) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C1664 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C1665 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C1664 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C1665 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
             C13127 * C1161) *
                C13133 +
            (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
             C13127 * C1179) *
                C13129) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C1664 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13953 - C13954 + C13955 - C13956) * C13133 +
            (C13957 - C13958 + C13959 - C13960) * C13129) *
               C30667 * C1665 +
           ((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                C13132 +
            (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                C13128 +
            (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
             C13131 * C2014) *
                C13133 +
            (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
             C13131 * C2016) *
                C13129) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C1664 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C1665 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30757) *
              C30791 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C1664 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C1665 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C30757) *
              C30779 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C1664 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C1665 +
           ((C14368 - C14367 + C14370 - C14369) * C13132 +
            (C14372 - C14371 + C14374 - C14373) * C13128 +
            (C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
             C13131 * C6345) *
                C13133 +
            (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
             C13131 * C6347) *
                C13129) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13281 - C13282 + C13283 - C13284) * C13133 +
           (C13285 - C13286 + C13287 - C13288) * C13129) *
              C30667 * C1839 +
          ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
               C13132 +
           (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
               C13128 +
           (C13937 - C13938 + C13939 - C13940) * C13133 +
           (C13941 - C13942 + C13943 - C13944) * C13129) *
              C30667 * C1840 +
          ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
               C13132 +
           (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
               C13128 +
           (C14351 - C14352 + C14353 - C14354) * C13133 +
           (C14355 - C14356 + C14357 - C14358) * C13129) *
              C30667 * C1841 +
          ((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 - C13127 * C1851) *
               C13132 +
           (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 - C13127 * C1863) *
               C13128 +
           (C13130 * C2222 - C13126 * C2225 + C13131 * C2223 - C13127 * C2226) *
               C13133 +
           (C13130 * C2228 - C13126 * C2231 + C13131 * C2229 - C13127 * C2232) *
               C13129) *
              C30667 * C1842 +
          ((C13126 * C1856 - C13130 * C1847 + C13127 * C1857 - C13131 * C1848) *
               C13132 +
           (C13126 * C1865 - C13130 * C1859 + C13127 * C1866 - C13131 * C1860) *
               C13128 +
           (C13126 * C6192 - C13130 * C6188 + C13127 * C10578 -
            C13131 * C10577) *
               C13133 +
           (C13126 * C6197 - C13130 * C6193 + C13127 * C10580 -
            C13131 * C10579) *
               C13129) *
              C30667 * C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30724 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C942 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30724 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C943 +
           (((C13290 - C13289 + C13292 - C13291) * C13132 +
             (C13294 - C13293 + C13296 - C13295) * C13128 +
             (C14189 - C14190 + C14191 - C14192) * C13133 +
             (C14193 - C14194 + C14195 - C14196) * C13129) *
                C30667 * C30724 +
            ((C14360 - C14359 + C14362 - C14361) * C13132 +
             (C14364 - C14363 + C14366 - C14365) * C13128 +
             (C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
              C13127 * C1546) *
                 C13133 +
             (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
              C13127 * C1552) *
                 C13129) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30724 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C942 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30724 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C943 +
           (((C13306 - C13305 + C13308 - C13307) * C13132 +
             (C13310 - C13309 + C13312 - C13311) * C13128 +
             (C14505 - C14506 + C14507 - C14508) * C13133 +
             (C14509 - C14510 + C14511 - C14512) * C13129) *
                C30667 * C30724 +
            ((C14708 - C14707 + C14710 - C14709) * C13132 +
             (C14712 - C14711 + C14714 - C14713) * C13128 +
             (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C13133 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C13129) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30724 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                C13133 +
            (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                C13129) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30724 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                C13133 +
            (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                C13129) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30724 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                C13133 +
            (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                C13129) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C30724 +
           ((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                C13132 +
            (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                C13128 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C13133 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C13129) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C2116 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C2117 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C2118 +
           ((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
             C13127 * C1851) *
                C13132 +
            (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
             C13127 * C1863) *
                C13128 +
            (C13130 * C2222 - C13126 * C2225 + C13131 * C2223 -
             C13127 * C2226) *
                C13133 +
            (C13130 * C2228 - C13126 * C2231 + C13131 * C2229 -
             C13127 * C2232) *
                C13129) *
               C30667 * C30770) *
              C30470 * C30709 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C2116 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C2117 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C15421 - C15422 + C15423 - C15424) * C13133 +
            (C15425 - C15426 + C15427 - C15428) * C13129) *
               C30667 * C2118 +
           ((C13126 * C1851 - C13130 * C1845 + C13127 * C1852 -
             C13131 * C1846) *
                C13132 +
            (C13126 * C1863 - C13130 * C1854 + C13127 * C1864 -
             C13131 * C1855) *
                C13128 +
            (C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
             C13131 * C2224) *
                C13133 +
            (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
             C13131 * C2230) *
                C13129) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
               C13133 +
           (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
               C13129) *
              C30667 * C30488 * C30470 * C108 +
          ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
               C13132 +
           (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
               C13128 +
           (C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
               C13133 +
           (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
               C13129) *
              C30667 * C30488 * C30470 * C109 +
          ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
               C13132 +
           (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
               C13128 +
           (C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
               C13133 +
           (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
               C13129) *
              C30667 * C30488 * C30470 * C110 +
          ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
               C13132 +
           (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
               C13128 +
           (C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
               C13133 +
           (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
               C13129) *
              C30667 * C30488 * C30470 * C111 +
          ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
               C13132 +
           (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
               C13128 +
           (C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
               C13133 +
           (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
               C13129) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C942 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C943 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C942 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C943 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C942 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C943 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13281 - C13282 + C13283 - C13284) * C13133 +
           (C13285 - C13286 + C13287 - C13288) * C13129) *
              C30667 * C30488 * C1010 +
          ((C13282 - C13281 + C13284 - C13283) * C13132 +
           (C13286 - C13285 + C13288 - C13287) * C13128 +
           (C13289 - C13290 + C13291 - C13292) * C13133 +
           (C13293 - C13294 + C13295 - C13296) * C13129) *
              C30667 * C30488 * C1011 +
          ((C13290 - C13289 + C13292 - C13291) * C13132 +
           (C13294 - C13293 + C13296 - C13295) * C13128 +
           (C14189 - C14190 + C14191 - C14192) * C13133 +
           (C14193 - C14194 + C14195 - C14196) * C13129) *
              C30667 * C30488 * C1012 +
          ((C14190 - C14189 + C14192 - C14191) * C13132 +
           (C14194 - C14193 + C14196 - C14195) * C13128 +
           (C14197 - C14198 + C14199 - C14200) * C13133 +
           (C14201 - C14202 + C14203 - C14204) * C13129) *
              C30667 * C30488 * C1013 +
          ((C14198 - C14197 + C14200 - C14199) * C13132 +
           (C14202 - C14201 + C14204 - C14203) * C13128 +
           (C13126 * C5373 - C13130 * C5371 + C13127 * C5632 - C13131 * C5631) *
               C13133 +
           (C13126 * C5377 - C13130 * C5374 + C13127 * C5634 - C13131 * C5633) *
               C13129) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C1664 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C1665 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C1664 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C1665 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
             C13127 * C1161) *
                C13133 +
            (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
             C13127 * C1179) *
                C13129) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C1664 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13953 - C13954 + C13955 - C13956) * C13133 +
            (C13957 - C13958 + C13959 - C13960) * C13129) *
               C30667 * C1665 +
           ((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                C13132 +
            (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                C13128 +
            (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
             C13131 * C2014) *
                C13133 +
            (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
             C13131 * C2016) *
                C13129) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C1664 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C1665 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30757) *
              C30791 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C1664 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C1665 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C30757) *
              C30779 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C1664 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C1665 +
           ((C14368 - C14367 + C14370 - C14369) * C13132 +
            (C14372 - C14371 + C14374 - C14373) * C13128 +
            (C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
             C13131 * C6345) *
                C13133 +
            (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
             C13131 * C6347) *
                C13129) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C3094 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C3094 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C3094 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C3094 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C13132 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30667 * C3094 +
            ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C13132 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C13128 +
             (C13953 - C13954 + C13955 - C13956) * C13133 +
             (C13957 - C13958 + C13959 - C13960) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30667 * C3094 +
            ((C13954 - C13953 + C13956 - C13955) * C13132 +
             (C13958 - C13957 + C13960 - C13959) * C13128 +
             (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C13133 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30571 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30578 +
            ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C13132 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C13128 +
             (C14351 - C14352 + C14353 - C14354) * C13133 +
             (C14355 - C14356 + C14357 - C14358) * C13129) *
                C30667 * C3602) *
               C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30571 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30578 +
            ((C14352 - C14351 + C14354 - C14353) * C13132 +
             (C14356 - C14355 + C14358 - C14357) * C13128 +
             (C14367 - C14368 + C14369 - C14370) * C13133 +
             (C14371 - C14372 + C14373 - C14374) * C13129) *
                C30667 * C3602) *
               C30533) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30571 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30578 +
            ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C13132 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C13128 +
             (C15421 - C15422 + C15423 - C15424) * C13133 +
             (C15425 - C15426 + C15427 - C15428) * C13129) *
                C30667 * C3602) *
               C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30571 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30578 +
            ((C15422 - C15421 + C15424 - C15423) * C13132 +
             (C15426 - C15425 + C15428 - C15427) * C13128 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C13133 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C13129) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C3094 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30791 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C3094 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30779 +
           (((C13290 - C13289 + C13292 - C13291) * C13132 +
             (C13294 - C13293 + C13296 - C13295) * C13128 +
             (C14189 - C14190 + C14191 - C14192) * C13133 +
             (C14193 - C14194 + C14195 - C14196) * C13129) *
                C30667 * C3094 +
            ((C14360 - C14359 + C14362 - C14361) * C13132 +
             (C14364 - C14363 + C14366 - C14365) * C13128 +
             (C14845 - C14846 + C14847 - C14848) * C13133 +
             (C14849 - C14850 + C14851 - C14852) * C13129) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C3094 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30791 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C3094 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30779 +
           (((C13306 - C13305 + C13308 - C13307) * C13132 +
             (C13310 - C13309 + C13312 - C13311) * C13128 +
             (C14505 - C14506 + C14507 - C14508) * C13133 +
             (C14509 - C14510 + C14511 - C14512) * C13129) *
                C30667 * C3094 +
            ((C14708 - C14707 + C14710 - C14709) * C13132 +
             (C14712 - C14711 + C14714 - C14713) * C13128 +
             (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C13133 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C13129) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C3094 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C3094 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C3094 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13953 - C13954 + C13955 - C13956) * C13133 +
            (C13957 - C13958 + C13959 - C13960) * C13129) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C3094 +
           ((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                C13132 +
            (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                C13128 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C13133 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C13129) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30799 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30796 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30787 +
           ((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
             C13127 * C1851) *
                C13132 +
            (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
             C13127 * C1863) *
                C13128 +
            (C15689 - C15690 + C15691 - C15692) * C13133 +
            (C15693 - C15694 + C15695 - C15696) * C13129) *
               C30667 * C30770) *
              C30470 * C2440 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30799 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C30796 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C15421 - C15422 + C15423 - C15424) * C13133 +
            (C15425 - C15426 + C15427 - C15428) * C13129) *
               C30667 * C30787 +
           ((C13126 * C1851 - C13130 * C1845 + C13127 * C1852 -
             C13131 * C1846) *
                C13132 +
            (C13126 * C1863 - C13130 * C1854 + C13127 * C1864 -
             C13131 * C1855) *
                C13128 +
            (C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
             C13131 * C2224) *
                C13133 +
            (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
             C13131 * C2230) *
                C13129) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30571 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30578 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C3602) *
              C30470 * C30447 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30571 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C30578 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C15421 - C15422 + C15423 - C15424) * C13133 +
            (C15425 - C15426 + C15427 - C15428) * C13129) *
               C30667 * C3602) *
              C30470 * C30456 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30571 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13953 - C13954 + C13955 - C13956) * C13133 +
            (C13957 - C13958 + C13959 - C13960) * C13129) *
               C30667 * C30578 +
           ((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                C13132 +
            (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                C13128 +
            (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
             C13131 * C2014) *
                C13133 +
            (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
             C13131 * C2016) *
                C13129) *
               C30667 * C3602) *
              C30470 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C3094 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C3094 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13945 - C13946 + C13947 - C13948) * C13133 +
            (C13949 - C13950 + C13951 - C13952) * C13129) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C3094 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13953 - C13954 + C13955 - C13956) * C13133 +
            (C13957 - C13958 + C13959 - C13960) * C13129) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C3094 +
           ((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                C13132 +
            (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                C13128 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C13133 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C13129) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C3094 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30791 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C3094 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C30779 +
           (((C13290 - C13289 + C13292 - C13291) * C13132 +
             (C13294 - C13293 + C13296 - C13295) * C13128 +
             (C14189 - C14190 + C14191 - C14192) * C13133 +
             (C14193 - C14194 + C14195 - C14196) * C13129) *
                C30667 * C3094 +
            ((C14360 - C14359 + C14362 - C14361) * C13132 +
             (C14364 - C14363 + C14366 - C14365) * C13128 +
             (C14845 - C14846 + C14847 - C14848) * C13133 +
             (C14849 - C14850 + C14851 - C14852) * C13129) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C3094 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30791 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C3094 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C30779 +
           (((C13306 - C13305 + C13308 - C13307) * C13132 +
             (C13310 - C13309 + C13312 - C13311) * C13128 +
             (C14505 - C14506 + C14507 - C14508) * C13133 +
             (C14509 - C14510 + C14511 - C14512) * C13129) *
                C30667 * C3094 +
            ((C14708 - C14707 + C14710 - C14709) * C13132 +
             (C14712 - C14711 + C14714 - C14713) * C13128 +
             (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C13133 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C13129) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C30488 * C30723 +
           ((C13606 - C13605 + C13608 - C13607) * C13132 +
            (C13610 - C13609 + C13612 - C13611) * C13128 +
            (C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                C13133 +
            (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                C13129) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C1284 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C1285 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30488 * C1286 +
           ((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C1284 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C1285 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C14505 - C14506 + C14507 - C14508) * C13133 +
            (C14509 - C14510 + C14511 - C14512) * C13129) *
               C30667 * C30488 * C1286 +
           ((C14506 - C14505 + C14508 - C14507) * C13132 +
            (C14510 - C14509 + C14512 - C14511) * C13128 +
            (C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
             C13131 * C1021) *
                C13133 +
            (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
             C13131 * C1033) *
                C13129) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30724 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30724 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C13126 * C1165 - C13130 * C1153 + C13127 * C1166 -
              C13131 * C1154) *
                 C13133 +
             (C13126 * C1180 - C13130 * C1168 + C13127 * C1181 -
              C13131 * C1169) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30724 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30724 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C13130 * C1154 - C13126 * C1166 + C13131 * C1155 -
              C13127 * C1167) *
                 C13133 +
             (C13130 * C1169 - C13126 * C1181 + C13131 * C1170 -
              C13127 * C1182) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C13132 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C13128 +
             (C13313 - C13314 + C13315 - C13316) * C13133 +
             (C13317 - C13318 + C13319 - C13320) * C13129) *
                C30667 * C30724 +
            ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C13132 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C13128 +
             (C13953 - C13954 + C13955 - C13956) * C13133 +
             (C13957 - C13958 + C13959 - C13960) * C13129) *
                C30667 * C30575) *
               C30723 +
           (((C13314 - C13313 + C13316 - C13315) * C13132 +
             (C13318 - C13317 + C13320 - C13319) * C13128 +
             (C13321 - C13322 + C13323 - C13324) * C13133 +
             (C13325 - C13326 + C13327 - C13328) * C13129) *
                C30667 * C30724 +
            ((C13954 - C13953 + C13956 - C13955) * C13132 +
             (C13958 - C13957 + C13960 - C13959) * C13128 +
             (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C13133 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C13129) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30724 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30575) *
              C1284 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30724 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30575) *
              C1285 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30724 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C14845 - C14846 + C14847 - C14848) * C13133 +
            (C14849 - C14850 + C14851 - C14852) * C13129) *
               C30667 * C30575) *
              C1286 +
          (((C14190 - C14189 + C14192 - C14191) * C13132 +
            (C14194 - C14193 + C14196 - C14195) * C13128 +
            (C14197 - C14198 + C14199 - C14200) * C13133 +
            (C14201 - C14202 + C14203 - C14204) * C13129) *
               C30667 * C30724 +
           ((C14846 - C14845 + C14848 - C14847) * C13132 +
            (C14850 - C14849 + C14852 - C14851) * C13128 +
            (C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C13133 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C13129) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
               C13133 +
           (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
               C13129) *
              C30667 * C30488 * C30470 * C108 +
          ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
               C13132 +
           (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
               C13128 +
           (C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
               C13133 +
           (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
               C13129) *
              C30667 * C30488 * C30470 * C109 +
          ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
               C13132 +
           (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
               C13128 +
           (C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
               C13133 +
           (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
               C13129) *
              C30667 * C30488 * C30470 * C110 +
          ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
               C13132 +
           (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
               C13128 +
           (C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
               C13133 +
           (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
               C13129) *
              C30667 * C30488 * C30470 * C111 +
          ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
               C13132 +
           (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
               C13128 +
           (C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
               C13133 +
           (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
               C13129) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30792 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                C13133 +
            (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                C13129) *
               C30667 * C30781 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C13126 * C1159 - C13130 * C1150 + C13127 * C1160 -
             C13131 * C1151) *
                C13133 +
            (C13126 * C1177 - C13130 * C1162 + C13127 * C1178 -
             C13131 * C1163) *
                C13129) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30792 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                C13133 +
            (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                C13129) *
               C30667 * C30781 +
           ((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                C13132 +
            (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                C13128 +
            (C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
             C13127 * C1161) *
                C13133 +
            (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
             C13127 * C1179) *
                C13129) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30792 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                C13133 +
            (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                C13129) *
               C30667 * C30781 +
           ((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                C13132 +
            (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                C13128 +
            (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
             C13131 * C2014) *
                C13133 +
            (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
             C13131 * C2016) *
                C13129) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C942 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C943 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C942 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C943 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C942 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C943 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13281 - C13282 + C13283 - C13284) * C13133 +
           (C13285 - C13286 + C13287 - C13288) * C13129) *
              C30667 * C30488 * C1010 +
          ((C13282 - C13281 + C13284 - C13283) * C13132 +
           (C13286 - C13285 + C13288 - C13287) * C13128 +
           (C13289 - C13290 + C13291 - C13292) * C13133 +
           (C13293 - C13294 + C13295 - C13296) * C13129) *
              C30667 * C30488 * C1011 +
          ((C13290 - C13289 + C13292 - C13291) * C13132 +
           (C13294 - C13293 + C13296 - C13295) * C13128 +
           (C14189 - C14190 + C14191 - C14192) * C13133 +
           (C14193 - C14194 + C14195 - C14196) * C13129) *
              C30667 * C30488 * C1012 +
          ((C14190 - C14189 + C14192 - C14191) * C13132 +
           (C14194 - C14193 + C14196 - C14195) * C13128 +
           (C14197 - C14198 + C14199 - C14200) * C13133 +
           (C14201 - C14202 + C14203 - C14204) * C13129) *
              C30667 * C30488 * C1013 +
          ((C14198 - C14197 + C14200 - C14199) * C13132 +
           (C14202 - C14201 + C14204 - C14203) * C13128 +
           (C13126 * C5373 - C13130 * C5371 + C13127 * C5632 - C13131 * C5631) *
               C13133 +
           (C13126 * C5377 - C13130 * C5374 + C13127 * C5634 - C13131 * C5633) *
               C13129) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30792 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13937 - C13938 + C13939 - C13940) * C13133 +
            (C13941 - C13942 + C13943 - C13944) * C13129) *
               C30667 * C30781 +
           ((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C13132 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C13128 +
            (C14351 - C14352 + C14353 - C14354) * C13133 +
            (C14355 - C14356 + C14357 - C14358) * C13129) *
               C30667 * C30757) *
              C942 +
          (((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30792 +
           ((C13938 - C13937 + C13940 - C13939) * C13132 +
            (C13942 - C13941 + C13944 - C13943) * C13128 +
            (C14359 - C14360 + C14361 - C14362) * C13133 +
            (C14363 - C14364 + C14365 - C14366) * C13129) *
               C30667 * C30781 +
           ((C14352 - C14351 + C14354 - C14353) * C13132 +
            (C14356 - C14355 + C14358 - C14357) * C13128 +
            (C14367 - C14368 + C14369 - C14370) * C13133 +
            (C14371 - C14372 + C14373 - C14374) * C13129) *
               C30667 * C30757) *
              C943 +
          (((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C14189 - C14190 + C14191 - C14192) * C13133 +
            (C14193 - C14194 + C14195 - C14196) * C13129) *
               C30667 * C30792 +
           ((C14360 - C14359 + C14362 - C14361) * C13132 +
            (C14364 - C14363 + C14366 - C14365) * C13128 +
            (C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
             C13127 * C1546) *
                C13133 +
            (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
             C13127 * C1552) *
                C13129) *
               C30667 * C30781 +
           ((C14368 - C14367 + C14370 - C14369) * C13132 +
            (C14372 - C14371 + C14374 - C14373) * C13128 +
            (C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
             C13131 * C6345) *
                C13133 +
            (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
             C13131 * C6347) *
                C13129) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30724 +
           ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C13132 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C13128 +
            (C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                C13133 +
            (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                C13129) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30724 +
           ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                C13132 +
            (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                C13128 +
            (C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                C13133 +
            (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                C13129) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30724 +
           ((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                C13132 +
            (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                C13128 +
            (C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                C13133 +
            (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                C13129) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C13132 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C13128 +
            (C13605 - C13606 + C13607 - C13608) * C13133 +
            (C13609 - C13610 + C13611 - C13612) * C13129) *
               C30667 * C30724 +
           ((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                C13132 +
            (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                C13128 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C13133 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C13129) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C13132 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C13128 +
             (C13281 - C13282 + C13283 - C13284) * C13133 +
             (C13285 - C13286 + C13287 - C13288) * C13129) *
                C30667 * C30724 +
            ((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C13132 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C13128 +
             (C13937 - C13938 + C13939 - C13940) * C13133 +
             (C13941 - C13942 + C13943 - C13944) * C13129) *
                C30667 * C30575) *
               C942 +
           (((C13282 - C13281 + C13284 - C13283) * C13132 +
             (C13286 - C13285 + C13288 - C13287) * C13128 +
             (C13289 - C13290 + C13291 - C13292) * C13133 +
             (C13293 - C13294 + C13295 - C13296) * C13129) *
                C30667 * C30724 +
            ((C13938 - C13937 + C13940 - C13939) * C13132 +
             (C13942 - C13941 + C13944 - C13943) * C13128 +
             (C14359 - C14360 + C14361 - C14362) * C13133 +
             (C14363 - C14364 + C14365 - C14366) * C13129) *
                C30667 * C30575) *
               C943 +
           (((C13290 - C13289 + C13292 - C13291) * C13132 +
             (C13294 - C13293 + C13296 - C13295) * C13128 +
             (C14189 - C14190 + C14191 - C14192) * C13133 +
             (C14193 - C14194 + C14195 - C14196) * C13129) *
                C30667 * C30724 +
            ((C14360 - C14359 + C14362 - C14361) * C13132 +
             (C14364 - C14363 + C14366 - C14365) * C13128 +
             (C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
              C13127 * C1546) *
                 C13133 +
             (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
              C13127 * C1552) *
                 C13129) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C13132 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C13128 +
             (C13297 - C13298 + C13299 - C13300) * C13133 +
             (C13301 - C13302 + C13303 - C13304) * C13129) *
                C30667 * C30724 +
            ((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C13132 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C13128 +
             (C13945 - C13946 + C13947 - C13948) * C13133 +
             (C13949 - C13950 + C13951 - C13952) * C13129) *
                C30667 * C30575) *
               C942 +
           (((C13298 - C13297 + C13300 - C13299) * C13132 +
             (C13302 - C13301 + C13304 - C13303) * C13128 +
             (C13305 - C13306 + C13307 - C13308) * C13133 +
             (C13309 - C13310 + C13311 - C13312) * C13129) *
                C30667 * C30724 +
            ((C13946 - C13945 + C13948 - C13947) * C13132 +
             (C13950 - C13949 + C13952 - C13951) * C13128 +
             (C14707 - C14708 + C14709 - C14710) * C13133 +
             (C14711 - C14712 + C14713 - C14714) * C13129) *
                C30667 * C30575) *
               C943 +
           (((C13306 - C13305 + C13308 - C13307) * C13132 +
             (C13310 - C13309 + C13312 - C13311) * C13128 +
             (C14505 - C14506 + C14507 - C14508) * C13133 +
             (C14509 - C14510 + C14511 - C14512) * C13129) *
                C30667 * C30724 +
            ((C14708 - C14707 + C14710 - C14709) * C13132 +
             (C14712 - C14711 + C14714 - C14713) * C13128 +
             (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C13133 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C13129) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
               C13133 +
           (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
               C13129) *
              C30667 * C30488 * C30470 * C108 +
          ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
               C13132 +
           (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
               C13128 +
           (C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
               C13133 +
           (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
               C13129) *
              C30667 * C30488 * C30470 * C109 +
          ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
               C13132 +
           (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
               C13128 +
           (C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
               C13133 +
           (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
               C13129) *
              C30667 * C30488 * C30470 * C110 +
          ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
               C13132 +
           (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
               C13128 +
           (C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
               C13133 +
           (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
               C13129) *
              C30667 * C30488 * C30470 * C111 +
          ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
               C13132 +
           (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
               C13128 +
           (C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
               C13133 +
           (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
               C13129) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C30791 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C30779 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C13132 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C13128 +
            (C13281 - C13282 + C13283 - C13284) * C13133 +
            (C13285 - C13286 + C13287 - C13288) * C13129) *
               C30667 * C30488 * C942 +
           ((C13282 - C13281 + C13284 - C13283) * C13132 +
            (C13286 - C13285 + C13288 - C13287) * C13128 +
            (C13289 - C13290 + C13291 - C13292) * C13133 +
            (C13293 - C13294 + C13295 - C13296) * C13129) *
               C30667 * C30488 * C943 +
           ((C13290 - C13289 + C13292 - C13291) * C13132 +
            (C13294 - C13293 + C13296 - C13295) * C13128 +
            (C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
             C13131 * C1017) *
                C13133 +
            (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
             C13131 * C1026) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C13132 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C13128 +
            (C13297 - C13298 + C13299 - C13300) * C13133 +
            (C13301 - C13302 + C13303 - C13304) * C13129) *
               C30667 * C30488 * C942 +
           ((C13298 - C13297 + C13300 - C13299) * C13132 +
            (C13302 - C13301 + C13304 - C13303) * C13128 +
            (C13305 - C13306 + C13307 - C13308) * C13133 +
            (C13309 - C13310 + C13311 - C13312) * C13129) *
               C30667 * C30488 * C943 +
           ((C13306 - C13305 + C13308 - C13307) * C13132 +
            (C13310 - C13309 + C13312 - C13311) * C13128 +
            (C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
             C13127 * C1024) *
                C13133 +
            (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
             C13127 * C1036) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C13132 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C13128 +
            (C13313 - C13314 + C13315 - C13316) * C13133 +
            (C13317 - C13318 + C13319 - C13320) * C13129) *
               C30667 * C30488 * C942 +
           ((C13314 - C13313 + C13316 - C13315) * C13132 +
            (C13318 - C13317 + C13320 - C13319) * C13128 +
            (C13321 - C13322 + C13323 - C13324) * C13133 +
            (C13325 - C13326 + C13327 - C13328) * C13129) *
               C30667 * C30488 * C943 +
           ((C13322 - C13321 + C13324 - C13323) * C13132 +
            (C13326 - C13325 + C13328 - C13327) * C13128 +
            (C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
             C13131 * C1290) *
                C13133 +
            (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
             C13131 * C1292) *
                C13129) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C13132 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C13128 +
           (C13281 - C13282 + C13283 - C13284) * C13133 +
           (C13285 - C13286 + C13287 - C13288) * C13129) *
              C30667 * C30488 * C1010 +
          ((C13282 - C13281 + C13284 - C13283) * C13132 +
           (C13286 - C13285 + C13288 - C13287) * C13128 +
           (C13289 - C13290 + C13291 - C13292) * C13133 +
           (C13293 - C13294 + C13295 - C13296) * C13129) *
              C30667 * C30488 * C1011 +
          ((C13290 - C13289 + C13292 - C13291) * C13132 +
           (C13294 - C13293 + C13296 - C13295) * C13128 +
           (C14189 - C14190 + C14191 - C14192) * C13133 +
           (C14193 - C14194 + C14195 - C14196) * C13129) *
              C30667 * C30488 * C1012 +
          ((C14190 - C14189 + C14192 - C14191) * C13132 +
           (C14194 - C14193 + C14196 - C14195) * C13128 +
           (C14197 - C14198 + C14199 - C14200) * C13133 +
           (C14201 - C14202 + C14203 - C14204) * C13129) *
              C30667 * C30488 * C1013 +
          ((C14198 - C14197 + C14200 - C14199) * C13132 +
           (C14202 - C14201 + C14204 - C14203) * C13128 +
           (C13126 * C5373 - C13130 * C5371 + C13127 * C5632 - C13131 * C5631) *
               C13133 +
           (C13126 * C5377 - C13130 * C5374 + C13127 * C5634 - C13131 * C5633) *
               C13129) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C30529 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C30536 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30488 * C2700) *
                      C30447 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C30529 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C30536 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    (C25739 * C13132 + C25740 * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C2700) *
                      C30456 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C30529 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30536 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C2700) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30529 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30536 +
                   (((C4710 * C13132 + C4711 * C13128 +
                      (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                         C18742 +
                     (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                      C5901 * C13129) *
                         C18743) *
                        C30724 +
                    ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                      C25872 * C13129) *
                         C18742 +
                     (C25413 * C13132 + C25414 * C13128 +
                      (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                         C18743) *
                        C30575) *
                       C2700) *
                      C2440 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30529 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30536 +
                   (((C4712 * C13132 + C4713 * C13128 +
                      (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                         C18742 +
                     (C25739 * C13132 + C25740 * C13128 +
                      (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                         C18743) *
                        C30724 +
                    ((C5792 * C13132 + C5793 * C13128 +
                      (C5795 - C5794) * C13133 + (C5797 - C5796) * C13129) *
                         C18742 +
                     ((C6355 - C6354) * C13132 + (C6357 - C6356) * C13128 +
                      (C30416 * C6346 - C4559 * C6345) * C13133 +
                      (C30416 * C6348 - C4559 * C6347) * C13129) *
                         C18743) *
                        C30575) *
                       C2700) *
                      C30453)) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C30798 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C30794 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30488 * C30784 +
                   ((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    (C25871 * C13132 + C25872 * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C2440 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C30798 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C30794 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    (C25739 * C13132 + C25740 * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30784 +
                   ((C5636 * C13132 + C5637 * C13128 +
                     (C5639 - C5638) * C13133 + (C5641 - C5640) * C13129) *
                        C18742 +
                    ((C5795 - C5794) * C13132 + (C5797 - C5796) * C13128 +
                     (C30416 * C5788 - C4559 * C5787) * C13133 +
                     (C30416 * C5790 - C4559 * C5789) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C30453)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30797 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30790 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30777 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4925 - C4924) * C13132 + (C4927 - C4926) * C13128 +
                     (C4929 - C4928) * C13133 + (C4931 - C4930) * C13129) *
                        C18742 +
                    ((C24696 - C24695) * C13132 + (C24698 - C24697) * C13128 +
                     (C30416 * C1441 - C4559 * C1440) * C13133 +
                     (C30416 * C1443 - C4559 * C1442) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30758)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30792 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30781 +
                    ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                      C25410 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10804 * C13133 + C10805 * C13129) *
                         C18743) *
                        C30757) *
                       C2332 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30792 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30781 +
                    ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                      C25414 * C13129) *
                         C18742 +
                     (C26703 * C13132 + C26704 * C13128 +
                      (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                         C18743) *
                        C30757) *
                       C30533) *
                      C2440 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30792 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30781 +
                    ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                      C26442 * C13129) *
                         C18742 +
                     ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C30757) *
                       C2332 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30792 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30781 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C6355 - C6354) * C13133 + (C6357 - C6356) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30416 * C6456 - C4559 * C6455) * C13133 +
                      (C30416 * C6458 - C4559 * C6457) * C13129) *
                         C18743) *
                        C30757) *
                       C30533) *
                      C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30447 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30456 +
                  (((((C30416 * C126 - C4559 * C119) * C13132 +
                      (C30416 * C140 - C4559 * C129) * C13128 +
                      (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                         C18742 +
                     ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                      C25031 * C13133 + C25032 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                      C25033 * C13133 + C25034 * C13129) *
                         C18742 +
                     ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                      (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                      (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                         C18742 +
                     (C25033 * C13132 + C25034 * C13128 +
                      (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                         C18743) *
                        C30724 +
                    ((C25031 * C13132 + C25032 * C13128 +
                      (C5197 - C5196) * C13133 + (C5199 - C5198) * C13129) *
                         C18742 +
                     ((C9489 - C9488) * C13132 + (C9491 - C9490) * C13128 +
                      (C30416 * C1173 - C4559 * C1158) * C13133 +
                      (C30416 * C1185 - C4559 * C1176) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30797 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30790 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30777 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C30488 * C2332 +
                   (((C4925 - C4924) * C13132 + (C4927 - C4926) * C13128 +
                     (C4929 - C4928) * C13133 + (C4931 - C4930) * C13129) *
                        C18742 +
                    ((C24696 - C24695) * C13132 + (C24698 - C24697) * C13128 +
                     (C30416 * C1441 - C4559 * C1440) * C13133 +
                     (C30416 * C1443 - C4559 * C1442) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30758)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C30798 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C30794 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30488 * C30784 +
                   ((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    (C25871 * C13132 + C25872 * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C2440 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C30798 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C30794 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    (C25739 * C13132 + C25740 * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30784 +
                   ((C5636 * C13132 + C5637 * C13128 +
                     (C5639 - C5638) * C13133 + (C5641 - C5640) * C13129) *
                        C18742 +
                    ((C5795 - C5794) * C13132 + (C5797 - C5796) * C13128 +
                     (C30416 * C5788 - C4559 * C5787) * C13133 +
                     (C30416 * C5790 - C4559 * C5789) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30529 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30536 +
                   (((C4710 * C13132 + C4711 * C13128 +
                      (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                         C18742 +
                     (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                      C5901 * C13129) *
                         C18743) *
                        C3094 +
                    ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                      C25872 * C13129) *
                         C18742 +
                     (C25413 * C13132 + C25414 * C13128 +
                      (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                         C18743) *
                        C30575) *
                       C2700) *
                      C30709 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30529 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30536 +
                   (((C4712 * C13132 + C4713 * C13128 +
                      (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                         C18742 +
                     (C25739 * C13132 + C25740 * C13128 +
                      (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                         C18743) *
                        C3094 +
                    ((C5792 * C13132 + C5793 * C13128 +
                      (C5795 - C5794) * C13133 + (C5797 - C5796) * C13129) *
                         C18742 +
                     ((C6355 - C6354) * C13132 + (C6357 - C6356) * C13128 +
                      (C30416 * C6346 - C4559 * C6345) * C13133 +
                      (C30416 * C6348 - C4559 * C6347) * C13129) *
                         C18743) *
                        C30575) *
                       C2700) *
                      C30453)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30571 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30578 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C3602) *
                      C30529 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30571 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30578 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    (C26703 * C13132 + C26704 * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C3602) *
                      C30536 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30571 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30578 +
                   ((C5532 * C13132 + C5533 * C13128 +
                     (C5529 - C5528) * C13133 + (C5531 - C5530) * C13129) *
                        C18742 +
                    ((C6567 - C6566) * C13132 + (C6569 - C6568) * C13128 +
                     (C30416 * C6558 - C4559 * C6557) * C13133 +
                     (C30416 * C6560 - C4559 * C6559) * C13129) *
                        C18743) *
                       C3602) *
                      C2700) *
                 C30442) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C30798 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C3094 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30575) *
                      C30794 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C3094 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30575) *
                      C30784 +
                  (((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    (C25871 * C13132 + C25872 * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C3094 +
                   ((C5900 * C13132 + C5901 * C13128 +
                     (C5903 - C5902) * C13133 + (C5905 - C5904) * C13129) *
                        C18742 +
                    ((C5529 - C5528) * C13132 + (C5531 - C5530) * C13128 +
                     (C30416 * C5508 - C4559 * C5503) * C13133 +
                     (C30416 * C5512 - C4559 * C5509) * C13129) *
                        C18743) *
                       C30575) *
                      C30764) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30788 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30775 +
                  (((((C30416 * C126 - C4559 * C119) * C13132 +
                      (C30416 * C140 - C4559 * C129) * C13128 +
                      (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                         C18742 +
                     ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                      C25031 * C13133 + C25032 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                      C25033 * C13133 + C25034 * C13129) *
                         C18742 +
                     ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                      (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                      (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                         C18742 +
                     (C25033 * C13132 + C25034 * C13128 +
                      (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                         C18743) *
                        C3094 +
                    ((C25031 * C13132 + C25032 * C13128 +
                      (C5197 - C5196) * C13133 + (C5199 - C5198) * C13129) *
                         C18742 +
                     ((C9489 - C9488) * C13132 + (C9491 - C9490) * C13128 +
                      (C30416 * C1173 - C4559 * C1158) * C13133 +
                      (C30416 * C1185 - C4559 * C1176) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30799 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30796 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30787 +
                   ((C10414 * C13132 + C10415 * C13128 + C26703 * C13133 +
                     C26704 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10806 - C10807) * C13133 + (C10808 - C10809) * C13129) *
                        C18743) *
                       C30770) *
                      C2332 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30799 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30796 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    (C26703 * C13132 + C26704 * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C30787 +
                   ((C10804 * C13132 + C10805 * C13128 +
                     (C6567 - C6566) * C13133 + (C6569 - C6568) * C13129) *
                        C18742 +
                    ((C10807 - C10806) * C13132 + (C10809 - C10808) * C13128 +
                     (C30416 * C6194 - C4559 * C6189) * C13133 +
                     (C30416 * C6198 - C4559 * C6195) * C13129) *
                        C18743) *
                       C30770) *
                      C30533) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30571 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30578 +
                    ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                      C25410 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10804 * C13133 + C10805 * C13129) *
                         C18743) *
                        C3602) *
                       C2332 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30571 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30578 +
                    ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                      C25414 * C13129) *
                         C18742 +
                     (C26703 * C13132 + C26704 * C13128 +
                      (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                         C18743) *
                        C3602) *
                       C30533) *
                      C30709 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30571 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30578 +
                    ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                      C26442 * C13129) *
                         C18742 +
                     ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C3602) *
                       C2332 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30571 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30578 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C6355 - C6354) * C13133 + (C6357 - C6356) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30416 * C6456 - C4559 * C6455) * C13133 +
                      (C30416 * C6458 - C4559 * C6457) * C13129) *
                         C18743) *
                        C3602) *
                       C30533) *
                      C30453)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30788 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30775 +
                  (((((C30416 * C126 - C4559 * C119) * C13132 +
                      (C30416 * C140 - C4559 * C129) * C13128 +
                      (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                         C18742 +
                     ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                      C25031 * C13133 + C25032 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                      C25033 * C13133 + C25034 * C13129) *
                         C18742 +
                     ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                      (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                         C18743) *
                        C30575) *
                       C2332 +
                   ((((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                      (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                         C18742 +
                     (C25033 * C13132 + C25034 * C13128 +
                      (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                         C18743) *
                        C3094 +
                    ((C25031 * C13132 + C25032 * C13128 +
                      (C5197 - C5196) * C13133 + (C5199 - C5198) * C13129) *
                         C18742 +
                     ((C9489 - C9488) * C13132 + (C9491 - C9490) * C13128 +
                      (C30416 * C1173 - C4559 * C1158) * C13133 +
                      (C30416 * C1185 - C4559 * C1176) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C30798 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C3094 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30575) *
                      C30794 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C3094 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30575) *
                      C30784 +
                  (((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    (C25871 * C13132 + C25872 * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C3094 +
                   ((C5900 * C13132 + C5901 * C13128 +
                     (C5903 - C5902) * C13133 + (C5905 - C5904) * C13129) *
                        C18742 +
                    ((C5529 - C5528) * C13132 + (C5531 - C5530) * C13128 +
                     (C30416 * C5508 - C4559 * C5503) * C13133 +
                     (C30416 * C5512 - C4559 * C5509) * C13129) *
                        C18743) *
                       C30575) *
                      C30764) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C1284 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C1285 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30488 * C1286 +
                   ((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    ((C5525 - C5524) * C13132 + (C5527 - C5526) * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C30709 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C1284 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C1285 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C1286 +
                   ((C5636 * C13132 + C5637 * C13128 +
                     (C5639 - C5638) * C13133 + (C5641 - C5640) * C13129) *
                        C18742 +
                    ((C5795 - C5794) * C13132 + (C5797 - C5796) * C13128 +
                     (C30416 * C5788 - C4559 * C5787) * C13133 +
                     (C30416 * C5790 - C4559 * C5789) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C30453)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    ((C5176 - C5177) * C13132 + (C5178 - C5179) * C13128 +
                     C5514 * C13133 + C5515 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C554 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    ((C5184 - C5185) * C13132 + (C5186 - C5187) * C13128 +
                     C5792 * C13133 + C5793 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C555 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    ((C5192 - C5193) * C13132 + (C5194 - C5195) * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C556 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4925 - C4924) * C13132 + (C4927 - C4926) * C13128 +
                     (C4929 - C4928) * C13133 + (C4931 - C4930) * C13129) *
                        C18742 +
                    ((C24696 - C24695) * C13132 + (C24698 - C24697) * C13128 +
                     (C30416 * C1441 - C4559 * C1440) * C13133 +
                     (C30416 * C1443 - C4559 * C1442) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30758)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C1664 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C1665 +
                    ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                      C25410 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10804 * C13133 + C10805 * C13129) *
                         C18743) *
                        C30757) *
                       C30723 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C1664 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C1665 +
                    ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                      C25414 * C13129) *
                         C18742 +
                     ((C6562 - C6563) * C13132 + (C6564 - C6565) * C13128 +
                      (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                         C18743) *
                        C30757) *
                       C30533) *
                      C30709 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C1664 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C1665 +
                    ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                      C26442 * C13129) *
                         C18742 +
                     ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C30757) *
                       C30723 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C1664 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C1665 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C6355 - C6354) * C13133 + (C6357 - C6356) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30416 * C6456 - C4559 * C6455) * C13133 +
                      (C30416 * C6458 - C4559 * C6457) * C13129) *
                         C18743) *
                        C30757) *
                       C30533) *
                      C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30724 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C1284 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30724 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30575) *
                      C1285 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30724 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30575) *
                      C1286 +
                  (((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    (C25871 * C13132 + C25872 * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C30724 +
                   ((C5900 * C13132 + C5901 * C13128 +
                     (C5903 - C5902) * C13133 + (C5905 - C5904) * C13129) *
                        C18742 +
                    ((C5529 - C5528) * C13132 + (C5531 - C5530) * C13128 +
                     (C30416 * C5508 - C4559 * C5503) * C13133 +
                     (C30416 * C5512 - C4559 * C5509) * C13129) *
                        C18743) *
                       C30575) *
                      C30764) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25023 * C13132 + C25024 * C13128 +
                      (C5181 - C5180) * C13133 + (C5183 - C5182) * C13129) *
                         C18742 +
                     ((C5516 - C5517) * C13132 + (C5518 - C5519) * C13128 +
                      C5532 * C13133 + C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C258 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25027 * C13132 + C25028 * C13128 +
                      (C5189 - C5188) * C13133 + (C5191 - C5190) * C13129) *
                         C18742 +
                     ((C6350 - C6351) * C13132 + (C6352 - C6353) * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C259 +
                  (((((C30416 * C126 - C4559 * C119) * C13132 +
                      (C30416 * C140 - C4559 * C129) * C13128 +
                      (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                         C18742 +
                     ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                      C25031 * C13133 + C25032 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                      C25033 * C13133 + C25034 * C13129) *
                         C18742 +
                     ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                      (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                      (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                         C18742 +
                     (C25033 * C13132 + C25034 * C13128 +
                      (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                         C18743) *
                        C30724 +
                    ((C25031 * C13132 + C25032 * C13128 +
                      (C5197 - C5196) * C13133 + (C5199 - C5198) * C13129) *
                         C18742 +
                     ((C9489 - C9488) * C13132 + (C9491 - C9490) * C13128 +
                      (C30416 * C1173 - C4559 * C1158) * C13133 +
                      (C30416 * C1185 - C4559 * C1176) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C2116 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C2117 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C2118 +
                   ((C10414 * C13132 + C10415 * C13128 + C26703 * C13133 +
                     C26704 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10806 - C10807) * C13133 + (C10808 - C10809) * C13129) *
                        C18743) *
                       C30770) *
                      C30723 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C2116 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C2117 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    (C26703 * C13132 + C26704 * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C2118 +
                   ((C10804 * C13132 + C10805 * C13128 +
                     (C6567 - C6566) * C13133 + (C6569 - C6568) * C13129) *
                        C18742 +
                    ((C10807 - C10806) * C13132 + (C10809 - C10808) * C13128 +
                     (C30416 * C6194 - C4559 * C6189) * C13133 +
                     (C30416 * C6198 - C4559 * C6195) * C13129) *
                        C18743) *
                       C30770) *
                      C30533) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C30416 * C124 - C4559 * C117) * C13132 +
                        (C30416 * C138 - C4559 * C127) * C13128 +
                        (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                           C18742 +
                       ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                        (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                           C18743) *
                          C30488 * C30470 * C108 +
                      (((C4559 * C118 - C30416 * C125) * C13132 +
                        (C4559 * C128 - C30416 * C139) * C13128 +
                        (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                           C18742 +
                       ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                        (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                           C18743) *
                          C30488 * C30470 * C109 +
                      (((C30416 * C126 - C4559 * C119) * C13132 +
                        (C30416 * C140 - C4559 * C129) * C13128 +
                        (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                           C18742 +
                       ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                        (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                           C18743) *
                          C30488 * C30470 * C110 +
                      (((C4559 * C120 - C30416 * C130) * C13132 +
                        (C4559 * C131 - C30416 * C141) * C13128 +
                        (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                           C18742 +
                       ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                        (C4559 * C815 - C30416 * C823) * C13133 +
                        (C4559 * C824 - C30416 * C830) * C13129) *
                           C18743) *
                          C30488 * C30470 * C111 +
                      (((C30416 * C132 - C4559 * C121) * C13132 +
                        (C30416 * C142 - C4559 * C133) * C13128 +
                        (C30416 * C287 - C4559 * C269) * C13133 +
                        (C30416 * C299 - C4559 * C288) * C13129) *
                           C18742 +
                       ((C30416 * C440 - C4559 * C422) * C13132 +
                        (C30416 * C452 - C4559 * C441) * C13128 +
                        (C30416 * C825 - C4559 * C816) * C13133 +
                        (C30416 * C831 - C4559 * C826) * C13129) *
                           C18743) *
                          C30488 * C30470 * C112) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((((C30416 * C124 - C4559 * C117) * C13132 +
                         (C30416 * C138 - C4559 * C127) * C13128 +
                         (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                            C18742 +
                        ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                         (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                            C18743) *
                           C30488 * C30791 +
                       (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                         (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                            C18742 +
                        ((C5176 - C5177) * C13132 + (C5178 - C5179) * C13128 +
                         C5514 * C13133 + C5515 * C13129) *
                            C18743) *
                           C30488 * C30779 +
                       ((C4710 * C13132 + C4711 * C13128 +
                         (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                            C18742 +
                        ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                         C5900 * C13133 + C5901 * C13129) *
                            C18743) *
                           C30488 * C30754) *
                          C258 +
                      ((((C4559 * C118 - C30416 * C125) * C13132 +
                         (C4559 * C128 - C30416 * C139) * C13128 +
                         (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                            C18742 +
                        ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                         (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                            C18743) *
                           C30488 * C30791 +
                       (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                         (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                            C18742 +
                        ((C5184 - C5185) * C13132 + (C5186 - C5187) * C13128 +
                         C5792 * C13133 + C5793 * C13129) *
                            C18743) *
                           C30488 * C30779 +
                       ((C4712 * C13132 + C4713 * C13128 +
                         (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                            C18742 +
                        ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                         (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                            C18743) *
                           C30488 * C30754) *
                          C259 +
                      ((((C30416 * C126 - C4559 * C119) * C13132 +
                         (C30416 * C140 - C4559 * C129) * C13128 +
                         (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                            C18742 +
                        ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                         (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                            C18743) *
                           C30488 * C30791 +
                       (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                         (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                            C18742 +
                        ((C5192 - C5193) * C13132 + (C5194 - C5195) * C13128 +
                         (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                            C18743) *
                           C30488 * C30779 +
                       ((C4714 * C13132 + C4715 * C13128 +
                         (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                            C18742 +
                        ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                         (C30416 * C1547 - C4559 * C1544) * C13133 +
                         (C30416 * C1553 - C4559 * C1550) * C13129) *
                            C18743) *
                           C30488 * C30754) *
                          C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30792 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     (C5176 - C5177) * C13133 + (C5178 - C5179) * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9123 * C13132 + C9124 * C13128 +
                     (C5516 - C5517) * C13133 + (C5518 - C5519) * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C258 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30792 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     (C5184 - C5185) * C13133 + (C5186 - C5187) * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9125 * C13132 + C9126 * C13128 +
                     (C6350 - C6351) * C13133 + (C6352 - C6353) * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C259 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30792 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     (C5192 - C5193) * C13133 + (C5194 - C5195) * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30781 +
                   ((C9127 * C13132 + C9128 * C13128 +
                     (C9489 - C9488) * C13133 + (C9491 - C9490) * C13129) *
                        C18742 +
                    ((C9120 - C9119) * C13132 + (C9122 - C9121) * C13128 +
                     (C30416 * C2227 - C4559 * C2224) * C13133 +
                     (C30416 * C2233 - C4559 * C2230) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30788 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30775 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C25023 * C13133 + C25024 * C13129) *
                       C18743) *
                      C30488 * C1010 +
                  (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                    (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                       C18742 +
                   (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                    C5515 * C13129) *
                       C18743) *
                      C30488 * C1011 +
                  ((C4710 * C13132 + C4711 * C13128 + (C4683 - C4682) * C13133 +
                    (C4685 - C4684) * C13129) *
                       C18742 +
                   ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                    C5900 * C13133 + C5901 * C13129) *
                       C18743) *
                      C30488 * C1012 +
                  ((C5380 * C13132 + C5381 * C13128 + (C5383 - C5382) * C13133 +
                    (C5385 - C5384) * C13129) *
                       C18742 +
                   ((C5525 - C5524) * C13132 + (C5527 - C5526) * C13128 +
                    (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                       C18743) *
                      C30488 * C1013 +
                  ((C5390 * C13132 + C5391 * C13128 + (C5387 - C5386) * C13133 +
                    (C5389 - C5388) * C13129) *
                       C18742 +
                   ((C5903 - C5902) * C13132 + (C5905 - C5904) * C13128 +
                    (C30416 * C5896 - C4559 * C5895) * C13133 +
                    (C30416 * C5898 - C4559 * C5897) * C13129) *
                       C18743) *
                      C30488 * C1014) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30792 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C942 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30792 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    ((C6562 - C6563) * C13132 + (C6564 - C6565) * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C30757) *
                      C943 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30792 +
                   ((C5514 * C13132 + C5515 * C13128 +
                     (C5525 - C5524) * C13133 + (C5527 - C5526) * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30781 +
                   ((C5532 * C13132 + C5533 * C13128 +
                     (C5529 - C5528) * C13133 + (C5531 - C5530) * C13129) *
                        C18742 +
                    ((C6567 - C6566) * C13132 + (C6569 - C6568) * C13128 +
                     (C30416 * C6558 - C4559 * C6557) * C13133 +
                     (C30416 * C6560 - C4559 * C6559) * C13129) *
                        C18743) *
                       C30757) *
                      C30754) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30788 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9125 * C13132 + C9126 * C13128 +
                     (C6350 - C6351) * C13133 + (C6352 - C6353) * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30775 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     C25033 * C13133 + C25034 * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C1665 +
                   ((C9127 * C13132 + C9128 * C13128 +
                     (C9489 - C9488) * C13133 + (C9491 - C9490) * C13129) *
                        C18742 +
                    ((C9120 - C9119) * C13132 + (C9122 - C9121) * C13128 +
                     (C30416 * C2227 - C4559 * C2224) * C13133 +
                     (C30416 * C2233 - C4559 * C2230) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C30791 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C1664 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    ((C6562 - C6563) * C13132 + (C6564 - C6565) * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C30757) *
                      C30779 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C1664 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C1665 +
                   ((C5532 * C13132 + C5533 * C13128 +
                     (C5529 - C5528) * C13133 + (C5531 - C5530) * C13129) *
                        C18742 +
                    ((C6567 - C6566) * C13132 + (C6569 - C6568) * C13128 +
                     (C30416 * C6558 - C4559 * C6557) * C13133 +
                     (C30416 * C6560 - C4559 * C6559) * C13129) *
                        C18743) *
                       C30757) *
                      C30754) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C25023 * C13133 + C25024 * C13129) *
                       C18743) *
                      C1839 +
                  (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                    C25025 * C13133 + C25026 * C13129) *
                       C18742 +
                   ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                    C9774 * C13133 + C9775 * C13129) *
                       C18743) *
                      C1840 +
                  ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                    C25410 * C13129) *
                       C18742 +
                   ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                    C10804 * C13133 + C10805 * C13129) *
                       C18743) *
                      C1841 +
                  ((C10414 * C13132 + C10415 * C13128 +
                    (C6562 - C6563) * C13133 + (C6564 - C6565) * C13129) *
                       C18742 +
                   ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                    (C10806 - C10807) * C13133 + (C10808 - C10809) * C13129) *
                       C18743) *
                      C1842 +
                  ((C10426 * C13132 + C10427 * C13128 +
                    (C10807 - C10806) * C13133 + (C10809 - C10808) * C13129) *
                       C18742 +
                   ((C10421 - C10420) * C13132 + (C10423 - C10422) * C13128 +
                    (C30416 * C10800 - C4559 * C10799) * C13133 +
                    (C30416 * C10802 - C4559 * C10801) * C13129) *
                       C18743) *
                      C1843) *
                 C30470 * C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C942 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C943 +
                   (((C4710 * C13132 + C4711 * C13128 +
                      (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                         C18742 +
                     (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                      C5901 * C13129) *
                         C18743) *
                        C30724 +
                    ((C5514 * C13132 + C5515 * C13128 +
                      (C5525 - C5524) * C13133 + (C5527 - C5526) * C13129) *
                         C18742 +
                     (C25413 * C13132 + C25414 * C13128 +
                      (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C30709 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C942 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     ((C6350 - C6351) * C13132 + (C6352 - C6353) * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C943 +
                   (((C4712 * C13132 + C4713 * C13128 +
                      (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                         C18742 +
                     (C25739 * C13132 + C25740 * C13128 +
                      (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                         C18743) *
                        C30724 +
                    ((C5792 * C13132 + C5793 * C13128 +
                      (C5795 - C5794) * C13133 + (C5797 - C5796) * C13129) *
                         C18742 +
                     ((C6355 - C6354) * C13132 + (C6357 - C6356) * C13128 +
                      (C30416 * C6346 - C4559 * C6345) * C13133 +
                      (C30416 * C6348 - C4559 * C6347) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C30453)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     (C5176 - C5177) * C13133 + (C5178 - C5179) * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C554 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     (C5184 - C5185) * C13133 + (C5186 - C5187) * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C555 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     (C5192 - C5193) * C13133 + (C5194 - C5195) * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C556 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9335 - C9334) * C13132 + (C9337 - C9336) * C13128 +
                     (C24696 - C24695) * C13133 + (C24698 - C24697) * C13129) *
                        C18742 +
                    ((C9339 - C9338) * C13132 + (C9341 - C9340) * C13128 +
                     (C30416 * C2015 - C4559 * C2014) * C13133 +
                     (C30416 * C2017 - C4559 * C2016) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30758)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C2116 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C2117 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C2118 +
                   ((C10414 * C13132 + C10415 * C13128 +
                     (C6562 - C6563) * C13133 + (C6564 - C6565) * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10806 - C10807) * C13133 + (C10808 - C10809) * C13129) *
                        C18743) *
                       C30770) *
                      C30470 * C30709 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C2116 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C2117 +
                   ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                     C26442 * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C2118 +
                   ((C10693 * C13132 + C10694 * C13128 +
                     (C10585 - C10584) * C13133 + (C10587 - C10586) * C13129) *
                        C18742 +
                    ((C10696 - C10695) * C13132 + (C10698 - C10697) * C13128 +
                     (C30416 * C10578 - C4559 * C10577) * C13133 +
                     (C30416 * C10580 - C4559 * C10579) * C13129) *
                        C18743) *
                       C30770) *
                      C30470 * C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    ((C5176 - C5177) * C13132 + (C5178 - C5179) * C13128 +
                     C5514 * C13133 + C5515 * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C258 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    ((C5184 - C5185) * C13132 + (C5186 - C5187) * C13128 +
                     C5792 * C13133 + C5793 * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C259 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    ((C5192 - C5193) * C13132 + (C5194 - C5195) * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                       C18743) *
                      C30488 * C30470 * C108 +
                  (((C4559 * C118 - C30416 * C125) * C13132 +
                    (C4559 * C128 - C30416 * C139) * C13128 +
                    (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                       C18742 +
                   ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                    (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                       C18743) *
                      C30488 * C30470 * C109 +
                  (((C30416 * C126 - C4559 * C119) * C13132 +
                    (C30416 * C140 - C4559 * C129) * C13128 +
                    (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                       C18742 +
                   ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                    (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                       C18743) *
                      C30488 * C30470 * C110 +
                  (((C4559 * C120 - C30416 * C130) * C13132 +
                    (C4559 * C131 - C30416 * C141) * C13128 +
                    (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                       C18742 +
                   ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                    (C4559 * C815 - C30416 * C823) * C13133 +
                    (C4559 * C824 - C30416 * C830) * C13129) *
                       C18743) *
                      C30488 * C30470 * C111 +
                  (((C30416 * C132 - C4559 * C121) * C13132 +
                    (C30416 * C142 - C4559 * C133) * C13128 +
                    (C30416 * C287 - C4559 * C269) * C13133 +
                    (C30416 * C299 - C4559 * C288) * C13129) *
                       C18742 +
                   ((C30416 * C440 - C4559 * C422) * C13132 +
                    (C30416 * C452 - C4559 * C441) * C13128 +
                    (C30416 * C825 - C4559 * C816) * C13133 +
                    (C30416 * C831 - C4559 * C826) * C13129) *
                       C18743) *
                      C30488 * C30470 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30788 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30775 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C25023 * C13133 + C25024 * C13129) *
                       C18743) *
                      C30488 * C1010 +
                  (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                    (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                       C18742 +
                   (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                    C5515 * C13129) *
                       C18743) *
                      C30488 * C1011 +
                  ((C4710 * C13132 + C4711 * C13128 + (C4683 - C4682) * C13133 +
                    (C4685 - C4684) * C13129) *
                       C18742 +
                   ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                    C5900 * C13133 + C5901 * C13129) *
                       C18743) *
                      C30488 * C1012 +
                  ((C5380 * C13132 + C5381 * C13128 + (C5383 - C5382) * C13133 +
                    (C5385 - C5384) * C13129) *
                       C18742 +
                   ((C5525 - C5524) * C13132 + (C5527 - C5526) * C13128 +
                    (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                       C18743) *
                      C30488 * C1013 +
                  ((C5390 * C13132 + C5391 * C13128 + (C5387 - C5386) * C13133 +
                    (C5389 - C5388) * C13129) *
                       C18742 +
                   ((C5903 - C5902) * C13132 + (C5905 - C5904) * C13128 +
                    (C30416 * C5896 - C4559 * C5895) * C13133 +
                    (C30416 * C5898 - C4559 * C5897) * C13129) *
                       C18743) *
                      C30488 * C1014) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30788 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9125 * C13132 + C9126 * C13128 +
                     (C6350 - C6351) * C13133 + (C6352 - C6353) * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30775 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     C25033 * C13133 + C25034 * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C1665 +
                   ((C9127 * C13132 + C9128 * C13128 +
                     (C9489 - C9488) * C13133 + (C9491 - C9490) * C13129) *
                        C18742 +
                    ((C9120 - C9119) * C13132 + (C9122 - C9121) * C13128 +
                     (C30416 * C2227 - C4559 * C2224) * C13133 +
                     (C30416 * C2233 - C4559 * C2230) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C1664 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C30791 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C1664 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C1665 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    ((C6562 - C6563) * C13132 + (C6564 - C6565) * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C30757) *
                      C30779 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C1664 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C1665 +
                   ((C5532 * C13132 + C5533 * C13128 +
                     (C5529 - C5528) * C13133 + (C5531 - C5530) * C13129) *
                        C18742 +
                    ((C6567 - C6566) * C13132 + (C6569 - C6568) * C13128 +
                     (C30416 * C6558 - C4559 * C6557) * C13133 +
                     (C30416 * C6560 - C4559 * C6559) * C13129) *
                        C18743) *
                       C30757) *
                      C30754) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[40] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30447 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30456 +
                  (((((C30416 * C126 - C4559 * C119) * C13132 +
                      (C30416 * C140 - C4559 * C129) * C13128 +
                      (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                         C18742 +
                     ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                      C25031 * C13133 + C25032 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                      C25033 * C13133 + C25034 * C13129) *
                         C18742 +
                     ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                      (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                      (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                         C18742 +
                     (C25033 * C13132 + C25034 * C13128 +
                      (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                         C18743) *
                        C3094 +
                    ((C25031 * C13132 + C25032 * C13128 +
                      (C5197 - C5196) * C13133 + (C5199 - C5198) * C13129) *
                         C18742 +
                     ((C9489 - C9488) * C13132 + (C9491 - C9490) * C13128 +
                      (C30416 * C1173 - C4559 * C1158) * C13133 +
                      (C30416 * C1185 - C4559 * C1176) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30571 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30578 +
                    ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                      C25410 * C13129) *
                         C18742 +
                     ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                      C10804 * C13133 + C10805 * C13129) *
                         C18743) *
                        C3602) *
                       C30723 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30571 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30578 +
                    ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                      C25414 * C13129) *
                         C18742 +
                     (C26703 * C13132 + C26704 * C13128 +
                      (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                         C18743) *
                        C3602) *
                       C30533) *
                      C2440 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30571 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30578 +
                    ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                      C26442 * C13129) *
                         C18742 +
                     ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                      (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                         C18743) *
                        C3602) *
                       C30723 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30571 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30578 +
                    ((C10582 * C13132 + C10583 * C13128 +
                      (C6355 - C6354) * C13133 + (C6357 - C6356) * C13129) *
                         C18742 +
                     ((C10585 - C10584) * C13132 + (C10587 - C10586) * C13128 +
                      (C30416 * C6456 - C4559 * C6455) * C13133 +
                      (C30416 * C6458 - C4559 * C6457) * C13129) *
                         C18743) *
                        C3602) *
                       C30533) *
                      C30453)) /
                (p * q * std::sqrt(p + q));
    d2ee[42] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30791 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30779 +
                   (((C4710 * C13132 + C4711 * C13128 +
                      (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                         C18742 +
                     (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                      C5901 * C13129) *
                         C18743) *
                        C3094 +
                    ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                      C25872 * C13129) *
                         C18742 +
                     (C25413 * C13132 + C25414 * C13128 +
                      (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C2440 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30791 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30779 +
                   (((C4712 * C13132 + C4713 * C13128 +
                      (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                         C18742 +
                     (C25739 * C13132 + C25740 * C13128 +
                      (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                         C18743) *
                        C3094 +
                    ((C5792 * C13132 + C5793 * C13128 +
                      (C5795 - C5794) * C13133 + (C5797 - C5796) * C13129) *
                         C18742 +
                     ((C6355 - C6354) * C13132 + (C6357 - C6356) * C13128 +
                      (C30416 * C6346 - C4559 * C6345) * C13133 +
                      (C30416 * C6348 - C4559 * C6347) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C30453)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30797 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30790 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     C25033 * C13133 + C25034 * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30777 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C3094 +
                   (((C9335 - C9334) * C13132 + (C9337 - C9336) * C13128 +
                     (C24696 - C24695) * C13133 + (C24698 - C24697) * C13129) *
                        C18742 +
                    ((C9339 - C9338) * C13132 + (C9341 - C9340) * C13128 +
                     (C30416 * C2015 - C4559 * C2014) * C13133 +
                     (C30416 * C2017 - C4559 * C2016) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30758)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30799 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30796 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30787 +
                   ((C10414 * C13132 + C10415 * C13128 + C26703 * C13133 +
                     C26704 * C13129) *
                        C18742 +
                    ((C10417 - C10416) * C13132 + (C10419 - C10418) * C13128 +
                     (C10806 - C10807) * C13133 + (C10808 - C10809) * C13129) *
                        C18743) *
                       C30770) *
                      C30470 * C2440 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30799 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30796 +
                   ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                     C26442 * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30787 +
                   ((C10693 * C13132 + C10694 * C13128 +
                     (C10585 - C10584) * C13133 + (C10587 - C10586) * C13129) *
                        C18742 +
                    ((C10696 - C10695) * C13132 + (C10698 - C10697) * C13128 +
                     (C30416 * C10578 - C4559 * C10577) * C13133 +
                     (C30416 * C10580 - C4559 * C10579) * C13129) *
                        C18743) *
                       C30770) *
                      C30470 * C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30571 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30578 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C3602) *
                      C30470 * C30447 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30571 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30578 +
                   ((C9125 * C13132 + C9126 * C13128 + C26441 * C13133 +
                     C26442 * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C3602) *
                      C30470 * C30456 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30571 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     C25033 * C13133 + C25034 * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30578 +
                   ((C9127 * C13132 + C9128 * C13128 +
                     (C9489 - C9488) * C13133 + (C9491 - C9490) * C13129) *
                        C18742 +
                    ((C9120 - C9119) * C13132 + (C9122 - C9121) * C13128 +
                     (C30416 * C2227 - C4559 * C2224) * C13133 +
                     (C30416 * C2233 - C4559 * C2230) * C13129) *
                        C18743) *
                       C3602) *
                      C30470 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30797 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     C25029 * C13133 + C25030 * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30790 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C3094 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     C25033 * C13133 + C25034 * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30777 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C3094 +
                   (((C9335 - C9334) * C13132 + (C9337 - C9336) * C13128 +
                     (C24696 - C24695) * C13133 + (C24698 - C24697) * C13129) *
                        C18742 +
                    ((C9339 - C9338) * C13132 + (C9341 - C9340) * C13128 +
                     (C30416 * C2015 - C4559 * C2014) * C13133 +
                     (C30416 * C2017 - C4559 * C2016) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30758)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30791 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30779 +
                   (((C4710 * C13132 + C4711 * C13128 +
                      (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                         C18742 +
                     (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                      C5901 * C13129) *
                         C18743) *
                        C3094 +
                    ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                      C25872 * C13129) *
                         C18742 +
                     (C25413 * C13132 + C25414 * C13128 +
                      (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C2440 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C3094 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30791 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C3094 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     (C26441 * C13132 + C26442 * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30779 +
                   (((C4712 * C13132 + C4713 * C13128 +
                      (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                         C18742 +
                     (C25739 * C13132 + C25740 * C13128 +
                      (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                         C18743) *
                        C3094 +
                    ((C5792 * C13132 + C5793 * C13128 +
                      (C5795 - C5794) * C13133 + (C5797 - C5796) * C13129) *
                         C18742 +
                     ((C6355 - C6354) * C13132 + (C6357 - C6356) * C13128 +
                      (C30416 * C6346 - C4559 * C6345) * C13133 +
                      (C30416 * C6348 - C4559 * C6347) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    ((C5176 - C5177) * C13132 + (C5178 - C5179) * C13128 +
                     C5514 * C13133 + C5515 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C554 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    ((C5184 - C5185) * C13132 + (C5186 - C5187) * C13128 +
                     C5792 * C13133 + C5793 * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C555 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    ((C5192 - C5193) * C13132 + (C5194 - C5195) * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C556 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C30488 * C30723 +
                   (((C4925 - C4924) * C13132 + (C4927 - C4926) * C13128 +
                     (C4929 - C4928) * C13133 + (C4931 - C4930) * C13129) *
                        C18742 +
                    ((C24696 - C24695) * C13132 + (C24698 - C24697) * C13128 +
                     (C30416 * C1441 - C4559 * C1440) * C13133 +
                     (C30416 * C1443 - C4559 * C1442) * C13129) *
                        C18743) *
                       C30488 * C30533) *
                      C30758)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C1284 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C1285 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30488 * C1286 +
                   ((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    ((C5525 - C5524) * C13132 + (C5527 - C5526) * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C30709 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C1284 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C1285 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C1286 +
                   ((C5636 * C13132 + C5637 * C13128 +
                     (C5639 - C5638) * C13133 + (C5641 - C5640) * C13129) *
                        C18742 +
                    ((C5795 - C5794) * C13132 + (C5797 - C5796) * C13128 +
                     (C30416 * C5788 - C4559 * C5787) * C13133 +
                     (C30416 * C5790 - C4559 * C5789) * C13129) *
                        C18743) *
                       C30488 * C30764) *
                      C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25023 * C13132 + C25024 * C13128 +
                      (C5181 - C5180) * C13133 + (C5183 - C5182) * C13129) *
                         C18742 +
                     ((C5516 - C5517) * C13132 + (C5518 - C5519) * C13128 +
                      C5532 * C13133 + C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C258 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25027 * C13132 + C25028 * C13128 +
                      (C5189 - C5188) * C13133 + (C5191 - C5190) * C13129) *
                         C18742 +
                     ((C6350 - C6351) * C13132 + (C6352 - C6353) * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C259 +
                  (((((C30416 * C126 - C4559 * C119) * C13132 +
                      (C30416 * C140 - C4559 * C129) * C13128 +
                      (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                         C18742 +
                     ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                      C25031 * C13133 + C25032 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                      C25033 * C13133 + C25034 * C13129) *
                         C18742 +
                     ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                      (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                         C18743) *
                        C30575) *
                       C30723 +
                   ((((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                      (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                         C18742 +
                     (C25033 * C13132 + C25034 * C13128 +
                      (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                         C18743) *
                        C30724 +
                    ((C25031 * C13132 + C25032 * C13128 +
                      (C5197 - C5196) * C13133 + (C5199 - C5198) * C13129) *
                         C18742 +
                     ((C9489 - C9488) * C13132 + (C9491 - C9490) * C13128 +
                      (C30416 * C1173 - C4559 * C1158) * C13133 +
                      (C30416 * C1185 - C4559 * C1176) * C13129) *
                         C18743) *
                        C30575) *
                       C30533) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30724 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C1284 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30724 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30575) *
                      C1285 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30724 +
                   ((C5514 * C13132 + C5515 * C13128 + C25871 * C13133 +
                     C25872 * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30575) *
                      C1286 +
                  (((C5380 * C13132 + C5381 * C13128 +
                     (C5383 - C5382) * C13133 + (C5385 - C5384) * C13129) *
                        C18742 +
                    (C25871 * C13132 + C25872 * C13128 +
                     (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                        C18743) *
                       C30724 +
                   ((C5900 * C13132 + C5901 * C13128 +
                     (C5903 - C5902) * C13133 + (C5905 - C5904) * C13129) *
                        C18742 +
                    ((C5529 - C5528) * C13132 + (C5531 - C5530) * C13128 +
                     (C30416 * C5508 - C4559 * C5503) * C13133 +
                     (C30416 * C5512 - C4559 * C5509) * C13129) *
                        C18743) *
                       C30575) *
                      C30764) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[47] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    ((C5176 - C5177) * C13132 + (C5178 - C5179) * C13128 +
                     C5514 * C13133 + C5515 * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C258 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    ((C5184 - C5185) * C13132 + (C5186 - C5187) * C13128 +
                     C5792 * C13133 + C5793 * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C259 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    ((C5192 - C5193) * C13132 + (C5194 - C5195) * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                       C18743) *
                      C30488 * C30470 * C108 +
                  (((C4559 * C118 - C30416 * C125) * C13132 +
                    (C4559 * C128 - C30416 * C139) * C13128 +
                    (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                       C18742 +
                   ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                    (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                       C18743) *
                      C30488 * C30470 * C109 +
                  (((C30416 * C126 - C4559 * C119) * C13132 +
                    (C30416 * C140 - C4559 * C129) * C13128 +
                    (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                       C18742 +
                   ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                    (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                       C18743) *
                      C30488 * C30470 * C110 +
                  (((C4559 * C120 - C30416 * C130) * C13132 +
                    (C4559 * C131 - C30416 * C141) * C13128 +
                    (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                       C18742 +
                   ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                    (C4559 * C815 - C30416 * C823) * C13133 +
                    (C4559 * C824 - C30416 * C830) * C13129) *
                       C18743) *
                      C30488 * C30470 * C111 +
                  (((C30416 * C132 - C4559 * C121) * C13132 +
                    (C30416 * C142 - C4559 * C133) * C13128 +
                    (C30416 * C287 - C4559 * C269) * C13133 +
                    (C30416 * C299 - C4559 * C288) * C13129) *
                       C18742 +
                   ((C30416 * C440 - C4559 * C422) * C13132 +
                    (C30416 * C452 - C4559 * C441) * C13128 +
                    (C30416 * C825 - C4559 * C816) * C13133 +
                    (C30416 * C831 - C4559 * C826) * C13129) *
                       C18743) *
                      C30488 * C30470 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30792 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     (C5176 - C5177) * C13133 + (C5178 - C5179) * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9123 * C13132 + C9124 * C13128 +
                     (C5516 - C5517) * C13133 + (C5518 - C5519) * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C258 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30792 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     (C5184 - C5185) * C13133 + (C5186 - C5187) * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9125 * C13132 + C9126 * C13128 +
                     (C6350 - C6351) * C13133 + (C6352 - C6353) * C13129) *
                        C18742 +
                    ((C9108 - C9107) * C13132 + (C9110 - C9109) * C13128 +
                     (C10584 - C10585) * C13133 + (C10586 - C10587) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C259 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30792 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     (C5192 - C5193) * C13133 + (C5194 - C5195) * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30781 +
                   ((C9127 * C13132 + C9128 * C13128 +
                     (C9489 - C9488) * C13133 + (C9491 - C9490) * C13129) *
                        C18742 +
                    ((C9120 - C9119) * C13132 + (C9122 - C9121) * C13128 +
                     (C30416 * C2227 - C4559 * C2224) * C13133 +
                     (C30416 * C2233 - C4559 * C2230) * C13129) *
                        C18743) *
                       C30757) *
                      C30470 * C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30788 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30775 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C25023 * C13133 + C25024 * C13129) *
                       C18743) *
                      C30488 * C1010 +
                  (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                    (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                       C18742 +
                   (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                    C5515 * C13129) *
                       C18743) *
                      C30488 * C1011 +
                  ((C4710 * C13132 + C4711 * C13128 + (C4683 - C4682) * C13133 +
                    (C4685 - C4684) * C13129) *
                       C18742 +
                   ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                    C5900 * C13133 + C5901 * C13129) *
                       C18743) *
                      C30488 * C1012 +
                  ((C5380 * C13132 + C5381 * C13128 + (C5383 - C5382) * C13133 +
                    (C5385 - C5384) * C13129) *
                       C18742 +
                   ((C5525 - C5524) * C13132 + (C5527 - C5526) * C13128 +
                    (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                       C18743) *
                      C30488 * C1013 +
                  ((C5390 * C13132 + C5391 * C13128 + (C5387 - C5386) * C13133 +
                    (C5389 - C5388) * C13129) *
                       C18742 +
                   ((C5903 - C5902) * C13132 + (C5905 - C5904) * C13128 +
                    (C30416 * C5896 - C4559 * C5895) * C13133 +
                    (C30416 * C5898 - C4559 * C5897) * C13129) *
                       C18743) *
                      C30488 * C1014) *
                 C30442) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30792 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     C25025 * C13133 + C25026 * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9123 * C13132 + C9124 * C13128 + C25409 * C13133 +
                     C25410 * C13129) *
                        C18742 +
                    ((C9096 - C9095) * C13132 + (C9098 - C9097) * C13128 +
                     C10804 * C13133 + C10805 * C13129) *
                        C18743) *
                       C30757) *
                      C942 +
                  ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30792 +
                   ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                     C25412 * C13129) *
                        C18742 +
                    (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                     C5533 * C13129) *
                        C18743) *
                       C30781 +
                   ((C9774 * C13132 + C9775 * C13128 + C25413 * C13133 +
                     C25414 * C13129) *
                        C18742 +
                    ((C6562 - C6563) * C13132 + (C6564 - C6565) * C13128 +
                     (C6566 - C6567) * C13133 + (C6568 - C6569) * C13129) *
                        C18743) *
                       C30757) *
                      C943 +
                  (((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                     C5901 * C13129) *
                        C18743) *
                       C30792 +
                   ((C5514 * C13132 + C5515 * C13128 +
                     (C5525 - C5524) * C13133 + (C5527 - C5526) * C13129) *
                        C18742 +
                    (C25413 * C13132 + C25414 * C13128 +
                     (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                        C18743) *
                       C30781 +
                   ((C5532 * C13132 + C5533 * C13128 +
                     (C5529 - C5528) * C13133 + (C5531 - C5530) * C13129) *
                        C18742 +
                    ((C6567 - C6566) * C13132 + (C6569 - C6568) * C13128 +
                     (C30416 * C6558 - C4559 * C6557) * C13133 +
                     (C30416 * C6560 - C4559 * C6559) * C13129) *
                        C18743) *
                       C30757) *
                      C30754) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                     (C5176 - C5177) * C13133 + (C5178 - C5179) * C13129) *
                        C18742 +
                    ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                     C9774 * C13133 + C9775 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C554 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                     (C5184 - C5185) * C13133 + (C5186 - C5187) * C13129) *
                        C18742 +
                    ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                     C10582 * C13133 + C10583 * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C555 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9112 - C9111) * C13132 + (C9114 - C9113) * C13128 +
                     (C5192 - C5193) * C13133 + (C5194 - C5195) * C13129) *
                        C18742 +
                    ((C9116 - C9115) * C13132 + (C9118 - C9117) * C13128 +
                     (C9488 - C9489) * C13133 + (C9490 - C9491) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C556 +
                  ((((C4559 * C120 - C30416 * C130) * C13132 +
                     (C4559 * C131 - C30416 * C141) * C13128 +
                     (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                        C18742 +
                    ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                     (C24695 - C24696) * C13133 + (C24697 - C24698) * C13129) *
                        C18743) *
                       C30724 +
                   (((C9335 - C9334) * C13132 + (C9337 - C9336) * C13128 +
                     (C24696 - C24695) * C13133 + (C24698 - C24697) * C13129) *
                        C18742 +
                    ((C9339 - C9338) * C13132 + (C9341 - C9340) * C13128 +
                     (C30416 * C2015 - C4559 * C2014) * C13133 +
                     (C30416 * C2017 - C4559 * C2016) * C13129) *
                        C18743) *
                       C30575) *
                      C30470 * C30758)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30416 * C124 - C4559 * C117) * C13132 +
                      (C30416 * C138 - C4559 * C127) * C13128 +
                      (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                         C18742 +
                     ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                      C25023 * C13133 + C25024 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9088 - C9087) * C13132 + (C9090 - C9089) * C13128 +
                      C25025 * C13133 + C25026 * C13129) *
                         C18742 +
                     ((C9092 - C9091) * C13132 + (C9094 - C9093) * C13128 +
                      C9774 * C13133 + C9775 * C13129) *
                         C18743) *
                        C30575) *
                       C942 +
                   ((((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                      (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                         C18742 +
                     (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                      C5515 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25023 * C13132 + C25024 * C13128 + C25411 * C13133 +
                      C25412 * C13129) *
                         C18742 +
                     (C25409 * C13132 + C25410 * C13128 + C5532 * C13133 +
                      C5533 * C13129) *
                         C18743) *
                        C30575) *
                       C943 +
                   (((C4710 * C13132 + C4711 * C13128 +
                      (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                         C18742 +
                     (C25411 * C13132 + C25412 * C13128 + C5900 * C13133 +
                      C5901 * C13129) *
                         C18743) *
                        C30724 +
                    ((C5514 * C13132 + C5515 * C13128 +
                      (C5525 - C5524) * C13133 + (C5527 - C5526) * C13129) *
                         C18742 +
                     (C25413 * C13132 + C25414 * C13128 +
                      (C5528 - C5529) * C13133 + (C5530 - C5531) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C30709 +
                  (((((C4559 * C118 - C30416 * C125) * C13132 +
                      (C4559 * C128 - C30416 * C139) * C13128 +
                      (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                         C18742 +
                     ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                      C25027 * C13133 + C25028 * C13129) *
                         C18743) *
                        C30724 +
                    (((C9100 - C9099) * C13132 + (C9102 - C9101) * C13128 +
                      C25029 * C13133 + C25030 * C13129) *
                         C18742 +
                     ((C9104 - C9103) * C13132 + (C9106 - C9105) * C13128 +
                      C10582 * C13133 + C10583 * C13129) *
                         C18743) *
                        C30575) *
                       C942 +
                   ((((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                      (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                         C18742 +
                     (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                      C5793 * C13129) *
                         C18743) *
                        C30724 +
                    ((C25027 * C13132 + C25028 * C13128 + C25739 * C13133 +
                      C25740 * C13129) *
                         C18742 +
                     ((C6350 - C6351) * C13132 + (C6352 - C6353) * C13128 +
                      (C6354 - C6355) * C13133 + (C6356 - C6357) * C13129) *
                         C18743) *
                        C30575) *
                       C943 +
                   (((C4712 * C13132 + C4713 * C13128 +
                      (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                         C18742 +
                     (C25739 * C13132 + C25740 * C13128 +
                      (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                         C18743) *
                        C30724 +
                    ((C5792 * C13132 + C5793 * C13128 +
                      (C5795 - C5794) * C13133 + (C5797 - C5796) * C13129) *
                         C18742 +
                     ((C6355 - C6354) * C13132 + (C6357 - C6356) * C13128 +
                      (C30416 * C6346 - C4559 * C6345) * C13133 +
                      (C30416 * C6348 - C4559 * C6347) * C13129) *
                         C18743) *
                        C30575) *
                       C30754) *
                      C30453)) /
                    (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                       C18743) *
                      C30488 * C30470 * C108 +
                  (((C4559 * C118 - C30416 * C125) * C13132 +
                    (C4559 * C128 - C30416 * C139) * C13128 +
                    (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                       C18742 +
                   ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                    (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                       C18743) *
                      C30488 * C30470 * C109 +
                  (((C30416 * C126 - C4559 * C119) * C13132 +
                    (C30416 * C140 - C4559 * C129) * C13128 +
                    (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                       C18742 +
                   ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                    (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                       C18743) *
                      C30488 * C30470 * C110 +
                  (((C4559 * C120 - C30416 * C130) * C13132 +
                    (C4559 * C131 - C30416 * C141) * C13128 +
                    (C4924 - C4925) * C13133 + (C4926 - C4927) * C13129) *
                       C18742 +
                   ((C9334 - C9335) * C13132 + (C9336 - C9337) * C13128 +
                    (C4559 * C815 - C30416 * C823) * C13133 +
                    (C4559 * C824 - C30416 * C830) * C13129) *
                       C18743) *
                      C30488 * C30470 * C111 +
                  (((C30416 * C132 - C4559 * C121) * C13132 +
                    (C30416 * C142 - C4559 * C133) * C13128 +
                    (C30416 * C287 - C4559 * C269) * C13133 +
                    (C30416 * C299 - C4559 * C288) * C13129) *
                       C18742 +
                   ((C30416 * C440 - C4559 * C422) * C13132 +
                    (C30416 * C452 - C4559 * C441) * C13128 +
                    (C30416 * C825 - C4559 * C816) * C13133 +
                    (C30416 * C831 - C4559 * C826) * C13129) *
                       C18743) *
                      C30488 * C30470 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     (C5177 - C5176) * C13133 + (C5179 - C5178) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    ((C5176 - C5177) * C13132 + (C5178 - C5179) * C13128 +
                     C5514 * C13133 + C5515 * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C258 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     (C5185 - C5184) * C13133 + (C5187 - C5186) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    ((C5184 - C5185) * C13132 + (C5186 - C5187) * C13128 +
                     C5792 * C13133 + C5793 * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C259 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     (C5193 - C5192) * C13133 + (C5195 - C5194) * C13129) *
                        C18743) *
                       C30488 * C30791 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    ((C5192 - C5193) * C13132 + (C5194 - C5195) * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C30779 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30416 * C124 - C4559 * C117) * C13132 +
                     (C30416 * C138 - C4559 * C127) * C13128 +
                     (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                        C18742 +
                    ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                     C25023 * C13133 + C25024 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                     (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                        C18742 +
                    (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                     C5515 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4710 * C13132 + C4711 * C13128 +
                     (C4683 - C4682) * C13133 + (C4685 - C4684) * C13129) *
                        C18742 +
                    ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                     C5900 * C13133 + C5901 * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30788 +
                  ((((C4559 * C118 - C30416 * C125) * C13132 +
                     (C4559 * C128 - C30416 * C139) * C13128 +
                     (C4686 - C4687) * C13133 + (C4688 - C4689) * C13129) *
                        C18742 +
                    ((C9099 - C9100) * C13132 + (C9101 - C9102) * C13128 +
                     C25027 * C13133 + C25028 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4687 - C4686) * C13132 + (C4689 - C4688) * C13128 +
                     (C4691 - C4690) * C13133 + (C4693 - C4692) * C13129) *
                        C18742 +
                    (C25029 * C13132 + C25030 * C13128 + C5792 * C13133 +
                     C5793 * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4712 * C13132 + C4713 * C13128 +
                     (C4695 - C4694) * C13133 + (C4697 - C4696) * C13129) *
                        C18742 +
                    ((C5189 - C5188) * C13132 + (C5191 - C5190) * C13128 +
                     (C5794 - C5795) * C13133 + (C5796 - C5797) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30775 +
                  ((((C30416 * C126 - C4559 * C119) * C13132 +
                     (C30416 * C140 - C4559 * C129) * C13128 +
                     (C4698 - C4699) * C13133 + (C4700 - C4701) * C13129) *
                        C18742 +
                    ((C9111 - C9112) * C13132 + (C9113 - C9114) * C13128 +
                     C25031 * C13133 + C25032 * C13129) *
                        C18743) *
                       C30488 * C942 +
                   (((C4699 - C4698) * C13132 + (C4701 - C4700) * C13128 +
                     (C4703 - C4702) * C13133 + (C4705 - C4704) * C13129) *
                        C18742 +
                    (C25033 * C13132 + C25034 * C13128 +
                     (C5196 - C5197) * C13133 + (C5198 - C5199) * C13129) *
                        C18743) *
                       C30488 * C943 +
                   ((C4714 * C13132 + C4715 * C13128 +
                     (C4707 - C4706) * C13133 + (C4709 - C4708) * C13129) *
                        C18742 +
                    ((C5197 - C5196) * C13132 + (C5199 - C5198) * C13128 +
                     (C30416 * C1547 - C4559 * C1544) * C13133 +
                     (C30416 * C1553 - C4559 * C1550) * C13129) *
                        C18743) *
                       C30488 * C30754) *
                      C30748)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30416 * C124 - C4559 * C117) * C13132 +
                    (C30416 * C138 - C4559 * C127) * C13128 +
                    (C4674 - C4675) * C13133 + (C4676 - C4677) * C13129) *
                       C18742 +
                   ((C9087 - C9088) * C13132 + (C9089 - C9090) * C13128 +
                    C25023 * C13133 + C25024 * C13129) *
                       C18743) *
                      C30488 * C1010 +
                  (((C4675 - C4674) * C13132 + (C4677 - C4676) * C13128 +
                    (C4679 - C4678) * C13133 + (C4681 - C4680) * C13129) *
                       C18742 +
                   (C25025 * C13132 + C25026 * C13128 + C5514 * C13133 +
                    C5515 * C13129) *
                       C18743) *
                      C30488 * C1011 +
                  ((C4710 * C13132 + C4711 * C13128 + (C4683 - C4682) * C13133 +
                    (C4685 - C4684) * C13129) *
                       C18742 +
                   ((C5181 - C5180) * C13132 + (C5183 - C5182) * C13128 +
                    C5900 * C13133 + C5901 * C13129) *
                       C18743) *
                      C30488 * C1012 +
                  ((C5380 * C13132 + C5381 * C13128 + (C5383 - C5382) * C13133 +
                    (C5385 - C5384) * C13129) *
                       C18742 +
                   ((C5525 - C5524) * C13132 + (C5527 - C5526) * C13128 +
                    (C5902 - C5903) * C13133 + (C5904 - C5905) * C13129) *
                       C18743) *
                      C30488 * C1013 +
                  ((C5390 * C13132 + C5391 * C13128 + (C5387 - C5386) * C13133 +
                    (C5389 - C5388) * C13129) *
                       C18742 +
                   ((C5903 - C5902) * C13132 + (C5905 - C5904) * C13128 +
                    (C30416 * C5896 - C4559 * C5895) * C13133 +
                    (C30416 * C5898 - C4559 * C5897) * C13129) *
                       C18743) *
                      C30488 * C1014) *
                 C30442) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30529 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30536 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C2700) *
              C30447 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30529 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30536 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C2700) *
              C30456 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30529 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30536 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30529 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30536 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C2700) *
              C30447 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30529 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30536 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C2700) *
              C30456 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30529 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30536 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C30529 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C30536 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30488 * C2700) *
              C30447 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C30529 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            C10590 * C8865) *
               C30488 * C30536 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C2700) *
              C30456 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C30529 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C30536 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C30724 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C2700) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C30724 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30724 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C30529 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30724 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30536 +
           (((C4710 * C116 + C4711 * C30655) * C8863 +
             ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
             C9780 * C8865) *
                C30724 +
            ((C5514 * C116 + C5515 * C30655) * C8863 +
             ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
             ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
                C30575) *
               C2700) *
              C2440 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30724 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C30529 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C30724 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30536 +
           (((C4712 * C116 + C4713 * C30655) * C8863 +
             ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
             ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
                C30724 +
            ((C5792 * C116 + C5793 * C30655) * C8863 +
             ((C6355 - C6354) * C116 + (C6357 - C6356) * C30655) * C8864 +
             ((C30416 * C6456 - C4559 * C6455) * C116 +
              (C30416 * C6458 - C4559 * C6457) * C30655) *
                 C8865) *
                C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C2332 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C30797 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C2332 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C30790 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30488 * C2332 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C30777 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30655) *
                   C30667 * C30488 * C2332 +
               ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                 C103 * C559 - C115 * C558) *
                    C116 +
                (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                 C103 * C561 - C115 * C560) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C30758) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C30798 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C30794 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30488 * C30784 +
               ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30655) *
                   C30667 * C30488 * C30764) *
                  C2440 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C30798 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C30794 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30655) *
                   C30667 * C30488 * C30784 +
               ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                 C103 * C1291 - C115 * C1290) *
                    C116 +
                (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                 C103 * C1293 - C115 * C1292) *
                    C30655) *
                   C30667 * C30488 * C30764) *
                  C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30792 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30781 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C30757) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30792 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30781 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30792 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30781 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C30757) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30792 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30781 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C2332 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30794 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C30784 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30794 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C30784 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30792 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30781 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C30757) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30792 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30781 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C30757) *
               C30533) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30792 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30781 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C30757) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30792 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30781 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C2332 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C30533) *
              C30797 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C2332 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            C10590 * C8865) *
               C30488 * C30533) *
              C30790 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C2332 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C30533) *
              C30777 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C9334 - C9335) * C116 + (C9336 - C9337) * C30655) * C8864 +
            ((C9338 - C9339) * C116 + (C9340 - C9341) * C30655) * C8865) *
               C30488 * C2332 +
           (((C4925 - C4924) * C116 + (C4927 - C4926) * C30655) * C8863 +
            ((C30416 * C823 - C4559 * C815) * C116 +
             (C30416 * C830 - C4559 * C824) * C30655) *
                C8864 +
            ((C30416 * C2015 - C4559 * C2014) * C116 +
             (C30416 * C2017 - C4559 * C2016) * C30655) *
                C8865) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C30798 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C30794 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30488 * C30784 +
           ((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C30488 * C30764) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C30798 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            C10590 * C8865) *
               C30488 * C30794 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30784 +
           ((C5636 * C116 + C5637 * C30655) * C8863 +
            ((C5795 - C5794) * C116 + (C5797 - C5796) * C30655) * C8864 +
            ((C30416 * C6346 - C4559 * C6345) * C116 +
             (C30416 * C6348 - C4559 * C6347) * C30655) *
                C8865) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30792 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30781 +
            (C9135 * C8863 +
             ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
             C10431 * C8865) *
                C30757) *
               C2332 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30792 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30781 +
            (C9781 * C8863 +
             ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
             ((C10806 - C10807) * C116 + (C10808 - C10809) * C30655) * C8865) *
                C30757) *
               C30533) *
              C2440 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30792 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30781 +
            (C9136 * C8863 +
             ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
             ((C10695 - C10696) * C116 + (C10697 - C10698) * C30655) * C8865) *
                C30757) *
               C2332 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C30792 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30781 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C116 + (C10587 - C10586) * C30655) * C8864 +
             ((C30416 * C10578 - C4559 * C10577) * C116 +
              (C30416 * C10580 - C4559 * C10579) * C30655) *
                 C8865) *
                C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C30724 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C30724 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30724 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C2332 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30724 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30533) *
              C30447 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30724 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C2332 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C30724 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30533) *
              C30456 +
          (((((C30416 * C126 - C4559 * C119) * C116 +
              (C30416 * C140 - C4559 * C129) * C30655) *
                 C8863 +
             ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
             C9137 * C8865) *
                C30724 +
            (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
             ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
             ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
                C30575) *
               C2332 +
           ((((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
             ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
             ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
                C30724 +
            (((C5193 - C5192) * C116 + (C5195 - C5194) * C30655) * C8863 +
             ((C9489 - C9488) * C116 + (C9491 - C9490) * C30655) * C8864 +
             ((C30416 * C2227 - C4559 * C2224) * C116 +
              (C30416 * C2233 - C4559 * C2230) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30798 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30794 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30784 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30798 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30794 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30784 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C2332 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30794 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C30784 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30794 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C30784 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C2332 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C30533) *
              C30797 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C2332 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            C10590 * C8865) *
               C30488 * C30533) *
              C30790 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C2332 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C30533) *
              C30777 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C9334 - C9335) * C116 + (C9336 - C9337) * C30655) * C8864 +
            ((C9338 - C9339) * C116 + (C9340 - C9341) * C30655) * C8865) *
               C30488 * C2332 +
           (((C4925 - C4924) * C116 + (C4927 - C4926) * C30655) * C8863 +
            ((C30416 * C823 - C4559 * C815) * C116 +
             (C30416 * C830 - C4559 * C824) * C30655) *
                C8864 +
            ((C30416 * C2015 - C4559 * C2014) * C116 +
             (C30416 * C2017 - C4559 * C2016) * C30655) *
                C8865) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C30798 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C30794 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30488 * C30784 +
           ((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C30488 * C30764) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C30798 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            C10590 * C8865) *
               C30488 * C30794 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30784 +
           ((C5636 * C116 + C5637 * C30655) * C8863 +
            ((C5795 - C5794) * C116 + (C5797 - C5796) * C30655) * C8864 +
            ((C30416 * C6346 - C4559 * C6345) * C116 +
             (C30416 * C6348 - C4559 * C6347) * C30655) *
                C8865) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C3094 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C2700) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C3094 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C3094 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C30529 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C3094 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30536 +
           (((C4710 * C116 + C4711 * C30655) * C8863 +
             ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
             C9780 * C8865) *
                C3094 +
            ((C5514 * C116 + C5515 * C30655) * C8863 +
             ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
             ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
                C30575) *
               C2700) *
              C30709 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C3094 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C30529 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C3094 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30536 +
           (((C4712 * C116 + C4713 * C30655) * C8863 +
             ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
             ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
                C3094 +
            ((C5792 * C116 + C5793 * C30655) * C8863 +
             ((C6355 - C6354) * C116 + (C6357 - C6356) * C30655) * C8864 +
             ((C30416 * C6456 - C4559 * C6455) * C116 +
              (C30416 * C6458 - C4559 * C6457) * C30655) *
                 C8865) *
                C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30571 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30578 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C3602) *
              C30529 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30571 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30578 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C3602) *
              C30536 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30571 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30578 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C3602) *
              C2700) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C3602) *
              C30529 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30571 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30578 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C3602) *
              C30536 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C3602) *
              C2700) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30571 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30578 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            C10431 * C8865) *
               C3602) *
              C30529 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30571 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            C10812 * C8865) *
               C30578 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C10806 - C10807) * C116 + (C10808 - C10809) * C30655) * C8865) *
               C3602) *
              C30536 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30571 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30578 +
           (C9780 * C8863 +
            ((C6567 - C6566) * C116 + (C6569 - C6568) * C30655) * C8864 +
            ((C30416 * C6194 - C4559 * C6189) * C116 +
             (C30416 * C6198 - C4559 * C6195) * C30655) *
                C8865) *
               C3602) *
              C2700) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30655) *
                    C30667 * C3094 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30655) *
                    C30667 * C30575) *
                   C2332 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30655) *
                    C30667 * C3094 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30655) *
                    C30667 * C30575) *
                   C30533) *
                  C30788 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30655) *
                    C30667 * C3094 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30655) *
                    C30667 * C30575) *
                   C2332 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30655) *
                    C30667 * C3094 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30655) *
                    C30667 * C30575) *
                   C30533) *
                  C30775 +
              ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                  C103 * C132 - C115 * C121) *
                     C116 +
                 (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                  C103 * C142 - C115 * C133) *
                     C30655) *
                    C30667 * C3094 +
                ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                  C115 * C422 - C103 * C440) *
                     C116 +
                 (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                  C115 * C441 - C103 * C452) *
                     C30655) *
                    C30667 * C30575) *
                   C2332 +
               (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                  C115 * C269 - C103 * C287) *
                     C116 +
                 (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                  C115 * C288 - C103 * C299) *
                     C30655) *
                    C30667 * C3094 +
                ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                  C103 * C825 - C115 * C816) *
                     C116 +
                 (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                  C103 * C831 - C115 * C826) *
                     C30655) *
                    C30667 * C30575) *
                   C30533) *
                  C30748) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C3094 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C30575) *
                  C30798 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C3094 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30655) *
                   C30667 * C30575) *
                  C30794 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C3094 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30655) *
                   C30667 * C30575) *
                  C30784 +
              (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30655) *
                   C30667 * C3094 +
               ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                 C103 * C1547 - C115 * C1544) *
                    C116 +
                (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                 C103 * C1553 - C115 * C1550) *
                    C30655) *
                   C30667 * C30575) *
                  C30764) *
             C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30799 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30796 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30787 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C2332 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30799 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30796 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30787 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30655) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C3094 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C3094 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30798 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C3094 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C30794 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C3094 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C30784 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C3094 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30799 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30796 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30787 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 + (C6562 - C6563) * C4561 +
            (C6564 - C6565) * C4557 + (C6566 - C6567) * C4562 +
            (C6568 - C6569) * C4558) *
               C30667 * C30770) *
              C2332 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30799 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30796 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30787 +
           ((C6563 - C6562) * C4560 + (C6565 - C6564) * C4556 +
            (C6567 - C6566) * C4561 + (C6569 - C6568) * C4557 +
            (C30416 * C6558 - C4559 * C6557) * C4562 +
            (C30416 * C6560 - C4559 * C6559) * C4558) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C3094 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C2332 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C3094 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30533) *
              C30788 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C3094 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C2332 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C3094 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30533) *
              C30775 +
          (((((C30416 * C126 - C4559 * C119) * C116 +
              (C30416 * C140 - C4559 * C129) * C30655) *
                 C8863 +
             ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
             C9137 * C8865) *
                C3094 +
            (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
             ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
             ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
                C30575) *
               C2332 +
           ((((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
             ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
             ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
                C3094 +
            (((C5193 - C5192) * C116 + (C5195 - C5194) * C30655) * C8863 +
             ((C9489 - C9488) * C116 + (C9491 - C9490) * C30655) * C8864 +
             ((C30416 * C2227 - C4559 * C2224) * C116 +
              (C30416 * C2233 - C4559 * C2230) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C3094 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30575) *
              C30798 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C3094 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            C10812 * C8865) *
               C30575) *
              C30794 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C3094 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30575) *
              C30784 +
          (((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C3094 +
           ((C5900 * C116 + C5901 * C30655) * C8863 +
            ((C5529 - C5528) * C116 + (C5531 - C5530) * C30655) * C8864 +
            ((C30416 * C6558 - C4559 * C6557) * C116 +
             (C30416 * C6560 - C4559 * C6559) * C30655) *
                C8865) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30799 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30796 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            C10431 * C8865) *
               C30787 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C116 + (C10419 - C10418) * C30655) * C8864 +
            ((C10420 - C10421) * C116 + (C10422 - C10423) * C30655) * C8865) *
               C30770) *
              C2332 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30799 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            C10812 * C8865) *
               C30796 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C10806 - C10807) * C116 + (C10808 - C10809) * C30655) * C8865) *
               C30787 +
           (C10812 * C8863 +
            ((C10807 - C10806) * C116 + (C10809 - C10808) * C30655) * C8864 +
            ((C30416 * C10800 - C4559 * C10799) * C116 +
             (C30416 * C10802 - C4559 * C10801) * C30655) *
                C8865) *
               C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30571 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30578 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C3602) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30571 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30578 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C3602) *
               C30533) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30571 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30578 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C3602) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30571 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30578 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C3602) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C3602) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30571 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30578 +
            (C9135 * C8863 +
             ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
             C10431 * C8865) *
                C3602) *
               C2332 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30571 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30578 +
            (C9781 * C8863 +
             ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
             ((C10806 - C10807) * C116 + (C10808 - C10809) * C30655) * C8865) *
                C3602) *
               C30533) *
              C30709 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30571 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30578 +
            (C9136 * C8863 +
             ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
             ((C10695 - C10696) * C116 + (C10697 - C10698) * C30655) * C8865) *
                C3602) *
               C2332 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C30571 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30578 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C116 + (C10587 - C10586) * C30655) * C8864 +
             ((C30416 * C10578 - C4559 * C10577) * C116 +
              (C30416 * C10580 - C4559 * C10579) * C30655) *
                 C8865) *
                C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30798 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30575) *
              C30794 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30575) *
              C30784 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30655) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C3094 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C3094 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30798 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C3094 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C30794 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C3094 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C30784 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C3094 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C3094 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C2332 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C3094 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30533) *
              C30788 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C3094 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C2332 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C3094 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30533) *
              C30775 +
          (((((C30416 * C126 - C4559 * C119) * C116 +
              (C30416 * C140 - C4559 * C129) * C30655) *
                 C8863 +
             ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
             C9137 * C8865) *
                C3094 +
            (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
             ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
             ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
                C30575) *
               C2332 +
           ((((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
             ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
             ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
                C3094 +
            (((C5193 - C5192) * C116 + (C5195 - C5194) * C30655) * C8863 +
             ((C9489 - C9488) * C116 + (C9491 - C9490) * C30655) * C8864 +
             ((C30416 * C2227 - C4559 * C2224) * C116 +
              (C30416 * C2233 - C4559 * C2230) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C3094 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30575) *
              C30798 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C3094 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            C10812 * C8865) *
               C30575) *
              C30794 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C3094 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30575) *
              C30784 +
          (((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C3094 +
           ((C5900 * C116 + C5901 * C30655) * C8863 +
            ((C5529 - C5528) * C116 + (C5531 - C5530) * C30655) * C8864 +
            ((C30416 * C6558 - C4559 * C6557) * C116 +
             (C30416 * C6560 - C4559 * C6559) * C30655) *
                C8865) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C30723 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C554 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C30723 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C555 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30488 * C30723 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C556 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30655) *
                   C30667 * C30488 * C30723 +
               ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                 C103 * C559 - C115 * C558) *
                    C116 +
                (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                 C103 * C561 - C115 * C560) *
                    C30655) *
                   C30667 * C30488 * C30533) *
                  C30758) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C1284 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C1285 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30488 * C1286 +
               ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30655) *
                   C30667 * C30488 * C30764) *
                  C30709 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C1284 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C1285 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30655) *
                   C30667 * C30488 * C1286 +
               ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                 C103 * C1291 - C115 * C1290) *
                    C116 +
                (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                 C103 * C1293 - C115 * C1292) *
                    C30655) *
                   C30667 * C30488 * C30764) *
                  C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C1664 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C1665 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C30757) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C1664 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C1665 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C1664 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C1665 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C30757) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C1664 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C1665 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C30723 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C1285 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C1286 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C1285 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C1286 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C1664 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C1665 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C30757) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C1664 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C1665 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C30757) *
               C30533) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C1664 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C1665 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C30757) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C1664 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C1665 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C30723 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C30533) *
              C554 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C30723 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C30533) *
              C555 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C30723 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C4559 * C1152 - C30416 * C1161) * C116 +
             (C4559 * C1164 - C30416 * C1179) * C30655) *
                C8865) *
               C30488 * C30533) *
              C556 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C4559 * C420 - C30416 * C436) * C116 +
             (C4559 * C437 - C30416 * C450) * C30655) *
                C8864 +
            ((C4559 * C421 - C30416 * C438) * C116 +
             (C4559 * C439 - C30416 * C451) * C30655) *
                C8865) *
               C30488 * C30723 +
           (((C4925 - C4924) * C116 + (C4927 - C4926) * C30655) * C8863 +
            ((C30416 * C823 - C4559 * C815) * C116 +
             (C30416 * C830 - C4559 * C824) * C30655) *
                C8864 +
            ((C30416 * C2015 - C4559 * C2014) * C116 +
             (C30416 * C2017 - C4559 * C2016) * C30655) *
                C8865) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C1284 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C1285 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30488 * C1286 +
           ((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C30488 * C30764) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C1284 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C1285 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C1286 +
           ((C5636 * C116 + C5637 * C30655) * C8863 +
            ((C5795 - C5794) * C116 + (C5797 - C5796) * C30655) * C8864 +
            ((C30416 * C6346 - C4559 * C6345) * C116 +
             (C30416 * C6348 - C4559 * C6347) * C30655) *
                C8865) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C1664 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C1665 +
            (C9135 * C8863 +
             ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
             C10431 * C8865) *
                C30757) *
               C30723 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C1664 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
                C1665 +
            (C9781 * C8863 +
             ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
             ((C4559 * C6188 - C30416 * C6192) * C116 +
              (C4559 * C6193 - C30416 * C6197) * C30655) *
                 C8865) *
                C30757) *
               C30533) *
              C30709 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C1664 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
                C1665 +
            (C9136 * C8863 +
             ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
             ((C4559 * C1848 - C30416 * C1857) * C116 +
              (C4559 * C1860 - C30416 * C1866) * C30655) *
                 C8865) *
                C30757) *
               C30723 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C1664 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C1665 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C116 + (C10587 - C10586) * C30655) * C8864 +
             ((C30416 * C10578 - C4559 * C10577) * C116 +
              (C30416 * C10580 - C4559 * C10579) * C30655) *
                 C8865) *
                C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30655) *
                    C30667 * C30724 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30655) *
                    C30667 * C30575) *
                   C30723 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30655) *
                    C30667 * C30724 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30655) *
                    C30667 * C30575) *
                   C30533) *
                  C258 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30655) *
                    C30667 * C30724 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30655) *
                    C30667 * C30575) *
                   C30723 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30655) *
                    C30667 * C30724 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30655) *
                    C30667 * C30575) *
                   C30533) *
                  C259 +
              ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                  C103 * C132 - C115 * C121) *
                     C116 +
                 (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                  C103 * C142 - C115 * C133) *
                     C30655) *
                    C30667 * C30724 +
                ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                  C115 * C422 - C103 * C440) *
                     C116 +
                 (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                  C115 * C441 - C103 * C452) *
                     C30655) *
                    C30667 * C30575) *
                   C30723 +
               (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                  C115 * C269 - C103 * C287) *
                     C116 +
                 (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                  C115 * C288 - C103 * C299) *
                     C30655) *
                    C30667 * C30724 +
                ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                  C103 * C825 - C115 * C816) *
                     C116 +
                 (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                  C103 * C831 - C115 * C826) *
                     C30655) *
                    C30667 * C30575) *
                   C30533) *
                  C30748) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30724 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C30575) *
                  C1284 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30724 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30655) *
                   C30667 * C30575) *
                  C1285 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30724 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30655) *
                   C30667 * C30575) *
                  C1286 +
              (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30655) *
                   C30667 * C30724 +
               ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                 C103 * C1547 - C115 * C1544) *
                    C116 +
                (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                 C103 * C1553 - C115 * C1550) *
                    C30655) *
                   C30667 * C30575) *
                  C30764) *
             C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C30723 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C2116 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C2117 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C2118 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30655) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + (C5180 - C5181) * C4562 +
             (C5182 - C5183) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
             (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C30416 * C1545 - C4559 * C1542) * C4562 +
             (C30416 * C1551 - C4559 * C1548) * C4558) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + (C5188 - C5189) * C4562 +
             (C5190 - C5191) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
             (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C4559 * C1543 - C30416 * C1546) * C4562 +
             (C4559 * C1549 - C30416 * C1552) * C4558) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C30724 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C30724 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C1284 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30724 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C1285 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30724 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C1286 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30724 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C2116 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C2117 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C2118 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 + (C6562 - C6563) * C4561 +
            (C6564 - C6565) * C4557 + (C6566 - C6567) * C4562 +
            (C6568 - C6569) * C4558) *
               C30667 * C30770) *
              C30723 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C2116 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C2117 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C2118 +
           ((C6563 - C6562) * C4560 + (C6565 - C6564) * C4556 +
            (C6567 - C6566) * C4561 + (C6569 - C6568) * C4557 +
            (C30416 * C6558 - C4559 * C6557) * C4562 +
            (C30416 * C6560 - C4559 * C6559) * C4558) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30724 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
                C30724 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
                C30575) *
               C30533) *
              C258 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30724 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
                C30724 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C4559 * C2223 - C30416 * C2226) * C116 +
              (C4559 * C2229 - C30416 * C2232) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C259 +
          (((((C30416 * C126 - C4559 * C119) * C116 +
              (C30416 * C140 - C4559 * C129) * C30655) *
                 C8863 +
             ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
             C9137 * C8865) *
                C30724 +
            (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
             ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
             ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
             ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
             ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
                C30724 +
            (((C5193 - C5192) * C116 + (C5195 - C5194) * C30655) * C8863 +
             ((C9489 - C9488) * C116 + (C9491 - C9490) * C30655) * C8864 +
             ((C30416 * C2227 - C4559 * C2224) * C116 +
              (C30416 * C2233 - C4559 * C2230) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30724 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30575) *
              C1284 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30724 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
               C30575) *
              C1285 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30724 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30575) *
              C1286 +
          (((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C30724 +
           ((C5900 * C116 + C5901 * C30655) * C8863 +
            ((C5529 - C5528) * C116 + (C5531 - C5530) * C30655) * C8864 +
            ((C30416 * C6558 - C4559 * C6557) * C116 +
             (C30416 * C6560 - C4559 * C6559) * C30655) *
                C8865) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C2116 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C2117 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            C10431 * C8865) *
               C2118 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C116 + (C10419 - C10418) * C30655) * C8864 +
            ((C10420 - C10421) * C116 + (C10422 - C10423) * C30655) * C8865) *
               C30770) *
              C30723 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C2116 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            C10812 * C8865) *
               C2117 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C10806 - C10807) * C116 + (C10808 - C10809) * C30655) * C8865) *
               C2118 +
           (C10812 * C8863 +
            ((C10807 - C10806) * C116 + (C10809 - C10808) * C30655) * C8864 +
            ((C30416 * C10800 - C4559 * C10799) * C116 +
             (C30416 * C10802 - C4559 * C10801) * C30655) *
                C8865) *
               C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30655) *
                  C30667 * C30488 * C30470 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C30655) *
                  C30667 * C30488 * C30470 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C30655) *
                  C30667 * C30488 * C30470 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C30655) *
                  C30667 * C30488 * C30470 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C30655) *
                  C30667 * C30488 * C30470 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C30748) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30792 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C30781 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30655) *
                   C30667 * C30757) *
                  C30470 * C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30792 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30655) *
                   C30667 * C30781 +
               ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                 C115 * C421 - C103 * C438) *
                    C116 +
                (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                 C115 * C439 - C103 * C451) *
                    C30655) *
                   C30667 * C30757) *
                  C30470 * C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30792 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30655) *
                   C30667 * C30781 +
               ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                 C103 * C442 - C115 * C423) *
                    C116 +
                (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                 C103 * C453 - C115 * C443) *
                    C30655) *
                   C30667 * C30757) *
                  C30470 * C30748) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C942 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C943 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C30788 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C942 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C943 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C30775 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30488 * C942 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30655) *
                   C30667 * C30488 * C943 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C30748) -
         0.25 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30655) *
                  C30667 * C30488 * C1010 +
              ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                C115 * C263 - C103 * C273) *
                   C116 +
               (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                C115 * C276 - C103 * C293) *
                   C30655) *
                  C30667 * C30488 * C1011 +
              ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                C103 * C279 - C115 * C266) *
                   C116 +
               (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                C103 * C296 - C115 * C282) *
                   C30655) *
                  C30667 * C30488 * C1012 +
              ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                C115 * C1018 - C103 * C1024) *
                   C116 +
               (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                C115 * C1027 - C103 * C1036) *
                   C30655) *
                  C30667 * C30488 * C1013 +
              ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                C103 * C1030 - C115 * C1021) *
                   C116 +
               (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                C103 * C1039 - C115 * C1033) *
                   C30655) *
                  C30667 * C30488 * C1014) *
             C30442 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30792 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C30781 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30655) *
                   C30667 * C30757) *
                  C942 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30792 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30655) *
                   C30667 * C30781 +
               ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                 C115 * C1152 - C103 * C1161) *
                    C116 +
                (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                 C115 * C1164 - C103 * C1179) *
                    C30655) *
                   C30667 * C30757) *
                  C943 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30792 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30655) *
                   C30667 * C30781 +
               ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                 C103 * C1173 - C115 * C1158) *
                    C116 +
                (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                 C103 * C1185 - C115 * C1176) *
                    C30655) *
                   C30667 * C30757) *
                  C30754) *
             C30442 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C1664 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C1665 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30655) *
                   C30667 * C30757) *
                  C30470 * C30788 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C1664 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30655) *
                   C30667 * C1665 +
               ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                 C115 * C421 - C103 * C438) *
                    C116 +
                (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                 C115 * C439 - C103 * C451) *
                    C30655) *
                   C30667 * C30757) *
                  C30470 * C30775 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C1664 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30655) *
                   C30667 * C1665 +
               ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                 C103 * C442 - C115 * C423) *
                    C116 +
                (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                 C103 * C453 - C115 * C443) *
                    C30655) *
                   C30667 * C30757) *
                  C30470 * C30748) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C1664 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C1665 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30655) *
                   C30667 * C30757) *
                  C30791 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C1664 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30655) *
                   C30667 * C1665 +
               ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                 C115 * C1152 - C103 * C1161) *
                    C116 +
                (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                 C115 * C1164 - C103 * C1179) *
                    C30655) *
                   C30667 * C30757) *
                  C30779 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C1664 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30655) *
                   C30667 * C1665 +
               ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                 C103 * C1173 - C115 * C1158) *
                    C116 +
                (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                 C103 * C1185 - C115 * C1176) *
                    C30655) *
                   C30667 * C30757) *
                  C30754) *
             C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C1839 +
          ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
            C115 * C416 - C103 * C426) *
               C116 +
           (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
            C115 * C429 - C103 * C446) *
               C30655) *
              C30667 * C1840 +
          ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
            C103 * C432 - C115 * C419) *
               C116 +
           (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
            C103 * C449 - C115 * C435) *
               C30655) *
              C30667 * C1841 +
          ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
            C115 * C1846 - C103 * C1852) *
               C116 +
           (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
            C115 * C1855 - C103 * C1864) *
               C30655) *
              C30667 * C1842 +
          ((C101 * C1856 - C113 * C1847 + C102 * C1857 - C114 * C1848 +
            C103 * C1858 - C115 * C1849) *
               C116 +
           (C101 * C1865 - C113 * C1859 + C102 * C1866 - C114 * C1860 +
            C103 * C1867 - C115 * C1861) *
               C30655) *
              C30667 * C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 +
            (C30416 * C1159 - C4559 * C1150) * C4561 +
            (C30416 * C1177 - C4559 * C1162) * C4557 +
            (C30416 * C1171 - C4559 * C1156) * C4562 +
            (C30416 * C1183 - C4559 * C1174) * C4558) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30792 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30781 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30792 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30781 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C942 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30792 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
            (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
               C30667 * C30781 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C943 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30792 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C4559 * C5502 - C30416 * C5506) * C4562 +
            (C4559 * C5507 - C30416 * C5511) * C4558) *
               C30667 * C30781 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C1664 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C1665 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C1664 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C1665 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30791 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C1664 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C1665 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C30779 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C1664 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C1665 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C1839 +
          ((C4559 * C414 - C30416 * C424) * C4560 +
           (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
           (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
              C30667 * C1840 +
          ((C30416 * C430 - C4559 * C417) * C4560 +
           (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
           (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
              C30667 * C1841 +
          ((C4559 * C1844 - C30416 * C1850) * C4560 +
           (C4559 * C1853 - C30416 * C1862) * C4556 +
           (C4559 * C2222 - C30416 * C2225) * C4561 +
           (C4559 * C2228 - C30416 * C2231) * C4557 +
           (C4559 * C6187 - C30416 * C6190) * C4562 +
           (C4559 * C6191 - C30416 * C6196) * C4558) *
              C30667 * C1842 +
          ((C30416 * C1856 - C4559 * C1847) * C4560 +
           (C30416 * C1865 - C4559 * C1859) * C4556 +
           (C30416 * C6192 - C4559 * C6188) * C4561 +
           (C30416 * C6197 - C4559 * C6193) * C4557 +
           (C30416 * C6194 - C4559 * C6189) * C4562 +
           (C30416 * C6198 - C4559 * C6195) * C4558) *
              C30667 * C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C30416 * C424 - C4559 * C414) * C116 +
            (C30416 * C444 - C4559 * C427) * C30655) *
               C8864 +
           ((C30416 * C430 - C4559 * C417) * C116 +
            (C30416 * C447 - C4559 * C433) * C30655) *
               C8865) *
              C30488 * C30470 * C108 +
          (((C4559 * C118 - C30416 * C125) * C116 +
            (C4559 * C128 - C30416 * C139) * C30655) *
               C8863 +
           ((C4559 * C415 - C30416 * C425) * C116 +
            (C4559 * C428 - C30416 * C445) * C30655) *
               C8864 +
           ((C4559 * C418 - C30416 * C431) * C116 +
            (C4559 * C434 - C30416 * C448) * C30655) *
               C8865) *
              C30488 * C30470 * C109 +
          (((C30416 * C126 - C4559 * C119) * C116 +
            (C30416 * C140 - C4559 * C129) * C30655) *
               C8863 +
           ((C30416 * C426 - C4559 * C416) * C116 +
            (C30416 * C446 - C4559 * C429) * C30655) *
               C8864 +
           ((C30416 * C432 - C4559 * C419) * C116 +
            (C30416 * C449 - C4559 * C435) * C30655) *
               C8865) *
              C30488 * C30470 * C110 +
          (((C4559 * C120 - C30416 * C130) * C116 +
            (C4559 * C131 - C30416 * C141) * C30655) *
               C8863 +
           ((C4559 * C420 - C30416 * C436) * C116 +
            (C4559 * C437 - C30416 * C450) * C30655) *
               C8864 +
           ((C4559 * C421 - C30416 * C438) * C116 +
            (C4559 * C439 - C30416 * C451) * C30655) *
               C8865) *
              C30488 * C30470 * C111 +
          (((C30416 * C132 - C4559 * C121) * C116 +
            (C30416 * C142 - C4559 * C133) * C30655) *
               C8863 +
           ((C30416 * C440 - C4559 * C422) * C116 +
            (C30416 * C452 - C4559 * C441) * C30655) *
               C8864 +
           ((C30416 * C442 - C4559 * C423) * C116 +
            (C30416 * C453 - C4559 * C443) * C30655) *
               C8865) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C30416 * C424 - C4559 * C414) * C116 +
             (C30416 * C444 - C4559 * C427) * C30655) *
                C8864 +
            ((C30416 * C430 - C4559 * C417) * C116 +
             (C30416 * C447 - C4559 * C433) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C4559 * C415 - C30416 * C425) * C116 +
             (C4559 * C428 - C30416 * C445) * C30655) *
                C8864 +
            ((C4559 * C418 - C30416 * C431) * C116 +
             (C4559 * C434 - C30416 * C448) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C30416 * C426 - C4559 * C416) * C116 +
             (C30416 * C446 - C4559 * C429) * C30655) *
                C8864 +
            ((C30416 * C432 - C4559 * C419) * C116 +
             (C30416 * C449 - C4559 * C435) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C4559 * C1152 - C30416 * C1161) * C116 +
             (C4559 * C1164 - C30416 * C1179) * C30655) *
                C8865) *
               C30488 * C30779 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30792 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30781 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C30470 * C258 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30792 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
               C30781 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C4559 * C1848 - C30416 * C1857) * C116 +
             (C4559 * C1860 - C30416 * C1866) * C30655) *
                C8865) *
               C30757) *
              C30470 * C259 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30792 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30781 +
           (C9137 * C8863 +
            ((C9120 - C9119) * C116 + (C9122 - C9121) * C30655) * C8864 +
            ((C30416 * C1858 - C4559 * C1849) * C116 +
             (C30416 * C1867 - C4559 * C1861) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C942 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C943 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C942 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C943 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C942 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C943 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
           C9135 * C8865) *
              C30488 * C1010 +
          (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
           ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
           ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
              C30488 * C1011 +
          ((C4710 * C116 + C4711 * C30655) * C8863 +
           ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
           (C5532 * C116 + C5533 * C30655) * C8865) *
              C30488 * C1012 +
          ((C5380 * C116 + C5381 * C30655) * C8863 +
           ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
           ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
              C30488 * C1013 +
          ((C5390 * C116 + C5391 * C30655) * C8863 +
           ((C5903 - C5902) * C116 + (C5905 - C5904) * C30655) * C8864 +
           ((C30416 * C5508 - C4559 * C5503) * C116 +
            (C30416 * C5512 - C4559 * C5509) * C30655) *
               C8865) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30792 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30781 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C942 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30792 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
               C30781 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C4559 * C6188 - C30416 * C6192) * C116 +
             (C4559 * C6193 - C30416 * C6197) * C30655) *
                C8865) *
               C30757) *
              C943 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30792 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30781 +
           (C9780 * C8863 +
            ((C6567 - C6566) * C116 + (C6569 - C6568) * C30655) * C8864 +
            ((C30416 * C6194 - C4559 * C6189) * C116 +
             (C30416 * C6198 - C4559 * C6195) * C30655) *
                C8865) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C1664 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C1665 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30788 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C1664 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
               C1665 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C4559 * C1848 - C30416 * C1857) * C116 +
             (C4559 * C1860 - C30416 * C1866) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30775 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C1664 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C1665 +
           (C9137 * C8863 +
            ((C9120 - C9119) * C116 + (C9122 - C9121) * C30655) * C8864 +
            ((C30416 * C1858 - C4559 * C1849) * C116 +
             (C30416 * C1867 - C4559 * C1861) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C1664 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C1665 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C30791 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C1664 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
               C1665 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C4559 * C6188 - C30416 * C6192) * C116 +
             (C4559 * C6193 - C30416 * C6197) * C30655) *
                C8865) *
               C30757) *
              C30779 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C1664 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C1665 +
           (C9780 * C8863 +
            ((C6567 - C6566) * C116 + (C6569 - C6568) * C30655) * C8864 +
            ((C30416 * C6194 - C4559 * C6189) * C116 +
             (C30416 * C6198 - C4559 * C6195) * C30655) *
                C8865) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
           C9135 * C8865) *
              C1839 +
          (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
           ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
           C10428 * C8865) *
              C1840 +
          (C9135 * C8863 +
           ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
           C10431 * C8865) *
              C1841 +
          (C10428 * C8863 +
           ((C10417 - C10416) * C116 + (C10419 - C10418) * C30655) * C8864 +
           ((C10420 - C10421) * C116 + (C10422 - C10423) * C30655) * C8865) *
              C1842 +
          (C10431 * C8863 +
           ((C10421 - C10420) * C116 + (C10423 - C10422) * C30655) * C8864 +
           ((C30416 * C10409 - C4559 * C10406) * C116 +
            (C30416 * C10412 - C4559 * C10410) * C30655) *
               C8865) *
              C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30724 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C554 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30724 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C555 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30724 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C556 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30655) *
                   C30667 * C30724 +
               ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                 C103 * C663 - C115 * C662) *
                    C116 +
                (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                 C103 * C665 - C115 * C664) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C30758) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30655) *
                    C30667 * C30724 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30655) *
                    C30667 * C30575) *
                   C942 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30655) *
                    C30667 * C30724 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30655) *
                    C30667 * C30575) *
                   C943 +
               (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                  C103 * C279 - C115 * C266) *
                     C116 +
                 (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                  C103 * C296 - C115 * C282) *
                     C30655) *
                    C30667 * C30724 +
                ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                  C115 * C1155 - C103 * C1167) *
                     C116 +
                 (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                  C115 * C1170 - C103 * C1182) *
                     C30655) *
                    C30667 * C30575) *
                   C30754) *
                  C30709 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30655) *
                    C30667 * C30724 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30655) *
                    C30667 * C30575) *
                   C942 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30655) *
                    C30667 * C30724 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30655) *
                    C30667 * C30575) *
                   C943 +
               (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                  C115 * C268 - C103 * C285) *
                     C116 +
                 (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                  C115 * C286 - C103 * C298) *
                     C30655) *
                    C30667 * C30724 +
                ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                  C103 * C1441 - C115 * C1440) *
                     C116 +
                 (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                  C103 * C1443 - C115 * C1442) *
                     C30655) *
                    C30667 * C30575) *
                   C30754) *
                  C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C30470 * C30709 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C2116 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C2117 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C2118 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30655) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30724 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30724 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30724 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C30724 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 +
             (C4559 * C5502 - C30416 * C5506) * C4562 +
             (C4559 * C5507 - C30416 * C5511) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C30724 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C2116 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C2117 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C2118 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 +
            (C4559 * C2222 - C30416 * C2225) * C4561 +
            (C4559 * C2228 - C30416 * C2231) * C4557 +
            (C4559 * C6187 - C30416 * C6190) * C4562 +
            (C4559 * C6191 - C30416 * C6196) * C4558) *
               C30667 * C30770) *
              C30470 * C30709 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C2116 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C2117 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
            (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
            (C6356 - C6357) * C4558) *
               C30667 * C2118 +
           ((C30416 * C1851 - C4559 * C1845) * C4560 +
            (C30416 * C1863 - C4559 * C1854) * C4556 +
            (C30416 * C2226 - C4559 * C2223) * C4561 +
            (C30416 * C2232 - C4559 * C2229) * C4557 +
            (C30416 * C6456 - C4559 * C6455) * C4562 +
            (C30416 * C6458 - C4559 * C6457) * C4558) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30724 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30575) *
              C30470 * C554 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30724 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
               C30575) *
              C30470 * C555 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30724 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30575) *
              C30470 * C556 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C9334 - C9335) * C116 + (C9336 - C9337) * C30655) * C8864 +
            ((C9338 - C9339) * C116 + (C9340 - C9341) * C30655) * C8865) *
               C30724 +
           (((C9335 - C9334) * C116 + (C9337 - C9336) * C30655) * C8863 +
            ((C9339 - C9338) * C116 + (C9341 - C9340) * C30655) * C8864 +
            ((C30416 * C2121 - C4559 * C2120) * C116 +
             (C30416 * C2123 - C4559 * C2122) * C30655) *
                C8865) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30724 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
                C30575) *
               C942 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30724 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
                C30575) *
               C943 +
           (((C4710 * C116 + C4711 * C30655) * C8863 +
             ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
             C9780 * C8865) *
                C30724 +
            ((C5514 * C116 + C5515 * C30655) * C8863 +
             ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
             ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
                C30575) *
               C30754) *
              C30709 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30724 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
                C30575) *
               C942 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
                C30724 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C4559 * C2223 - C30416 * C2226) * C116 +
              (C4559 * C2229 - C30416 * C2232) * C30655) *
                 C8865) *
                C30575) *
               C943 +
           (((C4712 * C116 + C4713 * C30655) * C8863 +
             ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
             ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
                C30724 +
            ((C5792 * C116 + C5793 * C30655) * C8863 +
             ((C6355 - C6354) * C116 + (C6357 - C6356) * C30655) * C8864 +
             ((C30416 * C6456 - C4559 * C6455) * C116 +
              (C30416 * C6458 - C4559 * C6457) * C30655) *
                 C8865) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C2116 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C2117 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            C10431 * C8865) *
               C2118 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C116 + (C10419 - C10418) * C30655) * C8864 +
            ((C10420 - C10421) * C116 + (C10422 - C10423) * C30655) * C8865) *
               C30770) *
              C30470 * C30709 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C2116 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            C10701 * C8865) *
               C2117 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C10695 - C10696) * C116 + (C10697 - C10698) * C30655) * C8865) *
               C2118 +
           (C10701 * C8863 +
            ((C10696 - C10695) * C116 + (C10698 - C10697) * C30655) * C8864 +
            ((C30416 * C10689 - C4559 * C10688) * C116 +
             (C30416 * C10691 - C4559 * C10690) * C30655) *
                C8865) *
               C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C30470 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30655) *
              C30667 * C30488 * C30470 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30655) *
              C30667 * C30488 * C30470 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30655) *
              C30667 * C30488 * C30470 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30655) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C1664 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C1665 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30791 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30757) *
              C30779 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C1664 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C1665 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C1664 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C1665 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30791 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C1664 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C1665 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C30779 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C1664 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C1665 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C30416 * C424 - C4559 * C414) * C116 +
            (C30416 * C444 - C4559 * C427) * C30655) *
               C8864 +
           ((C30416 * C430 - C4559 * C417) * C116 +
            (C30416 * C447 - C4559 * C433) * C30655) *
               C8865) *
              C30488 * C30470 * C108 +
          (((C4559 * C118 - C30416 * C125) * C116 +
            (C4559 * C128 - C30416 * C139) * C30655) *
               C8863 +
           ((C4559 * C415 - C30416 * C425) * C116 +
            (C4559 * C428 - C30416 * C445) * C30655) *
               C8864 +
           ((C4559 * C418 - C30416 * C431) * C116 +
            (C4559 * C434 - C30416 * C448) * C30655) *
               C8865) *
              C30488 * C30470 * C109 +
          (((C30416 * C126 - C4559 * C119) * C116 +
            (C30416 * C140 - C4559 * C129) * C30655) *
               C8863 +
           ((C30416 * C426 - C4559 * C416) * C116 +
            (C30416 * C446 - C4559 * C429) * C30655) *
               C8864 +
           ((C30416 * C432 - C4559 * C419) * C116 +
            (C30416 * C449 - C4559 * C435) * C30655) *
               C8865) *
              C30488 * C30470 * C110 +
          (((C4559 * C120 - C30416 * C130) * C116 +
            (C4559 * C131 - C30416 * C141) * C30655) *
               C8863 +
           ((C4559 * C420 - C30416 * C436) * C116 +
            (C4559 * C437 - C30416 * C450) * C30655) *
               C8864 +
           ((C4559 * C421 - C30416 * C438) * C116 +
            (C4559 * C439 - C30416 * C451) * C30655) *
               C8865) *
              C30488 * C30470 * C111 +
          (((C30416 * C132 - C4559 * C121) * C116 +
            (C30416 * C142 - C4559 * C133) * C30655) *
               C8863 +
           ((C30416 * C440 - C4559 * C422) * C116 +
            (C30416 * C452 - C4559 * C441) * C30655) *
               C8864 +
           ((C30416 * C442 - C4559 * C423) * C116 +
            (C30416 * C453 - C4559 * C443) * C30655) *
               C8865) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C30416 * C424 - C4559 * C414) * C116 +
             (C30416 * C444 - C4559 * C427) * C30655) *
                C8864 +
            ((C30416 * C430 - C4559 * C417) * C116 +
             (C30416 * C447 - C4559 * C433) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C4559 * C415 - C30416 * C425) * C116 +
             (C4559 * C428 - C30416 * C445) * C30655) *
                C8864 +
            ((C4559 * C418 - C30416 * C431) * C116 +
             (C4559 * C434 - C30416 * C448) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C30416 * C426 - C4559 * C416) * C116 +
             (C30416 * C446 - C4559 * C429) * C30655) *
                C8864 +
            ((C30416 * C432 - C4559 * C419) * C116 +
             (C30416 * C449 - C4559 * C435) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C4559 * C1152 - C30416 * C1161) * C116 +
             (C4559 * C1164 - C30416 * C1179) * C30655) *
                C8865) *
               C30488 * C30779 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C942 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C943 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C942 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C943 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C942 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C943 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
           C9135 * C8865) *
              C30488 * C1010 +
          (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
           ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
           ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
              C30488 * C1011 +
          ((C4710 * C116 + C4711 * C30655) * C8863 +
           ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
           (C5532 * C116 + C5533 * C30655) * C8865) *
              C30488 * C1012 +
          ((C5380 * C116 + C5381 * C30655) * C8863 +
           ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
           ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
              C30488 * C1013 +
          ((C5390 * C116 + C5391 * C30655) * C8863 +
           ((C5903 - C5902) * C116 + (C5905 - C5904) * C30655) * C8864 +
           ((C30416 * C5508 - C4559 * C5503) * C116 +
            (C30416 * C5512 - C4559 * C5509) * C30655) *
               C8865) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C1664 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C1665 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30788 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C1664 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
               C1665 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C4559 * C1848 - C30416 * C1857) * C116 +
             (C4559 * C1860 - C30416 * C1866) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30775 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C1664 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C1665 +
           (C9137 * C8863 +
            ((C9120 - C9119) * C116 + (C9122 - C9121) * C30655) * C8864 +
            ((C30416 * C1858 - C4559 * C1849) * C116 +
             (C30416 * C1867 - C4559 * C1861) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C1664 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C1665 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C30791 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C1664 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
               C1665 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C4559 * C6188 - C30416 * C6192) * C116 +
             (C4559 * C6193 - C30416 * C6197) * C30655) *
                C8865) *
               C30757) *
              C30779 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C1664 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C1665 +
           (C9780 * C8863 +
            ((C6567 - C6566) * C116 + (C6569 - C6568) * C30655) * C8864 +
            ((C30416 * C6194 - C4559 * C6189) * C116 +
             (C30416 * C6198 - C4559 * C6195) * C30655) *
                C8865) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C3094 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C3094 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C3094 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C30723 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C3094 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30533) *
              C30447 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C3094 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C30723 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C3094 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30533) *
              C30456 +
          (((((C30416 * C126 - C4559 * C119) * C116 +
              (C30416 * C140 - C4559 * C129) * C30655) *
                 C8863 +
             ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
             C9137 * C8865) *
                C3094 +
            (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
             ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
             ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
             ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
             ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
                C3094 +
            (((C5193 - C5192) * C116 + (C5195 - C5194) * C30655) * C8863 +
             ((C9489 - C9488) * C116 + (C9491 - C9490) * C30655) * C8864 +
             ((C30416 * C2227 - C4559 * C2224) * C116 +
              (C30416 * C2233 - C4559 * C2230) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30571 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30578 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C3602) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30571 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30578 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C3602) *
               C30533) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30571 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30578 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C3602) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30571 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30578 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C3602) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C3602) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30571 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30578 +
            (C9135 * C8863 +
             ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
             C10431 * C8865) *
                C3602) *
               C30723 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30571 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30578 +
            (C9781 * C8863 +
             ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
             ((C10806 - C10807) * C116 + (C10808 - C10809) * C30655) * C8865) *
                C3602) *
               C30533) *
              C2440 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30571 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30578 +
            (C9136 * C8863 +
             ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
             ((C10695 - C10696) * C116 + (C10697 - C10698) * C30655) * C8865) *
                C3602) *
               C30723 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C30571 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30578 +
            (C10590 * C8863 +
             ((C10585 - C10584) * C116 + (C10587 - C10586) * C30655) * C8864 +
             ((C30416 * C10578 - C4559 * C10577) * C116 +
              (C30416 * C10580 - C4559 * C10579) * C30655) *
                 C8865) *
                C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C3094 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C30797 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C3094 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C30790 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C3094 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C30777 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30655) *
                   C30667 * C3094 +
               ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                 C103 * C663 - C115 * C662) *
                    C116 +
                (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                 C103 * C665 - C115 * C664) *
                    C30655) *
                   C30667 * C30575) *
                  C30470 * C30758) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30655) *
                    C30667 * C3094 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30655) *
                    C30667 * C30575) *
                   C30791 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30655) *
                    C30667 * C3094 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30655) *
                    C30667 * C30575) *
                   C30779 +
               (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                  C103 * C279 - C115 * C266) *
                     C116 +
                 (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                  C103 * C296 - C115 * C282) *
                     C30655) *
                    C30667 * C3094 +
                ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                  C115 * C1155 - C103 * C1167) *
                     C116 +
                 (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                  C115 * C1170 - C103 * C1182) *
                     C30655) *
                    C30667 * C30575) *
                   C30754) *
                  C2440 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30655) *
                    C30667 * C3094 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30655) *
                    C30667 * C30575) *
                   C30791 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30655) *
                    C30667 * C3094 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30655) *
                    C30667 * C30575) *
                   C30779 +
               (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                  C115 * C268 - C103 * C285) *
                     C116 +
                 (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                  C115 * C286 - C103 * C298) *
                     C30655) *
                    C30667 * C3094 +
                ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                  C103 * C1441 - C115 * C1440) *
                     C116 +
                 (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                  C103 * C1443 - C115 * C1442) *
                     C30655) *
                    C30667 * C30575) *
                   C30754) *
                  C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30799 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30796 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30787 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C30470 * C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30799 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30796 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30787 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30655) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C3094 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C3094 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C3094 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C3094 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C3094 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30799 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30796 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30787 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 + (C6562 - C6563) * C4561 +
            (C6564 - C6565) * C4557 + (C6566 - C6567) * C4562 +
            (C6568 - C6569) * C4558) *
               C30667 * C30770) *
              C30470 * C2440 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30799 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30796 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
            (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
            (C6356 - C6357) * C4558) *
               C30667 * C30787 +
           ((C30416 * C1851 - C4559 * C1845) * C4560 +
            (C30416 * C1863 - C4559 * C1854) * C4556 +
            (C30416 * C2226 - C4559 * C2223) * C4561 +
            (C30416 * C2232 - C4559 * C2229) * C4557 +
            (C30416 * C6456 - C4559 * C6455) * C4562 +
            (C30416 * C6458 - C4559 * C6457) * C4558) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C3094 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30575) *
              C30470 * C30797 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C3094 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            C10701 * C8865) *
               C30575) *
              C30470 * C30790 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C3094 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30575) *
              C30470 * C30777 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C9334 - C9335) * C116 + (C9336 - C9337) * C30655) * C8864 +
            ((C9338 - C9339) * C116 + (C9340 - C9341) * C30655) * C8865) *
               C3094 +
           (((C9335 - C9334) * C116 + (C9337 - C9336) * C30655) * C8863 +
            ((C9339 - C9338) * C116 + (C9341 - C9340) * C30655) * C8864 +
            ((C30416 * C2121 - C4559 * C2120) * C116 +
             (C30416 * C2123 - C4559 * C2122) * C30655) *
                C8865) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C3094 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C30791 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C3094 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30779 +
           (((C4710 * C116 + C4711 * C30655) * C8863 +
             ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
             C9780 * C8865) *
                C3094 +
            ((C5514 * C116 + C5515 * C30655) * C8863 +
             ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
             ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
                C30575) *
               C30754) *
              C2440 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C3094 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C30791 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C3094 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30779 +
           (((C4712 * C116 + C4713 * C30655) * C8863 +
             ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
             ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
                C3094 +
            ((C5792 * C116 + C5793 * C30655) * C8863 +
             ((C6355 - C6354) * C116 + (C6357 - C6356) * C30655) * C8864 +
             ((C30416 * C6456 - C4559 * C6455) * C116 +
              (C30416 * C6458 - C4559 * C6457) * C30655) *
                 C8865) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30799 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30796 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            C10431 * C8865) *
               C30787 +
           (C10428 * C8863 +
            ((C10417 - C10416) * C116 + (C10419 - C10418) * C30655) * C8864 +
            ((C10420 - C10421) * C116 + (C10422 - C10423) * C30655) * C8865) *
               C30770) *
              C30470 * C2440 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30799 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            C10701 * C8865) *
               C30796 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C10695 - C10696) * C116 + (C10697 - C10698) * C30655) * C8865) *
               C30787 +
           (C10701 * C8863 +
            ((C10696 - C10695) * C116 + (C10698 - C10697) * C30655) * C8864 +
            ((C30416 * C10689 - C4559 * C10688) * C116 +
             (C30416 * C10691 - C4559 * C10690) * C30655) *
                C8865) *
               C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30571 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30578 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C3602) *
              C30470 * C30447 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30571 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30578 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
            (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
            (C6356 - C6357) * C4558) *
               C30667 * C3602) *
              C30470 * C30456 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30571 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C30578 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C3602) *
              C30470 * C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C3602) *
              C30470 * C30447 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30571 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30578 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C3602) *
              C30470 * C30456 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C3602) *
              C30470 * C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30571 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30578 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            C10431 * C8865) *
               C3602) *
              C30470 * C30447 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30571 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            C10701 * C8865) *
               C30578 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C10695 - C10696) * C116 + (C10697 - C10698) * C30655) * C8865) *
               C3602) *
              C30470 * C30456 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30571 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30578 +
           (C9137 * C8863 +
            ((C9120 - C9119) * C116 + (C9122 - C9121) * C30655) * C8864 +
            ((C30416 * C1858 - C4559 * C1849) * C116 +
             (C30416 * C1867 - C4559 * C1861) * C30655) *
                C8865) *
               C3602) *
              C30470 * C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30791 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30779 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30791 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30779 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C3094 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C3094 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C3094 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C3094 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C3094 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C3094 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            C10428 * C8865) *
               C30575) *
              C30470 * C30797 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C3094 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            C10701 * C8865) *
               C30575) *
              C30470 * C30790 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C3094 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30575) *
              C30470 * C30777 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C9334 - C9335) * C116 + (C9336 - C9337) * C30655) * C8864 +
            ((C9338 - C9339) * C116 + (C9340 - C9341) * C30655) * C8865) *
               C3094 +
           (((C9335 - C9334) * C116 + (C9337 - C9336) * C30655) * C8863 +
            ((C9339 - C9338) * C116 + (C9341 - C9340) * C30655) * C8864 +
            ((C30416 * C2121 - C4559 * C2120) * C116 +
             (C30416 * C2123 - C4559 * C2122) * C30655) *
                C8865) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C3094 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             C10428 * C8865) *
                C30575) *
               C30791 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C3094 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             C10812 * C8865) *
                C30575) *
               C30779 +
           (((C4710 * C116 + C4711 * C30655) * C8863 +
             ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
             C9780 * C8865) *
                C3094 +
            ((C5514 * C116 + C5515 * C30655) * C8863 +
             ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
             ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
                C30575) *
               C30754) *
              C2440 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C3094 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             C10701 * C8865) *
                C30575) *
               C30791 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             C10590 * C8865) *
                C3094 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C10584 - C10585) * C116 + (C10586 - C10587) * C30655) * C8865) *
                C30575) *
               C30779 +
           (((C4712 * C116 + C4713 * C30655) * C8863 +
             ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
             ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
                C3094 +
            ((C5792 * C116 + C5793 * C30655) * C8863 +
             ((C6355 - C6354) * C116 + (C6357 - C6356) * C30655) * C8864 +
             ((C30416 * C6456 - C4559 * C6455) * C116 +
              (C30416 * C6458 - C4559 * C6457) * C30655) *
                 C8865) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C1284 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C1285 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C1286 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C1284 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C1285 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C1286 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C30723 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C1285 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C1286 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C1285 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C1286 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C30723 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C30533) *
              C554 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C30723 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C30533) *
              C555 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C30723 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C4559 * C1152 - C30416 * C1161) * C116 +
             (C4559 * C1164 - C30416 * C1179) * C30655) *
                C8865) *
               C30488 * C30533) *
              C556 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C4559 * C420 - C30416 * C436) * C116 +
             (C4559 * C437 - C30416 * C450) * C30655) *
                C8864 +
            ((C4559 * C421 - C30416 * C438) * C116 +
             (C4559 * C439 - C30416 * C451) * C30655) *
                C8865) *
               C30488 * C30723 +
           (((C4925 - C4924) * C116 + (C4927 - C4926) * C30655) * C8863 +
            ((C30416 * C823 - C4559 * C815) * C116 +
             (C30416 * C830 - C4559 * C824) * C30655) *
                C8864 +
            ((C30416 * C2015 - C4559 * C2014) * C116 +
             (C30416 * C2017 - C4559 * C2016) * C30655) *
                C8865) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C1284 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30488 * C1285 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30488 * C1286 +
           ((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C30488 * C30764) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C1284 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C1285 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C1286 +
           ((C5636 * C116 + C5637 * C30655) * C8863 +
            ((C5795 - C5794) * C116 + (C5797 - C5796) * C30655) * C8864 +
            ((C30416 * C6346 - C4559 * C6345) * C116 +
             (C30416 * C6348 - C4559 * C6347) * C30655) *
                C8865) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C1284 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30575) *
              C1285 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30575) *
              C1286 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30655) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + (C5180 - C5181) * C4562 +
             (C5182 - C5183) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
             (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C30416 * C1545 - C4559 * C1542) * C4562 +
             (C30416 * C1551 - C4559 * C1548) * C4558) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + (C5188 - C5189) * C4562 +
             (C5190 - C5191) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
             (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C4559 * C1543 - C30416 * C1546) * C4562 +
             (C4559 * C1549 - C30416 * C1552) * C4558) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C30724 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C30724 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C1284 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30724 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C1285 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30724 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C1286 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30724 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30724 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
                C30724 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
                C30575) *
               C30533) *
              C258 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30724 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
                C30724 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C4559 * C2223 - C30416 * C2226) * C116 +
              (C4559 * C2229 - C30416 * C2232) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C259 +
          (((((C30416 * C126 - C4559 * C119) * C116 +
              (C30416 * C140 - C4559 * C129) * C30655) *
                 C8863 +
             ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
             C9137 * C8865) *
                C30724 +
            (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
             ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
             ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
                C30575) *
               C30723 +
           ((((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
             ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
             ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
                C30724 +
            (((C5193 - C5192) * C116 + (C5195 - C5194) * C30655) * C8863 +
             ((C9489 - C9488) * C116 + (C9491 - C9490) * C30655) * C8864 +
             ((C30416 * C2227 - C4559 * C2224) * C116 +
              (C30416 * C2233 - C4559 * C2230) * C30655) *
                 C8865) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30724 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30575) *
              C1284 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30724 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
               C30575) *
              C1285 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30724 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30575) *
              C1286 +
          (((C5380 * C116 + C5381 * C30655) * C8863 +
            ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
               C30724 +
           ((C5900 * C116 + C5901 * C30655) * C8863 +
            ((C5529 - C5528) * C116 + (C5531 - C5530) * C30655) * C8864 +
            ((C30416 * C6558 - C4559 * C6557) * C116 +
             (C30416 * C6560 - C4559 * C6559) * C30655) *
                C8865) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30655) *
                  C30667 * C30488 * C30470 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C30655) *
                  C30667 * C30488 * C30470 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C30655) *
                  C30667 * C30488 * C30470 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C30655) *
                  C30667 * C30488 * C30470 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C30655) *
                  C30667 * C30488 * C30470 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30792 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30781 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30792 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30781 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30757) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 +
            (C30416 * C1159 - C4559 * C1150) * C4561 +
            (C30416 * C1177 - C4559 * C1162) * C4557 +
            (C30416 * C1171 - C4559 * C1156) * C4562 +
            (C30416 * C1183 - C4559 * C1174) * C4558) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30792 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30781 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30792 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30781 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C942 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30792 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
            (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
               C30667 * C30781 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C943 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30792 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C4559 * C5502 - C30416 * C5506) * C4562 +
            (C4559 * C5507 - C30416 * C5511) * C4558) *
               C30667 * C30781 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C30416 * C424 - C4559 * C414) * C116 +
            (C30416 * C444 - C4559 * C427) * C30655) *
               C8864 +
           ((C30416 * C430 - C4559 * C417) * C116 +
            (C30416 * C447 - C4559 * C433) * C30655) *
               C8865) *
              C30488 * C30470 * C108 +
          (((C4559 * C118 - C30416 * C125) * C116 +
            (C4559 * C128 - C30416 * C139) * C30655) *
               C8863 +
           ((C4559 * C415 - C30416 * C425) * C116 +
            (C4559 * C428 - C30416 * C445) * C30655) *
               C8864 +
           ((C4559 * C418 - C30416 * C431) * C116 +
            (C4559 * C434 - C30416 * C448) * C30655) *
               C8865) *
              C30488 * C30470 * C109 +
          (((C30416 * C126 - C4559 * C119) * C116 +
            (C30416 * C140 - C4559 * C129) * C30655) *
               C8863 +
           ((C30416 * C426 - C4559 * C416) * C116 +
            (C30416 * C446 - C4559 * C429) * C30655) *
               C8864 +
           ((C30416 * C432 - C4559 * C419) * C116 +
            (C30416 * C449 - C4559 * C435) * C30655) *
               C8865) *
              C30488 * C30470 * C110 +
          (((C4559 * C120 - C30416 * C130) * C116 +
            (C4559 * C131 - C30416 * C141) * C30655) *
               C8863 +
           ((C4559 * C420 - C30416 * C436) * C116 +
            (C4559 * C437 - C30416 * C450) * C30655) *
               C8864 +
           ((C4559 * C421 - C30416 * C438) * C116 +
            (C4559 * C439 - C30416 * C451) * C30655) *
               C8865) *
              C30488 * C30470 * C111 +
          (((C30416 * C132 - C4559 * C121) * C116 +
            (C30416 * C142 - C4559 * C133) * C30655) *
               C8863 +
           ((C30416 * C440 - C4559 * C422) * C116 +
            (C30416 * C452 - C4559 * C441) * C30655) *
               C8864 +
           ((C30416 * C442 - C4559 * C423) * C116 +
            (C30416 * C453 - C4559 * C443) * C30655) *
               C8865) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C30416 * C424 - C4559 * C414) * C116 +
             (C30416 * C444 - C4559 * C427) * C30655) *
                C8864 +
            ((C30416 * C430 - C4559 * C417) * C116 +
             (C30416 * C447 - C4559 * C433) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C4559 * C415 - C30416 * C425) * C116 +
             (C4559 * C428 - C30416 * C445) * C30655) *
                C8864 +
            ((C4559 * C418 - C30416 * C431) * C116 +
             (C4559 * C434 - C30416 * C448) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C30416 * C426 - C4559 * C416) * C116 +
             (C30416 * C446 - C4559 * C429) * C30655) *
                C8864 +
            ((C30416 * C432 - C4559 * C419) * C116 +
             (C30416 * C449 - C4559 * C435) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C4559 * C1152 - C30416 * C1161) * C116 +
             (C4559 * C1164 - C30416 * C1179) * C30655) *
                C8865) *
               C30488 * C30779 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30792 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30781 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C30470 * C258 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30792 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
               C30781 +
           (C9136 * C8863 +
            ((C9108 - C9107) * C116 + (C9110 - C9109) * C30655) * C8864 +
            ((C4559 * C1848 - C30416 * C1857) * C116 +
             (C4559 * C1860 - C30416 * C1866) * C30655) *
                C8865) *
               C30757) *
              C30470 * C259 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30792 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30781 +
           (C9137 * C8863 +
            ((C9120 - C9119) * C116 + (C9122 - C9121) * C30655) * C8864 +
            ((C30416 * C1858 - C4559 * C1849) * C116 +
             (C30416 * C1867 - C4559 * C1861) * C30655) *
                C8865) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C942 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C943 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C942 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C943 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C942 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C943 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
           C9135 * C8865) *
              C30488 * C1010 +
          (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
           ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
           ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
              C30488 * C1011 +
          ((C4710 * C116 + C4711 * C30655) * C8863 +
           ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
           (C5532 * C116 + C5533 * C30655) * C8865) *
              C30488 * C1012 +
          ((C5380 * C116 + C5381 * C30655) * C8863 +
           ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
           ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
              C30488 * C1013 +
          ((C5390 * C116 + C5391 * C30655) * C8863 +
           ((C5903 - C5902) * C116 + (C5905 - C5904) * C30655) * C8864 +
           ((C30416 * C5508 - C4559 * C5503) * C116 +
            (C30416 * C5512 - C4559 * C5509) * C30655) *
               C8865) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30792 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30781 +
           (C9135 * C8863 +
            ((C9096 - C9095) * C116 + (C9098 - C9097) * C30655) * C8864 +
            ((C30416 * C1856 - C4559 * C1847) * C116 +
             (C30416 * C1865 - C4559 * C1859) * C30655) *
                C8865) *
               C30757) *
              C942 +
          ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            C9781 * C8865) *
               C30792 +
           (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
            ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
            ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
               C30781 +
           (C9781 * C8863 +
            ((C6562 - C6563) * C116 + (C6564 - C6565) * C30655) * C8864 +
            ((C4559 * C6188 - C30416 * C6192) * C116 +
             (C4559 * C6193 - C30416 * C6197) * C30655) *
                C8865) *
               C30757) *
              C943 +
          (((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            C9780 * C8865) *
               C30792 +
           ((C5514 * C116 + C5515 * C30655) * C8863 +
            ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
            ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
               C30781 +
           (C9780 * C8863 +
            ((C6567 - C6566) * C116 + (C6569 - C6568) * C30655) * C8864 +
            ((C30416 * C6194 - C4559 * C6189) * C116 +
             (C30416 * C6198 - C4559 * C6195) * C30655) *
                C8865) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C942 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C943 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C942 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C943 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30724 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30724 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30724 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C30724 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 +
             (C4559 * C5502 - C30416 * C5506) * C4562 +
             (C4559 * C5507 - C30416 * C5511) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C30724 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30724 +
           (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
            ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
            ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
               C30575) *
              C30470 * C554 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30724 +
           (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
            ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
            ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
               C30575) *
              C30470 * C555 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30724 +
           (((C9112 - C9111) * C116 + (C9114 - C9113) * C30655) * C8863 +
            ((C9116 - C9115) * C116 + (C9118 - C9117) * C30655) * C8864 +
            ((C9119 - C9120) * C116 + (C9121 - C9122) * C30655) * C8865) *
               C30575) *
              C30470 * C556 +
          ((((C4559 * C120 - C30416 * C130) * C116 +
             (C4559 * C131 - C30416 * C141) * C30655) *
                C8863 +
            ((C9334 - C9335) * C116 + (C9336 - C9337) * C30655) * C8864 +
            ((C9338 - C9339) * C116 + (C9340 - C9341) * C30655) * C8865) *
               C30724 +
           (((C9335 - C9334) * C116 + (C9337 - C9336) * C30655) * C8863 +
            ((C9339 - C9338) * C116 + (C9341 - C9340) * C30655) * C8864 +
            ((C30416 * C2121 - C4559 * C2120) * C116 +
             (C30416 * C2123 - C4559 * C2122) * C30655) *
                C8865) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30416 * C124 - C4559 * C117) * C116 +
              (C30416 * C138 - C4559 * C127) * C30655) *
                 C8863 +
             ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
             C9135 * C8865) *
                C30724 +
            (((C9088 - C9087) * C116 + (C9090 - C9089) * C30655) * C8863 +
             ((C9092 - C9091) * C116 + (C9094 - C9093) * C30655) * C8864 +
             ((C9095 - C9096) * C116 + (C9097 - C9098) * C30655) * C8865) *
                C30575) *
               C942 +
           ((((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
             ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
             C9781 * C8865) *
                C30724 +
            (((C5177 - C5176) * C116 + (C5179 - C5178) * C30655) * C8863 +
             ((C5516 - C5517) * C116 + (C5518 - C5519) * C30655) * C8864 +
             ((C6563 - C6562) * C116 + (C6565 - C6564) * C30655) * C8865) *
                C30575) *
               C943 +
           (((C4710 * C116 + C4711 * C30655) * C8863 +
             ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
             C9780 * C8865) *
                C30724 +
            ((C5514 * C116 + C5515 * C30655) * C8863 +
             ((C5521 - C5520) * C116 + (C5523 - C5522) * C30655) * C8864 +
             ((C6566 - C6567) * C116 + (C6568 - C6569) * C30655) * C8865) *
                C30575) *
               C30754) *
              C30709 +
          (((((C4559 * C118 - C30416 * C125) * C116 +
              (C4559 * C128 - C30416 * C139) * C30655) *
                 C8863 +
             ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
             C9136 * C8865) *
                C30724 +
            (((C9100 - C9099) * C116 + (C9102 - C9101) * C30655) * C8863 +
             ((C9104 - C9103) * C116 + (C9106 - C9105) * C30655) * C8864 +
             ((C9107 - C9108) * C116 + (C9109 - C9110) * C30655) * C8865) *
                C30575) *
               C942 +
           ((((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
             ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
             ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
                C30724 +
            (((C5185 - C5184) * C116 + (C5187 - C5186) * C30655) * C8863 +
             ((C6350 - C6351) * C116 + (C6352 - C6353) * C30655) * C8864 +
             ((C4559 * C2223 - C30416 * C2226) * C116 +
              (C4559 * C2229 - C30416 * C2232) * C30655) *
                 C8865) *
                C30575) *
               C943 +
           (((C4712 * C116 + C4713 * C30655) * C8863 +
             ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
             ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
                C30724 +
            ((C5792 * C116 + C5793 * C30655) * C8863 +
             ((C6355 - C6354) * C116 + (C6357 - C6356) * C30655) * C8864 +
             ((C30416 * C6456 - C4559 * C6455) * C116 +
              (C30416 * C6458 - C4559 * C6457) * C30655) *
                 C8865) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C30470 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30655) *
              C30667 * C30488 * C30470 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30655) *
              C30667 * C30488 * C30470 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30655) *
              C30667 * C30488 * C30470 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30655) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C30416 * C424 - C4559 * C414) * C116 +
            (C30416 * C444 - C4559 * C427) * C30655) *
               C8864 +
           ((C30416 * C430 - C4559 * C417) * C116 +
            (C30416 * C447 - C4559 * C433) * C30655) *
               C8865) *
              C30488 * C30470 * C108 +
          (((C4559 * C118 - C30416 * C125) * C116 +
            (C4559 * C128 - C30416 * C139) * C30655) *
               C8863 +
           ((C4559 * C415 - C30416 * C425) * C116 +
            (C4559 * C428 - C30416 * C445) * C30655) *
               C8864 +
           ((C4559 * C418 - C30416 * C431) * C116 +
            (C4559 * C434 - C30416 * C448) * C30655) *
               C8865) *
              C30488 * C30470 * C109 +
          (((C30416 * C126 - C4559 * C119) * C116 +
            (C30416 * C140 - C4559 * C129) * C30655) *
               C8863 +
           ((C30416 * C426 - C4559 * C416) * C116 +
            (C30416 * C446 - C4559 * C429) * C30655) *
               C8864 +
           ((C30416 * C432 - C4559 * C419) * C116 +
            (C30416 * C449 - C4559 * C435) * C30655) *
               C8865) *
              C30488 * C30470 * C110 +
          (((C4559 * C120 - C30416 * C130) * C116 +
            (C4559 * C131 - C30416 * C141) * C30655) *
               C8863 +
           ((C4559 * C420 - C30416 * C436) * C116 +
            (C4559 * C437 - C30416 * C450) * C30655) *
               C8864 +
           ((C4559 * C421 - C30416 * C438) * C116 +
            (C4559 * C439 - C30416 * C451) * C30655) *
               C8865) *
              C30488 * C30470 * C111 +
          (((C30416 * C132 - C4559 * C121) * C116 +
            (C30416 * C142 - C4559 * C133) * C30655) *
               C8863 +
           ((C30416 * C440 - C4559 * C422) * C116 +
            (C30416 * C452 - C4559 * C441) * C30655) *
               C8864 +
           ((C30416 * C442 - C4559 * C423) * C116 +
            (C30416 * C453 - C4559 * C443) * C30655) *
               C8865) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C30416 * C424 - C4559 * C414) * C116 +
             (C30416 * C444 - C4559 * C427) * C30655) *
                C8864 +
            ((C30416 * C430 - C4559 * C417) * C116 +
             (C30416 * C447 - C4559 * C433) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C4559 * C415 - C30416 * C425) * C116 +
             (C4559 * C428 - C30416 * C445) * C30655) *
                C8864 +
            ((C4559 * C418 - C30416 * C431) * C116 +
             (C4559 * C434 - C30416 * C448) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C30779 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C30416 * C426 - C4559 * C416) * C116 +
             (C30416 * C446 - C4559 * C429) * C30655) *
                C8864 +
            ((C30416 * C432 - C4559 * C419) * C116 +
             (C30416 * C449 - C4559 * C435) * C30655) *
                C8865) *
               C30488 * C30791 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C4559 * C1152 - C30416 * C1161) * C116 +
             (C4559 * C1164 - C30416 * C1179) * C30655) *
                C8865) *
               C30488 * C30779 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C116 +
             (C30416 * C138 - C4559 * C127) * C30655) *
                C8863 +
            ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
            C9135 * C8865) *
               C30488 * C942 +
           (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
            ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
            ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
               C30488 * C943 +
           ((C4710 * C116 + C4711 * C30655) * C8863 +
            ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
            (C5532 * C116 + C5533 * C30655) * C8865) *
               C30488 * C30754) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C116 +
             (C4559 * C128 - C30416 * C139) * C30655) *
                C8863 +
            ((C9099 - C9100) * C116 + (C9101 - C9102) * C30655) * C8864 +
            C9136 * C8865) *
               C30488 * C942 +
           (((C4687 - C4686) * C116 + (C4689 - C4688) * C30655) * C8863 +
            ((C5184 - C5185) * C116 + (C5186 - C5187) * C30655) * C8864 +
            ((C6351 - C6350) * C116 + (C6353 - C6352) * C30655) * C8865) *
               C30488 * C943 +
           ((C4712 * C116 + C4713 * C30655) * C8863 +
            ((C5189 - C5188) * C116 + (C5191 - C5190) * C30655) * C8864 +
            ((C6354 - C6355) * C116 + (C6356 - C6357) * C30655) * C8865) *
               C30488 * C30754) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C116 +
             (C30416 * C140 - C4559 * C129) * C30655) *
                C8863 +
            ((C9111 - C9112) * C116 + (C9113 - C9114) * C30655) * C8864 +
            C9137 * C8865) *
               C30488 * C942 +
           (((C4699 - C4698) * C116 + (C4701 - C4700) * C30655) * C8863 +
            ((C5192 - C5193) * C116 + (C5194 - C5195) * C30655) * C8864 +
            ((C9488 - C9489) * C116 + (C9490 - C9491) * C30655) * C8865) *
               C30488 * C943 +
           ((C4714 * C116 + C4715 * C30655) * C8863 +
            ((C5197 - C5196) * C116 + (C5199 - C5198) * C30655) * C8864 +
            ((C30416 * C1173 - C4559 * C1158) * C116 +
             (C30416 * C1185 - C4559 * C1176) * C30655) *
                C8865) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C116 +
            (C30416 * C138 - C4559 * C127) * C30655) *
               C8863 +
           ((C9087 - C9088) * C116 + (C9089 - C9090) * C30655) * C8864 +
           C9135 * C8865) *
              C30488 * C1010 +
          (((C4675 - C4674) * C116 + (C4677 - C4676) * C30655) * C8863 +
           ((C5176 - C5177) * C116 + (C5178 - C5179) * C30655) * C8864 +
           ((C5517 - C5516) * C116 + (C5519 - C5518) * C30655) * C8865) *
              C30488 * C1011 +
          ((C4710 * C116 + C4711 * C30655) * C8863 +
           ((C5181 - C5180) * C116 + (C5183 - C5182) * C30655) * C8864 +
           (C5532 * C116 + C5533 * C30655) * C8865) *
              C30488 * C1012 +
          ((C5380 * C116 + C5381 * C30655) * C8863 +
           ((C5525 - C5524) * C116 + (C5527 - C5526) * C30655) * C8864 +
           ((C5528 - C5529) * C116 + (C5530 - C5531) * C30655) * C8865) *
              C30488 * C1013 +
          ((C5390 * C116 + C5391 * C30655) * C8863 +
           ((C5903 - C5902) * C116 + (C5905 - C5904) * C30655) * C8864 +
           ((C30416 * C5508 - C4559 * C5503) * C116 +
            (C30416 * C5512 - C4559 * C5509) * C30655) *
               C8865) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C30529 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30536 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C2700) *
              C30447 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C30529 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30536 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C2700) *
              C30456 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C30529 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30536 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30724 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30529 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30724 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30536 +
           ((((C13290 - C13289 + C13292 - C13291) * C116 +
              (C13294 - C13293 + C13296 - C13295) * C30655) *
                 C18742 +
             ((C14359 - C14360 + C14361 - C14362) * C116 +
              (C14363 - C14364 + C14365 - C14366) * C30655) *
                 C18743) *
                C30724 +
            (((C14360 - C14359 + C14362 - C14361) * C116 +
              (C14364 - C14363 + C14366 - C14365) * C30655) *
                 C18742 +
             ((C14367 - C14368 + C14369 - C14370) * C116 +
              (C14371 - C14372 + C14373 - C14374) * C30655) *
                 C18743) *
                C30575) *
               C2700) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30724 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30529 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30724 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30536 +
           ((((C13306 - C13305 + C13308 - C13307) * C116 +
              (C13310 - C13309 + C13312 - C13311) * C30655) *
                 C18742 +
             ((C14707 - C14708 + C14709 - C14710) * C116 +
              (C14711 - C14712 + C14713 - C14714) * C30655) *
                 C18743) *
                C30724 +
            (((C14708 - C14707 + C14710 - C14709) * C116 +
              (C14712 - C14711 + C14714 - C14713) * C30655) *
                 C18742 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30655) *
                 C18743) *
                C30575) *
               C2700) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C30798 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30794 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30784 +
           (((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C30488 * C30764) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C30798 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30794 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30784 +
           (((C14506 - C14505 + C14508 - C14507) * C116 +
             (C14510 - C14509 + C14512 - C14511) * C30655) *
                C18742 +
            ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C116 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C30655) *
                C18743) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30533) *
              C30797 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30533) *
              C30790 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30533) *
              C30777 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C19345 - C19346 + C19347 - C19348) * C116 +
             (C19349 - C19350 + C19351 - C19352) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13606 - C13605 + C13608 - C13607) * C116 +
             (C13610 - C13609 + C13612 - C13611) * C30655) *
                C18742 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30655) *
                C18743) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30792 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30781 +
            (((C19046 - C19045 + C19048 - C19047) * C116 +
              (C19050 - C19049 + C19052 - C19051) * C30655) *
                 C18742 +
             ((C20749 - C20750 + C20751 - C20752) * C116 +
              (C20753 - C20754 + C20755 - C20756) * C30655) *
                 C18743) *
                C30757) *
               C2332 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30792 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30781 +
            (((C14352 - C14351 + C14354 - C14353) * C116 +
              (C14356 - C14355 + C14358 - C14357) * C30655) *
                 C18742 +
             ((C15689 - C15690 + C15691 - C15692) * C116 +
              (C15693 - C15694 + C15695 - C15696) * C30655) *
                 C18743) *
                C30757) *
               C30533) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30792 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30781 +
            (((C19062 - C19061 + C19064 - C19063) * C116 +
              (C19066 - C19065 + C19068 - C19067) * C30655) *
                 C18742 +
             ((C21089 - C21090 + C21091 - C21092) * C116 +
              (C21093 - C21094 + C21095 - C21096) * C30655) *
                 C18743) *
                C30757) *
               C2332 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30792 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30781 +
            (((C15422 - C15421 + C15424 - C15423) * C116 +
              (C15426 - C15425 + C15428 - C15427) * C30655) *
                 C18742 +
             ((C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
               C13131 * C2224) *
                  C116 +
              (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
               C13131 * C2230) *
                  C30655) *
                 C18743) *
                C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30724 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30724 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30447 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30724 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30724 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30456 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30655) *
                 C18742 +
             ((C19069 - C19070 + C19071 - C19072) * C116 +
              (C19073 - C19074 + C19075 - C19076) * C30655) *
                 C18743) *
                C30724 +
            (((C19070 - C19069 + C19072 - C19071) * C116 +
              (C19074 - C19073 + C19076 - C19075) * C30655) *
                 C18742 +
             ((C19077 - C19078 + C19079 - C19080) * C116 +
              (C19081 - C19082 + C19083 - C19084) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13314 - C13313 + C13316 - C13315) * C116 +
              (C13318 - C13317 + C13320 - C13319) * C30655) *
                 C18742 +
             ((C13953 - C13954 + C13955 - C13956) * C116 +
              (C13957 - C13958 + C13959 - C13960) * C30655) *
                 C18743) *
                C30724 +
            (((C13954 - C13953 + C13956 - C13955) * C116 +
              (C13958 - C13957 + C13960 - C13959) * C30655) *
                 C18742 +
             ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
               C13131 * C2014) *
                  C116 +
              (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
               C13131 * C2016) *
                  C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30533) *
              C30797 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30533) *
              C30790 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30533) *
              C30777 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C19345 - C19346 + C19347 - C19348) * C116 +
             (C19349 - C19350 + C19351 - C19352) * C30655) *
                C18743) *
               C30488 * C2332 +
           (((C13606 - C13605 + C13608 - C13607) * C116 +
             (C13610 - C13609 + C13612 - C13611) * C30655) *
                C18742 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30655) *
                C18743) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C30798 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30794 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30784 +
           (((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C30488 * C30764) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C30798 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30794 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30784 +
           (((C14506 - C14505 + C14508 - C14507) * C116 +
             (C14510 - C14509 + C14512 - C14511) * C30655) *
                C18742 +
            ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C116 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C30655) *
                C18743) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C3094 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30529 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C3094 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30536 +
           ((((C13290 - C13289 + C13292 - C13291) * C116 +
              (C13294 - C13293 + C13296 - C13295) * C30655) *
                 C18742 +
             ((C14359 - C14360 + C14361 - C14362) * C116 +
              (C14363 - C14364 + C14365 - C14366) * C30655) *
                 C18743) *
                C3094 +
            (((C14360 - C14359 + C14362 - C14361) * C116 +
              (C14364 - C14363 + C14366 - C14365) * C30655) *
                 C18742 +
             ((C14367 - C14368 + C14369 - C14370) * C116 +
              (C14371 - C14372 + C14373 - C14374) * C30655) *
                 C18743) *
                C30575) *
               C2700) *
              C30709 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C3094 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30529 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C3094 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30536 +
           ((((C13306 - C13305 + C13308 - C13307) * C116 +
              (C13310 - C13309 + C13312 - C13311) * C30655) *
                 C18742 +
             ((C14707 - C14708 + C14709 - C14710) * C116 +
              (C14711 - C14712 + C14713 - C14714) * C30655) *
                 C18743) *
                C3094 +
            (((C14708 - C14707 + C14710 - C14709) * C116 +
              (C14712 - C14711 + C14714 - C14713) * C30655) *
                 C18742 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30655) *
                 C18743) *
                C30575) *
               C2700) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30571 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30578 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C20749 - C20750 + C20751 - C20752) * C116 +
             (C20753 - C20754 + C20755 - C20756) * C30655) *
                C18743) *
               C3602) *
              C30529 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30571 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30578 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C3602) *
              C30536 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30571 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30578 +
           (((C14368 - C14367 + C14370 - C14369) * C116 +
             (C14372 - C14371 + C14374 - C14373) * C30655) *
                C18742 +
            ((C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
              C13131 * C6455) *
                 C116 +
             (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
              C13131 * C6457) *
                 C30655) *
                C18743) *
               C3602) *
              C2700) *
         C30442) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C3094 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C30798 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C3094 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30575) *
              C30794 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C3094 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30575) *
              C30784 +
          ((((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C3094 +
           (((C14846 - C14845 + C14848 - C14847) * C116 +
             (C14850 - C14849 + C14852 - C14851) * C30655) *
                C18742 +
            ((C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
              C13131 * C6345) *
                 C116 +
             (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
              C13131 * C6347) *
                 C30655) *
                C18743) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C3094 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C3094 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30788 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C3094 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C3094 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30775 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30655) *
                 C18742 +
             ((C19069 - C19070 + C19071 - C19072) * C116 +
              (C19073 - C19074 + C19075 - C19076) * C30655) *
                 C18743) *
                C3094 +
            (((C19070 - C19069 + C19072 - C19071) * C116 +
              (C19074 - C19073 + C19076 - C19075) * C30655) *
                 C18742 +
             ((C19077 - C19078 + C19079 - C19080) * C116 +
              (C19081 - C19082 + C19083 - C19084) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13314 - C13313 + C13316 - C13315) * C116 +
              (C13318 - C13317 + C13320 - C13319) * C30655) *
                 C18742 +
             ((C13953 - C13954 + C13955 - C13956) * C116 +
              (C13957 - C13958 + C13959 - C13960) * C30655) *
                 C18743) *
                C3094 +
            (((C13954 - C13953 + C13956 - C13955) * C116 +
              (C13958 - C13957 + C13960 - C13959) * C30655) *
                 C18742 +
             ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
               C13131 * C2014) *
                  C116 +
              (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
               C13131 * C2016) *
                  C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30799 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30796 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C20749 - C20750 + C20751 - C20752) * C116 +
             (C20753 - C20754 + C20755 - C20756) * C30655) *
                C18743) *
               C30787 +
           (((C20750 - C20749 + C20752 - C20751) * C116 +
             (C20754 - C20753 + C20756 - C20755) * C30655) *
                C18742 +
            ((C20757 - C20758 + C20759 - C20760) * C116 +
             (C20761 - C20762 + C20763 - C20764) * C30655) *
                C18743) *
               C30770) *
              C2332 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30799 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30796 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C30787 +
           (((C15690 - C15689 + C15692 - C15691) * C116 +
             (C15694 - C15693 + C15696 - C15695) * C30655) *
                C18742 +
            ((C13126 * C6192 - C13130 * C6188 + C13127 * C10578 -
              C13131 * C10577) *
                 C116 +
             (C13126 * C6197 - C13130 * C6193 + C13127 * C10580 -
              C13131 * C10579) *
                 C30655) *
                C18743) *
               C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30571 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30578 +
            (((C19046 - C19045 + C19048 - C19047) * C116 +
              (C19050 - C19049 + C19052 - C19051) * C30655) *
                 C18742 +
             ((C20749 - C20750 + C20751 - C20752) * C116 +
              (C20753 - C20754 + C20755 - C20756) * C30655) *
                 C18743) *
                C3602) *
               C2332 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30571 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30578 +
            (((C14352 - C14351 + C14354 - C14353) * C116 +
              (C14356 - C14355 + C14358 - C14357) * C30655) *
                 C18742 +
             ((C15689 - C15690 + C15691 - C15692) * C116 +
              (C15693 - C15694 + C15695 - C15696) * C30655) *
                 C18743) *
                C3602) *
               C30533) *
              C30709 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30571 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30578 +
            (((C19062 - C19061 + C19064 - C19063) * C116 +
              (C19066 - C19065 + C19068 - C19067) * C30655) *
                 C18742 +
             ((C21089 - C21090 + C21091 - C21092) * C116 +
              (C21093 - C21094 + C21095 - C21096) * C30655) *
                 C18743) *
                C3602) *
               C2332 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30571 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30578 +
            (((C15422 - C15421 + C15424 - C15423) * C116 +
              (C15426 - C15425 + C15428 - C15427) * C30655) *
                 C18742 +
             ((C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
               C13131 * C2224) *
                  C116 +
              (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
               C13131 * C2230) *
                  C30655) *
                 C18743) *
                C3602) *
               C30533) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C3094 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C3094 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30788 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C3094 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C3094 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30775 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30655) *
                 C18742 +
             ((C19069 - C19070 + C19071 - C19072) * C116 +
              (C19073 - C19074 + C19075 - C19076) * C30655) *
                 C18743) *
                C3094 +
            (((C19070 - C19069 + C19072 - C19071) * C116 +
              (C19074 - C19073 + C19076 - C19075) * C30655) *
                 C18742 +
             ((C19077 - C19078 + C19079 - C19080) * C116 +
              (C19081 - C19082 + C19083 - C19084) * C30655) *
                 C18743) *
                C30575) *
               C2332 +
           ((((C13314 - C13313 + C13316 - C13315) * C116 +
              (C13318 - C13317 + C13320 - C13319) * C30655) *
                 C18742 +
             ((C13953 - C13954 + C13955 - C13956) * C116 +
              (C13957 - C13958 + C13959 - C13960) * C30655) *
                 C18743) *
                C3094 +
            (((C13954 - C13953 + C13956 - C13955) * C116 +
              (C13958 - C13957 + C13960 - C13959) * C30655) *
                 C18742 +
             ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
               C13131 * C2014) *
                  C116 +
              (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
               C13131 * C2016) *
                  C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C3094 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C30798 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C3094 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30575) *
              C30794 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C3094 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30575) *
              C30784 +
          ((((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C3094 +
           (((C14846 - C14845 + C14848 - C14847) * C116 +
             (C14850 - C14849 + C14852 - C14851) * C30655) *
                C18742 +
            ((C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
              C13131 * C6345) *
                 C116 +
             (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
              C13131 * C6347) *
                 C30655) *
                C18743) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C1284 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C1285 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C1286 +
           (((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C30488 * C30764) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C1284 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C1285 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C1286 +
           (((C14506 - C14505 + C14508 - C14507) * C116 +
             (C14510 - C14509 + C14512 - C14511) * C30655) *
                C18742 +
            ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C116 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C30655) *
                C18743) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30533) *
              C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30533) *
              C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30533) *
              C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                 C116 +
             (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                 C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13606 - C13605 + C13608 - C13607) * C116 +
             (C13610 - C13609 + C13612 - C13611) * C30655) *
                C18742 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30655) *
                C18743) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C1664 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C1665 +
            (((C19046 - C19045 + C19048 - C19047) * C116 +
              (C19050 - C19049 + C19052 - C19051) * C30655) *
                 C18742 +
             ((C20749 - C20750 + C20751 - C20752) * C116 +
              (C20753 - C20754 + C20755 - C20756) * C30655) *
                 C18743) *
                C30757) *
               C30723 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C1664 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C1665 +
            (((C14352 - C14351 + C14354 - C14353) * C116 +
              (C14356 - C14355 + C14358 - C14357) * C30655) *
                 C18742 +
             ((C15689 - C15690 + C15691 - C15692) * C116 +
              (C15693 - C15694 + C15695 - C15696) * C30655) *
                 C18743) *
                C30757) *
               C30533) *
              C30709 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C1664 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C1665 +
            (((C19062 - C19061 + C19064 - C19063) * C116 +
              (C19066 - C19065 + C19068 - C19067) * C30655) *
                 C18742 +
             ((C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
               C13127 * C1852) *
                  C116 +
              (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
               C13127 * C1864) *
                  C30655) *
                 C18743) *
                C30757) *
               C30723 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C1664 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C1665 +
            (((C15422 - C15421 + C15424 - C15423) * C116 +
              (C15426 - C15425 + C15428 - C15427) * C30655) *
                 C18742 +
             ((C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
               C13131 * C2224) *
                  C116 +
              (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
               C13131 * C2230) *
                  C30655) *
                 C18743) *
                C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30724 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C1284 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30724 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30575) *
              C1285 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30724 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30575) *
              C1286 +
          ((((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C30724 +
           (((C14846 - C14845 + C14848 - C14847) * C116 +
             (C14850 - C14849 + C14852 - C14851) * C30655) *
                C18742 +
            ((C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
              C13131 * C6345) *
                 C116 +
             (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
              C13131 * C6347) *
                 C30655) *
                C18743) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30724 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30724 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C258 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30724 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30724 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C259 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30655) *
                 C18742 +
             ((C19069 - C19070 + C19071 - C19072) * C116 +
              (C19073 - C19074 + C19075 - C19076) * C30655) *
                 C18743) *
                C30724 +
            (((C19070 - C19069 + C19072 - C19071) * C116 +
              (C19074 - C19073 + C19076 - C19075) * C30655) *
                 C18742 +
             ((C19077 - C19078 + C19079 - C19080) * C116 +
              (C19081 - C19082 + C19083 - C19084) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13314 - C13313 + C13316 - C13315) * C116 +
              (C13318 - C13317 + C13320 - C13319) * C30655) *
                 C18742 +
             ((C13953 - C13954 + C13955 - C13956) * C116 +
              (C13957 - C13958 + C13959 - C13960) * C30655) *
                 C18743) *
                C30724 +
            (((C13954 - C13953 + C13956 - C13955) * C116 +
              (C13958 - C13957 + C13960 - C13959) * C30655) *
                 C18742 +
             ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
               C13131 * C2014) *
                  C116 +
              (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
               C13131 * C2016) *
                  C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C2116 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C2117 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C20749 - C20750 + C20751 - C20752) * C116 +
             (C20753 - C20754 + C20755 - C20756) * C30655) *
                C18743) *
               C2118 +
           (((C20750 - C20749 + C20752 - C20751) * C116 +
             (C20754 - C20753 + C20756 - C20755) * C30655) *
                C18742 +
            ((C20757 - C20758 + C20759 - C20760) * C116 +
             (C20761 - C20762 + C20763 - C20764) * C30655) *
                C18743) *
               C30770) *
              C30723 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C2116 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C2117 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C2118 +
           (((C15690 - C15689 + C15692 - C15691) * C116 +
             (C15694 - C15693 + C15696 - C15695) * C30655) *
                C18742 +
            ((C13126 * C6192 - C13130 * C6188 + C13127 * C10578 -
              C13131 * C10577) *
                 C116 +
             (C13126 * C6197 - C13130 * C6193 + C13127 * C10580 -
              C13131 * C10579) *
                 C30655) *
                C18743) *
               C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C124 - C13130 * C117 + C13127 * C125 -
                 C13131 * C118) *
                    C116 +
                (C13126 * C138 - C13130 * C127 + C13127 * C139 -
                 C13131 * C128) *
                    C30655) *
                   C18742 +
               ((C13126 * C424 - C13130 * C414 + C13127 * C425 -
                 C13131 * C415) *
                    C116 +
                (C13126 * C444 - C13130 * C427 + C13127 * C445 -
                 C13131 * C428) *
                    C30655) *
                   C18743) *
                  C30488 * C30470 * C108 +
              (((C13130 * C118 - C13126 * C125 + C13131 * C119 -
                 C13127 * C126) *
                    C116 +
                (C13130 * C128 - C13126 * C139 + C13131 * C129 -
                 C13127 * C140) *
                    C30655) *
                   C18742 +
               ((C13130 * C415 - C13126 * C425 + C13131 * C416 -
                 C13127 * C426) *
                    C116 +
                (C13130 * C428 - C13126 * C445 + C13131 * C429 -
                 C13127 * C446) *
                    C30655) *
                   C18743) *
                  C30488 * C30470 * C109 +
              (((C13126 * C126 - C13130 * C119 + C13127 * C130 -
                 C13131 * C120) *
                    C116 +
                (C13126 * C140 - C13130 * C129 + C13127 * C141 -
                 C13131 * C131) *
                    C30655) *
                   C18742 +
               ((C13126 * C426 - C13130 * C416 + C13127 * C436 -
                 C13131 * C420) *
                    C116 +
                (C13126 * C446 - C13130 * C429 + C13127 * C450 -
                 C13131 * C437) *
                    C30655) *
                   C18743) *
                  C30488 * C30470 * C110 +
              (((C13130 * C120 - C13126 * C130 + C13131 * C121 -
                 C13127 * C132) *
                    C116 +
                (C13130 * C131 - C13126 * C141 + C13131 * C133 -
                 C13127 * C142) *
                    C30655) *
                   C18742 +
               ((C13130 * C420 - C13126 * C436 + C13131 * C422 -
                 C13127 * C440) *
                    C116 +
                (C13130 * C437 - C13126 * C450 + C13131 * C441 -
                 C13127 * C452) *
                    C30655) *
                   C18743) *
                  C30488 * C30470 * C111 +
              (((C13126 * C132 - C13130 * C121 + C13127 * C134 -
                 C13131 * C122) *
                    C116 +
                (C13126 * C142 - C13130 * C133 + C13127 * C143 -
                 C13131 * C135) *
                    C30655) *
                   C18742 +
               ((C13126 * C440 - C13130 * C422 + C13127 * C663 -
                 C13131 * C662) *
                    C116 +
                (C13126 * C452 - C13130 * C441 + C13127 * C665 -
                 C13131 * C664) *
                    C30655) *
                   C18743) *
                  C30488 * C30470 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C13126 * C124 - C13130 * C117 + C13127 * C125 -
                  C13131 * C118) *
                     C116 +
                 (C13126 * C138 - C13130 * C127 + C13127 * C139 -
                  C13131 * C128) *
                     C30655) *
                    C18742 +
                ((C13126 * C424 - C13130 * C414 + C13127 * C425 -
                  C13131 * C415) *
                     C116 +
                 (C13126 * C444 - C13130 * C427 + C13127 * C445 -
                  C13131 * C428) *
                     C30655) *
                    C18743) *
                   C30488 * C30791 +
               (((C13282 - C13281 + C13284 - C13283) * C116 +
                 (C13286 - C13285 + C13288 - C13287) * C30655) *
                    C18742 +
                ((C13937 - C13938 + C13939 - C13940) * C116 +
                 (C13941 - C13942 + C13943 - C13944) * C30655) *
                    C18743) *
                   C30488 * C30779 +
               (((C13290 - C13289 + C13292 - C13291) * C116 +
                 (C13294 - C13293 + C13296 - C13295) * C30655) *
                    C18742 +
                ((C14359 - C14360 + C14361 - C14362) * C116 +
                 (C14363 - C14364 + C14365 - C14366) * C30655) *
                    C18743) *
                   C30488 * C30754) *
                  C258 +
              ((((C13130 * C118 - C13126 * C125 + C13131 * C119 -
                  C13127 * C126) *
                     C116 +
                 (C13130 * C128 - C13126 * C139 + C13131 * C129 -
                  C13127 * C140) *
                     C30655) *
                    C18742 +
                ((C13130 * C415 - C13126 * C425 + C13131 * C416 -
                  C13127 * C426) *
                     C116 +
                 (C13130 * C428 - C13126 * C445 + C13131 * C429 -
                  C13127 * C446) *
                     C30655) *
                    C18743) *
                   C30488 * C30791 +
               (((C13298 - C13297 + C13300 - C13299) * C116 +
                 (C13302 - C13301 + C13304 - C13303) * C30655) *
                    C18742 +
                ((C13945 - C13946 + C13947 - C13948) * C116 +
                 (C13949 - C13950 + C13951 - C13952) * C30655) *
                    C18743) *
                   C30488 * C30779 +
               (((C13306 - C13305 + C13308 - C13307) * C116 +
                 (C13310 - C13309 + C13312 - C13311) * C30655) *
                    C18742 +
                ((C14707 - C14708 + C14709 - C14710) * C116 +
                 (C14711 - C14712 + C14713 - C14714) * C30655) *
                    C18743) *
                   C30488 * C30754) *
                  C259 +
              ((((C13126 * C126 - C13130 * C119 + C13127 * C130 -
                  C13131 * C120) *
                     C116 +
                 (C13126 * C140 - C13130 * C129 + C13127 * C141 -
                  C13131 * C131) *
                     C30655) *
                    C18742 +
                ((C13126 * C426 - C13130 * C416 + C13127 * C436 -
                  C13131 * C420) *
                     C116 +
                 (C13126 * C446 - C13130 * C429 + C13127 * C450 -
                  C13131 * C437) *
                     C30655) *
                    C18743) *
                   C30488 * C30791 +
               (((C13314 - C13313 + C13316 - C13315) * C116 +
                 (C13318 - C13317 + C13320 - C13319) * C30655) *
                    C18742 +
                ((C13953 - C13954 + C13955 - C13956) * C116 +
                 (C13957 - C13958 + C13959 - C13960) * C30655) *
                    C18743) *
                   C30488 * C30779 +
               (((C13322 - C13321 + C13324 - C13323) * C116 +
                 (C13326 - C13325 + C13328 - C13327) * C30655) *
                    C18742 +
                ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
                  C13131 * C1440) *
                     C116 +
                 (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
                  C13131 * C1442) *
                     C30655) *
                    C18743) *
                   C30488 * C30754) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30792 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30781 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30792 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30781 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
              C13127 * C1852) *
                 C116 +
             (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
              C13127 * C1864) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30792 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30781 +
           (((C19078 - C19077 + C19080 - C19079) * C116 +
             (C19082 - C19081 + C19084 - C19083) * C30655) *
                C18742 +
            ((C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
              C13131 * C2120) *
                 C116 +
             (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
              C13131 * C2122) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C19037 - C19038 + C19039 - C19040) * C116 +
            (C19041 - C19042 + C19043 - C19044) * C30655) *
               C18743) *
              C30488 * C1010 +
          (((C13282 - C13281 + C13284 - C13283) * C116 +
            (C13286 - C13285 + C13288 - C13287) * C30655) *
               C18742 +
           ((C13937 - C13938 + C13939 - C13940) * C116 +
            (C13941 - C13942 + C13943 - C13944) * C30655) *
               C18743) *
              C30488 * C1011 +
          (((C13290 - C13289 + C13292 - C13291) * C116 +
            (C13294 - C13293 + C13296 - C13295) * C30655) *
               C18742 +
           ((C14359 - C14360 + C14361 - C14362) * C116 +
            (C14363 - C14364 + C14365 - C14366) * C30655) *
               C18743) *
              C30488 * C1012 +
          (((C14190 - C14189 + C14192 - C14191) * C116 +
            (C14194 - C14193 + C14196 - C14195) * C30655) *
               C18742 +
           ((C14845 - C14846 + C14847 - C14848) * C116 +
            (C14849 - C14850 + C14851 - C14852) * C30655) *
               C18743) *
              C30488 * C1013 +
          (((C14198 - C14197 + C14200 - C14199) * C116 +
            (C14202 - C14201 + C14204 - C14203) * C30655) *
               C18742 +
           ((C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C116 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C30655) *
               C18743) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30792 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30781 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C942 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30792 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30781 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C30757) *
              C943 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30792 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30781 +
           (((C14368 - C14367 + C14370 - C14369) * C116 +
             (C14372 - C14371 + C14374 - C14373) * C30655) *
                C18742 +
            ((C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
              C13131 * C6455) *
                 C116 +
             (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
              C13131 * C6457) *
                 C30655) *
                C18743) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C1664 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C1665 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C1664 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C1665 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
              C13127 * C1852) *
                 C116 +
             (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
              C13127 * C1864) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C1664 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C1665 +
           (((C19078 - C19077 + C19080 - C19079) * C116 +
             (C19082 - C19081 + C19084 - C19083) * C30655) *
                C18742 +
            ((C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
              C13131 * C2120) *
                 C116 +
             (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
              C13131 * C2122) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C1664 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C1665 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C30791 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C1664 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C1665 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C30757) *
              C30779 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C1664 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C1665 +
           (((C14368 - C14367 + C14370 - C14369) * C116 +
             (C14372 - C14371 + C14374 - C14373) * C30655) *
                C18742 +
            ((C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
              C13131 * C6455) *
                 C116 +
             (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
              C13131 * C6457) *
                 C30655) *
                C18743) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C19037 - C19038 + C19039 - C19040) * C116 +
            (C19041 - C19042 + C19043 - C19044) * C30655) *
               C18743) *
              C1839 +
          (((C19038 - C19037 + C19040 - C19039) * C116 +
            (C19042 - C19041 + C19044 - C19043) * C30655) *
               C18742 +
           ((C19045 - C19046 + C19047 - C19048) * C116 +
            (C19049 - C19050 + C19051 - C19052) * C30655) *
               C18743) *
              C1840 +
          (((C19046 - C19045 + C19048 - C19047) * C116 +
            (C19050 - C19049 + C19052 - C19051) * C30655) *
               C18742 +
           ((C20749 - C20750 + C20751 - C20752) * C116 +
            (C20753 - C20754 + C20755 - C20756) * C30655) *
               C18743) *
              C1841 +
          (((C20750 - C20749 + C20752 - C20751) * C116 +
            (C20754 - C20753 + C20756 - C20755) * C30655) *
               C18742 +
           ((C20757 - C20758 + C20759 - C20760) * C116 +
            (C20761 - C20762 + C20763 - C20764) * C30655) *
               C18743) *
              C1842 +
          (((C20758 - C20757 + C20760 - C20759) * C116 +
            (C20762 - C20761 + C20764 - C20763) * C30655) *
               C18742 +
           ((C13126 * C10407 - C13130 * C10405 + C13127 * C10689 -
             C13131 * C10688) *
                C116 +
            (C13126 * C10411 - C13130 * C10408 + C13127 * C10691 -
             C13131 * C10690) *
                C30655) *
               C18743) *
              C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30724 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C942 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30724 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C943 +
           ((((C13290 - C13289 + C13292 - C13291) * C116 +
              (C13294 - C13293 + C13296 - C13295) * C30655) *
                 C18742 +
             ((C14359 - C14360 + C14361 - C14362) * C116 +
              (C14363 - C14364 + C14365 - C14366) * C30655) *
                 C18743) *
                C30724 +
            (((C14360 - C14359 + C14362 - C14361) * C116 +
              (C14364 - C14363 + C14366 - C14365) * C30655) *
                 C18742 +
             ((C14367 - C14368 + C14369 - C14370) * C116 +
              (C14371 - C14372 + C14373 - C14374) * C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C30709 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30724 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C942 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30724 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C943 +
           ((((C13306 - C13305 + C13308 - C13307) * C116 +
              (C13310 - C13309 + C13312 - C13311) * C30655) *
                 C18742 +
             ((C14707 - C14708 + C14709 - C14710) * C116 +
              (C14711 - C14712 + C14713 - C14714) * C30655) *
                 C18743) *
                C30724 +
            (((C14708 - C14707 + C14710 - C14709) * C116 +
              (C14712 - C14711 + C14714 - C14713) * C30655) *
                 C18742 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30724 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C30470 * C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30724 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30575) *
              C30470 * C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30724 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30575) *
              C30470 * C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C19345 - C19346 + C19347 - C19348) * C116 +
             (C19349 - C19350 + C19351 - C19352) * C30655) *
                C18743) *
               C30724 +
           (((C19346 - C19345 + C19348 - C19347) * C116 +
             (C19350 - C19349 + C19352 - C19351) * C30655) *
                C18742 +
            ((C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                 C116 +
             (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                 C30655) *
                C18743) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C2116 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C2117 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C20749 - C20750 + C20751 - C20752) * C116 +
             (C20753 - C20754 + C20755 - C20756) * C30655) *
                C18743) *
               C2118 +
           (((C20750 - C20749 + C20752 - C20751) * C116 +
             (C20754 - C20753 + C20756 - C20755) * C30655) *
                C18742 +
            ((C20757 - C20758 + C20759 - C20760) * C116 +
             (C20761 - C20762 + C20763 - C20764) * C30655) *
                C18743) *
               C30770) *
              C30470 * C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C2116 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C2117 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C21089 - C21090 + C21091 - C21092) * C116 +
             (C21093 - C21094 + C21095 - C21096) * C30655) *
                C18743) *
               C2118 +
           (((C21090 - C21089 + C21092 - C21091) * C116 +
             (C21094 - C21093 + C21096 - C21095) * C30655) *
                C18742 +
            ((C13126 * C1857 - C13130 * C1848 + C13127 * C1858 -
              C13131 * C1849) *
                 C116 +
             (C13126 * C1866 - C13130 * C1860 + C13127 * C1867 -
              C13131 * C1861) *
                 C30655) *
                C18743) *
               C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                 C116 +
             (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                 C116 +
             (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                 C116 +
             (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                C116 +
            (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                C30655) *
               C18743) *
              C30488 * C30470 * C108 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C116 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C30655) *
               C18742 +
           ((C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                C116 +
            (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                C30655) *
               C18743) *
              C30488 * C30470 * C109 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C116 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C30655) *
               C18742 +
           ((C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                C116 +
            (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                C30655) *
               C18743) *
              C30488 * C30470 * C110 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C116 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C30655) *
               C18742 +
           ((C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                C116 +
            (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                C30655) *
               C18743) *
              C30488 * C30470 * C111 +
          (((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                C116 +
            (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                C30655) *
               C18742 +
           ((C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
                C116 +
            (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
                C30655) *
               C18743) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C19037 - C19038 + C19039 - C19040) * C116 +
            (C19041 - C19042 + C19043 - C19044) * C30655) *
               C18743) *
              C30488 * C1010 +
          (((C13282 - C13281 + C13284 - C13283) * C116 +
            (C13286 - C13285 + C13288 - C13287) * C30655) *
               C18742 +
           ((C13937 - C13938 + C13939 - C13940) * C116 +
            (C13941 - C13942 + C13943 - C13944) * C30655) *
               C18743) *
              C30488 * C1011 +
          (((C13290 - C13289 + C13292 - C13291) * C116 +
            (C13294 - C13293 + C13296 - C13295) * C30655) *
               C18742 +
           ((C14359 - C14360 + C14361 - C14362) * C116 +
            (C14363 - C14364 + C14365 - C14366) * C30655) *
               C18743) *
              C30488 * C1012 +
          (((C14190 - C14189 + C14192 - C14191) * C116 +
            (C14194 - C14193 + C14196 - C14195) * C30655) *
               C18742 +
           ((C14845 - C14846 + C14847 - C14848) * C116 +
            (C14849 - C14850 + C14851 - C14852) * C30655) *
               C18743) *
              C30488 * C1013 +
          (((C14198 - C14197 + C14200 - C14199) * C116 +
            (C14202 - C14201 + C14204 - C14203) * C30655) *
               C18742 +
           ((C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C116 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C30655) *
               C18743) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C1664 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C1665 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C1664 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C1665 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
              C13127 * C1852) *
                 C116 +
             (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
              C13127 * C1864) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C1664 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C1665 +
           (((C19078 - C19077 + C19080 - C19079) * C116 +
             (C19082 - C19081 + C19084 - C19083) * C30655) *
                C18742 +
            ((C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
              C13131 * C2120) *
                 C116 +
             (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
              C13131 * C2122) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C1664 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C1665 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C30791 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C1664 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C1665 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C30757) *
              C30779 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C1664 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C1665 +
           (((C14368 - C14367 + C14370 - C14369) * C116 +
             (C14372 - C14371 + C14374 - C14373) * C30655) *
                C18742 +
            ((C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
              C13131 * C6455) *
                 C116 +
             (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
              C13131 * C6457) *
                 C30655) *
                C18743) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C3094 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C3094 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30447 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C3094 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C3094 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30456 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30655) *
                 C18742 +
             ((C19069 - C19070 + C19071 - C19072) * C116 +
              (C19073 - C19074 + C19075 - C19076) * C30655) *
                 C18743) *
                C3094 +
            (((C19070 - C19069 + C19072 - C19071) * C116 +
              (C19074 - C19073 + C19076 - C19075) * C30655) *
                 C18742 +
             ((C19077 - C19078 + C19079 - C19080) * C116 +
              (C19081 - C19082 + C19083 - C19084) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13314 - C13313 + C13316 - C13315) * C116 +
              (C13318 - C13317 + C13320 - C13319) * C30655) *
                 C18742 +
             ((C13953 - C13954 + C13955 - C13956) * C116 +
              (C13957 - C13958 + C13959 - C13960) * C30655) *
                 C18743) *
                C3094 +
            (((C13954 - C13953 + C13956 - C13955) * C116 +
              (C13958 - C13957 + C13960 - C13959) * C30655) *
                 C18742 +
             ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
               C13131 * C2014) *
                  C116 +
              (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
               C13131 * C2016) *
                  C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30571 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30578 +
            (((C19046 - C19045 + C19048 - C19047) * C116 +
              (C19050 - C19049 + C19052 - C19051) * C30655) *
                 C18742 +
             ((C20749 - C20750 + C20751 - C20752) * C116 +
              (C20753 - C20754 + C20755 - C20756) * C30655) *
                 C18743) *
                C3602) *
               C30723 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30571 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30578 +
            (((C14352 - C14351 + C14354 - C14353) * C116 +
              (C14356 - C14355 + C14358 - C14357) * C30655) *
                 C18742 +
             ((C15689 - C15690 + C15691 - C15692) * C116 +
              (C15693 - C15694 + C15695 - C15696) * C30655) *
                 C18743) *
                C3602) *
               C30533) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30571 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30578 +
            (((C19062 - C19061 + C19064 - C19063) * C116 +
              (C19066 - C19065 + C19068 - C19067) * C30655) *
                 C18742 +
             ((C21089 - C21090 + C21091 - C21092) * C116 +
              (C21093 - C21094 + C21095 - C21096) * C30655) *
                 C18743) *
                C3602) *
               C30723 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30571 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30578 +
            (((C15422 - C15421 + C15424 - C15423) * C116 +
              (C15426 - C15425 + C15428 - C15427) * C30655) *
                 C18742 +
             ((C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
               C13131 * C2224) *
                  C116 +
              (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
               C13131 * C2230) *
                  C30655) *
                 C18743) *
                C3602) *
               C30533) *
              C30453)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C3094 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30791 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C3094 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30779 +
           ((((C13290 - C13289 + C13292 - C13291) * C116 +
              (C13294 - C13293 + C13296 - C13295) * C30655) *
                 C18742 +
             ((C14359 - C14360 + C14361 - C14362) * C116 +
              (C14363 - C14364 + C14365 - C14366) * C30655) *
                 C18743) *
                C3094 +
            (((C14360 - C14359 + C14362 - C14361) * C116 +
              (C14364 - C14363 + C14366 - C14365) * C30655) *
                 C18742 +
             ((C14367 - C14368 + C14369 - C14370) * C116 +
              (C14371 - C14372 + C14373 - C14374) * C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C3094 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30791 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C3094 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30779 +
           ((((C13306 - C13305 + C13308 - C13307) * C116 +
              (C13310 - C13309 + C13312 - C13311) * C30655) *
                 C18742 +
             ((C14707 - C14708 + C14709 - C14710) * C116 +
              (C14711 - C14712 + C14713 - C14714) * C30655) *
                 C18743) *
                C3094 +
            (((C14708 - C14707 + C14710 - C14709) * C116 +
              (C14712 - C14711 + C14714 - C14713) * C30655) *
                 C18742 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C3094 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C30470 * C30797 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C3094 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30575) *
              C30470 * C30790 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C3094 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30575) *
              C30470 * C30777 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C19345 - C19346 + C19347 - C19348) * C116 +
             (C19349 - C19350 + C19351 - C19352) * C30655) *
                C18743) *
               C3094 +
           (((C19346 - C19345 + C19348 - C19347) * C116 +
             (C19350 - C19349 + C19352 - C19351) * C30655) *
                C18742 +
            ((C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                 C116 +
             (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                 C30655) *
                C18743) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30799 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30796 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C20749 - C20750 + C20751 - C20752) * C116 +
             (C20753 - C20754 + C20755 - C20756) * C30655) *
                C18743) *
               C30787 +
           (((C20750 - C20749 + C20752 - C20751) * C116 +
             (C20754 - C20753 + C20756 - C20755) * C30655) *
                C18742 +
            ((C20757 - C20758 + C20759 - C20760) * C116 +
             (C20761 - C20762 + C20763 - C20764) * C30655) *
                C18743) *
               C30770) *
              C30470 * C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30799 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30796 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C21089 - C21090 + C21091 - C21092) * C116 +
             (C21093 - C21094 + C21095 - C21096) * C30655) *
                C18743) *
               C30787 +
           (((C21090 - C21089 + C21092 - C21091) * C116 +
             (C21094 - C21093 + C21096 - C21095) * C30655) *
                C18742 +
            ((C13126 * C1857 - C13130 * C1848 + C13127 * C1858 -
              C13131 * C1849) *
                 C116 +
             (C13126 * C1866 - C13130 * C1860 + C13127 * C1867 -
              C13131 * C1861) *
                 C30655) *
                C18743) *
               C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30571 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30578 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C20749 - C20750 + C20751 - C20752) * C116 +
             (C20753 - C20754 + C20755 - C20756) * C30655) *
                C18743) *
               C3602) *
              C30470 * C30447 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30571 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30578 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C21089 - C21090 + C21091 - C21092) * C116 +
             (C21093 - C21094 + C21095 - C21096) * C30655) *
                C18743) *
               C3602) *
              C30470 * C30456 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30571 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30578 +
           (((C19078 - C19077 + C19080 - C19079) * C116 +
             (C19082 - C19081 + C19084 - C19083) * C30655) *
                C18742 +
            ((C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
              C13131 * C2120) *
                 C116 +
             (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
              C13131 * C2122) *
                 C30655) *
                C18743) *
               C3602) *
              C30470 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C3094 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C30470 * C30797 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C3094 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30575) *
              C30470 * C30790 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C3094 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30575) *
              C30470 * C30777 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C19345 - C19346 + C19347 - C19348) * C116 +
             (C19349 - C19350 + C19351 - C19352) * C30655) *
                C18743) *
               C3094 +
           (((C19346 - C19345 + C19348 - C19347) * C116 +
             (C19350 - C19349 + C19352 - C19351) * C30655) *
                C18742 +
            ((C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                 C116 +
             (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                 C30655) *
                C18743) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C3094 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30791 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C3094 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30779 +
           ((((C13290 - C13289 + C13292 - C13291) * C116 +
              (C13294 - C13293 + C13296 - C13295) * C30655) *
                 C18742 +
             ((C14359 - C14360 + C14361 - C14362) * C116 +
              (C14363 - C14364 + C14365 - C14366) * C30655) *
                 C18743) *
                C3094 +
            (((C14360 - C14359 + C14362 - C14361) * C116 +
              (C14364 - C14363 + C14366 - C14365) * C30655) *
                 C18742 +
             ((C14367 - C14368 + C14369 - C14370) * C116 +
              (C14371 - C14372 + C14373 - C14374) * C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C3094 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30791 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C3094 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30779 +
           ((((C13306 - C13305 + C13308 - C13307) * C116 +
              (C13310 - C13309 + C13312 - C13311) * C30655) *
                 C18742 +
             ((C14707 - C14708 + C14709 - C14710) * C116 +
              (C14711 - C14712 + C14713 - C14714) * C30655) *
                 C18743) *
                C3094 +
            (((C14708 - C14707 + C14710 - C14709) * C116 +
              (C14712 - C14711 + C14714 - C14713) * C30655) *
                 C18742 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30533) *
              C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30533) *
              C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30533) *
              C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                 C116 +
             (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                 C30655) *
                C18743) *
               C30488 * C30723 +
           (((C13606 - C13605 + C13608 - C13607) * C116 +
             (C13610 - C13609 + C13612 - C13611) * C30655) *
                C18742 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30655) *
                C18743) *
               C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C1284 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C1285 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C1286 +
           (((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C30488 * C30764) *
              C30709 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C1284 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C1285 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C1286 +
           (((C14506 - C14505 + C14508 - C14507) * C116 +
             (C14510 - C14509 + C14512 - C14511) * C30655) *
                C18742 +
            ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
              C13131 * C1544) *
                 C116 +
             (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
              C13131 * C1550) *
                 C30655) *
                C18743) *
               C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30724 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30724 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C258 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30724 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30724 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C259 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30655) *
                 C18742 +
             ((C19069 - C19070 + C19071 - C19072) * C116 +
              (C19073 - C19074 + C19075 - C19076) * C30655) *
                 C18743) *
                C30724 +
            (((C19070 - C19069 + C19072 - C19071) * C116 +
              (C19074 - C19073 + C19076 - C19075) * C30655) *
                 C18742 +
             ((C19077 - C19078 + C19079 - C19080) * C116 +
              (C19081 - C19082 + C19083 - C19084) * C30655) *
                 C18743) *
                C30575) *
               C30723 +
           ((((C13314 - C13313 + C13316 - C13315) * C116 +
              (C13318 - C13317 + C13320 - C13319) * C30655) *
                 C18742 +
             ((C13953 - C13954 + C13955 - C13956) * C116 +
              (C13957 - C13958 + C13959 - C13960) * C30655) *
                 C18743) *
                C30724 +
            (((C13954 - C13953 + C13956 - C13955) * C116 +
              (C13958 - C13957 + C13960 - C13959) * C30655) *
                 C18742 +
             ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
               C13131 * C2014) *
                  C116 +
              (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
               C13131 * C2016) *
                  C30655) *
                 C18743) *
                C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30724 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C1284 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30724 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30575) *
              C1285 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30724 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30575) *
              C1286 +
          ((((C14190 - C14189 + C14192 - C14191) * C116 +
             (C14194 - C14193 + C14196 - C14195) * C30655) *
                C18742 +
            ((C14845 - C14846 + C14847 - C14848) * C116 +
             (C14849 - C14850 + C14851 - C14852) * C30655) *
                C18743) *
               C30724 +
           (((C14846 - C14845 + C14848 - C14847) * C116 +
             (C14850 - C14849 + C14852 - C14851) * C30655) *
                C18742 +
            ((C13126 * C5504 - C13130 * C5501 + C13127 * C6346 -
              C13131 * C6345) *
                 C116 +
             (C13126 * C5510 - C13130 * C5505 + C13127 * C6348 -
              C13131 * C6347) *
                 C30655) *
                C18743) *
               C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                 C116 +
             (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                 C116 +
             (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                 C116 +
             (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                C116 +
            (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                C30655) *
               C18743) *
              C30488 * C30470 * C108 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C116 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C30655) *
               C18742 +
           ((C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                C116 +
            (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                C30655) *
               C18743) *
              C30488 * C30470 * C109 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C116 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C30655) *
               C18742 +
           ((C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                C116 +
            (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                C30655) *
               C18743) *
              C30488 * C30470 * C110 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C116 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C30655) *
               C18742 +
           ((C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                C116 +
            (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                C30655) *
               C18743) *
              C30488 * C30470 * C111 +
          (((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                C116 +
            (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                C30655) *
               C18742 +
           ((C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
                C116 +
            (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
                C30655) *
               C18743) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30792 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30781 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30792 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30781 +
           (((C19062 - C19061 + C19064 - C19063) * C116 +
             (C19066 - C19065 + C19068 - C19067) * C30655) *
                C18742 +
            ((C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
              C13127 * C1852) *
                 C116 +
             (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
              C13127 * C1864) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30792 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30781 +
           (((C19078 - C19077 + C19080 - C19079) * C116 +
             (C19082 - C19081 + C19084 - C19083) * C30655) *
                C18742 +
            ((C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
              C13131 * C2120) *
                 C116 +
             (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
              C13131 * C2122) *
                 C30655) *
                C18743) *
               C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C19037 - C19038 + C19039 - C19040) * C116 +
            (C19041 - C19042 + C19043 - C19044) * C30655) *
               C18743) *
              C30488 * C1010 +
          (((C13282 - C13281 + C13284 - C13283) * C116 +
            (C13286 - C13285 + C13288 - C13287) * C30655) *
               C18742 +
           ((C13937 - C13938 + C13939 - C13940) * C116 +
            (C13941 - C13942 + C13943 - C13944) * C30655) *
               C18743) *
              C30488 * C1011 +
          (((C13290 - C13289 + C13292 - C13291) * C116 +
            (C13294 - C13293 + C13296 - C13295) * C30655) *
               C18742 +
           ((C14359 - C14360 + C14361 - C14362) * C116 +
            (C14363 - C14364 + C14365 - C14366) * C30655) *
               C18743) *
              C30488 * C1012 +
          (((C14190 - C14189 + C14192 - C14191) * C116 +
            (C14194 - C14193 + C14196 - C14195) * C30655) *
               C18742 +
           ((C14845 - C14846 + C14847 - C14848) * C116 +
            (C14849 - C14850 + C14851 - C14852) * C30655) *
               C18743) *
              C30488 * C1013 +
          (((C14198 - C14197 + C14200 - C14199) * C116 +
            (C14202 - C14201 + C14204 - C14203) * C30655) *
               C18742 +
           ((C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C116 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C30655) *
               C18743) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30792 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30781 +
           (((C19046 - C19045 + C19048 - C19047) * C116 +
             (C19050 - C19049 + C19052 - C19051) * C30655) *
                C18742 +
            ((C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
              C13131 * C1845) *
                 C116 +
             (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
              C13131 * C1854) *
                 C30655) *
                C18743) *
               C30757) *
              C942 +
          ((((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30792 +
           (((C13938 - C13937 + C13940 - C13939) * C116 +
             (C13942 - C13941 + C13944 - C13943) * C30655) *
                C18742 +
            ((C14351 - C14352 + C14353 - C14354) * C116 +
             (C14355 - C14356 + C14357 - C14358) * C30655) *
                C18743) *
               C30781 +
           (((C14352 - C14351 + C14354 - C14353) * C116 +
             (C14356 - C14355 + C14358 - C14357) * C30655) *
                C18742 +
            ((C15689 - C15690 + C15691 - C15692) * C116 +
             (C15693 - C15694 + C15695 - C15696) * C30655) *
                C18743) *
               C30757) *
              C943 +
          ((((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30792 +
           (((C14360 - C14359 + C14362 - C14361) * C116 +
             (C14364 - C14363 + C14366 - C14365) * C30655) *
                C18742 +
            ((C14367 - C14368 + C14369 - C14370) * C116 +
             (C14371 - C14372 + C14373 - C14374) * C30655) *
                C18743) *
               C30781 +
           (((C14368 - C14367 + C14370 - C14369) * C116 +
             (C14372 - C14371 + C14374 - C14373) * C30655) *
                C18742 +
            ((C13126 * C6190 - C13130 * C6187 + C13127 * C6456 -
              C13131 * C6455) *
                 C116 +
             (C13126 * C6196 - C13130 * C6191 + C13127 * C6458 -
              C13131 * C6457) *
                 C30655) *
                C18743) *
               C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30724 +
           (((C19038 - C19037 + C19040 - C19039) * C116 +
             (C19042 - C19041 + C19044 - C19043) * C30655) *
                C18742 +
            ((C19045 - C19046 + C19047 - C19048) * C116 +
             (C19049 - C19050 + C19051 - C19052) * C30655) *
                C18743) *
               C30575) *
              C30470 * C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30724 +
           (((C19054 - C19053 + C19056 - C19055) * C116 +
             (C19058 - C19057 + C19060 - C19059) * C30655) *
                C18742 +
            ((C19061 - C19062 + C19063 - C19064) * C116 +
             (C19065 - C19066 + C19067 - C19068) * C30655) *
                C18743) *
               C30575) *
              C30470 * C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30724 +
           (((C19070 - C19069 + C19072 - C19071) * C116 +
             (C19074 - C19073 + C19076 - C19075) * C30655) *
                C18742 +
            ((C19077 - C19078 + C19079 - C19080) * C116 +
             (C19081 - C19082 + C19083 - C19084) * C30655) *
                C18743) *
               C30575) *
              C30470 * C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30655) *
                C18742 +
            ((C19345 - C19346 + C19347 - C19348) * C116 +
             (C19349 - C19350 + C19351 - C19352) * C30655) *
                C18743) *
               C30724 +
           (((C19346 - C19345 + C19348 - C19347) * C116 +
             (C19350 - C19349 + C19352 - C19351) * C30655) *
                C18742 +
            ((C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                 C116 +
             (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                 C30655) *
                C18743) *
               C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30655) *
                 C18742 +
             ((C19037 - C19038 + C19039 - C19040) * C116 +
              (C19041 - C19042 + C19043 - C19044) * C30655) *
                 C18743) *
                C30724 +
            (((C19038 - C19037 + C19040 - C19039) * C116 +
              (C19042 - C19041 + C19044 - C19043) * C30655) *
                 C18742 +
             ((C19045 - C19046 + C19047 - C19048) * C116 +
              (C19049 - C19050 + C19051 - C19052) * C30655) *
                 C18743) *
                C30575) *
               C942 +
           ((((C13282 - C13281 + C13284 - C13283) * C116 +
              (C13286 - C13285 + C13288 - C13287) * C30655) *
                 C18742 +
             ((C13937 - C13938 + C13939 - C13940) * C116 +
              (C13941 - C13942 + C13943 - C13944) * C30655) *
                 C18743) *
                C30724 +
            (((C13938 - C13937 + C13940 - C13939) * C116 +
              (C13942 - C13941 + C13944 - C13943) * C30655) *
                 C18742 +
             ((C14351 - C14352 + C14353 - C14354) * C116 +
              (C14355 - C14356 + C14357 - C14358) * C30655) *
                 C18743) *
                C30575) *
               C943 +
           ((((C13290 - C13289 + C13292 - C13291) * C116 +
              (C13294 - C13293 + C13296 - C13295) * C30655) *
                 C18742 +
             ((C14359 - C14360 + C14361 - C14362) * C116 +
              (C14363 - C14364 + C14365 - C14366) * C30655) *
                 C18743) *
                C30724 +
            (((C14360 - C14359 + C14362 - C14361) * C116 +
              (C14364 - C14363 + C14366 - C14365) * C30655) *
                 C18742 +
             ((C14367 - C14368 + C14369 - C14370) * C116 +
              (C14371 - C14372 + C14373 - C14374) * C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C30709 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30655) *
                 C18742 +
             ((C19053 - C19054 + C19055 - C19056) * C116 +
              (C19057 - C19058 + C19059 - C19060) * C30655) *
                 C18743) *
                C30724 +
            (((C19054 - C19053 + C19056 - C19055) * C116 +
              (C19058 - C19057 + C19060 - C19059) * C30655) *
                 C18742 +
             ((C19061 - C19062 + C19063 - C19064) * C116 +
              (C19065 - C19066 + C19067 - C19068) * C30655) *
                 C18743) *
                C30575) *
               C942 +
           ((((C13298 - C13297 + C13300 - C13299) * C116 +
              (C13302 - C13301 + C13304 - C13303) * C30655) *
                 C18742 +
             ((C13945 - C13946 + C13947 - C13948) * C116 +
              (C13949 - C13950 + C13951 - C13952) * C30655) *
                 C18743) *
                C30724 +
            (((C13946 - C13945 + C13948 - C13947) * C116 +
              (C13950 - C13949 + C13952 - C13951) * C30655) *
                 C18742 +
             ((C15421 - C15422 + C15423 - C15424) * C116 +
              (C15425 - C15426 + C15427 - C15428) * C30655) *
                 C18743) *
                C30575) *
               C943 +
           ((((C13306 - C13305 + C13308 - C13307) * C116 +
              (C13310 - C13309 + C13312 - C13311) * C30655) *
                 C18742 +
             ((C14707 - C14708 + C14709 - C14710) * C116 +
              (C14711 - C14712 + C14713 - C14714) * C30655) *
                 C18743) *
                C30724 +
            (((C14708 - C14707 + C14710 - C14709) * C116 +
              (C14712 - C14711 + C14714 - C14713) * C30655) *
                 C18742 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30655) *
                 C18743) *
                C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                C116 +
            (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                C30655) *
               C18743) *
              C30488 * C30470 * C108 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C116 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C30655) *
               C18742 +
           ((C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                C116 +
            (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                C30655) *
               C18743) *
              C30488 * C30470 * C109 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C116 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C30655) *
               C18742 +
           ((C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                C116 +
            (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                C30655) *
               C18743) *
              C30488 * C30470 * C110 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C116 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C30655) *
               C18742 +
           ((C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                C116 +
            (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                C30655) *
               C18743) *
              C30488 * C30470 * C111 +
          (((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                C116 +
            (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                C30655) *
               C18742 +
           ((C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
                C116 +
            (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
                C30655) *
               C18743) *
              C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                 C116 +
             (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                 C116 +
             (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                 C116 +
             (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                 C30655) *
                C18743) *
               C30488 * C30791 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C30779 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30655) *
                C18742 +
            ((C19037 - C19038 + C19039 - C19040) * C116 +
             (C19041 - C19042 + C19043 - C19044) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13282 - C13281 + C13284 - C13283) * C116 +
             (C13286 - C13285 + C13288 - C13287) * C30655) *
                C18742 +
            ((C13937 - C13938 + C13939 - C13940) * C116 +
             (C13941 - C13942 + C13943 - C13944) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13290 - C13289 + C13292 - C13291) * C116 +
             (C13294 - C13293 + C13296 - C13295) * C30655) *
                C18742 +
            ((C14359 - C14360 + C14361 - C14362) * C116 +
             (C14363 - C14364 + C14365 - C14366) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30788 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30655) *
                C18742 +
            ((C19053 - C19054 + C19055 - C19056) * C116 +
             (C19057 - C19058 + C19059 - C19060) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13298 - C13297 + C13300 - C13299) * C116 +
             (C13302 - C13301 + C13304 - C13303) * C30655) *
                C18742 +
            ((C13945 - C13946 + C13947 - C13948) * C116 +
             (C13949 - C13950 + C13951 - C13952) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13306 - C13305 + C13308 - C13307) * C116 +
             (C13310 - C13309 + C13312 - C13311) * C30655) *
                C18742 +
            ((C14707 - C14708 + C14709 - C14710) * C116 +
             (C14711 - C14712 + C14713 - C14714) * C30655) *
                C18743) *
               C30488 * C30754) *
              C30775 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30655) *
                C18742 +
            ((C19069 - C19070 + C19071 - C19072) * C116 +
             (C19073 - C19074 + C19075 - C19076) * C30655) *
                C18743) *
               C30488 * C942 +
           (((C13314 - C13313 + C13316 - C13315) * C116 +
             (C13318 - C13317 + C13320 - C13319) * C30655) *
                C18742 +
            ((C13953 - C13954 + C13955 - C13956) * C116 +
             (C13957 - C13958 + C13959 - C13960) * C30655) *
                C18743) *
               C30488 * C943 +
           (((C13322 - C13321 + C13324 - C13323) * C116 +
             (C13326 - C13325 + C13328 - C13327) * C30655) *
                C18742 +
            ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
              C13131 * C1440) *
                 C116 +
             (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
              C13131 * C1442) *
                 C30655) *
                C18743) *
               C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30655) *
               C18742 +
           ((C19037 - C19038 + C19039 - C19040) * C116 +
            (C19041 - C19042 + C19043 - C19044) * C30655) *
               C18743) *
              C30488 * C1010 +
          (((C13282 - C13281 + C13284 - C13283) * C116 +
            (C13286 - C13285 + C13288 - C13287) * C30655) *
               C18742 +
           ((C13937 - C13938 + C13939 - C13940) * C116 +
            (C13941 - C13942 + C13943 - C13944) * C30655) *
               C18743) *
              C30488 * C1011 +
          (((C13290 - C13289 + C13292 - C13291) * C116 +
            (C13294 - C13293 + C13296 - C13295) * C30655) *
               C18742 +
           ((C14359 - C14360 + C14361 - C14362) * C116 +
            (C14363 - C14364 + C14365 - C14366) * C30655) *
               C18743) *
              C30488 * C1012 +
          (((C14190 - C14189 + C14192 - C14191) * C116 +
            (C14194 - C14193 + C14196 - C14195) * C30655) *
               C18742 +
           ((C14845 - C14846 + C14847 - C14848) * C116 +
            (C14849 - C14850 + C14851 - C14852) * C30655) *
               C18743) *
              C30488 * C1013 +
          (((C14198 - C14197 + C14200 - C14199) * C116 +
            (C14202 - C14201 + C14204 - C14203) * C30655) *
               C18742 +
           ((C13126 * C5506 - C13130 * C5502 + C13127 * C5788 -
             C13131 * C5787) *
                C116 +
            (C13126 * C5511 - C13130 * C5507 + C13127 * C5790 -
             C13131 * C5789) *
                C30655) *
               C18743) *
              C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30529 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30536 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C2700) *
              C30447 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30529 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30536 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C2700) *
              C30456 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30529 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30536 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30529 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30536 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C2700) *
              C30447 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30529 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30536 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C2700) *
              C30456 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30529 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30536 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C30724 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C2700) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C30724 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30798 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30794 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30784 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30798 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30794 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30784 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30792 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30781 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C30757) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30792 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30781 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30792 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30781 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C30757) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30792 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30781 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C2332 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30794 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C30784 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30794 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C30784 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30792 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30781 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C30757) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30792 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30781 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C30757) *
               C30533) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30792 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30781 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C30757) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30792 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30781 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C30724 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C30724 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30488 * C2332 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30798 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30794 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30784 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30798 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30794 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30784 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30533) *
              C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30533) *
              C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C2332 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C2332 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C30794 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C30784 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C2440 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30798 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C30794 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C30784 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30529 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30536 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C3094 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C2700) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30529 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30536 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C3094 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C2700) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C3602) *
              C30529 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30571 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30578 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C3602) *
              C30536 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C3602) *
              C2700) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30571 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30578 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C3602) *
              C30529 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30571 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30578 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C3602) *
              C30536 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30571 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30578 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C3602) *
              C2700) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30798 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30575) *
              C30794 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30575) *
              C30784 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30655) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30799 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30796 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30787 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C2332 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30799 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30796 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30787 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30655) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C3094 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C3094 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30798 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C3094 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C30794 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C3094 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C30784 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C3094 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30799 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30796 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30787 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 + (C6562 - C6563) * C4561 +
            (C6564 - C6565) * C4557 + (C6566 - C6567) * C4562 +
            (C6568 - C6569) * C4558) *
               C30667 * C30770) *
              C2332 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30799 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30796 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30787 +
           ((C6563 - C6562) * C4560 + (C6565 - C6564) * C4556 +
            (C6567 - C6566) * C4561 + (C6569 - C6568) * C4557 +
            (C30416 * C6558 - C4559 * C6557) * C4562 +
            (C30416 * C6560 - C4559 * C6559) * C4558) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C3602) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C3602) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30571 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30578 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C3602) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30571 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30578 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C3602) *
               C30533) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30571 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30578 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C3602) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30571 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30578 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30798 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30575) *
              C30794 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30575) *
              C30784 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30655) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30788 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30775 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C3094 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C2332 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C3094 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30798 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C3094 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C30794 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C3094 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C30784 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C3094 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C1284 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C1285 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C1286 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C1284 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C1285 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C1286 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C1664 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C1665 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C30757) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C1664 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C1665 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C1664 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C1665 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C30757) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C1664 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C1665 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C30723 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C1285 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C1286 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C1285 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C1286 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C1664 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C1665 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C30757) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C1664 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C1665 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C30757) *
               C30533) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C1664 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C1665 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C30757) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C1664 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C1665 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C30757) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C1284 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30575) *
              C1285 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30575) *
              C1286 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30655) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C30723 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C2116 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C2117 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C2118 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30655) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + (C5180 - C5181) * C4562 +
             (C5182 - C5183) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
             (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C30416 * C1545 - C4559 * C1542) * C4562 +
             (C30416 * C1551 - C4559 * C1548) * C4558) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + (C5188 - C5189) * C4562 +
             (C5190 - C5191) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
             (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C4559 * C1543 - C30416 * C1546) * C4562 +
             (C4559 * C1549 - C30416 * C1552) * C4558) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C30724 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C30724 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C1284 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30724 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C1285 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30724 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C1286 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30724 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C2116 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C2117 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C2118 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 + (C6562 - C6563) * C4561 +
            (C6564 - C6565) * C4557 + (C6566 - C6567) * C4562 +
            (C6568 - C6569) * C4558) *
               C30667 * C30770) *
              C30723 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C2116 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C2117 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C2118 +
           ((C6563 - C6562) * C4560 + (C6565 - C6564) * C4556 +
            (C6567 - C6566) * C4561 + (C6569 - C6568) * C4557 +
            (C30416 * C6558 - C4559 * C6557) * C4562 +
            (C30416 * C6560 - C4559 * C6559) * C4558) *
               C30667 * C30770) *
              C30533) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30655) *
                  C30667 * C30488 * C30470 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C30655) *
                  C30667 * C30488 * C30470 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C30655) *
                  C30667 * C30488 * C30470 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C30655) *
                  C30667 * C30488 * C30470 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C30655) *
                  C30667 * C30488 * C30470 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30655) *
                   C30667 * C30488 * C30791 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30655) *
                   C30667 * C30488 * C30779 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30655) *
                   C30667 * C30488 * C30754) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30792 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30781 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30792 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30781 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30757) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C1664 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C1665 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30791 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30757) *
              C30779 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C1839 +
          ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
            C115 * C416 - C103 * C426) *
               C116 +
           (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
            C115 * C429 - C103 * C446) *
               C30655) *
              C30667 * C1840 +
          ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
            C103 * C432 - C115 * C419) *
               C116 +
           (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
            C103 * C449 - C115 * C435) *
               C30655) *
              C30667 * C1841 +
          ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
            C115 * C1846 - C103 * C1852) *
               C116 +
           (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
            C115 * C1855 - C103 * C1864) *
               C30655) *
              C30667 * C1842 +
          ((C101 * C1856 - C113 * C1847 + C102 * C1857 - C114 * C1848 +
            C103 * C1858 - C115 * C1849) *
               C116 +
           (C101 * C1865 - C113 * C1859 + C102 * C1866 - C114 * C1860 +
            C103 * C1867 - C115 * C1861) *
               C30655) *
              C30667 * C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 +
            (C30416 * C1159 - C4559 * C1150) * C4561 +
            (C30416 * C1177 - C4559 * C1162) * C4557 +
            (C30416 * C1171 - C4559 * C1156) * C4562 +
            (C30416 * C1183 - C4559 * C1174) * C4558) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30792 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30781 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30792 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30781 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C942 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30792 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
            (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
               C30667 * C30781 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C943 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30792 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C4559 * C5502 - C30416 * C5506) * C4562 +
            (C4559 * C5507 - C30416 * C5511) * C4558) *
               C30667 * C30781 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C1664 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C1665 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C1664 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C1665 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30791 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C1664 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C1665 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C30779 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C1664 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C1665 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C1839 +
          ((C4559 * C414 - C30416 * C424) * C4560 +
           (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
           (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
              C30667 * C1840 +
          ((C30416 * C430 - C4559 * C417) * C4560 +
           (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
           (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
              C30667 * C1841 +
          ((C4559 * C1844 - C30416 * C1850) * C4560 +
           (C4559 * C1853 - C30416 * C1862) * C4556 +
           (C4559 * C2222 - C30416 * C2225) * C4561 +
           (C4559 * C2228 - C30416 * C2231) * C4557 +
           (C4559 * C6187 - C30416 * C6190) * C4562 +
           (C4559 * C6191 - C30416 * C6196) * C4558) *
              C30667 * C1842 +
          ((C30416 * C1856 - C4559 * C1847) * C4560 +
           (C30416 * C1865 - C4559 * C1859) * C4556 +
           (C30416 * C6192 - C4559 * C6188) * C4561 +
           (C30416 * C6197 - C4559 * C6193) * C4557 +
           (C30416 * C6194 - C4559 * C6189) * C4562 +
           (C30416 * C6198 - C4559 * C6195) * C4558) *
              C30667 * C1843) *
         C30470 * C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C942 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C943 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C942 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C943 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C30470 * C30709 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C2116 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C2117 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C2118 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30655) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30724 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30724 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30724 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C30724 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 +
             (C4559 * C5502 - C30416 * C5506) * C4562 +
             (C4559 * C5507 - C30416 * C5511) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C30724 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C2116 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C2117 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C2118 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 +
            (C4559 * C2222 - C30416 * C2225) * C4561 +
            (C4559 * C2228 - C30416 * C2231) * C4557 +
            (C4559 * C6187 - C30416 * C6190) * C4562 +
            (C4559 * C6191 - C30416 * C6196) * C4558) *
               C30667 * C30770) *
              C30470 * C30709 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C2116 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C2117 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
            (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
            (C6356 - C6357) * C4558) *
               C30667 * C2118 +
           ((C30416 * C1851 - C4559 * C1845) * C4560 +
            (C30416 * C1863 - C4559 * C1854) * C4556 +
            (C30416 * C2226 - C4559 * C2223) * C4561 +
            (C30416 * C2232 - C4559 * C2229) * C4557 +
            (C30416 * C6456 - C4559 * C6455) * C4562 +
            (C30416 * C6458 - C4559 * C6457) * C4558) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C30470 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30655) *
              C30667 * C30488 * C30470 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30655) *
              C30667 * C30488 * C30470 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30655) *
              C30667 * C30488 * C30470 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30655) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C1664 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C1665 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30791 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30757) *
              C30779 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30470 * C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C1664 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C1665 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C1664 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C1665 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C1664 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C1665 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C30791 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C1664 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C1665 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C30779 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C1664 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C1665 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30533) *
              C30447 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30456 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C3094 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C3094 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30655) *
                C30667 * C3602) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30571 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30578 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30655) *
                C30667 * C3602) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30571 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30578 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30655) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30571 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30578 +
            ((C30416 * C430 - C4559 * C417) * C4560 +
             (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
             (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
                C30667 * C3602) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30571 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30578 +
            ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
             (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
             (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
                C30667 * C3602) *
               C30533) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30571 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30578 +
            ((C4559 * C418 - C30416 * C431) * C4560 +
             (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
             (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
             (C6356 - C6357) * C4558) *
                C30667 * C3602) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30571 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30578 +
            ((C6351 - C6350) * C4560 + (C6353 - C6352) * C4556 +
             (C6355 - C6354) * C4561 + (C6357 - C6356) * C4557 +
             (C30416 * C6346 - C4559 * C6345) * C4562 +
             (C30416 * C6348 - C4559 * C6347) * C4558) *
                C30667 * C3602) *
               C30533) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30791 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30779 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30791 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30779 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30799 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30796 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30787 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30655) *
               C30667 * C30770) *
              C30470 * C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30799 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30796 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30787 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30655) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C3094 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C3094 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C3094 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C3094 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C3094 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30799 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30796 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30787 +
           ((C4559 * C1844 - C30416 * C1850) * C4560 +
            (C4559 * C1853 - C30416 * C1862) * C4556 + (C6562 - C6563) * C4561 +
            (C6564 - C6565) * C4557 + (C6566 - C6567) * C4562 +
            (C6568 - C6569) * C4558) *
               C30667 * C30770) *
              C30470 * C2440 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30799 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30796 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
            (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
            (C6356 - C6357) * C4558) *
               C30667 * C30787 +
           ((C30416 * C1851 - C4559 * C1845) * C4560 +
            (C30416 * C1863 - C4559 * C1854) * C4556 +
            (C30416 * C2226 - C4559 * C2223) * C4561 +
            (C30416 * C2232 - C4559 * C2229) * C4557 +
            (C30416 * C6456 - C4559 * C6455) * C4562 +
            (C30416 * C6458 - C4559 * C6457) * C4558) *
               C30667 * C30770) *
              C30470 * C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C3602) *
              C30470 * C30447 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30571 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30578 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C3602) *
              C30470 * C30456 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30571 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30578 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C3602) *
              C30470 * C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30571 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30578 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C3602) *
              C30470 * C30447 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30571 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30578 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 + (C6350 - C6351) * C4561 +
            (C6352 - C6353) * C4557 + (C6354 - C6355) * C4562 +
            (C6356 - C6357) * C4558) *
               C30667 * C3602) *
              C30470 * C30456 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30571 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C30578 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C3602) *
              C30470 * C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C3094 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C3094 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30791 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30779 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30791 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30779 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C3094 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C30470 * C30797 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C3094 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
            (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
               C30667 * C30575) *
              C30470 * C30790 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C3094 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
            (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
            (C5198 - C5199) * C4558) *
               C30667 * C30575) *
              C30470 * C30777 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C3094 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C3094 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C3094 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
             C5901 * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C3094 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
             (C5904 - C5905) * C4558) *
                C30667 * C30575) *
               C30754) *
              C2440 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C3094 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C30791 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C3094 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C30779 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C3094 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30488 * C30723 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30655) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C1284 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C1285 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C1286 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C1284 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C1285 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C1286 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30655) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30533) *
              C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30533) *
              C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30723 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30533) *
              C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30488 * C30723 +
           ((C4925 - C4924) * C4560 + (C4927 - C4926) * C4556 +
            (C4929 - C4928) * C4561 + (C4931 - C4930) * C4557 +
            (C30416 * C1291 - C4559 * C1290) * C4562 +
            (C30416 * C1293 - C4559 * C1292) * C4558) *
               C30667 * C30488 * C30533) *
              C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30488 * C1285 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30488 * C1286 +
           (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30488 * C30764) *
              C30709 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C1284 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
            C5637 * C4558) *
               C30667 * C30488 * C1285 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
            (C5640 - C5641) * C4558) *
               C30667 * C30488 * C1286 +
           (C5636 * C4560 + C5637 * C4556 + (C5639 - C5638) * C4561 +
            (C5641 - C5640) * C4557 + (C30416 * C5632 - C4559 * C5631) * C4562 +
            (C30416 * C5634 - C4559 * C5633) * C4558) *
               C30667 * C30488 * C30764) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30655) *
                C30667 * C30575) *
               C30723 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30655) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C1284 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30575) *
              C1285 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30575) *
              C1286 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30655) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + (C5180 - C5181) * C4562 +
             (C5182 - C5183) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
             (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C30416 * C1545 - C4559 * C1542) * C4562 +
             (C30416 * C1551 - C4559 * C1548) * C4558) *
                C30667 * C30575) *
               C30533) *
              C258 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + (C5188 - C5189) * C4562 +
             (C5190 - C5191) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
             (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C4559 * C1543 - C30416 * C1546) * C4562 +
             (C4559 * C1549 - C30416 * C1552) * C4558) *
                C30667 * C30575) *
               C30533) *
              C259 +
          ((((C30416 * C126 - C4559 * C119) * C4560 +
             (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
             (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
                C30667 * C30724 +
            ((C4559 * C416 - C30416 * C426) * C4560 +
             (C4559 * C429 - C30416 * C446) * C4556 + (C5192 - C5193) * C4561 +
             (C5194 - C5195) * C4557 + (C5196 - C5197) * C4562 +
             (C5198 - C5199) * C4558) *
                C30667 * C30575) *
               C30723 +
           (((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
             (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
             (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
                C30667 * C30724 +
            ((C5193 - C5192) * C4560 + (C5195 - C5194) * C4556 +
             (C5197 - C5196) * C4561 + (C5199 - C5198) * C4557 +
             (C30416 * C1547 - C4559 * C1544) * C4562 +
             (C30416 * C1553 - C4559 * C1550) * C4558) *
                C30667 * C30575) *
               C30533) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30575) *
              C1284 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30724 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 + C5900 * C4562 +
            C5901 * C4558) *
               C30667 * C30575) *
              C1285 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30724 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C5902 - C5903) * C4562 +
            (C5904 - C5905) * C4558) *
               C30667 * C30575) *
              C1286 +
          ((C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
            (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
            (C5388 - C5389) * C4558) *
               C30667 * C30724 +
           (C5900 * C4560 + C5901 * C4556 + (C5903 - C5902) * C4561 +
            (C5905 - C5904) * C4557 + (C30416 * C5896 - C4559 * C5895) * C4562 +
            (C30416 * C5898 - C4559 * C5897) * C4558) *
               C30667 * C30575) *
              C30764) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C30470 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30655) *
              C30667 * C30488 * C30470 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30655) *
              C30667 * C30488 * C30470 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30655) *
              C30667 * C30488 * C30470 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30655) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30792 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30781 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30655) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30655) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30655) *
               C30667 * C30757) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30792 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30655) *
               C30667 * C30781 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30655) *
               C30667 * C30757) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30792 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30655) *
               C30667 * C30781 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30655) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 +
            (C30416 * C1159 - C4559 * C1150) * C4561 +
            (C30416 * C1177 - C4559 * C1162) * C4557 +
            (C30416 * C1171 - C4559 * C1156) * C4562 +
            (C30416 * C1183 - C4559 * C1174) * C4558) *
               C30667 * C30757) *
              C30470 * C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30792 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30781 +
           ((C4559 * C418 - C30416 * C431) * C4560 +
            (C4559 * C434 - C30416 * C448) * C4556 +
            (C4559 * C1151 - C30416 * C1160) * C4561 +
            (C4559 * C1163 - C30416 * C1178) * C4557 +
            (C4559 * C1157 - C30416 * C1172) * C4562 +
            (C4559 * C1175 - C30416 * C1184) * C4558) *
               C30667 * C30757) *
              C30470 * C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30792 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30781 +
           ((C30416 * C432 - C4559 * C419) * C4560 +
            (C30416 * C449 - C4559 * C435) * C4556 +
            (C30416 * C1161 - C4559 * C1152) * C4561 +
            (C30416 * C1179 - C4559 * C1164) * C4557 +
            (C30416 * C1173 - C4559 * C1158) * C4562 +
            (C30416 * C1185 - C4559 * C1176) * C4558) *
               C30667 * C30757) *
              C30470 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30792 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
            (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
               C30667 * C30781 +
           ((C30416 * C430 - C4559 * C417) * C4560 +
            (C30416 * C447 - C4559 * C433) * C4556 + (C5516 - C5517) * C4561 +
            (C5518 - C5519) * C4557 + C5532 * C4562 + C5533 * C4558) *
               C30667 * C30757) *
              C942 +
          (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
            C5381 * C4558) *
               C30667 * C30792 +
           ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
            (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
            (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
               C30667 * C30781 +
           ((C5517 - C5516) * C4560 + (C5519 - C5518) * C4556 +
            (C5521 - C5520) * C4561 + (C5523 - C5522) * C4557 +
            (C5528 - C5529) * C4562 + (C5530 - C5531) * C4558) *
               C30667 * C30757) *
              C943 +
          ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
               C30667 * C30792 +
           (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
            (C5527 - C5526) * C4557 + (C4559 * C5502 - C30416 * C5506) * C4562 +
            (C4559 * C5507 - C30416 * C5511) * C4558) *
               C30667 * C30781 +
           (C5532 * C4560 + C5533 * C4556 + (C5529 - C5528) * C4561 +
            (C5531 - C5530) * C4557 + (C30416 * C5508 - C4559 * C5503) * C4562 +
            (C30416 * C5512 - C4559 * C5509) * C4558) *
               C30667 * C30757) *
              C30754) *
         C30442) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30655) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30655) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30724 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30655) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30655) *
               C30667 * C30724 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30655) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30655) *
                C30667 * C30575) *
               C942 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30655) *
                C30667 * C30575) *
               C943 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30655) *
                C30667 * C30575) *
               C942 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30655) *
                C30667 * C30724 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30655) *
                C30667 * C30575) *
               C943 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30655) *
                C30667 * C30724 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30655) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30724 +
           ((C4559 * C414 - C30416 * C424) * C4560 +
            (C4559 * C427 - C30416 * C444) * C4556 +
            (C4559 * C812 - C30416 * C817) * C4561 +
            (C4559 * C820 - C30416 * C827) * C4557 +
            (C4559 * C1153 - C30416 * C1165) * C4562 +
            (C4559 * C1168 - C30416 * C1180) * C4558) *
               C30667 * C30575) *
              C30470 * C554 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30724 +
           ((C30416 * C425 - C4559 * C415) * C4560 +
            (C30416 * C445 - C4559 * C428) * C4556 +
            (C30416 * C818 - C4559 * C813) * C4561 +
            (C30416 * C828 - C4559 * C821) * C4557 +
            (C30416 * C1166 - C4559 * C1154) * C4562 +
            (C30416 * C1181 - C4559 * C1169) * C4558) *
               C30667 * C30575) *
              C30470 * C555 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30724 +
           ((C4559 * C416 - C30416 * C426) * C4560 +
            (C4559 * C429 - C30416 * C446) * C4556 +
            (C4559 * C814 - C30416 * C819) * C4561 +
            (C4559 * C822 - C30416 * C829) * C4557 +
            (C4559 * C1155 - C30416 * C1167) * C4562 +
            (C4559 * C1170 - C30416 * C1182) * C4558) *
               C30667 * C30575) *
              C30470 * C556 +
          (((C4559 * C120 - C30416 * C130) * C4560 +
            (C4559 * C131 - C30416 * C141) * C4556 + (C4924 - C4925) * C4561 +
            (C4926 - C4927) * C4557 + (C4928 - C4929) * C4562 +
            (C4930 - C4931) * C4558) *
               C30667 * C30724 +
           ((C30416 * C436 - C4559 * C420) * C4560 +
            (C30416 * C450 - C4559 * C437) * C4556 +
            (C30416 * C823 - C4559 * C815) * C4561 +
            (C30416 * C830 - C4559 * C824) * C4557 +
            (C30416 * C1441 - C4559 * C1440) * C4562 +
            (C30416 * C1443 - C4559 * C1442) * C4558) *
               C30667 * C30575) *
              C30470 * C30758)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30416 * C124 - C4559 * C117) * C4560 +
             (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
             (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
                C30667 * C30724 +
            ((C4559 * C414 - C30416 * C424) * C4560 +
             (C4559 * C427 - C30416 * C444) * C4556 + (C5176 - C5177) * C4561 +
             (C5178 - C5179) * C4557 + C5514 * C4562 + C5515 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
             (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
             C5381 * C4558) *
                C30667 * C30724 +
            ((C5177 - C5176) * C4560 + (C5179 - C5178) * C4556 +
             (C5181 - C5180) * C4561 + (C5183 - C5182) * C4557 +
             (C5524 - C5525) * C4562 + (C5526 - C5527) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
             (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
                C30667 * C30724 +
            (C5514 * C4560 + C5515 * C4556 + (C5525 - C5524) * C4561 +
             (C5527 - C5526) * C4557 +
             (C4559 * C5502 - C30416 * C5506) * C4562 +
             (C4559 * C5507 - C30416 * C5511) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30709 +
          ((((C4559 * C118 - C30416 * C125) * C4560 +
             (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
             (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30667 * C30724 +
            ((C30416 * C425 - C4559 * C415) * C4560 +
             (C30416 * C445 - C4559 * C428) * C4556 + (C5184 - C5185) * C4561 +
             (C5186 - C5187) * C4557 + C5792 * C4562 + C5793 * C4558) *
                C30667 * C30575) *
               C942 +
           (((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
             (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 + C5636 * C4562 +
             C5637 * C4558) *
                C30667 * C30724 +
            ((C5185 - C5184) * C4560 + (C5187 - C5186) * C4556 +
             (C5189 - C5188) * C4561 + (C5191 - C5190) * C4557 +
             (C5794 - C5795) * C4562 + (C5796 - C5797) * C4558) *
                C30667 * C30575) *
               C943 +
           ((C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
             (C4697 - C4696) * C4557 + (C5638 - C5639) * C4562 +
             (C5640 - C5641) * C4558) *
                C30667 * C30724 +
            (C5792 * C4560 + C5793 * C4556 + (C5795 - C5794) * C4561 +
             (C5797 - C5796) * C4557 +
             (C30416 * C5788 - C4559 * C5787) * C4562 +
             (C30416 * C5790 - C4559 * C5789) * C4558) *
                C30667 * C30575) *
               C30754) *
              C30453)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C30470 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30655) *
              C30667 * C30488 * C30470 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30655) *
              C30667 * C30488 * C30470 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30655) *
              C30667 * C30488 * C30470 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30655) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C30791 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C30779 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30655) *
               C30667 * C30488 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30655) *
               C30667 * C30488 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30655) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30655) *
              C30667 * C30488 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30655) *
              C30667 * C30488 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30655) *
              C30667 * C30488 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30655) *
              C30667 * C30488 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30655) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 +
           (C30416 * C271 - C4559 * C261) * C4561 +
           (C30416 * C291 - C4559 * C274) * C4557 +
           (C30416 * C277 - C4559 * C264) * C4562 +
           (C30416 * C294 - C4559 * C280) * C4558) *
              C30667 * C30488 * C30470 * C108 +
          ((C4559 * C118 - C30416 * C125) * C4560 +
           (C4559 * C128 - C30416 * C139) * C4556 +
           (C4559 * C262 - C30416 * C272) * C4561 +
           (C4559 * C275 - C30416 * C292) * C4557 +
           (C4559 * C265 - C30416 * C278) * C4562 +
           (C4559 * C281 - C30416 * C295) * C4558) *
              C30667 * C30488 * C30470 * C109 +
          ((C30416 * C126 - C4559 * C119) * C4560 +
           (C30416 * C140 - C4559 * C129) * C4556 +
           (C30416 * C273 - C4559 * C263) * C4561 +
           (C30416 * C293 - C4559 * C276) * C4557 +
           (C30416 * C279 - C4559 * C266) * C4562 +
           (C30416 * C296 - C4559 * C282) * C4558) *
              C30667 * C30488 * C30470 * C110 +
          ((C4559 * C120 - C30416 * C130) * C4560 +
           (C4559 * C131 - C30416 * C141) * C4556 +
           (C4559 * C267 - C30416 * C283) * C4561 +
           (C4559 * C284 - C30416 * C297) * C4557 +
           (C4559 * C268 - C30416 * C285) * C4562 +
           (C4559 * C286 - C30416 * C298) * C4558) *
              C30667 * C30488 * C30470 * C111 +
          ((C30416 * C132 - C4559 * C121) * C4560 +
           (C30416 * C142 - C4559 * C133) * C4556 +
           (C30416 * C287 - C4559 * C269) * C4561 +
           (C30416 * C299 - C4559 * C288) * C4557 +
           (C30416 * C289 - C4559 * C270) * C4562 +
           (C30416 * C300 - C4559 * C290) * C4558) *
              C30667 * C30488 * C30470 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C30779 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C258 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C30779 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C259 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C30791 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C30779 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C30416 * C124 - C4559 * C117) * C4560 +
            (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
            (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
               C30667 * C30488 * C942 +
           ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
            (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 +
            (C4682 - C4683) * C4562 + (C4684 - C4685) * C4558) *
               C30667 * C30488 * C943 +
           (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
            (C4685 - C4684) * C4557 + (C30416 * C1028 - C4559 * C1019) * C4562 +
            (C30416 * C1037 - C4559 * C1031) * C4558) *
               C30667 * C30488 * C30754) *
              C30788 +
          (((C4559 * C118 - C30416 * C125) * C4560 +
            (C4559 * C128 - C30416 * C139) * C4556 + (C4686 - C4687) * C4561 +
            (C4688 - C4689) * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30667 * C30488 * C942 +
           ((C4687 - C4686) * C4560 + (C4689 - C4688) * C4556 +
            (C4691 - C4690) * C4561 + (C4693 - C4692) * C4557 +
            (C4694 - C4695) * C4562 + (C4696 - C4697) * C4558) *
               C30667 * C30488 * C943 +
           (C4712 * C4560 + C4713 * C4556 + (C4695 - C4694) * C4561 +
            (C4697 - C4696) * C4557 + (C4559 * C1020 - C30416 * C1029) * C4562 +
            (C4559 * C1032 - C30416 * C1038) * C4558) *
               C30667 * C30488 * C30754) *
              C30775 +
          (((C30416 * C126 - C4559 * C119) * C4560 +
            (C30416 * C140 - C4559 * C129) * C4556 + (C4698 - C4699) * C4561 +
            (C4700 - C4701) * C4557 + C4714 * C4562 + C4715 * C4558) *
               C30667 * C30488 * C942 +
           ((C4699 - C4698) * C4560 + (C4701 - C4700) * C4556 +
            (C4703 - C4702) * C4561 + (C4705 - C4704) * C4557 +
            (C4706 - C4707) * C4562 + (C4708 - C4709) * C4558) *
               C30667 * C30488 * C943 +
           (C4714 * C4560 + C4715 * C4556 + (C4707 - C4706) * C4561 +
            (C4709 - C4708) * C4557 + (C30416 * C1030 - C4559 * C1021) * C4562 +
            (C30416 * C1039 - C4559 * C1033) * C4558) *
               C30667 * C30488 * C30754) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C30416 * C124 - C4559 * C117) * C4560 +
           (C30416 * C138 - C4559 * C127) * C4556 + (C4674 - C4675) * C4561 +
           (C4676 - C4677) * C4557 + C4710 * C4562 + C4711 * C4558) *
              C30667 * C30488 * C1010 +
          ((C4675 - C4674) * C4560 + (C4677 - C4676) * C4556 +
           (C4679 - C4678) * C4561 + (C4681 - C4680) * C4557 + C5380 * C4562 +
           C5381 * C4558) *
              C30667 * C30488 * C1011 +
          (C4710 * C4560 + C4711 * C4556 + (C4683 - C4682) * C4561 +
           (C4685 - C4684) * C4557 + C5390 * C4562 + C5391 * C4558) *
              C30667 * C30488 * C1012 +
          (C5380 * C4560 + C5381 * C4556 + (C5383 - C5382) * C4561 +
           (C5385 - C5384) * C4557 + (C5386 - C5387) * C4562 +
           (C5388 - C5389) * C4558) *
              C30667 * C30488 * C1013 +
          (C5390 * C4560 + C5391 * C4556 + (C5387 - C5386) * C4561 +
           (C5389 - C5388) * C4557 + (C30416 * C5375 - C4559 * C5372) * C4562 +
           (C30416 * C5378 - C4559 * C5376) * C4558) *
              C30667 * C30488 * C1014) *
         C30442) /
            (p * q * std::sqrt(p + q));
}
