/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AB_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_12_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29975 = ae + be;
    const double C29974 = ae * be;
    const double C29973 = yA - yB;
    const double C29982 = 0 * be;
    const double C30015 = p + q;
    const double C30014 = p * q;
    const double C30021 = bs[3];
    const double C30020 = yP - yQ;
    const double C30028 = bs[4];
    const double C30026 = xP - xQ;
    const double C30036 = bs[5];
    const double C30045 = bs[6];
    const double C30056 = bs[7];
    const double C30073 = bs[2];
    const double C30169 = zP - zQ;
    const double C115 = bs[0];
    const double C30806 = xA - xB;
    const double C30826 = ce + de;
    const double C30825 = ce * de;
    const double C30824 = xC - xD;
    const double C30858 = yC - yD;
    const double C30876 = zC - zD;
    const double C31055 = zA - zB;
    const double C29983 = std::pow(C29975, 2);
    const double C31089 = 2 * C29975;
    const double C29990 = 2 * C29974;
    const double C29984 = C29974 * C29973;
    const double C31042 = std::pow(C29973, 2);
    const double C31120 = C29973 * ae;
    const double C30016 = 2 * C30014;
    const double C30023 = std::pow(C30020, 2);
    const double C30069 = C30020 * ae;
    const double C30068 = C30020 * be;
    const double C30038 = std::pow(C30026, 2);
    const double C30269 = std::pow(C30169, 2);
    const double C30807 = std::pow(C30806, 2);
    const double C31088 = C30806 * ae;
    const double C30830 = 2 * C30826;
    const double C30829 = std::pow(C30826, 2);
    const double C30831 = C30824 * de;
    const double C30828 = C30824 * ce;
    const double C30827 = std::pow(C30824, 2);
    const double C30859 = std::pow(C30858, 2);
    const double C30918 = C30858 * de;
    const double C30916 = C30858 * ce;
    const double C30877 = std::pow(C30876, 2);
    const double C30960 = C30876 * de;
    const double C30958 = C30876 * ce;
    const double C31056 = std::pow(C31055, 2);
    const double C31121 = C31055 * ae;
    const double C29985 = 2 * C29983;
    const double C31124 = std::pow(C31089, -2);
    const double C31122 = std::pow(C31089, -1);
    const double C31043 = C31042 * C29974;
    const double C30018 = C30016 / C30015;
    const double C136 =
        ((std::pow(yP - yQ, 2) * bs[2] * std::pow(C30016 / C30015, 2) -
          (bs[1] * C30016) / C30015) *
         C29974) /
        C29983;
    const double C116 = -(C30026 * bs[1] * C30016) / C30015;
    const double C296 = -(C30020 * bs[1] * C30016) / C30015;
    const double C491 = -(C30169 * bs[1] * C30016) / C30015;
    const double C30030 = C30023 * C30028;
    const double C30039 = C30023 * C30036;
    const double C30047 = C30023 * C30045;
    const double C30059 = C30023 * C30056;
    const double C30077 = C30021 * C30069;
    const double C30083 = C30028 * C30069;
    const double C30091 = C30036 * C30069;
    const double C30106 = C30045 * C30069;
    const double C30133 = C30056 * C30069;
    const double C123 = (-(bs[1] * C30069 * C30016) / C30015) / C29975;
    const double C30076 = C30021 * C30068;
    const double C30081 = C30028 * C30068;
    const double C30089 = C30036 * C30068;
    const double C30102 = C30045 * C30068;
    const double C30127 = C30056 * C30068;
    const double C122 = (-(bs[1] * C30068 * C30016) / C30015) / C29975;
    const double C30808 = C30807 * C29974;
    const double C30843 = std::pow(C30830, -1);
    const double C31097 = std::pow(C30830, -2);
    const double C30844 = 2 * C30829;
    const double C31101 = C30829 * C30830;
    const double C31100 = 4 * C30829;
    const double C31090 = std::pow(C30828, 2);
    const double C30832 = C30827 * C30825;
    const double C30860 = C30859 * C30825;
    const double C31102 = std::pow(C30916, 2);
    const double C30878 = C30877 * C30825;
    const double C31104 = std::pow(C30958, 2);
    const double C31057 = C31056 * C29974;
    const double C31044 = C31043 / C29975;
    const double C30022 = -C30018;
    const double C30029 = std::pow(C30018, 4);
    const double C30046 = std::pow(C30018, 6);
    const double C30072 = std::pow(C30018, 2);
    const double C137 = ((xP - xQ) *
                         (bs[2] * std::pow(C30018, 2) +
                          std::pow(yP - yQ, 2) * bs[3] * std::pow(-C30018, 3)) *
                         C29974) /
                        C29983;
    const double C30809 = C30808 / C29975;
    const double C31134 = 4 * C31101;
    const double C31133 = C30826 * C31100;
    const double C30833 = C30832 / C30826;
    const double C30861 = C30860 / C30826;
    const double C30879 = C30878 / C30826;
    const double C31058 = C31057 / C29975;
    const double C31045 = -C31044;
    const double C30024 = std::pow(C30022, 3);
    const double C30037 = std::pow(C30022, 5);
    const double C30057 = std::pow(C30022, 7);
    const double C30031 = C30030 * C30029;
    const double C30035 = C30028 * C30029;
    const double C30085 = C30029 * C30083;
    const double C30084 = C30029 * C30081;
    const double C30048 = C30047 * C30046;
    const double C30055 = C30045 * C30046;
    const double C30112 = C30046 * C30106;
    const double C30108 = C30046 * C30102;
    const double C30075 = C30073 * C30072;
    const double C124 = (C30026 * C30072 * C30073 * C30068) / C29975;
    const double C125 = (C30026 * C30072 * C30073 * C30069) / C29975;
    const double C308 = (C30020 * C30072 * C30073 * C30068) / C29975 -
                        (be * bs[1] * C30016) / (C30015 * C29975);
    const double C309 = (C30020 * C30072 * C30073 * C30069) / C29975 -
                        (ae * bs[1] * C30016) / (C30015 * C29975);
    const double C503 = (C30169 * C30072 * C30073 * C30068) / C29975;
    const double C504 = (C30169 * C30072 * C30073 * C30069) / C29975;
    const double C30810 = -C30809;
    const double C30834 = -C30833;
    const double C30862 = -C30861;
    const double C30880 = -C30879;
    const double C31059 = -C31058;
    const double C31046 = std::exp(C31045);
    const double C30027 = C30021 * C30024;
    const double C30079 = C30024 * C30077;
    const double C30078 = C30024 * C30076;
    const double C138 =
        ((bs[2] * std::pow(C30018, 2) + C30023 * C30021 * C30024) * C29974 +
         (C30021 * C30024 + C30023 * bs[4] * std::pow(C30018, 4)) * C29974 *
             std::pow(xP - xQ, 2)) /
        C29983;
    const double C326 =
        (ae * C30072 * C30073 * C30068 + be * C30072 * C30073 * C30069 +
         C30020 * (C30073 * C30072 + C30023 * C30021 * C30024) * C29974) /
        C29983;
    const double C30040 = C30039 * C30037;
    const double C30044 = C30036 * C30037;
    const double C30094 = C30037 * C30091;
    const double C30092 = C30037 * C30089;
    const double C30060 = C30059 * C30057;
    const double C30139 = C30057 * C30133;
    const double C30135 = C30057 * C30127;
    const double C30090 = C30035 * C30038;
    const double C30103 = C30026 * C30035;
    const double C30208 = C30035 * ae;
    const double C30206 = C30035 * C30023;
    const double C30205 = C30020 * C30035;
    const double C30204 = C30035 * be;
    const double C30786 = C30035 * C30269;
    const double C30789 = C30169 * C30035;
    const double C30087 = C30026 * C30085;
    const double C30195 = C30020 * C30085;
    const double C30201 = be * C30085;
    const double C30086 = C30026 * C30084;
    const double C30192 = C30020 * C30084;
    const double C30200 = ae * C30084;
    const double C30130 = C30055 * C30038;
    const double C30366 = C30055 * ae;
    const double C30360 = C30055 * C30023;
    const double C30359 = C30020 * C30055;
    const double C30358 = C30055 * be;
    const double C30440 = C30026 * C30055;
    const double C30115 = C30112 * C30038;
    const double C30132 = C30026 * C30112;
    const double C30317 = C30020 * C30112;
    const double C30353 = be * C30112;
    const double C30422 = C30112 * C30269;
    const double C30491 = C30169 * C30112;
    const double C30113 = C30108 * C30038;
    const double C30126 = C30026 * C30108;
    const double C30311 = C30020 * C30108;
    const double C30352 = ae * C30108;
    const double C30421 = C30108 * C30269;
    const double C30490 = C30169 * C30108;
    const double C521 =
        ((zP - zQ) * (C30075 + C30023 * C30021 * C30024) * C29974) / C29983;
    const double C117 = C30075 * C30038 - (bs[1] * C30016) / C30015;
    const double C295 = C30020 * C30026 * C30075;
    const double C297 = C30075 * C30023 - (bs[1] * C30016) / C30015;
    const double C490 = C30169 * C30026 * C30075;
    const double C492 = C30075 * C30269 - (bs[1] * C30016) / C30015;
    const double C943 = C30169 * C30020 * C30075;
    const double C30811 = std::exp(C30810);
    const double C30835 = std::exp(C30834);
    const double C30863 = std::exp(C30862);
    const double C30881 = std::exp(C30880);
    const double C31060 = std::exp(C31059);
    const double C147 = C31046 * C137;
    const double C29986 = C29984 * C31046;
    const double C113 = -(2 * ae * be * (yA - yB) * C31046) / (ae + be);
    const double C114 =
        -((C31046 - (C29973 * 2 * C29974 * C29973 * C31046) / C29975) * 2 *
          C29974) /
        C29975;
    const double C31154 = C31046 * C31120;
    const double C4763 =
        (C31046 * std::pow(C31120, 2)) / C29983 + C31046 / C31089;
    const double C4765 = C31124 * C31046;
    const double C13230 = C31122 * C31046;
    const double C30032 = C30027 + C30031;
    const double C30082 = C30026 * C30027;
    const double C30196 = C30027 * ae;
    const double C30194 = C30020 * C30027;
    const double C30193 = C30027 * be;
    const double C118 =
        2 * C30026 * C30075 + C30026 * (C30075 + C30027 * C30038);
    const double C294 = C30020 * (C30075 + C30027 * C30038);
    const double C489 = C30169 * (C30075 + C30027 * C30038);
    const double C1170 =
        2 * C30020 * C30075 + C30020 * (C30075 + C30027 * C30023);
    const double C1307 = C30169 * (C30075 + C30027 * C30023);
    const double C2026 =
        2 * C30169 * C30075 + C30169 * (C30075 + C30027 * C30269);
    const double C2027 =
        3 * (C30075 + C30027 * C30269) +
        C30169 * (2 * C30169 * C30027 + C30169 * (C30027 + C30035 * C30269));
    const double C127 = (C30072 * C30073 * C30069 + C30079 * C30038) / C29975;
    const double C129 =
        (2 * C30026 * C30079 + C30026 * (C30079 + C30085 * C30038)) / C29975;
    const double C305 = (C30020 * (C30079 + C30085 * C30038) +
                         (C30075 + C30027 * C30038) * ae) /
                        C29975;
    const double C307 =
        (C30020 * C30026 * C30079 + C30026 * C30075 * ae) / C29975;
    const double C311 =
        (C30072 * C30073 * C30069 + C30020 * (C30020 * C30079 + C30075 * ae) +
         C30020 * C30075 * ae) /
        C29975;
    const double C500 = (C30169 * (C30079 + C30085 * C30038)) / C29975;
    const double C502 = (C30169 * C30026 * C30079) / C29975;
    const double C506 = (C30072 * C30073 * C30069 + C30079 * C30269) / C29975;
    const double C949 = (C30169 * (C30020 * C30079 + C30075 * ae)) / C29975;
    const double C2035 =
        (2 * C30169 * C30079 + C30169 * (C30079 + C30085 * C30269)) / C29975;
    const double C126 = (C30072 * C30073 * C30068 + C30078 * C30038) / C29975;
    const double C128 =
        (2 * C30026 * C30078 + C30026 * (C30078 + C30084 * C30038)) / C29975;
    const double C304 = (C30020 * (C30078 + C30084 * C30038) +
                         (C30075 + C30027 * C30038) * be) /
                        C29975;
    const double C306 =
        (C30020 * C30026 * C30078 + C30026 * C30075 * be) / C29975;
    const double C310 =
        (C30072 * C30073 * C30068 + C30020 * (C30020 * C30078 + C30075 * be) +
         C30020 * C30075 * be) /
        C29975;
    const double C499 = (C30169 * (C30078 + C30084 * C30038)) / C29975;
    const double C501 = (C30169 * C30026 * C30078) / C29975;
    const double C505 = (C30072 * C30073 * C30068 + C30078 * C30269) / C29975;
    const double C948 = (C30169 * (C30020 * C30078 + C30075 * be)) / C29975;
    const double C2034 =
        (2 * C30169 * C30078 + C30169 * (C30078 + C30084 * C30269)) / C29975;
    const double C151 = C31046 * C138;
    const double C30041 = C30035 + C30040;
    const double C30049 = C30044 + C30048;
    const double C30104 = C30044 * C30038;
    const double C30129 = C30026 * C30044;
    const double C30318 = C30044 * ae;
    const double C30314 = C30044 * C30023;
    const double C30313 = C30020 * C30044;
    const double C30312 = C30044 * be;
    const double C30790 = C30044 * C30269;
    const double C30096 = C30094 * C30038;
    const double C30105 = C30026 * C30094;
    const double C30207 = C30020 * C30094;
    const double C30308 = be * C30094;
    const double C30413 = C30169 * C30094;
    const double C30682 = C30094 * C30269;
    const double C2037 =
        (3 * (C30079 + C30085 * C30269) +
         C30169 * (2 * C30169 * C30085 + C30169 * (C30085 + C30094 * C30269))) /
        C29975;
    const double C30095 = C30092 * C30038;
    const double C30101 = C30026 * C30092;
    const double C30203 = C30020 * C30092;
    const double C30307 = ae * C30092;
    const double C30412 = C30169 * C30092;
    const double C30679 = C30092 * C30269;
    const double C2036 =
        (3 * (C30078 + C30084 * C30269) +
         C30169 * (2 * C30169 * C30084 + C30169 * (C30084 + C30092 * C30269))) /
        C29975;
    const double C30061 = C30055 + C30060;
    const double C30142 = C30139 * C30038;
    const double C30365 = C30020 * C30139;
    const double C30443 = C30026 * C30139;
    const double C30140 = C30135 * C30038;
    const double C30357 = C30020 * C30135;
    const double C30439 = C30026 * C30135;
    const double C30093 = C30027 + C30090;
    const double C30109 = 2 * C30103;
    const double C30188 = C30103 * ae;
    const double C30186 = C30020 * C30103;
    const double C30185 = C30103 * be;
    const double C30212 = C30027 + C30206;
    const double C30214 = C30205 * ae;
    const double C30211 = C30205 * be;
    const double C30315 = 2 * C30205;
    const double C30787 = C30027 + C30786;
    const double C30791 = 2 * C30789;
    const double C508 = (C30026 * C30079 + C30087 * C30269) / C29975;
    const double C507 = (C30026 * C30078 + C30086 * C30269) / C29975;
    const double C30209 = C30200 + C30201;
    const double C30137 = C30044 + C30130;
    const double C30372 = C30044 + C30360;
    const double C30374 = C30359 * ae;
    const double C30371 = C30359 * be;
    const double C30452 = C30440 * ae;
    const double C30450 = C30440 * C30023;
    const double C30449 = C30020 * C30440;
    const double C30448 = C30440 * be;
    const double C30118 = C30094 + C30115;
    const double C30138 = 2 * C30132;
    const double C30230 = C30020 * C30132;
    const double C30436 = be * C30132;
    const double C30480 = C30169 * C30132;
    const double C30698 = C30132 * C30269;
    const double C30425 = C30094 + C30422;
    const double C30496 = be * C30491;
    const double C30116 = C30092 + C30113;
    const double C30134 = 2 * C30126;
    const double C30226 = C30020 * C30126;
    const double C30435 = ae * C30126;
    const double C30479 = C30169 * C30126;
    const double C30695 = C30126 * C30269;
    const double C30369 = C30352 + C30353;
    const double C30424 = C30092 + C30421;
    const double C30495 = ae * C30490;
    const double C9160 = C31046 * C521;
    const double C31123 = C30811 * C31088;
    const double C102 =
        (C30811 * std::pow(C31088, 2)) / C29983 + C30811 / C31089;
    const double C104 = C31124 * C30811;
    const double C13232 = C31122 * C30811;
    const double C30837 = C30835 * C30828;
    const double C30836 = C30835 / C30830;
    const double C30846 = C30843 * C30835;
    const double C31093 = C30835 * C30831;
    const double C31131 = C31097 * C30835;
    const double C31125 = C30835 * C31090;
    const double C30917 = C30863 / C30830;
    const double C30919 = C30863 * C30916;
    const double C30926 = C30843 * C30863;
    const double C31108 = C30863 * C30918;
    const double C31137 = C31097 * C30863;
    const double C31135 = C30863 * C31102;
    const double C30959 = C30881 / C30830;
    const double C30961 = C30881 * C30958;
    const double C30968 = C30843 * C30881;
    const double C31114 = C30881 * C30960;
    const double C31140 = C31097 * C30881;
    const double C31138 = C30881 * C31104;
    const double C31155 = C31060 * C31121;
    const double C8933 =
        (C31060 * std::pow(C31121, 2)) / C29983 + C31060 / C31089;
    const double C8935 = C31124 * C31060;
    const double C18966 = C31122 * C31060;
    const double C29989 = 2 * C29986;
    const double C4771 = ((0 * ae) / C29975 - C29986 / C29983) / (2 * C29975) +
                         (0 * ae) / C29975;
    const double C13235 = (0 * ae) / C29975 - C29986 / C29983;
    const double C146 = C113 * C125;
    const double C144 = C113 * C124;
    const double C9159 = C113 * C504;
    const double C9157 = C113 * C503;
    const double C149 = C114 * C117;
    const double C145 = C114 * C116;
    const double C340 = C114 * C295;
    const double C535 = C114 * C490;
    const double C9162 = C114 * C492;
    const double C9158 = C114 * C491;
    const double C9532 = C114 * C943;
    const double C4764 = (2 * C31122 * C31154) / C29975;
    const double C13229 = C31154 / C29975;
    const double C30033 = C30032 * C29974;
    const double C312 =
        (C30026 * C30078 + C30020 * (C30020 * C30086 + C30082 * be) +
         C30020 * C30082 * be) /
        C29975;
    const double C313 =
        (C30026 * C30079 + C30020 * (C30020 * C30087 + C30082 * ae) +
         C30020 * C30082 * ae) /
        C29975;
    const double C950 = (C30169 * (C30020 * C30086 + C30082 * be)) / C29975;
    const double C951 = (C30169 * (C30020 * C30087 + C30082 * ae)) / C29975;
    const double C298 = C30026 * C30075 + C30082 * C30023;
    const double C493 = C30026 * C30075 + C30082 * C30269;
    const double C944 = C30169 * C30020 * C30082;
    const double C1169 =
        2 * C30020 * C30082 + C30020 * (C30082 + C30103 * C30023);
    const double C1306 = C30169 * (C30082 + C30103 * C30023);
    const double C2025 =
        2 * C30169 * C30082 + C30169 * (C30082 + C30103 * C30269);
    const double C30198 = C30195 + C30196;
    const double C1304 = C30020 * C30075 + C30194 * C30269;
    const double C2430 =
        2 * C30169 * C30194 + C30169 * (C30194 + C30205 * C30269);
    const double C30197 = C30192 + C30193;
    const double C153 = C114 * C118;
    const double C336 = C114 * C294;
    const double C531 = C114 * C489;
    const double C9838 = C114 * C1307;
    const double C9166 = C114 * C2026;
    const double C10523 = C114 * C2027;
    const double C150 = C113 * C127;
    const double C154 = C113 * C129;
    const double C337 = C113 * C305;
    const double C341 = C113 * C307;
    const double C532 = C113 * C500;
    const double C536 = C113 * C502;
    const double C9163 = C113 * C506;
    const double C9533 = C113 * C949;
    const double C9167 = C113 * C2035;
    const double C148 = C113 * C126;
    const double C152 = C113 * C128;
    const double C335 = C113 * C304;
    const double C339 = C113 * C306;
    const double C530 = C113 * C499;
    const double C534 = C113 * C501;
    const double C9161 = C113 * C505;
    const double C9531 = C113 * C948;
    const double C9165 = C113 * C2034;
    const double C30042 = C30041 * C29974;
    const double C30050 = C30049 * C29974;
    const double C30110 = C30035 + C30104;
    const double C30136 = 2 * C30129;
    const double C30231 = C30129 * ae;
    const double C30229 = C30129 * C30023;
    const double C30228 = C30020 * C30129;
    const double C30227 = C30129 * be;
    const double C30797 = C30129 * C30269;
    const double C2028 =
        3 * (C30082 + C30103 * C30269) +
        C30169 * (2 * C30169 * C30103 + C30169 * (C30103 + C30129 * C30269));
    const double C30324 = C30317 + C30318;
    const double C30323 = C30035 + C30314;
    const double C30325 = C30313 * ae;
    const double C30322 = C30313 * be;
    const double C30361 = 2 * C30313;
    const double C30800 = C30313 * C30269;
    const double C6274 =
        3 * (C30194 + C30205 * C30269) +
        C30169 * (2 * C30169 * C30205 + C30169 * (C30205 + C30313 * C30269));
    const double C30321 = C30311 + C30312;
    const double C30792 = C30035 + C30790;
    const double C30098 = C30085 + C30096;
    const double C30111 = 2 * C30105;
    const double C30187 = C30020 * C30105;
    const double C30224 = be * C30105;
    const double C2033 =
        (2 * C30169 * C30087 + C30169 * (C30087 + C30105 * C30269)) / C29975;
    const double C2039 =
        (3 * (C30087 + C30105 * C30269) +
         C30169 * (2 * C30169 * C30105 + C30169 * (C30105 + C30132 * C30269))) /
        C29975;
    const double C30213 = C30207 + C30208;
    const double C30416 = be * C30413;
    const double C30689 = 2 * C30413;
    const double C30683 = C30085 + C30682;
    const double C10524 = C113 * C2037;
    const double C30097 = C30084 + C30095;
    const double C30107 = 2 * C30101;
    const double C30184 = C30020 * C30101;
    const double C30223 = ae * C30101;
    const double C2032 =
        (2 * C30169 * C30086 + C30169 * (C30086 + C30101 * C30269)) / C29975;
    const double C2038 =
        (3 * (C30086 + C30101 * C30269) +
         C30169 * (2 * C30169 * C30101 + C30169 * (C30101 + C30126 * C30269))) /
        C29975;
    const double C30210 = C30203 + C30204;
    const double C30320 = C30307 + C30308;
    const double C30415 = ae * C30412;
    const double C30685 = 2 * C30412;
    const double C30680 = C30084 + C30679;
    const double C10522 = C113 * C2036;
    const double C30062 = C30061 * C29974;
    const double C30145 = C30112 + C30142;
    const double C30373 = C30365 + C30366;
    const double C30451 = C30020 * C30443;
    const double C30143 = C30108 + C30140;
    const double C30370 = C30357 + C30358;
    const double C30447 = C30020 * C30439;
    const double C119 = 3 * (C30075 + C30027 * C30038) +
                        C30026 * (2 * C30082 + C30026 * C30093);
    const double C299 = C30075 + C30027 * C30038 + C30093 * C30023;
    const double C300 = C30020 * (2 * C30082 + C30026 * C30093);
    const double C494 = C30075 + C30027 * C30038 + C30093 * C30269;
    const double C495 = C30169 * (2 * C30082 + C30026 * C30093);
    const double C945 = C30169 * C30020 * C30093;
    const double C1303 = C30020 * C30082 + C30186 * C30269;
    const double C1171 = 3 * (C30075 + C30027 * C30023) +
                         C30020 * (2 * C30194 + C30020 * C30212);
    const double C1308 = C30075 + C30027 * C30023 + C30212 * C30269;
    const double C1722 = C30169 * (2 * C30194 + C30020 * C30212);
    const double C10513 =
        4 * (2 * C30169 * C30027 + C30169 * C30787) +
        C30169 * (3 * C30787 + C30169 * (2 * C30169 * C30035 +
                                         C30169 * (C30035 + C30044 * C30269)));
    const double C540 = C113 * C508;
    const double C538 = C113 * C507;
    const double C30141 = C30026 * C30137;
    const double C30254 = C30137 * ae;
    const double C30252 = C30137 * C30023;
    const double C30251 = C30020 * C30137;
    const double C30250 = C30137 * be;
    const double C30382 = C30372 * ae;
    const double C30380 = C30020 * C30372;
    const double C30379 = C30372 * be;
    const double C30457 = C30129 + C30450;
    const double C30459 = C30449 * ae;
    const double C30456 = C30449 * be;
    const double C30120 = C30026 * C30118;
    const double C30131 = 3 * C30118;
    const double C30178 = C30020 * C30118;
    const double C30247 = be * C30118;
    const double C30483 = be * C30480;
    const double C30699 = C30105 + C30698;
    const double C30428 = be * C30425;
    const double C30690 = C30169 * C30425;
    const double C30119 = C30026 * C30116;
    const double C30125 = 3 * C30116;
    const double C30175 = C30020 * C30116;
    const double C30246 = ae * C30116;
    const double C30445 = C30435 + C30436;
    const double C30482 = ae * C30479;
    const double C30696 = C30101 + C30695;
    const double C30427 = ae * C30424;
    const double C30686 = C30169 * C30424;
    const double C30499 = C30495 + C30496;
    const double C103 = (2 * C31122 * C31123) / C29975;
    const double C13231 = C31123 / C29975;
    const double C30838 = C30837 * C30831;
    const double C30845 = C30837 / C30844;
    const double C31094 = C30843 * C30837;
    const double C31092 = C30837 / C30826;
    const double C291 = (C30835 * std::pow(C30831, 2)) / C30829 + C30836;
    const double C30847 = C30846 * C30831;
    const double C31098 = C30828 * C30846;
    const double C31096 = 2 * C30846;
    const double C31141 = C30846 / C31100;
    const double C112 = C30846 / C31134;
    const double C2911 = C30846 / C30830;
    const double C31127 = C31093 / C30826;
    const double C292 = (-2 * C30843 * C31093) / C30826;
    const double C31156 = C31125 / C30829;
    const double C1094 = (C30863 * std::pow(C30918, 2)) / C30829 + C30917;
    const double C30920 = C30919 * C30918;
    const double C30925 = C30919 / C30844;
    const double C31106 = C30919 / C30826;
    const double C31103 = C30843 * C30919;
    const double C30927 = C30926 * C30918;
    const double C31112 = C30916 * C30926;
    const double C31111 = 2 * C30926;
    const double C31147 = C30926 / C31100;
    const double C1166 = C30926 / C31134;
    const double C2908 = C30926 / C30830;
    const double C31143 = C31108 / C30826;
    const double C1095 = (-2 * C30843 * C31108) / C30826;
    const double C31161 = C31135 / C30829;
    const double C1844 = (C30881 * std::pow(C30960, 2)) / C30829 + C30959;
    const double C30962 = C30961 * C30960;
    const double C30967 = C30961 / C30844;
    const double C31107 = C30961 / C30826;
    const double C31105 = C30843 * C30961;
    const double C30969 = C30968 * C30960;
    const double C31118 = C30958 * C30968;
    const double C31117 = 2 * C30968;
    const double C31153 = C30968 / C31100;
    const double C2023 = C30968 / C31134;
    const double C3810 = C30968 / C30830;
    const double C31149 = C31114 / C30826;
    const double C1845 = (-2 * C30843 * C31114) / C30826;
    const double C31163 = C31138 / C30829;
    const double C8934 = (2 * C31122 * C31155) / C29975;
    const double C18965 = C31155 / C29975;
    const double C29991 = C29973 * C29989;
    const double C13248 = C13235 * C305;
    const double C13246 = C13235 * C304;
    const double C13244 = C13235 * C307;
    const double C13242 = C13235 * C306;
    const double C24761 = C13235 * C949;
    const double C24759 = C13235 * C948;
    const double C164 = C144 - C145;
    const double C9175 = C9157 - C9158;
    const double C13253 = C13229 * C138;
    const double C13241 = C13229 * C137;
    const double C24758 = C13229 * C521;
    const double C4767 =
        (((0 - (C29973 * C29982) / C29975) * ae) / C29975 - (0 * be) / C29985) /
            (2 * C29975) +
        ((C29973 * (((C31046 - (C29973 * 2 * C29986) / C29975) * ae) / C29975 -
                    C29982 / C29985) +
          C13229) *
         ae) /
            C29975 +
        (0 * ae) / C29975 - C29986 / C29983;
    const double C139 =
        (2 * C30026 * C30033 +
         C30026 * (C30033 +
                   (C30028 * C30029 + C30023 * bs[5] * std::pow(C30022, 5)) *
                       C29974 * std::pow(C30026, 2))) /
        C29983;
    const double C325 =
        (ae * C30026 * C30024 * C30021 * C30068 +
         be * C30026 * C30024 * C30021 * C30069 + C30020 * C30026 * C30033) /
        C29983;
    const double C327 =
        ((C30075 + C30023 * C30021 * C30024) * C29974 +
         ae * (C30020 * C30078 + C30075 * be) +
         be * (C30020 * C30079 + C30075 * ae) +
         C30020 * (ae * C30078 + be * C30079 + C30020 * C30033)) /
        C29983;
    const double C520 = ((zP - zQ) * C30026 * C30033) / C29983;
    const double C522 = ((C30075 + C30023 * C30021 * C30024) * C29974 +
                         C30033 * std::pow(zP - zQ, 2)) /
                        C29983;
    const double C958 = (ae * C30169 * C30078 + be * C30169 * C30079 +
                         C30020 * C30169 * C30033) /
                        C29983;
    const double C343 = C113 * C312;
    const double C13440 = C13235 * C312;
    const double C345 = C113 * C313;
    const double C13442 = C13235 * C313;
    const double C964 = C113 * C950;
    const double C13642 = C13235 * C950;
    const double C966 = C113 * C951;
    const double C13644 = C13235 * C951;
    const double C344 = C114 * C298;
    const double C539 = C114 * C493;
    const double C965 = C114 * C944;
    const double C1452 = C114 * C1169;
    const double C1616 = C114 * C1306;
    const double C2324 = C114 * C2025;
    const double C1179 = (2 * (C30020 * C30079 + C30075 * ae) +
                          C30020 * (C30079 + C30020 * C30198 + C30194 * ae) +
                          (C30075 + C30027 * C30023) * ae) /
                         C29975;
    const double C1316 =
        (C30020 * C30079 + C30075 * ae + C30198 * C30269) / C29975;
    const double C1322 =
        (C30169 * (C30079 + C30020 * C30198 + C30194 * ae)) / C29975;
    const double C9536 = C114 * C1304;
    const double C9834 = C114 * C2430;
    const double C1178 = (2 * (C30020 * C30078 + C30075 * be) +
                          C30020 * (C30078 + C30020 * C30197 + C30194 * be) +
                          (C30075 + C30027 * C30023) * be) /
                         C29975;
    const double C1315 =
        (C30020 * C30078 + C30075 * be + C30197 * C30269) / C29975;
    const double C1321 =
        (C30169 * (C30078 + C30020 * C30197 + C30194 * be)) / C29975;
    const double C165 = C148 - C149;
    const double C166 = C152 - C153;
    const double C359 = C335 - C336;
    const double C360 = C339 - C340;
    const double C554 = C530 - C531;
    const double C555 = C534 - C535;
    const double C9176 = C9161 - C9162;
    const double C9543 = C9531 - C9532;
    const double C9177 = C9165 - C9166;
    const double C30183 = C30026 * C30042;
    const double C30202 = C30020 * C30042;
    const double C30288 = C30169 * C30042;
    const double C140 =
        (3 * (C30033 + C30042 * C30038) +
         C30026 * (2 * C30026 * C30042 +
                   C30026 * (C30042 + (C30036 * C30037 +
                                       C30023 * bs[6] * std::pow(C30018, 6)) *
                                          C29974 * C30038))) /
        C29983;
    const double C324 =
        (ae * (C30024 * C30021 * C30068 + C30029 * C30028 * C30068 * C30038) +
         be * (C30024 * C30021 * C30069 + C30029 * C30028 * C30069 * C30038) +
         C30020 * (C30033 + C30042 * C30038)) /
        C29983;
    const double C328 =
        (C30026 * C30033 + ae * (C30020 * C30086 + C30082 * be) +
         be * (C30020 * C30087 + C30082 * ae) +
         C30020 * (ae * C30086 + be * C30087 + C30020 * C30026 * C30042)) /
        C29983;
    const double C519 = ((zP - zQ) * (C30033 + C30042 * C30038)) / C29983;
    const double C523 =
        (C30026 * C30033 + C30026 * C30042 * std::pow(zP - zQ, 2)) / C29983;
    const double C959 = (ae * C30169 * C30086 + be * C30169 * C30087 +
                         C30020 * C30169 * C30026 * C30042) /
                        C29983;
    const double C1188 =
        (2 * (ae * C30078 + be * C30079 + C30020 * C30033) +
         ae * (C30078 + C30020 * C30197 + C30194 * be) +
         be * (C30079 + C30020 * C30198 + C30194 * ae) +
         C30020 * (C30033 + ae * C30197 + be * C30198 +
                   C30020 * (ae * C30084 + be * C30085 + C30020 * C30042))) /
        C29983;
    const double C1331 =
        (ae * (C30078 + C30084 * C30269) + be * (C30079 + C30085 * C30269) +
         C30020 * (C30033 + C30042 * C30269)) /
        C29983;
    const double C1334 =
        (C30169 * C30033 + ae * C30169 * C30197 + be * C30169 * C30198 +
         C30020 * (ae * C30169 * C30084 + be * C30169 * C30085 +
                   C30020 * C30169 * C30042)) /
        C29983;
    const double C2044 =
        (2 * C30169 * C30033 + C30169 * (C30033 + C30042 * C30269)) / C29983;
    const double C30051 = C30050 * C30038;
    const double C30054 = C30026 * C30050;
    const double C30309 = C30020 * C30050;
    const double C30409 = C30050 * C30269;
    const double C30414 = C30169 * C30050;
    const double C30114 = C30026 * C30110;
    const double C30128 = 3 * C30110;
    const double C30179 = C30110 * ae;
    const double C30177 = C30020 * C30110;
    const double C30176 = C30110 * be;
    const double C1168 =
        2 * C30020 * C30093 + C30020 * (C30093 + C30110 * C30023);
    const double C1305 = C30169 * (C30093 + C30110 * C30023);
    const double C2024 =
        2 * C30169 * C30093 + C30169 * (C30093 + C30110 * C30269);
    const double C2029 =
        3 * (C30093 + C30110 * C30269) +
        C30169 * (2 * C30169 * C30110 + C30169 * (C30110 + C30137 * C30269));
    const double C30236 = C30230 + C30231;
    const double C30235 = C30103 + C30229;
    const double C30237 = C30228 * ae;
    const double C30234 = C30228 * be;
    const double C30441 = 2 * C30228;
    const double C2431 =
        2 * C30169 * C30186 + C30169 * (C30186 + C30228 * C30269);
    const double C10683 =
        3 * (C30186 + C30228 * C30269) +
        C30169 * (2 * C30169 * C30228 + C30169 * (C30228 + C30449 * C30269));
    const double C30233 = C30226 + C30227;
    const double C30798 = C30103 + C30797;
    const double C10799 = C114 * C2028;
    const double C30331 = C30020 * C30324;
    const double C30364 = 2 * C30324;
    const double C30351 = be * C30324;
    const double C30489 = C30169 * C30324;
    const double C30704 = C30324 * C30269;
    const double C30332 = C30323 * ae;
    const double C30330 = C30020 * C30323;
    const double C30329 = C30323 * be;
    const double C30362 = 3 * C30323;
    const double C6273 =
        2 * C30169 * C30212 + C30169 * (C30212 + C30323 * C30269);
    const double C6275 =
        3 * (C30212 + C30323 * C30269) +
        C30169 * (2 * C30169 * C30323 + C30169 * (C30323 + C30372 * C30269));
    const double C30801 = C30205 + C30800;
    const double C10909 = C114 * C6274;
    const double C30328 = C30020 * C30321;
    const double C30356 = 2 * C30321;
    const double C30350 = ae * C30321;
    const double C30488 = C30169 * C30321;
    const double C30701 = C30321 * C30269;
    const double C30793 = C30169 * C30792;
    const double C131 = (3 * (C30079 + C30085 * C30038) +
                         C30026 * (2 * C30087 + C30026 * C30098)) /
                        C29975;
    const double C315 =
        (C30079 + C30085 * C30038 + C30020 * (C30020 * C30098 + C30093 * ae) +
         C30020 * C30093 * ae) /
        C29975;
    const double C317 = (C30020 * (2 * C30087 + C30026 * C30098) +
                         (2 * C30082 + C30026 * C30093) * ae) /
                        C29975;
    const double C510 = (C30079 + C30085 * C30038 + C30098 * C30269) / C29975;
    const double C512 = (C30169 * (2 * C30087 + C30026 * C30098)) / C29975;
    const double C953 = (C30169 * (C30020 * C30098 + C30093 * ae)) / C29975;
    const double C2031 =
        (2 * C30169 * C30098 + C30169 * (C30098 + C30118 * C30269)) / C29975;
    const double C30190 = C30187 + C30188;
    const double C2325 = C113 * C2033;
    const double C10800 = C113 * C2039;
    const double C30217 = C30020 * C30213;
    const double C30316 = 2 * C30213;
    const double C30306 = be * C30213;
    const double C2434 =
        (2 * C30169 * C30198 + C30169 * (C30198 + C30213 * C30269)) / C29975;
    const double C6279 =
        (3 * (C30198 + C30213 * C30269) +
         C30169 * (2 * C30169 * C30213 + C30169 * (C30213 + C30324 * C30269))) /
        C29975;
    const double C10516 =
        (4 * (2 * C30169 * C30085 + C30169 * C30683) +
         C30169 * (3 * C30683 + C30169 * (2 * C30413 + C30169 * C30425))) /
        C29975;
    const double C130 = (3 * (C30078 + C30084 * C30038) +
                         C30026 * (2 * C30086 + C30026 * C30097)) /
                        C29975;
    const double C314 =
        (C30078 + C30084 * C30038 + C30020 * (C30020 * C30097 + C30093 * be) +
         C30020 * C30093 * be) /
        C29975;
    const double C316 = (C30020 * (2 * C30086 + C30026 * C30097) +
                         (2 * C30082 + C30026 * C30093) * be) /
                        C29975;
    const double C509 = (C30078 + C30084 * C30038 + C30097 * C30269) / C29975;
    const double C511 = (C30169 * (2 * C30086 + C30026 * C30097)) / C29975;
    const double C952 = (C30169 * (C30020 * C30097 + C30093 * be)) / C29975;
    const double C2030 =
        (2 * C30169 * C30097 + C30169 * (C30097 + C30116 * C30269)) / C29975;
    const double C30189 = C30184 + C30185;
    const double C30232 = C30223 + C30224;
    const double C2323 = C113 * C2032;
    const double C10798 = C113 * C2038;
    const double C30216 = C30020 * C30210;
    const double C30310 = 2 * C30210;
    const double C30305 = ae * C30210;
    const double C1335 =
        (C30033 + C30042 * C30269 + ae * (C30197 + C30210 * C30269) +
         be * (C30198 + C30213 * C30269) +
         C30020 * (ae * (C30084 + C30092 * C30269) +
                   be * (C30085 + C30094 * C30269) +
                   C30020 * (C30042 + C30050 * C30269))) /
        C29983;
    const double C2433 =
        (2 * C30169 * C30197 + C30169 * (C30197 + C30210 * C30269)) / C29975;
    const double C6278 =
        (3 * (C30197 + C30210 * C30269) +
         C30169 * (2 * C30169 * C30210 + C30169 * (C30210 + C30321 * C30269))) /
        C29975;
    const double C30418 = C30415 + C30416;
    const double C10515 =
        (4 * (2 * C30169 * C30084 + C30169 * C30680) +
         C30169 * (3 * C30680 + C30169 * (2 * C30412 + C30169 * C30424))) /
        C29975;
    const double C10530 = C10522 - C10523;
    const double C30063 = C30062 * C30038;
    const double C30354 = C30020 * C30062;
    const double C30423 = C30062 * C30269;
    const double C30437 = C30026 * C30062;
    const double C30492 = C30169 * C30062;
    const double C30148 = C30026 * C30145;
    const double C30253 = C30020 * C30145;
    const double C2041 =
        (3 * (C30098 + C30118 * C30269) +
         C30169 * (2 * C30169 * C30118 + C30169 * (C30118 + C30145 * C30269))) /
        C29975;
    const double C30381 = C30020 * C30373;
    const double C30458 = C30451 + C30452;
    const double C30146 = C30026 * C30143;
    const double C30249 = C30020 * C30143;
    const double C2040 =
        (3 * (C30097 + C30116 * C30269) +
         C30169 * (2 * C30169 * C30116 + C30169 * (C30116 + C30143 * C30269))) /
        C29975;
    const double C30378 = C30020 * C30370;
    const double C30455 = C30447 + C30448;
    const double C157 = C114 * C119;
    const double C348 = C114 * C299;
    const double C352 = C114 * C300;
    const double C543 = C114 * C494;
    const double C547 = C114 * C495;
    const double C969 = C114 * C945;
    const double C2204 = C114 * C1303;
    const double C9842 = C114 * C1308;
    const double C10217 = C114 * C1722;
    const double C10527 = C114 * C10513;
    const double C30144 = C30136 + C30141;
    const double C30258 = C30110 + C30252;
    const double C30260 = C30251 * ae;
    const double C30257 = C30251 * be;
    const double C30385 = C30361 + C30380;
    const double C30465 = C30457 * ae;
    const double C30463 = C30020 * C30457;
    const double C30462 = C30457 * be;
    const double C30122 = C30111 + C30120;
    const double C10795 =
        (4 * (2 * C30169 * C30105 + C30169 * C30699) +
         C30169 *
             (3 * C30699 +
              C30169 * (2 * C30480 + C30169 * (C30132 + C30443 * C30269)))) /
        C29975;
    const double C30691 = C30689 + C30690;
    const double C30121 = C30107 + C30119;
    const double C30255 = C30246 + C30247;
    const double C30485 = C30482 + C30483;
    const double C10794 =
        (4 * (2 * C30169 * C30101 + C30169 * C30696) +
         C30169 *
             (3 * C30696 +
              C30169 * (2 * C30479 + C30169 * (C30126 + C30439 * C30269)))) /
        C29975;
    const double C30430 = C30427 + C30428;
    const double C30687 = C30685 + C30686;
    const double C30839 = C30838 / C30829;
    const double C31128 = 2 * C31094;
    const double C30848 = C30847 / C30826;
    const double C31132 = C31098 / C30844;
    const double C31157 = C31092 - C31127;
    const double C2648 = -C31127;
    const double C31171 = C31156 + C30836;
    const double C30921 = C30920 / C30829;
    const double C31136 = 2 * C31103;
    const double C30928 = C30927 / C30826;
    const double C31146 = C31112 / C30844;
    const double C31165 = C31106 - C31143;
    const double C2540 = -C31143;
    const double C31174 = C31161 + C30917;
    const double C30963 = C30962 / C30829;
    const double C31139 = 2 * C31105;
    const double C30970 = C30969 / C30826;
    const double C31152 = C31118 / C30844;
    const double C31168 = C31107 - C31149;
    const double C3302 = -C31149;
    const double C31175 = C31163 + C30959;
    const double C29992 = C29991 / C29975;
    const double C169 = C164 - C146;
    const double C9178 = C9175 - C9159;
    const double C155 = C31046 * C139;
    const double C13257 = C13229 * C139;
    const double C342 = C31046 * C325;
    const double C13245 = C13230 * C325;
    const double C13447 = C13229 * C325;
    const double C537 = C31046 * C520;
    const double C13649 = C13229 * C520;
    const double C9164 = C31046 * C522;
    const double C24770 = C13229 * C522;
    const double C9534 = C31046 * C958;
    const double C24762 = C13230 * C958;
    const double C25240 = C13229 * C958;
    const double C361 = C343 - C344;
    const double C556 = C538 - C539;
    const double C976 = C964 - C965;
    const double C9537 = C113 * C1316;
    const double C24765 = C13235 * C1316;
    const double C9839 = C113 * C1322;
    const double C25243 = C13235 * C1322;
    const double C9535 = C113 * C1315;
    const double C24763 = C13235 * C1315;
    const double C9837 = C113 * C1321;
    const double C25241 = C13235 * C1321;
    const double C170 = C165 - C150;
    const double C171 = C166 - C154;
    const double C365 = C359 - C337;
    const double C366 = C360 - C341;
    const double C560 = C554 - C532;
    const double C561 = C555 - C536;
    const double C9179 = C9176 - C9163;
    const double C9545 = C9543 - C9533;
    const double C9180 = C9177 - C9167;
    const double C30215 = C30209 + C30202;
    const double C2045 =
        (3 * (C30033 + C30042 * C30269) +
         C30169 * (2 * C30288 + C30169 * (C30042 + C30050 * C30269))) /
        C29983;
    const double C2439 =
        (ae * (2 * C30169 * C30084 + C30169 * (C30084 + C30092 * C30269)) +
         be * (2 * C30169 * C30085 + C30169 * (C30085 + C30094 * C30269)) +
         C30020 * (2 * C30288 + C30169 * (C30042 + C30050 * C30269))) /
        C29983;
    const double C159 = C31046 * C140;
    const double C13269 = C13229 * C140;
    const double C338 = C31046 * C324;
    const double C13249 = C13230 * C324;
    const double C13459 = C13229 * C324;
    const double C346 = C31046 * C328;
    const double C13451 = C13229 * C328;
    const double C13443 = C13230 * C328;
    const double C533 = C31046 * C519;
    const double C13661 = C13229 * C519;
    const double C541 = C31046 * C523;
    const double C13653 = C13229 * C523;
    const double C967 = C31046 * C959;
    const double C13645 = C13230 * C959;
    const double C14183 = C13229 * C959;
    const double C9538 = C31046 * C1331;
    const double C24766 = C13230 * C1331;
    const double C25628 = C13229 * C1331;
    const double C9840 = C31046 * C1334;
    const double C25244 = C13230 * C1334;
    const double C25636 = C13229 * C1334;
    const double C9168 = C31046 * C2044;
    const double C26512 = C13229 * C2044;
    const double C30052 = C30042 + C30051;
    const double C30058 = 2 * C30054;
    const double C30225 = C30020 * C30054;
    const double C30290 = C30169 * C30054;
    const double C1330 =
        (ae * (C30086 + C30101 * C30269) + be * (C30087 + C30105 * C30269) +
         C30020 * (C30183 + C30054 * C30269)) /
        C29983;
    const double C2043 =
        (2 * C30169 * C30183 + C30169 * (C30183 + C30054 * C30269)) / C29983;
    const double C30327 = C30320 + C30309;
    const double C30410 = C30042 + C30409;
    const double C30417 = C30020 * C30414;
    const double C30512 = 2 * C30414;
    const double C30117 = C30109 + C30114;
    const double C30181 = C30178 + C30179;
    const double C1302 = C30020 * C30093 + C30177 * C30269;
    const double C2432 =
        2 * C30169 * C30177 + C30169 * (C30177 + C30251 * C30269);
    const double C30180 = C30175 + C30176;
    const double C1448 = C114 * C1168;
    const double C1612 = C114 * C1305;
    const double C2320 = C114 * C2024;
    const double C30240 = C30020 * C30236;
    const double C30442 = 2 * C30236;
    const double C30434 = be * C30236;
    const double C1172 = 3 * (C30082 + C30103 * C30023) +
                         C30020 * (2 * C30186 + C30020 * C30235);
    const double C1309 = C30082 + C30103 * C30023 + C30235 * C30269;
    const double C1723 = C30169 * (2 * C30186 + C30020 * C30235);
    const double C6533 =
        2 * C30169 * C30235 + C30169 * (C30235 + C30457 * C30269);
    const double C10689 = C114 * C2431;
    const double C30239 = C30020 * C30233;
    const double C30438 = 2 * C30233;
    const double C30433 = ae * C30233;
    const double C10793 =
        4 * (2 * C30169 * C30103 + C30169 * C30798) +
        C30169 * (3 * C30798 + C30169 * (2 * C30169 * C30129 +
                                         C30169 * (C30129 + C30440 * C30269)));
    const double C30336 = C30094 + C30331;
    const double C30494 = be * C30489;
    const double C30705 = C30213 + C30704;
    const double C30335 = C30315 + C30330;
    const double C9846 = C114 * C6273;
    const double C10903 =
        4 * (2 * C30169 * C30205 + C30169 * C30801) +
        C30169 * (3 * C30801 + C30169 * (2 * C30169 * C30313 +
                                         C30169 * (C30313 + C30359 * C30269)));
    const double C30334 = C30092 + C30328;
    const double C30368 = C30050 + C30350;
    const double C30493 = ae * C30488;
    const double C30702 = C30210 + C30701;
    const double C30794 = C30791 + C30793;
    const double C158 = C113 * C131;
    const double C349 = C113 * C315;
    const double C13462 = C13235 * C315;
    const double C353 = C113 * C317;
    const double C13260 = C13235 * C317;
    const double C544 = C113 * C510;
    const double C548 = C113 * C512;
    const double C970 = C113 * C953;
    const double C13664 = C13235 * C953;
    const double C2321 = C113 * C2031;
    const double C1177 = (2 * (C30020 * C30087 + C30082 * ae) +
                          C30020 * (C30087 + C30020 * C30190 + C30186 * ae) +
                          (C30082 + C30103 * C30023) * ae) /
                         C29975;
    const double C1314 =
        (C30020 * C30087 + C30082 * ae + C30190 * C30269) / C29975;
    const double C1320 =
        (C30169 * (C30087 + C30020 * C30190 + C30186 * ae)) / C29975;
    const double C2436 =
        (2 * C30169 * C30190 + C30169 * (C30190 + C30236 * C30269)) / C29975;
    const double C30219 = C30085 + C30217;
    const double C9835 = C113 * C2434;
    const double C26515 = C13235 * C2434;
    const double C10910 = C113 * C6279;
    const double C26519 = C13235 * C6279;
    const double C10528 = C113 * C10516;
    const double C156 = C113 * C130;
    const double C347 = C113 * C314;
    const double C13460 = C13235 * C314;
    const double C351 = C113 * C316;
    const double C13258 = C13235 * C316;
    const double C542 = C113 * C509;
    const double C546 = C113 * C511;
    const double C968 = C113 * C952;
    const double C13662 = C13235 * C952;
    const double C2319 = C113 * C2030;
    const double C1187 =
        (2 * (ae * C30086 + be * C30087 + C30020 * C30183) +
         ae * (C30086 + C30020 * C30189 + C30186 * be) +
         be * (C30087 + C30020 * C30190 + C30186 * ae) +
         C30020 * (C30183 + ae * C30189 + be * C30190 +
                   C30020 * (ae * C30101 + be * C30105 + C30020 * C30054))) /
        C29983;
    const double C1333 =
        (C30169 * C30183 + ae * C30169 * C30189 + be * C30169 * C30190 +
         C30020 * (ae * C30169 * C30101 + be * C30169 * C30105 +
                   C30020 * C30169 * C30054)) /
        C29983;
    const double C1336 =
        (C30183 + C30054 * C30269 + ae * (C30189 + C30233 * C30269) +
         be * (C30190 + C30236 * C30269) +
         C30020 * (ae * (C30101 + C30126 * C30269) +
                   be * (C30105 + C30132 * C30269) +
                   C30020 * (C30054 + C30026 * C30062 * C30269))) /
        C29983;
    const double C1176 = (2 * (C30020 * C30086 + C30082 * be) +
                          C30020 * (C30086 + C30020 * C30189 + C30186 * be) +
                          (C30082 + C30103 * C30023) * be) /
                         C29975;
    const double C1313 =
        (C30020 * C30086 + C30082 * be + C30189 * C30269) / C29975;
    const double C1319 =
        (C30169 * (C30086 + C30020 * C30189 + C30186 * be)) / C29975;
    const double C2435 =
        (2 * C30169 * C30189 + C30169 * (C30189 + C30233 * C30269)) / C29975;
    const double C2328 = C2323 - C2324;
    const double C10802 = C10798 - C10799;
    const double C30218 = C30084 + C30216;
    const double C30319 = C30042 + C30305;
    const double C9844 = C31046 * C1335;
    const double C25648 = C13229 * C1335;
    const double C25632 = C13230 * C1335;
    const double C9833 = C113 * C2433;
    const double C26513 = C13235 * C2433;
    const double C10908 = C113 * C6278;
    const double C26517 = C13235 * C6278;
    const double C10526 = C113 * C10515;
    const double C10532 = C10530 - C10524;
    const double C30064 = C30050 + C30063;
    const double C30377 = C30369 + C30354;
    const double C30426 = C30050 + C30423;
    const double C30446 = C30020 * C30437;
    const double C30481 = C30169 * C30437;
    const double C30508 = C30437 * C30269;
    const double C30497 = C30020 * C30492;
    const double C30151 = C30138 + C30148;
    const double C30259 = C30253 + C30254;
    const double C30386 = C30112 + C30381;
    const double C30464 = C30020 * C30458;
    const double C10685 =
        (3 * (C30190 + C30236 * C30269) +
         C30169 * (2 * C30169 * C30236 + C30169 * (C30236 + C30458 * C30269))) /
        C29975;
    const double C30149 = C30134 + C30146;
    const double C30256 = C30249 + C30250;
    const double C30384 = C30108 + C30378;
    const double C30461 = C30020 * C30455;
    const double C10684 =
        (3 * (C30189 + C30233 * C30269) +
         C30169 * (2 * C30169 * C30233 + C30169 * (C30233 + C30455 * C30269))) /
        C29975;
    const double C30147 = C30026 * C30144;
    const double C30283 = C30144 * ae;
    const double C30281 = C30020 * C30144;
    const double C30280 = C30144 * be;
    const double C1173 = 3 * (C30093 + C30110 * C30023) +
                         C30020 * (2 * C30177 + C30020 * C30258);
    const double C1310 = C30093 + C30110 * C30023 + C30258 * C30269;
    const double C1724 = C30169 * (2 * C30177 + C30020 * C30258);
    const double C30392 = C30385 * ae;
    const double C30390 = C30020 * C30385;
    const double C30389 = C30385 * be;
    const double C30468 = C30441 + C30463;
    const double C133 = (4 * (2 * C30087 + C30026 * C30098) +
                         C30026 * (3 * C30098 + C30026 * C30122)) /
                        C29975;
    const double C514 =
        (2 * C30087 + C30026 * C30098 + C30122 * C30269) / C29975;
    const double C516 = (C30169 * (3 * C30098 + C30026 * C30122)) / C29975;
    const double C10518 =
        (5 * (3 * C30683 + C30169 * C30691) +
         C30169 * (4 * C30691 +
                   C30169 * (3 * C30425 +
                             C30169 * (2 * C30491 +
                                       C30169 * (C30112 + C30139 * C30269))))) /
        C29975;
    const double C132 = (4 * (2 * C30086 + C30026 * C30097) +
                         C30026 * (3 * C30097 + C30026 * C30121)) /
                        C29975;
    const double C513 =
        (2 * C30086 + C30026 * C30097 + C30121 * C30269) / C29975;
    const double C515 = (C30169 * (3 * C30097 + C30026 * C30121)) / C29975;
    const double C10517 =
        (5 * (3 * C30680 + C30169 * C30687) +
         C30169 * (4 * C30687 +
                   C30169 * (3 * C30424 +
                             C30169 * (2 * C30490 +
                                       C30169 * (C30108 + C30135 * C30269))))) /
        C29975;
    const double C30840 = C30836 - C30839;
    const double C31158 = C31128 / C30826;
    const double C30849 = C30845 - C30848;
    const double C31172 = C31157 / C30830;
    const double C30922 = C30917 - C30921;
    const double C31162 = C31136 / C30826;
    const double C30929 = C30925 - C30928;
    const double C31176 = C31165 / C30830;
    const double C30964 = C30959 - C30963;
    const double C31164 = C31139 / C30826;
    const double C30971 = C30967 - C30970;
    const double C31178 = C31168 / C30830;
    const double C29993 = C31046 - C29992;
    const double C174 = C169 + C147;
    const double C9181 = C9178 + C9160;
    const double C367 = C361 - C345;
    const double C562 = C556 - C540;
    const double C979 = C976 - C966;
    const double C9544 = C9535 - C9536;
    const double C9850 = C9837 - C9838;
    const double C175 = C170 + C151;
    const double C176 = C171 + C155;
    const double C372 = C366 + C342;
    const double C567 = C561 + C537;
    const double C9182 = C9179 + C9164;
    const double C9547 = C9545 + C9534;
    const double C10525 = C31046 * C2045;
    const double C26524 = C13229 * C2045;
    const double C9836 = C31046 * C2439;
    const double C26516 = C13230 * C2439;
    const double C26998 = C13229 * C2439;
    const double C371 = C365 + C338;
    const double C566 = C560 + C533;
    const double C9183 = C9180 + C9168;
    const double C141 =
        (4 * (2 * C30026 * C30042 + C30026 * C30052) +
         C30026 * (3 * C30052 +
                   C30026 * (2 * C30026 * C30050 +
                             C30026 * (C30050 +
                                       (C30045 * C30046 +
                                        C30023 * bs[7] * std::pow(C30022, 7)) *
                                           C29974 * C30038)))) /
        C29983;
    const double C329 =
        (C30033 + C30042 * C30038 + ae * (C30020 * C30097 + C30093 * be) +
         be * (C30020 * C30098 + C30093 * ae) +
         C30020 * (ae * C30097 + be * C30098 + C30020 * C30052)) /
        C29983;
    const double C330 = (ae * (2 * C30086 + C30026 * C30097) +
                         be * (2 * C30087 + C30026 * C30098) +
                         C30020 * (2 * C30026 * C30042 + C30026 * C30052)) /
                        C29983;
    const double C524 =
        (C30033 + C30042 * C30038 + C30052 * std::pow(zP - zQ, 2)) / C29983;
    const double C525 =
        ((zP - zQ) * (2 * C30026 * C30042 + C30026 * C30052)) / C29983;
    const double C960 = (ae * C30169 * C30097 + be * C30169 * C30098 +
                         C30020 * C30169 * C30052) /
                        C29983;
    const double C30238 = C30232 + C30225;
    const double C2046 =
        (3 * (C30183 + C30054 * C30269) +
         C30169 * (2 * C30290 + C30169 * (C30054 + C30026 * C30062 * C30269))) /
        C29983;
    const double C2440 =
        (ae * (2 * C30169 * C30101 + C30169 * (C30101 + C30126 * C30269)) +
         be * (2 * C30169 * C30105 + C30169 * (C30105 + C30132 * C30269)) +
         C30020 * (2 * C30290 + C30169 * (C30054 + C30026 * C30062 * C30269))) /
        C29983;
    const double C2206 = C31046 * C1330;
    const double C13657 = C13230 * C1330;
    const double C15639 = C13229 * C1330;
    const double C2326 = C31046 * C2043;
    const double C15783 = C13229 * C2043;
    const double C30333 = C30020 * C30327;
    const double C30347 = 2 * C30327;
    const double C30419 = C30418 + C30417;
    const double C318 =
        (2 * C30086 + C30026 * C30097 +
         C30020 * (C30020 * C30121 + C30117 * be) + C30020 * C30117 * be) /
        C29975;
    const double C319 =
        (2 * C30087 + C30026 * C30098 +
         C30020 * (C30020 * C30122 + C30117 * ae) + C30020 * C30117 * ae) /
        C29975;
    const double C320 = (C30020 * (3 * C30097 + C30026 * C30121) +
                         (3 * C30093 + C30026 * C30117) * be) /
                        C29975;
    const double C321 = (C30020 * (3 * C30098 + C30026 * C30122) +
                         (3 * C30093 + C30026 * C30117) * ae) /
                        C29975;
    const double C954 = (C30169 * (C30020 * C30121 + C30117 * be)) / C29975;
    const double C955 = (C30169 * (C30020 * C30122 + C30117 * ae)) / C29975;
    const double C120 = 4 * (2 * C30082 + C30026 * C30093) +
                        C30026 * (3 * C30093 + C30026 * C30117);
    const double C301 = 2 * C30082 + C30026 * C30093 + C30117 * C30023;
    const double C302 = C30020 * (3 * C30093 + C30026 * C30117);
    const double C496 = 2 * C30082 + C30026 * C30093 + C30117 * C30269;
    const double C497 = C30169 * (3 * C30093 + C30026 * C30117);
    const double C946 = C30169 * C30020 * C30117;
    const double C1442 =
        2 * C30020 * C30117 + C30020 * (C30117 + C30144 * C30023);
    const double C1606 = C30169 * (C30117 + C30144 * C30023);
    const double C2314 =
        2 * C30169 * C30117 + C30169 * (C30117 + C30144 * C30269);
    const double C1175 = (2 * (C30020 * C30098 + C30093 * ae) +
                          C30020 * (C30098 + C30020 * C30181 + C30177 * ae) +
                          (C30093 + C30110 * C30023) * ae) /
                         C29975;
    const double C1312 =
        (C30020 * C30098 + C30093 * ae + C30181 * C30269) / C29975;
    const double C1318 =
        (C30169 * (C30098 + C30020 * C30181 + C30177 * ae)) / C29975;
    const double C2200 = C114 * C1302;
    const double C1174 = (2 * (C30020 * C30097 + C30093 * be) +
                          C30020 * (C30097 + C30020 * C30180 + C30177 * be) +
                          (C30093 + C30110 * C30023) * be) /
                         C29975;
    const double C1311 =
        (C30020 * C30097 + C30093 * be + C30180 * C30269) / C29975;
    const double C1317 =
        (C30169 * (C30097 + C30020 * C30180 + C30177 * be)) / C29975;
    const double C30242 = C30105 + C30240;
    const double C10111 = C114 * C1309;
    const double C20245 = C114 * C1723;
    const double C30241 = C30101 + C30239;
    const double C30444 = C30054 + C30433;
    const double C30339 = C30336 + C30325;
    const double C10905 =
        (4 * (2 * C30169 * C30213 + C30169 * C30705) +
         C30169 *
             (3 * C30705 +
              C30169 * (2 * C30489 + C30169 * (C30324 + C30373 * C30269)))) /
        C29975;
    const double C5507 = 4 * (2 * C30194 + C30020 * C30212) +
                         C30020 * (3 * C30212 + C30020 * C30335);
    const double C5625 = 2 * C30194 + C30020 * C30212 + C30335 * C30269;
    const double C5626 = C30169 * (3 * C30212 + C30020 * C30335);
    const double C6635 =
        2 * C30169 * C30335 + C30169 * (C30335 + C30385 * C30269);
    const double C30338 = C30334 + C30322;
    const double C30376 = C30368 + C30351;
    const double C30498 = C30414 + C30493;
    const double C10904 =
        (4 * (2 * C30169 * C30210 + C30169 * C30702) +
         C30169 *
             (3 * C30702 +
              C30169 * (2 * C30488 + C30169 * (C30321 + C30370 * C30269)))) /
        C29975;
    const double C10514 =
        5 * (3 * C30787 + C30169 * C30794) +
        C30169 * (4 * C30794 +
                  C30169 * (3 * C30792 +
                            C30169 * (2 * C30169 * C30044 +
                                      C30169 * (C30044 + C30055 * C30269))));
    const double C1453 = C113 * C1177;
    const double C13454 = C13235 * C1177;
    const double C2205 = C113 * C1314;
    const double C13656 = C13235 * C1314;
    const double C1617 = C113 * C1320;
    const double C14186 = C13235 * C1320;
    const double C10690 = C113 * C2436;
    const double C15778 = C13235 * C2436;
    const double C30221 = C30219 + C30214;
    const double C167 = C156 - C157;
    const double C362 = C347 - C348;
    const double C363 = C351 - C352;
    const double C557 = C542 - C543;
    const double C558 = C546 - C547;
    const double C977 = C968 - C969;
    const double C2327 = C2319 - C2320;
    const double C1454 = C31046 * C1187;
    const double C13455 = C13230 * C1187;
    const double C14719 = C13229 * C1187;
    const double C1618 = C31046 * C1333;
    const double C14187 = C13230 * C1333;
    const double C14927 = C13229 * C1333;
    const double C10113 = C31046 * C1336;
    const double C15635 = C13230 * C1336;
    const double C1451 = C113 * C1176;
    const double C13452 = C13235 * C1176;
    const double C2203 = C113 * C1313;
    const double C13654 = C13235 * C1313;
    const double C1615 = C113 * C1319;
    const double C14184 = C13235 * C1319;
    const double C10688 = C113 * C2435;
    const double C15776 = C13235 * C2435;
    const double C2330 = C2328 - C2325;
    const double C10803 = C10802 - C10800;
    const double C30220 = C30218 + C30211;
    const double C30326 = C30319 + C30306;
    const double C9849 = C9833 - C9834;
    const double C10912 = C10908 - C10909;
    const double C10531 = C10526 - C10527;
    const double C30065 = C30026 * C30064;
    const double C30248 = C30020 * C30064;
    const double C30292 = C30169 * C30064;
    const double C1186 =
        (2 * (ae * C30097 + be * C30098 + C30020 * C30052) +
         ae * (C30097 + C30020 * C30180 + C30177 * be) +
         be * (C30098 + C30020 * C30181 + C30177 * ae) +
         C30020 * (C30052 + ae * C30180 + be * C30181 +
                   C30020 * (ae * C30116 + be * C30118 + C30020 * C30064))) /
        C29983;
    const double C1329 =
        (ae * (C30097 + C30116 * C30269) + be * (C30098 + C30118 * C30269) +
         C30020 * (C30052 + C30064 * C30269)) /
        C29983;
    const double C1332 =
        (C30169 * C30052 + ae * C30169 * C30180 + be * C30169 * C30181 +
         C30020 * (ae * C30169 * C30116 + be * C30169 * C30118 +
                   C30020 * C30169 * C30064)) /
        C29983;
    const double C2042 =
        (2 * C30169 * C30052 + C30169 * (C30052 + C30064 * C30269)) / C29983;
    const double C30383 = C30020 * C30377;
    const double C30429 = C30020 * C30426;
    const double C30513 = C30169 * C30426;
    const double C6282 =
        (2 * C30288 + C30169 * C30410 +
         ae * (2 * C30169 * C30210 + C30169 * (C30210 + C30321 * C30269)) +
         be * (2 * C30169 * C30213 + C30169 * (C30213 + C30324 * C30269)) +
         C30020 * (ae * (2 * C30412 + C30169 * C30424) +
                   be * (2 * C30413 + C30169 * C30425) +
                   C30020 * (2 * C30414 + C30169 * C30426))) /
        C29983;
    const double C6283 =
        (ae * (3 * (C30084 + C30092 * C30269) +
               C30169 * (2 * C30412 + C30169 * C30424)) +
         be * (3 * (C30085 + C30094 * C30269) +
               C30169 * (2 * C30413 + C30169 * C30425)) +
         C30020 * (3 * C30410 + C30169 * (2 * C30414 + C30169 * C30426))) /
        C29983;
    const double C6284 =
        (3 * C30410 + C30169 * (2 * C30414 + C30169 * C30426) +
         ae * (3 * (C30210 + C30321 * C30269) +
               C30169 * (2 * C30488 + C30169 * (C30321 + C30370 * C30269))) +
         be * (3 * (C30213 + C30324 * C30269) +
               C30169 * (2 * C30489 + C30169 * (C30324 + C30373 * C30269))) +
         C30020 *
             (ae * (3 * C30424 +
                    C30169 *
                        (2 * C30490 + C30169 * (C30108 + C30135 * C30269))) +
              be * (3 * C30425 +
                    C30169 *
                        (2 * C30491 + C30169 * (C30112 + C30139 * C30269))) +
              C30020 * (3 * C30426 +
                        C30169 * (2 * C30492 +
                                  C30169 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30269))))) /
        C29983;
    const double C30454 = C30445 + C30446;
    const double C30484 = C30020 * C30481;
    const double C30509 = C30054 + C30508;
    const double C30501 = C30499 + C30497;
    const double C30153 = C30026 * C30151;
    const double C30282 = C30020 * C30151;
    const double C2316 =
        (2 * C30169 * C30122 + C30169 * (C30122 + C30151 * C30269)) / C29975;
    const double C30263 = C30020 * C30259;
    const double C2438 =
        (2 * C30169 * C30181 + C30169 * (C30181 + C30259 * C30269)) / C29975;
    const double C30391 = C30386 + C30374;
    const double C30469 = C30132 + C30464;
    const double C30152 = C30026 * C30149;
    const double C30279 = C30020 * C30149;
    const double C2315 =
        (2 * C30169 * C30121 + C30169 * (C30121 + C30149 * C30269)) / C29975;
    const double C30262 = C30020 * C30256;
    const double C1337 =
        (C30052 + C30064 * C30269 + ae * (C30180 + C30256 * C30269) +
         be * (C30181 + C30259 * C30269) +
         C30020 * (ae * (C30116 + C30143 * C30269) +
                   be * (C30118 + C30145 * C30269) +
                   C30020 * (C30064 +
                             (C30062 + (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30038) *
                                 C30269))) /
        C29983;
    const double C2437 =
        (2 * C30169 * C30180 + C30169 * (C30180 + C30256 * C30269)) / C29975;
    const double C30388 = C30384 + C30371;
    const double C30467 = C30126 + C30461;
    const double C30150 = C30128 + C30147;
    const double C2194 = C30020 * C30117 + C30281 * C30269;
    const double C30395 = C30362 + C30390;
    const double C5735 = 4 * (2 * C30186 + C30020 * C30235) +
                         C30020 * (3 * C30235 + C30020 * C30468);
    const double C5885 = C30169 * (3 * C30235 + C30020 * C30468);
    const double C6431 = 2 * C30186 + C30020 * C30235 + C30468 * C30269;
    const double C162 = C113 * C133;
    const double C552 = C113 * C514;
    const double C793 = C113 * C516;
    const double C160 = C113 * C132;
    const double C550 = C113 * C513;
    const double C791 = C113 * C515;
    const double C31091 = C30840 * C30828;
    const double C31130 = C31096 + C30840;
    const double C31099 = C30849 / C30830;
    const double C31095 = C30849 * C30828;
    const double C671 = C31172 - (C30840 * C30831) / C30826;
    const double C31109 = C30922 * C30916;
    const double C31145 = C31111 + C30922;
    const double C31113 = C30929 / C30830;
    const double C31110 = C30929 * C30916;
    const double C1436 = C31176 - (C30922 * C30918) / C30826;
    const double C31115 = C30964 * C30958;
    const double C31151 = C31117 + C30964;
    const double C31119 = C30971 / C30830;
    const double C31116 = C30971 * C30958;
    const double C2310 = C31178 - (C30964 * C30960) / C30826;
    const double C29994 = C29993 * C29990;
    const double C4769 =
        ((C29993 * ae) / C29975 - C29982 / C29985) / (2 * C29975) +
        ((C29973 * ((0 * ae) / C29975 - C29986 / C29983) + C13230) * ae) /
            C29975;
    const double C13233 = (C29993 * ae) / C29975 - C29982 / C29985;
    const double C9184 = C9181 * C30811;
    const double C19260 = C9181 * C13231;
    const double C373 = C367 + C346;
    const double C568 = C562 + C541;
    const double C982 = C979 + C967;
    const double C9546 = C9544 - C9537;
    const double C9854 = C9850 - C9839;
    const double C9169 = C567 * C30811;
    const double C19264 = C567 * C13231;
    const double C19261 = C567 * C13232;
    const double C9185 = C9182 * C30811;
    const double C19263 = C9182 * C13231;
    const double C9549 = C9547 * C30811;
    const double C19728 = C9547 * C13231;
    const double C10534 = C10532 + C10525;
    const double C9172 = C566 * C30811;
    const double C19268 = C566 * C13231;
    const double C19265 = C566 * C13232;
    const double C9186 = C9183 * C30811;
    const double C20953 = C9183 * C13231;
    const double C163 = C31046 * C141;
    const double C350 = C31046 * C329;
    const double C13471 = C13229 * C329;
    const double C13463 = C13230 * C329;
    const double C354 = C31046 * C330;
    const double C13261 = C13230 * C330;
    const double C13835 = C13229 * C330;
    const double C545 = C31046 * C524;
    const double C13673 = C13229 * C524;
    const double C549 = C31046 * C525;
    const double C13979 = C13229 * C525;
    const double C971 = C31046 * C960;
    const double C13665 = C13230 * C960;
    const double C14195 = C13229 * C960;
    const double C10801 = C31046 * C2046;
    const double C10691 = C31046 * C2440;
    const double C15779 = C13230 * C2440;
    const double C355 = C113 * C318;
    const double C13828 = C13235 * C318;
    const double C357 = C113 * C319;
    const double C13830 = C13235 * C319;
    const double C680 = C113 * C320;
    const double C13262 = C13235 * C320;
    const double C682 = C113 * C321;
    const double C13264 = C13235 * C321;
    const double C972 = C113 * C954;
    const double C13972 = C13235 * C954;
    const double C974 = C113 * C955;
    const double C13974 = C13235 * C955;
    const double C161 = C114 * C120;
    const double C356 = C114 * C301;
    const double C681 = C114 * C302;
    const double C551 = C114 * C496;
    const double C792 = C114 * C497;
    const double C973 = C114 * C946;
    const double C1449 = C113 * C1175;
    const double C13466 = C13235 * C1175;
    const double C2201 = C113 * C1312;
    const double C13668 = C13235 * C1312;
    const double C1613 = C113 * C1318;
    const double C14190 = C13235 * C1318;
    const double C1447 = C113 * C1174;
    const double C13464 = C13235 * C1174;
    const double C2199 = C113 * C1311;
    const double C13666 = C13235 * C1311;
    const double C1611 = C113 * C1317;
    const double C14188 = C13235 * C1317;
    const double C30244 = C30242 + C30237;
    const double C30243 = C30241 + C30234;
    const double C30453 = C30444 + C30434;
    const double C30341 = C30020 * C30339;
    const double C30363 = 3 * C30339;
    const double C30349 = be * C30339;
    const double C10221 = C114 * C5625;
    const double C30340 = C30020 * C30338;
    const double C30355 = 3 * C30338;
    const double C30348 = ae * C30338;
    const double C30500 = C30498 + C30494;
    const double C1181 =
        (3 * (C30079 + C30020 * C30198 + C30194 * ae) +
         C30020 * (2 * C30198 + C30020 * C30221 + C30212 * ae) +
         (2 * C30194 + C30020 * C30212) * ae) /
        C29975;
    const double C1324 =
        (C30079 + C30020 * C30198 + C30194 * ae + C30221 * C30269) / C29975;
    const double C1726 =
        (C30169 * (2 * C30198 + C30020 * C30221 + C30212 * ae)) / C29975;
    const double C6277 =
        (2 * C30169 * C30221 + C30169 * (C30221 + C30339 * C30269)) / C29975;
    const double C172 = C167 - C158;
    const double C368 = C362 - C349;
    const double C369 = C363 - C353;
    const double C563 = C557 - C544;
    const double C564 = C558 - C548;
    const double C980 = C977 - C970;
    const double C2329 = C2327 - C2321;
    const double C1456 = C1451 - C1452;
    const double C2208 = C2203 - C2204;
    const double C1620 = C1615 - C1616;
    const double C10692 = C10688 - C10689;
    const double C2332 = C2330 + C2326;
    const double C1189 =
        (3 * (C30033 + ae * C30197 + be * C30198 + C30020 * C30215) +
         ae * (2 * C30197 + C30020 * C30220 + C30212 * be) +
         be * (2 * C30198 + C30020 * C30221 + C30212 * ae) +
         C30020 * (2 * C30215 + ae * C30220 + be * C30221 +
                   C30020 * (C30042 + ae * C30210 + be * C30213 +
                             C30020 * (ae * C30092 + be * C30094 +
                                       C30020 * C30050)))) /
        C29983;
    const double C1731 =
        (2 * (ae * C30169 * C30084 + be * C30169 * C30085 + C30020 * C30288) +
         ae * C30169 * C30220 + be * C30169 * C30221 +
         C30020 * (C30288 + ae * C30169 * C30210 + be * C30169 * C30213 +
                   C30020 * (ae * C30169 * C30092 + be * C30169 * C30094 +
                             C30020 * C30169 * C30050))) /
        C29983;
    const double C5634 =
        (2 * (ae * (C30084 + C30092 * C30269) +
              be * (C30085 + C30094 * C30269) + C30020 * C30410) +
         ae * (C30220 + C30338 * C30269) + be * (C30221 + C30339 * C30269) +
         C30020 * (C30410 + ae * (C30210 + C30321 * C30269) +
                   be * (C30213 + C30324 * C30269) +
                   C30020 * (ae * (C30092 + C30108 * C30269) +
                             be * (C30094 + C30112 * C30269) +
                             C30020 * (C30050 + C30062 * C30269)))) /
        C29983;
    const double C1180 =
        (3 * (C30078 + C30020 * C30197 + C30194 * be) +
         C30020 * (2 * C30197 + C30020 * C30220 + C30212 * be) +
         (2 * C30194 + C30020 * C30212) * be) /
        C29975;
    const double C1323 =
        (C30078 + C30020 * C30197 + C30194 * be + C30220 * C30269) / C29975;
    const double C1725 =
        (C30169 * (2 * C30197 + C30020 * C30220 + C30212 * be)) / C29975;
    const double C6276 =
        (2 * C30169 * C30220 + C30169 * (C30220 + C30338 * C30269)) / C29975;
    const double C30337 = C30326 + C30333;
    const double C9853 = C9849 - C9835;
    const double C10913 = C10912 - C10910;
    const double C10533 = C10531 - C10528;
    const double C30066 = C30058 + C30065;
    const double C30261 = C30255 + C30248;
    const double C2047 =
        (3 * (C30052 + C30064 * C30269) +
         C30169 * (2 * C30292 +
                   C30169 * (C30064 +
                             (C30062 + (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30038) *
                                 C30269))) /
        C29983;
    const double C2441 =
        (ae * (2 * C30169 * C30116 + C30169 * (C30116 + C30143 * C30269)) +
         be * (2 * C30169 * C30118 + C30169 * (C30118 + C30145 * C30269)) +
         C30020 * (2 * C30292 +
                   C30169 * (C30064 +
                             (C30062 + (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30038) *
                                 C30269))) /
        C29983;
    const double C1450 = C31046 * C1186;
    const double C13467 = C13230 * C1186;
    const double C2202 = C31046 * C1329;
    const double C13669 = C13230 * C1329;
    const double C1614 = C31046 * C1332;
    const double C14191 = C13230 * C1332;
    const double C2322 = C31046 * C2042;
    const double C30387 = C30376 + C30383;
    const double C30431 = C30430 + C30429;
    const double C30514 = C30512 + C30513;
    const double C9848 = C31046 * C6282;
    const double C26994 = C13230 * C6282;
    const double C10911 = C31046 * C6283;
    const double C26520 = C13230 * C6283;
    const double C30460 = C30020 * C30454;
    const double C30486 = C30485 + C30484;
    const double C6536 =
        (2 * C30290 + C30169 * C30509 +
         ae * (2 * C30169 * C30233 + C30169 * (C30233 + C30455 * C30269)) +
         be * (2 * C30169 * C30236 + C30169 * (C30236 + C30458 * C30269)) +
         C30020 * (ae * (2 * C30479 + C30169 * (C30126 + C30439 * C30269)) +
                   be * (2 * C30480 + C30169 * (C30132 + C30443 * C30269)) +
                   C30020 * (2 * C30481 +
                             C30169 * (C30437 + C30026 *
                                                    (C30056 * C30057 +
                                                     C30023 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29974 * C30269)))) /
        C29983;
    const double C10686 =
        (ae * (3 * (C30101 + C30126 * C30269) +
               C30169 * (2 * C30479 + C30169 * (C30126 + C30439 * C30269))) +
         be * (3 * (C30105 + C30132 * C30269) +
               C30169 * (2 * C30480 + C30169 * (C30132 + C30443 * C30269))) +
         C30020 * (3 * C30509 +
                   C30169 * (2 * C30481 +
                             C30169 * (C30437 + C30026 *
                                                    (C30056 * C30057 +
                                                     C30023 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29974 * C30269)))) /
        C29983;
    const double C10796 =
        (4 * (2 * C30290 + C30169 * C30509) +
         C30169 * (3 * C30509 +
                   C30169 * (2 * C30481 +
                             C30169 * (C30437 + C30026 *
                                                    (C30056 * C30057 +
                                                     C30023 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29974 * C30269)))) /
        C29983;
    const double C30502 = C30020 * C30501;
    const double C30155 = C30131 + C30153;
    const double C30285 = C30282 + C30283;
    const double C30265 = C30118 + C30263;
    const double C30396 = C30020 * C30391;
    const double C6281 =
        (3 * (C30221 + C30339 * C30269) +
         C30169 * (2 * C30169 * C30339 + C30169 * (C30339 + C30391 * C30269))) /
        C29975;
    const double C30471 = C30469 + C30459;
    const double C30154 = C30125 + C30152;
    const double C30284 = C30279 + C30280;
    const double C30264 = C30116 + C30262;
    const double C30394 = C30020 * C30388;
    const double C6280 =
        (3 * (C30220 + C30338 * C30269) +
         C30169 * (2 * C30169 * C30338 + C30169 * (C30338 + C30388 * C30269))) /
        C29975;
    const double C30470 = C30467 + C30456;
    const double C121 = 5 * (3 * C30093 + C30026 * C30117) +
                        C30026 * (4 * C30117 + C30026 * C30150);
    const double C303 = 3 * C30093 + C30026 * C30117 + C30150 * C30023;
    const double C498 = 3 * C30093 + C30026 * C30117 + C30150 * C30269;
    const double C675 = C30020 * (4 * C30117 + C30026 * C30150);
    const double C786 = C30169 * (4 * C30117 + C30026 * C30150);
    const double C947 = C30169 * C30020 * C30150;
    const double C5508 = 5 * (3 * C30212 + C30020 * C30335) +
                         C30020 * (4 * C30335 + C30020 * C30395);
    const double C5627 = 3 * C30212 + C30020 * C30335 + C30395 * C30269;
    const double C5987 = C30169 * (4 * C30335 + C30020 * C30395);
    const double C31126 = C31091 / C30826;
    const double C31159 = C31130 / C30830;
    const double C31160 = C31132 + C31099;
    const double C673 = C31099 - C30847 / C30844;
    const double C31129 = C31095 / C30826;
    const double C31142 = C31109 / C30826;
    const double C31166 = C31145 / C30830;
    const double C31167 = C31146 + C31113;
    const double C1438 = C31113 - C30927 / C30844;
    const double C31144 = C31110 / C30826;
    const double C31148 = C31115 / C30826;
    const double C31169 = C31151 / C30830;
    const double C31170 = C31152 + C31119;
    const double C2312 = C31119 - C30969 / C30844;
    const double C31150 = C31116 / C30826;
    const double C29999 = C29973 * C29994;
    const double C4768 =
        (ae * -2 * C29982) / (C29983 * 2 * C29975) +
        (((C29973 * ((-4 * C29986) / C29975 - (C29973 * C29994) / C29975) *
           ae) /
              C29975 +
          2 * ((C29993 * ae) / C29975 - C29982 / C29985)) *
         ae) /
            C29975 -
        C29994 / C29985;
    const double C4772 = (-C29994 / C29975) / (4 * C29983);
    const double C13236 = (-C29994 / C29975) / (2 * C29975);
    const double C13268 = C13233 * C131;
    const double C13266 = C13233 * C130;
    const double C13256 = C13233 * C129;
    const double C13254 = C13233 * C128;
    const double C13252 = C13233 * C127;
    const double C13250 = C13233 * C126;
    const double C13240 = C13233 * C125;
    const double C13238 = C13233 * C124;
    const double C13470 = C13233 * C315;
    const double C13468 = C13233 * C314;
    const double C13458 = C13233 * C305;
    const double C13456 = C13233 * C304;
    const double C13450 = C13233 * C313;
    const double C13448 = C13233 * C312;
    const double C13446 = C13233 * C307;
    const double C13444 = C13233 * C306;
    const double C13672 = C13233 * C510;
    const double C13670 = C13233 * C509;
    const double C13660 = C13233 * C500;
    const double C13658 = C13233 * C499;
    const double C13652 = C13233 * C508;
    const double C13650 = C13233 * C507;
    const double C13648 = C13233 * C502;
    const double C13646 = C13233 * C501;
    const double C13834 = C13233 * C317;
    const double C13832 = C13233 * C316;
    const double C13978 = C13233 * C512;
    const double C13976 = C13233 * C511;
    const double C14194 = C13233 * C953;
    const double C14192 = C13233 * C952;
    const double C14182 = C13233 * C951;
    const double C14180 = C13233 * C950;
    const double C14718 = C13233 * C1177;
    const double C14716 = C13233 * C1176;
    const double C14926 = C13233 * C1320;
    const double C14924 = C13233 * C1319;
    const double C15638 = C13233 * C1314;
    const double C15636 = C13233 * C1313;
    const double C15782 = C13233 * C2033;
    const double C15780 = C13233 * C2032;
    const double C24769 = C13233 * C506;
    const double C24767 = C13233 * C505;
    const double C24757 = C13233 * C504;
    const double C24755 = C13233 * C503;
    const double C25239 = C13233 * C949;
    const double C25237 = C13233 * C948;
    const double C25635 = C13233 * C1322;
    const double C25633 = C13233 * C1321;
    const double C25627 = C13233 * C1316;
    const double C25625 = C13233 * C1315;
    const double C26523 = C13233 * C2037;
    const double C26521 = C13233 * C2036;
    const double C26511 = C13233 * C2035;
    const double C26509 = C13233 * C2034;
    const double C26997 = C13233 * C2434;
    const double C26995 = C13233 * C2433;
    const double C9170 = C568 * C30811;
    const double C19266 = C568 * C13231;
    const double C19262 = C568 * C13232;
    const double C9539 = C982 * C30811;
    const double C19730 = C982 * C13231;
    const double C19729 = C982 * C13232;
    const double C9548 = C9546 + C9538;
    const double C9858 = C9854 + C9840;
    const double C10536 = C10534 * C30811;
    const double C20956 = C10534 * C13231;
    const double C10804 = C10803 + C10801;
    const double C168 = C160 - C161;
    const double C364 = C355 - C356;
    const double C684 = C680 - C681;
    const double C559 = C550 - C551;
    const double C795 = C791 - C792;
    const double C978 = C972 - C973;
    const double C1455 = C1447 - C1448;
    const double C2207 = C2199 - C2200;
    const double C1619 = C1611 - C1612;
    const double C1183 =
        (3 * (C30087 + C30020 * C30190 + C30186 * ae) +
         C30020 * (2 * C30190 + C30020 * C30244 + C30235 * ae) +
         (2 * C30186 + C30020 * C30235) * ae) /
        C29975;
    const double C1326 =
        (C30087 + C30020 * C30190 + C30186 * ae + C30244 * C30269) / C29975;
    const double C1728 =
        (C30169 * (2 * C30190 + C30020 * C30244 + C30235 * ae)) / C29975;
    const double C1190 =
        (3 * (C30183 + ae * C30189 + be * C30190 + C30020 * C30238) +
         ae * (2 * C30189 + C30020 * C30243 + C30235 * be) +
         be * (2 * C30190 + C30020 * C30244 + C30235 * ae) +
         C30020 * (2 * C30238 + ae * C30243 + be * C30244 +
                   C30020 * (C30054 + ae * C30233 + be * C30236 +
                             C30020 * (ae * C30126 + be * C30132 +
                                       C30020 * C30026 * C30062)))) /
        C29983;
    const double C1732 =
        (2 * (ae * C30169 * C30101 + be * C30169 * C30105 + C30020 * C30290) +
         ae * C30169 * C30243 + be * C30169 * C30244 +
         C30020 * (C30290 + ae * C30169 * C30233 + be * C30169 * C30236 +
                   C30020 * (ae * C30169 * C30126 + be * C30169 * C30132 +
                             C30020 * C30169 * C30026 * C30062))) /
        C29983;
    const double C1182 =
        (3 * (C30086 + C30020 * C30189 + C30186 * be) +
         C30020 * (2 * C30189 + C30020 * C30243 + C30235 * be) +
         (2 * C30186 + C30020 * C30235) * be) /
        C29975;
    const double C1325 =
        (C30086 + C30020 * C30189 + C30186 * be + C30243 * C30269) / C29975;
    const double C1727 =
        (C30169 * (2 * C30189 + C30020 * C30243 + C30235 * be)) / C29975;
    const double C30343 = C30316 + C30341;
    const double C30342 = C30310 + C30340;
    const double C30367 = C30347 + C30348;
    const double C9843 = C113 * C1324;
    const double C25647 = C13233 * C1324;
    const double C25631 = C13235 * C1324;
    const double C10218 = C113 * C1726;
    const double C25639 = C13235 * C1726;
    const double C26123 = C13233 * C1726;
    const double C9847 = C113 * C6277;
    const double C26993 = C13235 * C6277;
    const double C177 = C172 + C159;
    const double C374 = C368 + C350;
    const double C375 = C369 + C354;
    const double C569 = C563 + C545;
    const double C570 = C564 + C549;
    const double C983 = C980 + C971;
    const double C1458 = C1456 - C1453;
    const double C2210 = C2208 - C2205;
    const double C1622 = C1620 - C1617;
    const double C10693 = C10692 - C10690;
    const double C9171 = C2332 * C30811;
    const double C20954 = C2332 * C13232;
    const double C21284 = C2332 * C13231;
    const double C10219 = C31046 * C1731;
    const double C25640 = C13230 * C1731;
    const double C26124 = C13229 * C1731;
    const double C10223 = C31046 * C5634;
    const double C25644 = C13230 * C5634;
    const double C9841 = C113 * C1323;
    const double C25645 = C13233 * C1323;
    const double C25629 = C13235 * C1323;
    const double C10216 = C113 * C1725;
    const double C25637 = C13235 * C1725;
    const double C26121 = C13233 * C1725;
    const double C9845 = C113 * C6276;
    const double C26991 = C13235 * C6276;
    const double C9857 = C9853 + C9836;
    const double C142 =
        (5 * (3 * C30052 + C30026 * C30066) +
         C30026 *
             (4 * C30066 +
              C30026 * (3 * C30064 +
                        C30026 * (2 * C30026 * C30062 +
                                  C30026 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30038))))) /
        C29983;
    const double C331 =
        (2 * C30026 * C30042 + C30026 * C30052 +
         ae * (C30020 * C30121 + C30117 * be) +
         be * (C30020 * C30122 + C30117 * ae) +
         C30020 * (ae * C30121 + be * C30122 + C30020 * C30066)) /
        C29983;
    const double C332 = (ae * (3 * C30097 + C30026 * C30121) +
                         be * (3 * C30098 + C30026 * C30122) +
                         C30020 * (3 * C30052 + C30026 * C30066)) /
                        C29983;
    const double C526 = (2 * C30026 * C30042 + C30026 * C30052 +
                         C30066 * std::pow(zP - zQ, 2)) /
                        C29983;
    const double C527 = ((zP - zQ) * (3 * C30052 + C30026 * C30066)) / C29983;
    const double C528 =
        (3 * C30052 + C30026 * C30066 +
         (3 * C30064 +
          C30026 * (2 * C30026 * C30062 +
                    C30026 * (C30062 + (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30038))) *
             std::pow(zP - zQ, 2)) /
        C29983;
    const double C789 =
        ((zP - zQ) *
         (4 * C30066 +
          C30026 * (3 * C30064 +
                    C30026 * (2 * C30026 * C30062 +
                              C30026 * (C30062 +
                                        (C30056 * C30057 +
                                         C30023 * bs[8] * std::pow(C30018, 8)) *
                                            C29974 * C30038))))) /
        C29983;
    const double C961 = (ae * C30169 * C30121 + be * C30169 * C30122 +
                         C30020 * C30169 * C30066) /
                        C29983;
    const double C2197 =
        (ae * (C30121 + C30149 * C30269) + be * (C30122 + C30151 * C30269) +
         C30020 * (C30066 +
                   (2 * C30026 * C30062 +
                    C30026 * (C30062 + (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30038)) *
                       C30269)) /
        C29983;
    const double C2317 =
        (2 * C30169 * C30066 +
         C30169 * (C30066 +
                   (2 * C30026 * C30062 +
                    C30026 * (C30062 + (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30038)) *
                       C30269)) /
        C29983;
    const double C2331 = C2329 + C2322;
    const double C30393 = C30020 * C30387;
    const double C6638 =
        (2 * (ae * (2 * C30412 + C30169 * C30424) +
              be * (2 * C30413 + C30169 * C30425) + C30020 * C30514) +
         ae * (2 * C30169 * C30338 + C30169 * (C30338 + C30388 * C30269)) +
         be * (2 * C30169 * C30339 + C30169 * (C30339 + C30391 * C30269)) +
         C30020 *
             (C30514 + ae * (2 * C30488 + C30169 * (C30321 + C30370 * C30269)) +
              be * (2 * C30489 + C30169 * (C30324 + C30373 * C30269)) +
              C30020 *
                  (ae * (2 * C30490 + C30169 * (C30108 + C30135 * C30269)) +
                   be * (2 * C30491 + C30169 * (C30112 + C30139 * C30269)) +
                   C30020 * (2 * C30492 +
                             C30169 * (C30062 +
                                       (C30056 * C30057 +
                                        C30023 * bs[8] * std::pow(C30018, 8)) *
                                           C29974 * C30269))))) /
        C29983;
    const double C10519 = (4 * (2 * C30288 + C30169 * C30410) +
                           C30169 * (3 * C30410 + C30169 * C30514)) /
                          C29983;
    const double C10520 =
        (5 * (3 * C30410 + C30169 * C30514) +
         C30169 *
             (4 * C30514 +
              C30169 * (3 * C30426 +
                        C30169 * (2 * C30492 +
                                  C30169 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30269))))) /
        C29983;
    const double C10906 =
        (ae * (4 * (2 * C30412 + C30169 * C30424) +
               C30169 * (3 * C30424 +
                         C30169 * (2 * C30490 +
                                   C30169 * (C30108 + C30135 * C30269)))) +
         be * (4 * (2 * C30413 + C30169 * C30425) +
               C30169 * (3 * C30425 +
                         C30169 * (2 * C30491 +
                                   C30169 * (C30112 + C30139 * C30269)))) +
         C30020 *
             (4 * C30514 +
              C30169 * (3 * C30426 +
                        C30169 * (2 * C30492 +
                                  C30169 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30269))))) /
        C29983;
    const double C10914 = C10913 + C10911;
    const double C30466 = C30453 + C30460;
    const double C30503 = C30500 + C30502;
    const double C135 = (5 * (3 * C30098 + C30026 * C30122) +
                         C30026 * (4 * C30122 + C30026 * C30155)) /
                        C29975;
    const double C323 =
        (3 * C30098 + C30026 * C30122 +
         C30020 * (C30020 * C30155 + C30150 * ae) + C30020 * C30150 * ae) /
        C29975;
    const double C518 =
        (3 * C30098 + C30026 * C30122 + C30155 * C30269) / C29975;
    const double C677 = (C30020 * (4 * C30122 + C30026 * C30155) +
                         (4 * C30117 + C30026 * C30150) * ae) /
                        C29975;
    const double C788 = (C30169 * (4 * C30122 + C30026 * C30155)) / C29975;
    const double C957 = (C30169 * (C30020 * C30155 + C30150 * ae)) / C29975;
    const double C1444 = (2 * (C30020 * C30122 + C30117 * ae) +
                          C30020 * (C30122 + C30020 * C30285 + C30281 * ae) +
                          (C30117 + C30144 * C30023) * ae) /
                         C29975;
    const double C1608 =
        (C30169 * (C30122 + C30020 * C30285 + C30281 * ae)) / C29975;
    const double C2196 =
        (C30020 * C30122 + C30117 * ae + C30285 * C30269) / C29975;
    const double C30267 = C30265 + C30260;
    const double C30399 = C30364 + C30396;
    const double C30473 = C30020 * C30471;
    const double C6535 =
        (2 * C30169 * C30244 + C30169 * (C30244 + C30471 * C30269)) / C29975;
    const double C333 =
        (3 * C30052 + C30026 * C30066 + ae * (C30020 * C30154 + C30150 * be) +
         be * (C30020 * C30155 + C30150 * ae) +
         C30020 *
             (ae * C30154 + be * C30155 +
              C30020 * (3 * C30064 +
                        C30026 * (2 * C30026 * C30062 +
                                  C30026 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30038))))) /
        C29983;
    const double C678 =
        (ae * (4 * C30121 + C30026 * C30154) +
         be * (4 * C30122 + C30026 * C30155) +
         C30020 *
             (4 * C30066 +
              C30026 * (3 * C30064 +
                        C30026 * (2 * C30026 * C30062 +
                                  C30026 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30038))))) /
        C29983;
    const double C962 =
        (ae * C30169 * C30154 + be * C30169 * C30155 +
         C30020 * C30169 *
             (3 * C30064 +
              C30026 *
                  (2 * C30026 * C30062 +
                   C30026 * (C30062 + (C30056 * C30057 +
                                       C30023 * bs[8] * std::pow(C30018, 8)) *
                                          C29974 * C30038)))) /
        C29983;
    const double C134 = (5 * (3 * C30097 + C30026 * C30121) +
                         C30026 * (4 * C30121 + C30026 * C30154)) /
                        C29975;
    const double C322 =
        (3 * C30097 + C30026 * C30121 +
         C30020 * (C30020 * C30154 + C30150 * be) + C30020 * C30150 * be) /
        C29975;
    const double C517 =
        (3 * C30097 + C30026 * C30121 + C30154 * C30269) / C29975;
    const double C676 = (C30020 * (4 * C30121 + C30026 * C30154) +
                         (4 * C30117 + C30026 * C30150) * be) /
                        C29975;
    const double C787 = (C30169 * (4 * C30121 + C30026 * C30154)) / C29975;
    const double C956 = (C30169 * (C30020 * C30154 + C30150 * be)) / C29975;
    const double C1445 =
        (2 * (ae * C30121 + be * C30122 + C30020 * C30066) +
         ae * (C30121 + C30020 * C30284 + C30281 * be) +
         be * (C30122 + C30020 * C30285 + C30281 * ae) +
         C30020 *
             (C30066 + ae * C30284 + be * C30285 +
              C30020 * (ae * C30149 + be * C30151 +
                        C30020 * (2 * C30026 * C30062 +
                                  C30026 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30038))))) /
        C29983;
    const double C1609 =
        (C30169 * C30066 + ae * C30169 * C30284 + be * C30169 * C30285 +
         C30020 *
             (ae * C30169 * C30149 + be * C30169 * C30151 +
              C30020 * C30169 *
                  (2 * C30026 * C30062 +
                   C30026 * (C30062 + (C30056 * C30057 +
                                       C30023 * bs[8] * std::pow(C30018, 8)) *
                                          C29974 * C30038)))) /
        C29983;
    const double C1443 = (2 * (C30020 * C30121 + C30117 * be) +
                          C30020 * (C30121 + C30020 * C30284 + C30281 * be) +
                          (C30117 + C30144 * C30023) * be) /
                         C29975;
    const double C1607 =
        (C30169 * (C30121 + C30020 * C30284 + C30281 * be)) / C29975;
    const double C2195 =
        (C30020 * C30121 + C30117 * be + C30284 * C30269) / C29975;
    const double C30266 = C30264 + C30257;
    const double C30398 = C30356 + C30394;
    const double C30472 = C30020 * C30470;
    const double C6434 =
        (2 * (ae * (C30101 + C30126 * C30269) +
              be * (C30105 + C30132 * C30269) + C30020 * C30509) +
         ae * (C30243 + C30470 * C30269) + be * (C30244 + C30471 * C30269) +
         C30020 * (C30509 + ae * (C30233 + C30455 * C30269) +
                   be * (C30236 + C30458 * C30269) +
                   C30020 * (ae * (C30126 + C30439 * C30269) +
                             be * (C30132 + C30443 * C30269) +
                             C30020 * (C30437 + C30026 *
                                                    (C30056 * C30057 +
                                                     C30023 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29974 * C30269)))) /
        C29983;
    const double C6534 =
        (2 * C30169 * C30243 + C30169 * (C30243 + C30470 * C30269)) / C29975;
    const double C31180 = C31126 + C31172;
    const double C672 = C31159 - (C30849 * C30831) / C30826;
    const double C111 = C31160 / C30830 - C30847 / C31133;
    const double C31173 = C31129 + C31159;
    const double C31181 = C31142 + C31176;
    const double C1437 = C31166 - (C30929 * C30918) / C30826;
    const double C1165 = C31167 / C30830 - C30927 / C31133;
    const double C31177 = C31144 + C31166;
    const double C31182 = C31148 + C31178;
    const double C2311 = C31169 - (C30971 * C30960) / C30826;
    const double C2022 = C31170 / C30830 - C30969 / C31133;
    const double C31179 = C31150 + C31169;
    const double C4770 =
        (((-4 * C29986) / C29975 - C29999 / C29975) * ae) / C29985 +
        ((2 * ((0 * ae) / C29975 - C29986 / C29983) - C29999 / C29985) * ae) /
            C29975;
    const double C13234 =
        (((-4 * C29986) / C29975 - C29999 / C29975) * ae) / C29975;
    const double C13263 = C13236 * C302;
    const double C13259 = C13236 * C300;
    const double C13247 = C13236 * C294;
    const double C13243 = C13236 * C295;
    const double C13465 = C13236 * C1168;
    const double C13461 = C13236 * C299;
    const double C13453 = C13236 * C1169;
    const double C13441 = C13236 * C298;
    const double C13667 = C13236 * C1302;
    const double C13663 = C13236 * C945;
    const double C13655 = C13236 * C1303;
    const double C13643 = C13236 * C944;
    const double C13829 = C13236 * C301;
    const double C13973 = C13236 * C946;
    const double C14189 = C13236 * C1305;
    const double C14185 = C13236 * C1306;
    const double C14713 = C13236 * C1172;
    const double C14921 = C13236 * C1723;
    const double C15633 = C13236 * C1309;
    const double C15777 = C13236 * C2431;
    const double C24764 = C13236 * C1304;
    const double C24760 = C13236 * C943;
    const double C25242 = C13236 * C1307;
    const double C25642 = C13236 * C5625;
    const double C25638 = C13236 * C1722;
    const double C25630 = C13236 * C1308;
    const double C26126 = C13236 * C5626;
    const double C26518 = C13236 * C6274;
    const double C26514 = C13236 * C2430;
    const double C26992 = C13236 * C6273;
    const double C9550 = C9548 * C30811;
    const double C20108 = C9548 * C13231;
    const double C9862 = C9858 * C30811;
    const double C20110 = C9858 * C13231;
    const double C10805 = C10804 * C30811;
    const double C20955 = C10804 * C13232;
    const double C173 = C168 - C162;
    const double C370 = C364 - C357;
    const double C685 = C684 - C682;
    const double C565 = C559 - C552;
    const double C796 = C795 - C793;
    const double C981 = C978 - C974;
    const double C1457 = C1455 - C1449;
    const double C2209 = C2207 - C2201;
    const double C1621 = C1619 - C1613;
    const double C14714 = C13235 * C1183;
    const double C10112 = C113 * C1326;
    const double C15634 = C13235 * C1326;
    const double C14922 = C13235 * C1728;
    const double C20246 = C113 * C1728;
    const double C14715 = C13230 * C1190;
    const double C14923 = C13230 * C1732;
    const double C20247 = C31046 * C1732;
    const double C14712 = C13235 * C1182;
    const double C10110 = C113 * C1325;
    const double C15632 = C13235 * C1325;
    const double C14920 = C13235 * C1727;
    const double C20244 = C113 * C1727;
    const double C30345 = C30343 + C30332;
    const double C30344 = C30342 + C30329;
    const double C30375 = C30367 + C30349;
    const double C9173 = C569 * C30811;
    const double C19271 = C569 * C13231;
    const double C19267 = C569 * C13232;
    const double C9383 = C570 * C30811;
    const double C19269 = C570 * C13232;
    const double C19532 = C570 * C13231;
    const double C9541 = C983 * C30811;
    const double C19732 = C983 * C13231;
    const double C19731 = C983 * C13232;
    const double C1460 = C1458 + C1454;
    const double C2212 = C2210 + C2206;
    const double C1624 = C1622 + C1618;
    const double C10694 = C10693 + C10691;
    const double C9851 = C9841 - C9842;
    const double C10224 = C10216 - C10217;
    const double C9852 = C9845 - C9846;
    const double C9861 = C9857 * C30811;
    const double C21416 = C9857 * C13231;
    const double C358 = C31046 * C331;
    const double C13831 = C13230 * C331;
    const double C683 = C31046 * C332;
    const double C13265 = C13230 * C332;
    const double C553 = C31046 * C526;
    const double C794 = C31046 * C527;
    const double C975 = C31046 * C961;
    const double C13975 = C13230 * C961;
    const double C9174 = C2331 * C30811;
    const double C21283 = C2331 * C13232;
    const double C10529 = C31046 * C10519;
    const double C10915 = C10914 * C30811;
    const double C1185 =
        (3 * (C30098 + C30020 * C30181 + C30177 * ae) +
         C30020 * (2 * C30181 + C30020 * C30267 + C30258 * ae) +
         (2 * C30177 + C30020 * C30258) * ae) /
        C29975;
    const double C1328 =
        (C30098 + C30020 * C30181 + C30177 * ae + C30267 * C30269) / C29975;
    const double C1730 =
        (C30169 * (2 * C30181 + C30020 * C30267 + C30258 * ae)) / C29975;
    const double C30401 = C30399 + C30382;
    const double C30475 = C30442 + C30473;
    const double C1191 =
        (3 * (C30052 + ae * C30180 + be * C30181 + C30020 * C30261) +
         ae * (2 * C30180 + C30020 * C30266 + C30258 * be) +
         be * (2 * C30181 + C30020 * C30267 + C30258 * ae) +
         C30020 *
             (2 * C30261 + ae * C30266 + be * C30267 +
              C30020 * (C30064 + ae * C30256 + be * C30259 +
                        C30020 * (ae * C30143 + be * C30145 +
                                  C30020 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30038))))) /
        C29983;
    const double C1733 =
        (2 * (ae * C30169 * C30116 + be * C30169 * C30118 + C30020 * C30292) +
         ae * C30169 * C30266 + be * C30169 * C30267 +
         C30020 *
             (C30292 + ae * C30169 * C30256 + be * C30169 * C30259 +
              C30020 * (ae * C30169 * C30143 + be * C30169 * C30145 +
                        C30020 * C30169 *
                            (C30062 + (C30056 * C30057 +
                                       C30023 * bs[8] * std::pow(C30018, 8)) *
                                          C29974 * C30038)))) /
        C29983;
    const double C1184 =
        (3 * (C30097 + C30020 * C30180 + C30177 * be) +
         C30020 * (2 * C30180 + C30020 * C30266 + C30258 * be) +
         (2 * C30177 + C30020 * C30258) * be) /
        C29975;
    const double C1327 =
        (C30097 + C30020 * C30180 + C30177 * be + C30266 * C30269) / C29975;
    const double C1729 =
        (C30169 * (2 * C30180 + C30020 * C30266 + C30258 * be)) / C29975;
    const double C30400 = C30398 + C30379;
    const double C30474 = C30438 + C30472;
    const double C108 =
        (C31171 + 2 * C30840) / C30830 - (C31180 * C30831) / C30826;
    const double C109 =
        (C31158 + 2 * C30849 + C31180) / C30830 - (C31173 * C30831) / C30826;
    const double C110 = (C31131 + C30846 / C30826 + C31173) / C30830 -
                        (C31160 * C30831) / C30826;
    const double C1162 =
        (C31174 + 2 * C30922) / C30830 - (C31181 * C30918) / C30826;
    const double C1163 =
        (C31162 + 2 * C30929 + C31181) / C30830 - (C31177 * C30918) / C30826;
    const double C1164 = (C31137 + C30926 / C30826 + C31177) / C30830 -
                         (C31167 * C30918) / C30826;
    const double C2019 =
        (C31175 + 2 * C30964) / C30830 - (C31182 * C30960) / C30826;
    const double C2020 =
        (C31164 + 2 * C30971 + C31182) / C30830 - (C31179 * C30960) / C30826;
    const double C2021 = (C31140 + C30968 / C30826 + C31179) / C30830 -
                         (C31170 * C30960) / C30826;
    const double C13267 = C13234 * C119;
    const double C13255 = C13234 * C118;
    const double C13251 = C13234 * C117;
    const double C13239 = C13234 * C116;
    const double C13469 = C13234 * C299;
    const double C13457 = C13234 * C294;
    const double C13449 = C13234 * C298;
    const double C13445 = C13234 * C295;
    const double C13671 = C13234 * C494;
    const double C13659 = C13234 * C489;
    const double C13651 = C13234 * C493;
    const double C13647 = C13234 * C490;
    const double C13833 = C13234 * C300;
    const double C13977 = C13234 * C495;
    const double C14193 = C13234 * C945;
    const double C14181 = C13234 * C944;
    const double C14717 = C13234 * C1169;
    const double C14925 = C13234 * C1306;
    const double C15637 = C13234 * C1303;
    const double C15781 = C13234 * C2025;
    const double C24768 = C13234 * C492;
    const double C24756 = C13234 * C491;
    const double C25238 = C13234 * C943;
    const double C25646 = C13234 * C1308;
    const double C25634 = C13234 * C1307;
    const double C25626 = C13234 * C1304;
    const double C26122 = C13234 * C1722;
    const double C26522 = C13234 * C2027;
    const double C26510 = C13234 * C2026;
    const double C26996 = C13234 * C2430;
    const double C13276 = C13262 - C13263;
    const double C13275 = C13258 - C13259;
    const double C13272 = C13246 - C13247;
    const double C13271 = C13242 - C13243;
    const double C13478 = C13464 - C13465;
    const double C13477 = C13460 - C13461;
    const double C13475 = C13452 - C13453;
    const double C13472 = C13440 - C13441;
    const double C13680 = C13666 - C13667;
    const double C13679 = C13662 - C13663;
    const double C13677 = C13654 - C13655;
    const double C13674 = C13642 - C13643;
    const double C13836 = C13828 - C13829;
    const double C13980 = C13972 - C13973;
    const double C14198 = C14188 - C14189;
    const double C14197 = C14184 - C14185;
    const double C15784 = C15776 - C15777;
    const double C24773 = C24763 - C24764;
    const double C24772 = C24759 - C24760;
    const double C25246 = C25241 - C25242;
    const double C25652 = C25637 - C25638;
    const double C25650 = C25629 - C25630;
    const double C26527 = C26517 - C26518;
    const double C26526 = C26513 - C26514;
    const double C26999 = C26991 - C26992;
    const double C178 = C173 + C163;
    const double C1459 = C1457 + C1450;
    const double C2211 = C2209 + C2202;
    const double C1623 = C1621 + C1614;
    const double C14720 = C14712 - C14713;
    const double C10114 = C10110 - C10111;
    const double C15640 = C15632 - C15633;
    const double C14928 = C14920 - C14921;
    const double C20248 = C20244 - C20245;
    const double C5510 =
        (4 * (2 * C30198 + C30020 * C30221 + C30212 * ae) +
         C30020 * (3 * C30221 + C30020 * C30345 + C30335 * ae) +
         (3 * C30212 + C30020 * C30335) * ae) /
        C29975;
    const double C5629 =
        (2 * C30198 + C30020 * C30221 + C30212 * ae + C30345 * C30269) / C29975;
    const double C5631 =
        (C30169 * (3 * C30221 + C30020 * C30345 + C30335 * ae)) / C29975;
    const double C5513 =
        (4 * (2 * C30215 + ae * C30220 + be * C30221 + C30020 * C30337) +
         ae * (3 * C30220 + C30020 * C30344 + C30335 * be) +
         be * (3 * C30221 + C30020 * C30345 + C30335 * ae) +
         C30020 * (3 * C30337 + ae * C30344 + be * C30345 +
                   C30020 * (2 * C30327 + ae * C30338 + be * C30339 +
                             C30020 * (C30050 + ae * C30321 + be * C30324 +
                                       C30020 * (ae * C30108 + be * C30112 +
                                                 C30020 * C30062))))) /
        C29983;
    const double C5635 =
        (3 * (C30288 + ae * C30169 * C30210 + be * C30169 * C30213 +
              C30020 * C30419) +
         ae * C30169 * C30344 + be * C30169 * C30345 +
         C30020 *
             (2 * C30419 + ae * C30169 * C30338 + be * C30169 * C30339 +
              C30020 * (C30414 + ae * C30169 * C30321 + be * C30169 * C30324 +
                        C30020 * (ae * C30169 * C30108 + be * C30169 * C30112 +
                                  C30020 * C30169 * C30062)))) /
        C29983;
    const double C5509 =
        (4 * (2 * C30197 + C30020 * C30220 + C30212 * be) +
         C30020 * (3 * C30220 + C30020 * C30344 + C30335 * be) +
         (3 * C30212 + C30020 * C30335) * be) /
        C29975;
    const double C5628 =
        (2 * C30197 + C30020 * C30220 + C30212 * be + C30344 * C30269) / C29975;
    const double C5630 =
        (C30169 * (3 * C30220 + C30020 * C30344 + C30335 * be)) / C29975;
    const double C30397 = C30375 + C30393;
    const double C9540 = C2212 * C30811;
    const double C20109 = C2212 * C13232;
    const double C21152 = C2212 * C13231;
    const double C10109 = C1624 * C30811;
    const double C20111 = C1624 * C13232;
    const double C20445 = C1624 * C13231;
    const double C10695 = C10694 * C30811;
    const double C21415 = C10694 * C13232;
    const double C9855 = C9851 - C9843;
    const double C10226 = C10224 - C10218;
    const double C9856 = C9852 - C9847;
    const double C376 = C370 + C358;
    const double C686 = C685 + C683;
    const double C571 = C565 + C553;
    const double C797 = C796 + C794;
    const double C984 = C981 + C975;
    const double C10535 = C10533 + C10529;
    const double C30403 = C30020 * C30401;
    const double C6637 =
        (2 * C30169 * C30345 + C30169 * (C30345 + C30401 * C30269)) / C29975;
    const double C30477 = C30475 + C30465;
    const double C30402 = C30020 * C30400;
    const double C5636 =
        (3 * (C30410 + ae * (C30210 + C30321 * C30269) +
              be * (C30213 + C30324 * C30269) + C30020 * C30431) +
         ae * (C30344 + C30400 * C30269) + be * (C30345 + C30401 * C30269) +
         C30020 *
             (2 * C30431 + ae * (C30338 + C30388 * C30269) +
              be * (C30339 + C30391 * C30269) +
              C30020 * (C30426 + ae * (C30321 + C30370 * C30269) +
                        be * (C30324 + C30373 * C30269) +
                        C30020 * (ae * (C30108 + C30135 * C30269) +
                                  be * (C30112 + C30139 * C30269) +
                                  C30020 * (C30062 + (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29974 * C30269))))) /
        C29983;
    const double C6636 =
        (2 * C30169 * C30344 + C30169 * (C30344 + C30400 * C30269)) / C29975;
    const double C30476 = C30474 + C30462;
    const double C13277 = C13266 - C13267;
    const double C13274 = C13254 - C13255;
    const double C13273 = C13250 - C13251;
    const double C13270 = C13238 - C13239;
    const double C13479 = C13468 - C13469;
    const double C13476 = C13456 - C13457;
    const double C13474 = C13448 - C13449;
    const double C13473 = C13444 - C13445;
    const double C13681 = C13670 - C13671;
    const double C13678 = C13658 - C13659;
    const double C13676 = C13650 - C13651;
    const double C13675 = C13646 - C13647;
    const double C13837 = C13832 - C13833;
    const double C13981 = C13976 - C13977;
    const double C14199 = C14192 - C14193;
    const double C14196 = C14180 - C14181;
    const double C14721 = C14716 - C14717;
    const double C14929 = C14924 - C14925;
    const double C15641 = C15636 - C15637;
    const double C15785 = C15780 - C15781;
    const double C24774 = C24767 - C24768;
    const double C24771 = C24755 - C24756;
    const double C25245 = C25237 - C25238;
    const double C25654 = C25645 - C25646;
    const double C25651 = C25633 - C25634;
    const double C25649 = C25625 - C25626;
    const double C26129 = C26121 - C26122;
    const double C26528 = C26521 - C26522;
    const double C26525 = C26509 - C26510;
    const double C27000 = C26995 - C26996;
    const double C13284 = C13276 - C13264;
    const double C13283 = C13275 - C13260;
    const double C13280 = C13272 - C13248;
    const double C13279 = C13271 - C13244;
    const double C13486 = C13478 - C13466;
    const double C13485 = C13477 - C13462;
    const double C13483 = C13475 - C13454;
    const double C13480 = C13472 - C13442;
    const double C13688 = C13680 - C13668;
    const double C13687 = C13679 - C13664;
    const double C13685 = C13677 - C13656;
    const double C13682 = C13674 - C13644;
    const double C13838 = C13836 - C13830;
    const double C13982 = C13980 - C13974;
    const double C14202 = C14198 - C14190;
    const double C14201 = C14197 - C14186;
    const double C15786 = C15784 - C15778;
    const double C24777 = C24773 - C24765;
    const double C24776 = C24772 - C24761;
    const double C25248 = C25246 - C25243;
    const double C25658 = C25652 - C25639;
    const double C25656 = C25650 - C25631;
    const double C26531 = C26527 - C26519;
    const double C26530 = C26526 - C26515;
    const double C27001 = C26999 - C26993;
    const double C9542 = C2211 * C30811;
    const double C21151 = C2211 * C13232;
    const double C20446 = C1623 * C13232;
    const double C14722 = C14720 - C14714;
    const double C10115 = C10114 - C10112;
    const double C15642 = C15640 - C15634;
    const double C14930 = C14928 - C14922;
    const double C20249 = C20248 - C20246;
    const double C10222 = C113 * C5629;
    const double C25643 = C13235 * C5629;
    const double C26127 = C13235 * C5631;
    const double C26128 = C13230 * C5635;
    const double C10220 = C113 * C5628;
    const double C25641 = C13235 * C5628;
    const double C26125 = C13235 * C5630;
    const double C9859 = C9855 + C9844;
    const double C10228 = C10226 + C10219;
    const double C9860 = C9856 + C9848;
    const double C9384 = C571 * C30811;
    const double C19270 = C571 * C13232;
    const double C19533 = C797 * C13232;
    const double C19733 = C984 * C13232;
    const double C10537 = C10535 * C30811;
    const double C30405 = C30363 + C30403;
    const double C5737 =
        (4 * (2 * C30190 + C30020 * C30244 + C30235 * ae) +
         C30020 * (3 * C30244 + C30020 * C30477 + C30468 * ae) +
         (3 * C30235 + C30020 * C30468) * ae) /
        C29975;
    const double C5887 =
        (C30169 * (3 * C30244 + C30020 * C30477 + C30468 * ae)) / C29975;
    const double C6433 =
        (2 * C30190 + C30020 * C30244 + C30235 * ae + C30477 * C30269) / C29975;
    const double C30404 = C30355 + C30402;
    const double C5738 =
        (4 * (2 * C30238 + ae * C30243 + be * C30244 + C30020 * C30466) +
         ae * (3 * C30243 + C30020 * C30476 + C30468 * be) +
         be * (3 * C30244 + C30020 * C30477 + C30468 * ae) +
         C30020 * (3 * C30466 + ae * C30476 + be * C30477 +
                   C30020 * (2 * C30454 + ae * C30470 + be * C30471 +
                             C30020 * (C30437 + ae * C30455 + be * C30458 +
                                       C30020 * (ae * C30439 + be * C30443 +
                                                 C30020 * C30026 *
                                                     (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                     C29974))))) /
        C29983;
    const double C5888 =
        (3 * (C30290 + ae * C30169 * C30233 + be * C30169 * C30236 +
              C30020 * C30486) +
         ae * C30169 * C30476 + be * C30169 * C30477 +
         C30020 *
             (2 * C30486 + ae * C30169 * C30470 + be * C30169 * C30471 +
              C30020 * (C30481 + ae * C30169 * C30455 + be * C30169 * C30458 +
                        C30020 * (ae * C30169 * C30439 + be * C30169 * C30443 +
                                  C30020 * C30169 * C30026 *
                                      (C30056 * C30057 +
                                       C30023 * bs[8] * std::pow(C30018, 8)) *
                                      C29974)))) /
        C29983;
    const double C5736 =
        (4 * (2 * C30189 + C30020 * C30243 + C30235 * be) +
         C30020 * (3 * C30243 + C30020 * C30476 + C30468 * be) +
         (3 * C30235 + C30020 * C30468) * be) /
        C29975;
    const double C5886 =
        (C30169 * (3 * C30243 + C30020 * C30476 + C30468 * be)) / C29975;
    const double C6432 =
        (2 * C30189 + C30020 * C30243 + C30235 * be + C30476 * C30269) / C29975;
    const double C13285 = C13277 - C13268;
    const double C13282 = C13274 - C13256;
    const double C13281 = C13273 - C13252;
    const double C13278 = C13270 - C13240;
    const double C13487 = C13479 - C13470;
    const double C13484 = C13476 - C13458;
    const double C13482 = C13474 - C13450;
    const double C13481 = C13473 - C13446;
    const double C13689 = C13681 - C13672;
    const double C13686 = C13678 - C13660;
    const double C13684 = C13676 - C13652;
    const double C13683 = C13675 - C13648;
    const double C13839 = C13837 - C13834;
    const double C13983 = C13981 - C13978;
    const double C14203 = C14199 - C14194;
    const double C14200 = C14196 - C14182;
    const double C14723 = C14721 - C14718;
    const double C14931 = C14929 - C14926;
    const double C15643 = C15641 - C15638;
    const double C15787 = C15785 - C15782;
    const double C24778 = C24774 - C24769;
    const double C24775 = C24771 - C24757;
    const double C25247 = C25245 - C25239;
    const double C25660 = C25654 - C25647;
    const double C25657 = C25651 - C25635;
    const double C25655 = C25649 - C25627;
    const double C26131 = C26129 - C26123;
    const double C26532 = C26528 - C26523;
    const double C26529 = C26525 - C26511;
    const double C27002 = C27000 - C26997;
    const double C13292 = C13284 + C13265;
    const double C13291 = C13283 + C13261;
    const double C13288 = C13280 + C13249;
    const double C13287 = C13279 + C13245;
    const double C13494 = C13486 + C13467;
    const double C13493 = C13485 + C13463;
    const double C13491 = C13483 + C13455;
    const double C13488 = C13480 + C13443;
    const double C13696 = C13688 + C13669;
    const double C13695 = C13687 + C13665;
    const double C13693 = C13685 + C13657;
    const double C13690 = C13682 + C13645;
    const double C13840 = C13838 + C13831;
    const double C13984 = C13982 + C13975;
    const double C14206 = C14202 + C14191;
    const double C14205 = C14201 + C14187;
    const double C15788 = C15786 + C15779;
    const double C24781 = C24777 + C24766;
    const double C24780 = C24776 + C24762;
    const double C25250 = C25248 + C25244;
    const double C25664 = C25658 + C25640;
    const double C25662 = C25656 + C25632;
    const double C26535 = C26531 + C26520;
    const double C26534 = C26530 + C26516;
    const double C27003 = C27001 + C26994;
    const double C14724 = C14722 + C14715;
    const double C10116 = C10115 + C10113;
    const double C15644 = C15642 + C15635;
    const double C14932 = C14930 + C14923;
    const double C20250 = C20249 + C20247;
    const double C10225 = C10220 - C10221;
    const double C25653 = C25641 - C25642;
    const double C26130 = C26125 - C26126;
    const double C9863 = C9859 * C30811;
    const double C20113 = C9859 * C13231;
    const double C10230 = C10228 * C30811;
    const double C20577 = C10228 * C13231;
    const double C9864 = C9860 * C30811;
    const double C30407 = C30405 + C30392;
    const double C30406 = C30404 + C30389;
    const double C13293 = C13285 + C13269;
    const double C13290 = C13282 + C13257;
    const double C13289 = C13281 + C13253;
    const double C13286 = C13278 + C13241;
    const double C13495 = C13487 + C13471;
    const double C13492 = C13484 + C13459;
    const double C13490 = C13482 + C13451;
    const double C13489 = C13481 + C13447;
    const double C13697 = C13689 + C13673;
    const double C13694 = C13686 + C13661;
    const double C13692 = C13684 + C13653;
    const double C13691 = C13683 + C13649;
    const double C13841 = C13839 + C13835;
    const double C13985 = C13983 + C13979;
    const double C14207 = C14203 + C14195;
    const double C14204 = C14200 + C14183;
    const double C14725 = C14723 + C14719;
    const double C14933 = C14931 + C14927;
    const double C15645 = C15643 + C15639;
    const double C15789 = C15787 + C15783;
    const double C24782 = C24778 + C24770;
    const double C24779 = C24775 + C24758;
    const double C25249 = C25247 + C25240;
    const double C25666 = C25660 + C25648;
    const double C25663 = C25657 + C25636;
    const double C25661 = C25655 + C25628;
    const double C26133 = C26131 + C26124;
    const double C26536 = C26532 + C26524;
    const double C26533 = C26529 + C26512;
    const double C27004 = C27002 + C26998;
    const double C10117 = C10116 * C30811;
    const double C20112 = C10116 * C13232;
    const double C20578 = C20250 * C13232;
    const double C10227 = C10225 - C10222;
    const double C25659 = C25653 - C25643;
    const double C26132 = C26130 - C26127;
    const double C5512 =
        (5 * (3 * C30221 + C30020 * C30345 + C30335 * ae) +
         C30020 * (4 * C30345 + C30020 * C30407 + C30395 * ae) +
         (4 * C30335 + C30020 * C30395) * ae) /
        C29975;
    const double C5633 =
        (3 * C30221 + C30020 * C30345 + C30335 * ae + C30407 * C30269) / C29975;
    const double C5989 =
        (C30169 * (4 * C30345 + C30020 * C30407 + C30395 * ae)) / C29975;
    const double C5514 =
        (5 * (3 * C30337 + ae * C30344 + be * C30345 + C30020 * C30397) +
         ae * (4 * C30344 + C30020 * C30406 + C30395 * be) +
         be * (4 * C30345 + C30020 * C30407 + C30395 * ae) +
         C30020 *
             (4 * C30397 + ae * C30406 + be * C30407 +
              C30020 *
                  (3 * C30387 + ae * C30400 + be * C30401 +
                   C30020 * (2 * C30377 + ae * C30388 + be * C30391 +
                             C30020 * (C30062 + ae * C30370 + be * C30373 +
                                       C30020 * (ae * C30135 + be * C30139 +
                                                 C30020 *
                                                     (C30056 * C30057 +
                                                      C30023 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                     C29974)))))) /
        C29983;
    const double C5990 =
        (4 * (2 * C30419 + ae * C30169 * C30338 + be * C30169 * C30339 +
              C30020 * C30503) +
         ae * C30169 * C30406 + be * C30169 * C30407 +
         C30020 *
             (3 * C30503 + ae * C30169 * C30400 + be * C30169 * C30401 +
              C30020 *
                  (2 * C30501 + ae * C30169 * C30388 + be * C30169 * C30391 +
                   C30020 *
                       (C30492 + ae * C30169 * C30370 + be * C30169 * C30373 +
                        C30020 * (ae * C30169 * C30135 + be * C30169 * C30139 +
                                  C30020 * C30169 *
                                      (C30056 * C30057 +
                                       C30023 * bs[8] * std::pow(C30018, 8)) *
                                      C29974))))) /
        C29983;
    const double C5511 =
        (5 * (3 * C30220 + C30020 * C30344 + C30335 * be) +
         C30020 * (4 * C30344 + C30020 * C30406 + C30395 * be) +
         (4 * C30335 + C30020 * C30395) * be) /
        C29975;
    const double C5632 =
        (3 * C30220 + C30020 * C30344 + C30335 * be + C30406 * C30269) / C29975;
    const double C5988 =
        (C30169 * (4 * C30344 + C30020 * C30406 + C30395 * be)) / C29975;
    const double C10229 = C10227 + C10223;
    const double C25665 = C25659 + C25644;
    const double C26134 = C26132 + C26128;
    const double C10231 = C10229 * C30811;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C30922 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C30929 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C2908) *
              C30840 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C30929 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C30922 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C2908) *
              C30849 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C30922 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C30929 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31107 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C30922 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31107) *
               C30929 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C13231 +
             (C13490 + C13491) * C13232) *
                C31060 * C31107 -
            ((C14932 + C14933) * C13232 +
             (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
              C13230 * C1731 + C13233 * C1321 - C13234 * C1307 -
              C13233 * C1322 + C13229 * C1334) *
                 C13231) *
                C31060 * C30968) *
               C2908) *
              C2648 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31107) *
               C30922 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31107 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30929 +
           (((C14933 + C14932) * C13231 +
             (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
              C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
              C13235 * C1730 + C13230 * C1733) *
                 C13232) *
                C31060 * C30968 -
            ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
                C31107) *
               C2908) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31181 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C31177 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31167 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C30881 * C31147) *
              C2648 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C31177 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31181 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31167 +
           ((C14725 + C14724) * C13231 +
            (C13233 * C1174 - C13234 * C1168 - C13233 * C1175 + C13229 * C1186 +
             C13235 * C1184 - C13236 * C1173 - C13235 * C1185 +
             C13230 * C1191) *
                C13232) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C2540 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C30926) *
              C31180 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C30926 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C2540) *
              C31173 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C2540 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C30926) *
              C31160 +
          (((C13841 + C13840) * C13231 +
            (C13233 * C320 - C13234 * C302 - C13233 * C321 + C13229 * C332 +
             C13235 * C322 - C13236 * C303 - C13235 * C323 + C13230 * C333) *
                C13232) *
               C31060 * C30881 * C30926 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31175 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C31164 +
            ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
              C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
              C13230 * C1331) *
                 C13231 +
             (C13692 + C13693) * C13232) *
                C31060 * C31140) *
               C2540 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C31164 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31175 -
            ((C15644 + C15645) * C13232 +
             (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 +
              C13230 * C1335 + C13233 * C1315 - C13234 * C1304 -
              C13233 * C1316 + C13229 * C1331) *
                 C13231) *
                C31060 * C31140) *
               C30926) *
              C2648 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C31164 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31175 -
            ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
                C31140) *
               C2540 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31175 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C31164 +
            ((C15645 + C15644) * C13231 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C13232) *
                C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31107 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C2540 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31107) *
               C30926) *
              C30840 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31107) *
               C2540 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31107 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30926) *
              C30849 +
          ((((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
                C31107 -
            ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
                C30968) *
               C2540 +
           (((C14207 + C14206) * C13231 +
             (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
              C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
              C13230 * C1609) *
                 C13232) *
                C31060 * C30968 -
            ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
                C31107) *
               C30926) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C2540 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C30926) *
              C31180 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C30926 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C2540) *
              C31173 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C2540 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C30926) *
              C31160 +
          (((C13841 + C13840) * C13231 +
            (C13233 * C320 - C13234 * C302 - C13233 * C321 + C13229 * C332 +
             C13235 * C322 - C13236 * C303 - C13235 * C323 + C13230 * C333) *
                C13232) *
               C31060 * C30881 * C30926 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31181 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C31177 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31167 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C30881 * C31147) *
              C2648 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C31177 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31181 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31167 +
           ((C14725 + C14724) * C13231 +
            (C13233 * C1174 - C13234 * C1168 - C13233 * C1175 + C13229 * C1186 +
             C13235 * C1184 - C13236 * C1173 - C13235 * C1185 +
             C13230 * C1191) *
                C13232) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C3302 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C30922 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C3302) *
               C30929 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C13231 +
             (C13490 + C13491) * C13232) *
                C31060 * C3302 -
            ((C14932 + C14933) * C13232 +
             (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
              C13230 * C1731 + C13233 * C1321 - C13234 * C1307 -
              C13233 * C1322 + C13229 * C1334) *
                 C13231) *
                C31060 * C30968) *
               C2908) *
              C31092 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C3302) *
               C30922 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C3302 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30929 +
           (((C14933 + C14932) * C13231 +
             (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
              C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
              C13235 * C1730 + C13230 * C1733) *
                 C13232) *
                C31060 * C30968 -
            ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
                C3302) *
               C2908) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30964 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30971 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C3810) *
              C30922 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C30971 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30964 -
           ((C15644 + C15645) * C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C3810) *
              C30929 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30964 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C30971 +
           ((C13233 * C1323 - C13234 * C1308 - C13233 * C1324 + C13229 * C1335 +
             C13235 * C5628 - C13236 * C5625 - C13235 * C5629 +
             C13230 * C5634) *
                C13231 +
            (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 + C13229 * C1336 +
             C13235 * C6432 - C13236 * C6431 - C13235 * C6433 +
             C13230 * C6434) *
                C13232) *
               C31060 * C3810) *
              C2908) *
         C30835) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C3302 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C31181 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C30968 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C3302) *
              C31177 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C3302 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C30968) *
              C31167 +
          (((C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731 +
             C13235 * C5630 - C13236 * C5626 - C13235 * C5631 +
             C13230 * C5635) *
                C13231 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C13232) *
               C31060 * C30968 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C3302 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C2540 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C3302) *
               C30926) *
              C31171 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C3302) *
               C2540 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C3302 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30926) *
              C31158 +
          ((((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
                C3302 -
            ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
                C30968) *
               C2540 +
           (((C14207 + C14206) * C13231 +
             (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
              C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
              C13230 * C1609) *
                 C13232) *
                C31060 * C30968 -
            ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
                C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31182 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C31179 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31170 -
           ((C15788 + C15789) * C13232 +
            (C13235 * C2433 - C13236 * C2430 - C13235 * C2434 + C13230 * C2439 +
             C13233 * C2034 - C13234 * C2026 - C13233 * C2035 +
             C13229 * C2044) *
                C13231) *
               C31060 * C31153) *
              C2540 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C31179 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C31182 -
           ((C15644 + C15645) * C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C31170 +
           ((C13233 * C2433 - C13234 * C2430 - C13233 * C2434 + C13229 * C2439 +
             C13235 * C6276 - C13236 * C6273 - C13235 * C6277 +
             C13230 * C6282) *
                C13231 +
            (C13233 * C2435 - C13234 * C2431 - C13233 * C2436 + C13229 * C2440 +
             C13235 * C6534 - C13236 * C6533 - C13235 * C6535 +
             C13230 * C6536) *
                C13232) *
               C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C30964 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30971 +
            ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
              C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
              C13230 * C1331) *
                 C13231 +
             (C13692 + C13693) * C13232) *
                C31060 * C3810) *
               C2540 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30971 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C30964 -
            ((C15644 + C15645) * C13232 +
             (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 +
              C13230 * C1335 + C13233 * C1315 - C13234 * C1304 -
              C13233 * C1316 + C13229 * C1331) *
                 C13231) *
                C31060 * C3810) *
               C30926) *
              C31092 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30971 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C30964 -
            ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
                C3810) *
               C2540 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C30964 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30971 +
            ((C15645 + C15644) * C13231 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C13232) *
                C31060 * C3810) *
               C30926) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C3302 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C2540 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C3302) *
               C30926) *
              C31171 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C3302) *
               C2540 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C3302 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30926) *
              C31158 +
          ((((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
                C3302 -
            ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
                C30968) *
               C2540 +
           (((C14207 + C14206) * C13231 +
             (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
              C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
              C13230 * C1609) *
                 C13232) *
                C31060 * C30968 -
            ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
                C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C3302 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C31181 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C30968 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C3302) *
              C31177 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C3302 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C30968) *
              C31167 +
          (((C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731 +
             C13235 * C5630 - C13236 * C5626 - C13235 * C5631 +
             C13230 * C5635) *
                C13231 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C13232) *
               C31060 * C30968 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C1436 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C1437 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C1438 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C30881 * C31147) *
              C31092 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C1437 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C1436 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C1438 +
           ((C14725 + C14724) * C13231 +
            (C13233 * C1174 - C13234 * C1168 - C13233 * C1175 + C13229 * C1186 +
             C13235 * C1184 - C13236 * C1173 - C13235 * C1185 +
             C13230 * C1191) *
                C13232) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31106 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C30926) *
              C671 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C30926 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31106) *
              C672 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C31106 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C30926) *
              C673 +
          (((C13841 + C13840) * C13231 +
            (C13233 * C320 - C13234 * C302 - C13233 * C321 + C13229 * C332 +
             C13235 * C322 - C13236 * C303 - C13235 * C323 + C13230 * C333) *
                C13232) *
               C31060 * C30881 * C30926 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C1844 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C1845 +
            ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
              C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
              C13230 * C1331) *
                 C13231 +
             (C13692 + C13693) * C13232) *
                C31060 * C31140) *
               C31106 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C1845 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C1844 -
            ((C15644 + C15645) * C13232 +
             (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 +
              C13230 * C1335 + C13233 * C1315 - C13234 * C1304 -
              C13233 * C1316 + C13229 * C1331) *
                 C13231) *
                C31060 * C31140) *
               C30926) *
              C31092 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C1845 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C1844 -
            ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
                C31140) *
               C31106 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C1844 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C1845 +
            ((C15645 + C15644) * C13231 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C13232) *
                C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31107 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C1436 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C30968 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C31107) *
              C1437 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C31107 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C30968) *
              C1438 +
          (((C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731 +
             C13235 * C5630 - C13236 * C5626 - C13235 * C5631 +
             C13230 * C5635) *
                C13231 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C13232) *
               C31060 * C30968 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31107 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C31106 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31107) *
               C30926) *
              C291 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31107) *
               C31106 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31107 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30926) *
              C292 +
          ((((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
                C31107 -
            ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
                C30968) *
               C31106 +
           (((C14207 + C14206) * C13231 +
             (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
              C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
              C13230 * C1609) *
                 C13232) *
                C31060 * C30968 -
            ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
                C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C2310 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C2311 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C2312 -
           ((C15788 + C15789) * C13232 +
            (C13235 * C2433 - C13236 * C2430 - C13235 * C2434 + C13230 * C2439 +
             C13233 * C2034 - C13234 * C2026 - C13233 * C2035 +
             C13229 * C2044) *
                C13231) *
               C31060 * C31153) *
              C31106 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C2311 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C2310 -
           ((C15644 + C15645) * C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C2312 +
           ((C13233 * C2433 - C13234 * C2430 - C13233 * C2434 + C13229 * C2439 +
             C13235 * C6276 - C13236 * C6273 - C13235 * C6277 +
             C13230 * C6282) *
                C13231 +
            (C13233 * C2435 - C13234 * C2431 - C13233 * C2436 + C13229 * C2440 +
             C13235 * C6534 - C13236 * C6533 - C13235 * C6535 +
             C13230 * C6536) *
                C13232) *
               C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
                C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                   C13231 +
               (C13286 + C13287) * C13232) *
                  C31060 * C30881 * C30863 * C108 -
              ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) *
                  C31060 * C30881 * C30863 * C109 +
              ((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) *
                  C31060 * C30881 * C30863 * C110 -
              ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) *
                  C31060 * C30881 * C30863 * C111 +
              ((C13293 + C13292) * C13231 +
               (C13233 * C132 - C13234 * C120 - C13233 * C133 + C13229 * C141 +
                C13235 * C676 - C13236 * C675 - C13235 * C677 + C13230 * C678) *
                   C13232) *
                  C31060 * C30881 * C30863 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
                 C13235 * C308 - C13236 * C296 - C13235 * C309 +
                 C13230 * C326) *
                    C13231 +
                (C13286 + C13287) * C13232) *
                   C31060 * C30881 * C31174 -
               ((C13488 + C13489) * C13232 +
                (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
                 C13233 * C308 - C13234 * C296 - C13233 * C309 +
                 C13229 * C326) *
                    C13231) *
                   C31060 * C30881 * C31162 +
               ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
                 C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
                 C13230 * C1188) *
                    C13231 +
                (C13490 + C13491) * C13232) *
                   C31060 * C30881 * C31137) *
                  C291 +
              (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) *
                   C31060 * C30881 * C31162 -
               ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) *
                   C31060 * C30881 * C31174 -
               ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) *
                   C31060 * C30881 * C31137) *
                  C292 +
              (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) *
                   C31060 * C30881 * C31174 -
               ((C13235 * C318 - C13236 * C301 - C13235 * C319 + C13230 * C331 +
                 C13233 * C316 - C13234 * C300 - C13233 * C317 +
                 C13229 * C330) *
                    C13232 +
                (C13493 + C13492) * C13231) *
                   C31060 * C30881 * C31162 +
               ((C13495 + C13494) * C13231 +
                (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
                 C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
                 C13230 * C1445) *
                    C13232) *
                   C31060 * C30881 * C31137) *
                  C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31175 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C31164 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C30863 * C291 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C31164 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C31175 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C31140) *
              C30863 * C292 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C31175 -
           ((C13235 * C954 - C13236 * C946 - C13235 * C955 + C13230 * C961 +
             C13233 * C511 - C13234 * C495 - C13233 * C512 + C13229 * C525) *
                C13232 +
            (C13695 + C13694) * C13231) *
               C31060 * C31164 +
           ((C13697 + C13696) * C13231 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C13232) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C1094 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C1095 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C1094 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C1094 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C1095 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C1162 -
          ((C13488 + C13489) * C13232 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C13231) *
              C31060 * C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C13231 +
           (C13490 + C13491) * C13232) *
              C31060 * C30881 * C1164 -
          ((C13235 * C1182 - C13236 * C1172 - C13235 * C1183 + C13230 * C1190 +
            C13233 * C1176 - C13234 * C1169 - C13233 * C1177 + C13229 * C1187) *
               C13232 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C13231) *
              C31060 * C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C13231 +
           (C13233 * C1182 - C13234 * C1172 - C13233 * C1183 + C13229 * C1190 +
            C13235 * C5736 - C13236 * C5735 - C13235 * C5737 + C13230 * C5738) *
               C13232) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31175 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C31164 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C1094 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C31164 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C31175 -
           ((C13235 * C1325 - C13236 * C1309 - C13235 * C1326 + C13230 * C1336 +
             C13233 * C1313 - C13234 * C1303 - C13233 * C1314 +
             C13229 * C1330) *
                C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C31140) *
              C1095 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C31175 -
           ((C13235 * C1727 - C13236 * C1723 - C13235 * C1728 + C13230 * C1732 +
             C13233 * C1319 - C13234 * C1306 - C13233 * C1320 +
             C13229 * C1333) *
                C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C31164 +
           ((C13233 * C1323 - C13234 * C1308 - C13233 * C1324 + C13229 * C1335 +
             C13235 * C5628 - C13236 * C5625 - C13235 * C5629 +
             C13230 * C5634) *
                C13231 +
            (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 + C13229 * C1336 +
             C13235 * C6432 - C13236 * C6431 - C13235 * C6433 +
             C13230 * C6434) *
                C13232) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C1844 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C1845 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C30863 * C31171 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C1845 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C1844 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C31140) *
              C30863 * C31158 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C1844 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C1845 +
           ((C13697 + C13696) * C13231 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C13232) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C1844 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C1845 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C31174 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C1845 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C1844 -
           ((C13235 * C1325 - C13236 * C1309 - C13235 * C1326 + C13230 * C1336 +
             C13233 * C1313 - C13234 * C1303 - C13233 * C1314 +
             C13229 * C1330) *
                C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C31140) *
              C31162 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C1844 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C1845 +
           ((C13233 * C1323 - C13234 * C1308 - C13233 * C1324 + C13229 * C1335 +
             C13235 * C5628 - C13236 * C5625 - C13235 * C5629 +
             C13230 * C5634) *
                C13231 +
            (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 + C13229 * C1336 +
             C13235 * C6432 - C13236 * C6431 - C13235 * C6433 +
             C13230 * C6434) *
                C13232) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C2019 -
          ((C13690 + C13691) * C13232 +
           (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
            C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
               C13231) *
              C31060 * C2020 +
          ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
            C13235 * C1315 - C13236 * C1304 - C13235 * C1316 + C13230 * C1331) *
               C13231 +
           (C13692 + C13693) * C13232) *
              C31060 * C2021 -
          ((C13235 * C2435 - C13236 * C2431 - C13235 * C2436 + C13230 * C2440 +
            C13233 * C2032 - C13234 * C2025 - C13233 * C2033 + C13229 * C2043) *
               C13232 +
           (C13235 * C2433 - C13236 * C2430 - C13235 * C2434 + C13230 * C2439 +
            C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044) *
               C13231) *
              C31060 * C2022 +
          ((C13233 * C2036 - C13234 * C2027 - C13233 * C2037 + C13229 * C2045 +
            C13235 * C6278 - C13236 * C6274 - C13235 * C6279 + C13230 * C6283) *
               C13231 +
           (C13233 * C2038 - C13234 * C2028 - C13233 * C2039 + C13229 * C2046 +
            C13235 * C10684 - C13236 * C10683 - C13235 * C10685 +
            C13230 * C10686) *
               C13232) *
              C31060 * C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31107 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C1094 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31107) *
               C1095 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C13231 +
             (C13490 + C13491) * C13232) *
                C31060 * C31107 -
            ((C14932 + C14933) * C13232 +
             (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
              C13230 * C1731 + C13233 * C1321 - C13234 * C1307 -
              C13233 * C1322 + C13229 * C1334) *
                 C13231) *
                C31060 * C30968) *
               C31137) *
              C31092 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31107) *
               C1094 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31107 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C1095 +
           (((C14933 + C14932) * C13231 +
             (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
              C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
              C13235 * C1730 + C13230 * C1733) *
                 C13232) *
                C31060 * C30968 -
            ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31107 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C30863 * C671 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C30968 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C31107) *
              C30863 * C672 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C31107 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C30968) *
              C30863 * C673 +
          (((C13985 + C13984) * C13231 +
            (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
             C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
                C13232) *
               C31060 * C30968 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C2310 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C2311 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C2312 -
           ((C15788 + C15789) * C13232 +
            (C13235 * C2433 - C13236 * C2430 - C13235 * C2434 + C13230 * C2439 +
             C13233 * C2034 - C13234 * C2026 - C13233 * C2035 +
             C13229 * C2044) *
                C13231) *
               C31060 * C31153) *
              C30863 * C31092 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C2311 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C2310 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C2312 +
           ((C15789 + C15788) * C13231 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C13232) *
               C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31174 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C31162 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C291 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C31162 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31174 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C292 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C31174 -
           ((C13235 * C318 - C13236 * C301 - C13235 * C319 + C13230 * C331 +
             C13233 * C316 - C13234 * C300 - C13233 * C317 + C13229 * C330) *
                C13232 +
            (C13493 + C13492) * C13231) *
               C31060 * C30881 * C31162 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C30863 * C108 -
          ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
              C30881 * C30863 * C109 +
          ((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
              C30881 * C30863 * C110 -
          ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
              C30881 * C30863 * C111 +
          ((C13293 + C13292) * C13231 +
           (C13233 * C132 - C13234 * C120 - C13233 * C133 + C13229 * C141 +
            C13235 * C676 - C13236 * C675 - C13235 * C677 + C13230 * C678) *
               C13232) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C1094 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C1095 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C1094 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C1094 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C1095 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C1162 -
          ((C13488 + C13489) * C13232 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C13231) *
              C31060 * C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C13231 +
           (C13490 + C13491) * C13232) *
              C31060 * C30881 * C1164 -
          ((C13235 * C1182 - C13236 * C1172 - C13235 * C1183 + C13230 * C1190 +
            C13233 * C1176 - C13234 * C1169 - C13233 * C1177 + C13229 * C1187) *
               C13232 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C13231) *
              C31060 * C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C13231 +
           (C13233 * C1182 - C13234 * C1172 - C13233 * C1183 + C13229 * C1190 +
            C13235 * C5736 - C13236 * C5735 - C13235 * C5737 + C13230 * C5738) *
               C13232) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C1844 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C1845 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C30863 * C31171 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C1845 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C1844 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C31140) *
              C30863 * C31158 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C1844 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C1845 +
           ((C13697 + C13696) * C13231 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C13232) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C1844 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C1845 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C31174 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C1845 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C1844 -
           ((C13235 * C1325 - C13236 * C1309 - C13235 * C1326 + C13230 * C1336 +
             C13233 * C1313 - C13234 * C1303 - C13233 * C1314 +
             C13229 * C1330) *
                C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C31140) *
              C31162 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C1844 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C1845 +
           ((C13233 * C1323 - C13234 * C1308 - C13233 * C1324 + C13229 * C1335 +
             C13235 * C5628 - C13236 * C5625 - C13235 * C5629 +
             C13230 * C5634) *
                C13231 +
            (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 + C13229 * C1336 +
             C13235 * C6432 - C13236 * C6431 - C13235 * C6433 +
             C13230 * C6434) *
                C13232) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C3302 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C31106 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C3302) *
               C30926) *
              C30840 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C3302) *
               C31106 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C3302 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30926) *
              C30849 +
          ((((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
                C3302 -
            ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
                C30968) *
               C31106 +
           (((C14207 + C14206) * C13231 +
             (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
              C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
              C13230 * C1609) *
                 C13232) *
                C31060 * C30968 -
            ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
                C3302) *
               C30926) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C30964 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30971 +
            ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
              C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
              C13230 * C1331) *
                 C13231 +
             (C13692 + C13693) * C13232) *
                C31060 * C3810) *
               C31106 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30971 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C30964 -
            ((C15644 + C15645) * C13232 +
             (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 +
              C13230 * C1335 + C13233 * C1315 - C13234 * C1304 -
              C13233 * C1316 + C13229 * C1331) *
                 C13231) *
                C31060 * C3810) *
               C30926) *
              C2648 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30971 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C30964 -
            ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
                C3810) *
               C31106 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C30964 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30971 +
            ((C15645 + C15644) * C13231 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C13232) *
                C31060 * C3810) *
               C30926) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C3302 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C31174 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C3302) *
               C31162 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C13231 +
             (C13490 + C13491) * C13232) *
                C31060 * C3302 -
            ((C14932 + C14933) * C13232 +
             (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
              C13230 * C1731 + C13233 * C1321 - C13234 * C1307 -
              C13233 * C1322 + C13229 * C1334) *
                 C13231) *
                C31060 * C30968) *
               C31137) *
              C2648 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C3302) *
               C31174 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C3302 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C31162 +
           (((C14933 + C14932) * C13231 +
             (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
              C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
              C13235 * C1730 + C13230 * C1733) *
                 C13232) *
                C31060 * C30968 -
            ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
                C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C3302 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C30863 * C31180 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C30968 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C3302) *
              C30863 * C31173 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C3302 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C30968) *
              C30863 * C31160 +
          (((C13985 + C13984) * C13231 +
            (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
             C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
                C13232) *
               C31060 * C30968 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31182 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C31179 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31170 -
           ((C15788 + C15789) * C13232 +
            (C13235 * C2433 - C13236 * C2430 - C13235 * C2434 + C13230 * C2439 +
             C13233 * C2034 - C13234 * C2026 - C13233 * C2035 +
             C13229 * C2044) *
                C13231) *
               C31060 * C31153) *
              C30863 * C2648 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C31179 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C31182 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C31170 +
           ((C15789 + C15788) * C13231 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C13232) *
               C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30964 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30971 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C3810) *
              C30863 * C30840 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C30971 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30964 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C3810) *
              C30863 * C30849 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30964 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C30971 +
           ((C13697 + C13696) * C13231 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C13232) *
               C31060 * C3810) *
              C30863 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C3302 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C30863 * C31180 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C30968 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C3302) *
              C30863 * C31173 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C3302 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C30968) *
              C30863 * C31160 +
          (((C13985 + C13984) * C13231 +
            (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
             C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
                C13232) *
               C31060 * C30968 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C3302 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C31174 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C3302) *
               C31162 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C13231 +
             (C13490 + C13491) * C13232) *
                C31060 * C3302 -
            ((C14932 + C14933) * C13232 +
             (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
              C13230 * C1731 + C13233 * C1321 - C13234 * C1307 -
              C13233 * C1322 + C13229 * C1334) *
                 C13231) *
                C31060 * C30968) *
               C31137) *
              C2648 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C3302) *
               C31174 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C3302 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C31162 +
           (((C14933 + C14932) * C13231 +
             (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
              C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
              C13235 * C1730 + C13230 * C1733) *
                 C13232) *
                C31060 * C30968 -
            ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
                C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31106 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C30926) *
              C671 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C30926 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31106) *
              C672 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C31106 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C30926) *
              C673 +
          (((C13841 + C13840) * C13231 +
            (C13233 * C320 - C13234 * C302 - C13233 * C321 + C13229 * C332 +
             C13235 * C322 - C13236 * C303 - C13235 * C323 + C13230 * C333) *
                C13232) *
               C31060 * C30881 * C30926 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C1436 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C1437 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C1438 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C30881 * C31147) *
              C31092 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C1437 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C1436 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C1438 +
           ((C14725 + C14724) * C13231 +
            (C13233 * C1174 - C13234 * C1168 - C13233 * C1175 + C13229 * C1186 +
             C13235 * C1184 - C13236 * C1173 - C13235 * C1185 +
             C13230 * C1191) *
                C13232) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31107 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C31106 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31107) *
               C30926) *
              C291 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31107) *
               C31106 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31107 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C30926) *
              C292 +
          ((((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
                C31107 -
            ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
                C30968) *
               C31106 +
           (((C14207 + C14206) * C13231 +
             (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
              C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
              C13230 * C1609) *
                 C13232) *
                C31060 * C30968 -
            ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
                C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31107 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C1436 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C30968 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C31107) *
              C1437 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C31107 -
           ((C14932 + C14933) * C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C30968) *
              C1438 +
          (((C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731 +
             C13235 * C5630 - C13236 * C5626 - C13235 * C5631 +
             C13230 * C5635) *
                C13231 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C13232) *
               C31060 * C30968 -
           ((C14724 + C14725) * C13232 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C13231) *
               C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31174 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C31162 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C291 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C31162 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31174 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C292 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C31174 -
           ((C13235 * C318 - C13236 * C301 - C13235 * C319 + C13230 * C331 +
             C13233 * C316 - C13234 * C300 - C13233 * C317 + C13229 * C330) *
                C13232 +
            (C13493 + C13492) * C13231) *
               C31060 * C30881 * C31162 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C30863 * C108 -
          ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
              C30881 * C30863 * C109 +
          ((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
              C30881 * C30863 * C110 -
          ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
              C30881 * C30863 * C111 +
          ((C13293 + C13292) * C13231 +
           (C13233 * C132 - C13234 * C120 - C13233 * C133 + C13229 * C141 +
            C13235 * C676 - C13236 * C675 - C13235 * C677 + C13230 * C678) *
               C13232) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31175 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C31164 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C30863 * C291 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C31164 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C31175 -
           ((C13696 + C13697) * C13232 + (C13693 + C13692) * C13231) * C31060 *
               C31140) *
              C30863 * C292 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C31175 -
           ((C13235 * C954 - C13236 * C946 - C13235 * C955 + C13230 * C961 +
             C13233 * C511 - C13234 * C495 - C13233 * C512 + C13229 * C525) *
                C13232 +
            (C13695 + C13694) * C13231) *
               C31060 * C31164 +
           ((C13697 + C13696) * C13231 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C13232) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C1094 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C1095 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C1094 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C1094 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C1095 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C1162 -
          ((C13488 + C13489) * C13232 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C13231) *
              C31060 * C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C13231 +
           (C13490 + C13491) * C13232) *
              C31060 * C30881 * C1164 -
          ((C13235 * C1182 - C13236 * C1172 - C13235 * C1183 + C13230 * C1190 +
            C13233 * C1176 - C13234 * C1169 - C13233 * C1177 + C13229 * C1187) *
               C13232 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C13231) *
              C31060 * C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C13231 +
           (C13233 * C1182 - C13234 * C1172 - C13233 * C1183 + C13229 * C1190 +
            C13235 * C5736 - C13236 * C5735 - C13235 * C5737 + C13230 * C5738) *
               C13232) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31175 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C31164 +
           ((C13233 * C505 - C13234 * C492 - C13233 * C506 + C13229 * C522 +
             C13235 * C1315 - C13236 * C1304 - C13235 * C1316 +
             C13230 * C1331) *
                C13231 +
            (C13692 + C13693) * C13232) *
               C31060 * C31140) *
              C1094 +
          (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
             C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
             C13230 * C1334) *
                C13231 +
            (C14204 + C14205) * C13232) *
               C31060 * C31164 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C31175 -
           ((C13235 * C1325 - C13236 * C1309 - C13235 * C1326 + C13230 * C1336 +
             C13233 * C1313 - C13234 * C1303 - C13233 * C1314 +
             C13229 * C1330) *
                C13232 +
            (C13235 * C1323 - C13236 * C1308 - C13235 * C1324 + C13230 * C1335 +
             C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
             C13229 * C1331) *
                C13231) *
               C31060 * C31140) *
              C1095 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C31175 -
           ((C13235 * C1727 - C13236 * C1723 - C13235 * C1728 + C13230 * C1732 +
             C13233 * C1319 - C13234 * C1306 - C13233 * C1320 +
             C13229 * C1333) *
                C13232 +
            (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731 +
             C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
             C13229 * C1334) *
                C13231) *
               C31060 * C31164 +
           ((C13233 * C1323 - C13234 * C1308 - C13233 * C1324 + C13229 * C1335 +
             C13235 * C5628 - C13236 * C5625 - C13235 * C5629 +
             C13230 * C5634) *
                C13231 +
            (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 + C13229 * C1336 +
             C13235 * C6432 - C13236 * C6431 - C13235 * C6433 +
             C13230 * C6434) *
                C13232) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C31107 -
           ((C13690 + C13691) * C13232 +
            (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
             C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                C13231) *
               C31060 * C30968) *
              C30863 * C671 +
          (((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
               C30968 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C31107) *
              C30863 * C672 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C31107 -
           ((C13984 + C13985) * C13232 + (C13695 + C13694) * C13231) * C31060 *
               C30968) *
              C30863 * C673 +
          (((C13985 + C13984) * C13231 +
            (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
             C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
                C13232) *
               C31060 * C30968 -
           ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
               C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C13231 +
             (C13286 + C13287) * C13232) *
                C31060 * C31107 -
            ((C13690 + C13691) * C13232 +
             (C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958 +
              C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521) *
                 C13231) *
                C31060 * C30968) *
               C1094 +
           (((C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958 +
              C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
              C13230 * C1334) *
                 C13231 +
             (C14204 + C14205) * C13232) *
                C31060 * C30968 -
            ((C13488 + C13489) * C13232 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C13231) *
                C31060 * C31107) *
               C1095 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C13231 +
             (C13490 + C13491) * C13232) *
                C31060 * C31107 -
            ((C14932 + C14933) * C13232 +
             (C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
              C13230 * C1731 + C13233 * C1321 - C13234 * C1307 -
              C13233 * C1322 + C13229 * C1334) *
                 C13231) *
                C31060 * C30968) *
               C31137) *
              C31092 +
          ((((C13691 + C13690) * C13231 + (C13694 + C13695) * C13232) * C31060 *
                C30968 -
            ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
                C31107) *
               C1094 +
           (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
                C31107 -
            ((C14206 + C14207) * C13232 + (C14205 + C14204) * C13231) * C31060 *
                C30968) *
               C1095 +
           (((C14933 + C14932) * C13231 +
             (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
              C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
              C13235 * C1730 + C13230 * C1733) *
                 C13232) *
                C31060 * C30968 -
            ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C30863 * C108 -
          ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
              C30881 * C30863 * C109 +
          ((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
              C30881 * C30863 * C110 -
          ((C13292 + C13293) * C13232 + (C13291 + C13290) * C13231) * C31060 *
              C30881 * C30863 * C111 +
          ((C13293 + C13292) * C13231 +
           (C13233 * C132 - C13234 * C120 - C13233 * C133 + C13229 * C141 +
            C13235 * C676 - C13236 * C675 - C13235 * C677 + C13230 * C678) *
               C13232) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C31174 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C31162 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C291 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C31162 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C31174 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C292 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C31174 -
           ((C13235 * C318 - C13236 * C301 - C13235 * C319 + C13230 * C331 +
             C13233 * C316 - C13234 * C300 - C13233 * C317 + C13229 * C330) *
                C13232 +
            (C13493 + C13492) * C13231) *
               C31060 * C30881 * C31162 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C13231 +
            (C13286 + C13287) * C13232) *
               C31060 * C30881 * C1094 -
           ((C13488 + C13489) * C13232 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C13231) *
               C31060 * C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C13231 +
            (C13490 + C13491) * C13232) *
               C31060 * C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C13231 + (C13492 + C13493) * C13232) * C31060 *
               C30881 * C1095 -
           ((C13288 + C13289) * C13232 + (C13287 + C13286) * C13231) * C31060 *
               C30881 * C1094 -
           ((C13494 + C13495) * C13232 + (C13491 + C13490) * C13231) * C31060 *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C13231 + (C13290 + C13291) * C13232) * C31060 *
               C30881 * C1094 -
           ((C13840 + C13841) * C13232 + (C13493 + C13492) * C13231) * C31060 *
               C30881 * C1095 +
           ((C13495 + C13494) * C13231 +
            (C13233 * C318 - C13234 * C301 - C13233 * C319 + C13229 * C331 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C13232) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C13231 +
           (C13286 + C13287) * C13232) *
              C31060 * C30881 * C1162 -
          ((C13488 + C13489) * C13232 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C13231) *
              C31060 * C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C13231 +
           (C13490 + C13491) * C13232) *
              C31060 * C30881 * C1164 -
          ((C13235 * C1182 - C13236 * C1172 - C13235 * C1183 + C13230 * C1190 +
            C13233 * C1176 - C13234 * C1169 - C13233 * C1177 + C13229 * C1187) *
               C13232 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C13231) *
              C31060 * C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C13231 +
           (C13233 * C1182 - C13234 * C1172 - C13233 * C1183 + C13229 * C1190 +
            C13235 * C5736 - C13236 * C5735 - C13235 * C5737 + C13230 * C5738) *
               C13232) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C30922 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C30929 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C30881 * C2908) *
              C30840 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C30929 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C30922 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C2908) *
              C30849 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C30922 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C30929 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31107 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C30922 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31107) *
               C30929 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C30811 * C18965 +
             (C25663 + C25664) * C30811 * C18966) *
                C31107 -
            ((C25665 + C25666) * C30811 * C18966 +
             (C25664 + C25663) * C30811 * C18965) *
                C30968) *
               C2908) *
              C2648 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31107) *
               C30922 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31107 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30929 +
           (((C14933 + C14932) * C30811 * C18965 +
             (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 +
              C13229 * C1336 + C13235 * C6432 - C13236 * C6431 -
              C13235 * C6433 + C13230 * C6434) *
                 C30811 * C18966) *
                C30968 -
            ((C14932 + C14933) * C30811 * C18966 +
             (C13491 + C13490) * C30811 * C18965) *
                C31107) *
               C2908) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C31181 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C31177 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C30881 * C31167 -
           ((C26134 + C26133) * C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C30881 * C31147) *
              C2648 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C31177 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31181 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31167 +
           ((C14725 + C14724) * C30811 * C18965 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C30811 * C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C2540 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C30926) *
              C31180 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C30926 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C2540) *
              C31173 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C2540 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C30926) *
              C31160 +
          (((C13841 + C13840) * C30811 * C18965 +
            (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
             C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
             C13230 * C1609) *
                C30811 * C18966) *
               C30881 * C30926 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31175 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C31164 +
            ((C24782 + C24781) * C30811 * C18965 +
             (C26533 + C26534) * C30811 * C18966) *
                C31140) *
               C2540 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C31164 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31175 -
            ((C27003 + C27004) * C30811 * C18966 +
             (C25662 + C25661) * C30811 * C18965) *
                C31140) *
               C30926) *
              C2648 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C31164 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31175 -
            ((C15788 + C15789) * C30811 * C18966 +
             (C13693 + C13692) * C30811 * C18965) *
                C31140) *
               C2540 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31175 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C31164 +
            ((C15645 + C15644) * C30811 * C18965 +
             (C13233 * C2435 - C13234 * C2431 - C13233 * C2436 +
              C13229 * C2440 + C13235 * C6534 - C13236 * C6533 -
              C13235 * C6535 + C13230 * C6536) *
                 C30811 * C18966) *
                C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31107 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C2540 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31107) *
               C30926) *
              C30840 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31107) *
               C2540 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31107 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30926) *
              C30849 +
          ((((C13289 + C13288) * C30811 * C18965 +
             (C13694 + C13695) * C30811 * C18966) *
                C31107 -
            ((C13696 + C13697) * C30811 * C18966 +
             (C13695 + C13694) * C30811 * C18965) *
                C30968) *
               C2540 +
           (((C14207 + C14206) * C30811 * C18965 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C30811 * C18966) *
                C30968 -
            ((C14206 + C14207) * C30811 * C18966 +
             (C13493 + C13492) * C30811 * C18965) *
                C31107) *
               C30926) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C2540 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C30926) *
              C31180 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C30926 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C2540) *
              C31173 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C2540 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C30926) *
              C31160 +
          (((C13841 + C13840) * C30811 * C18965 +
            (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
             C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
             C13230 * C1609) *
                C30811 * C18966) *
               C30881 * C30926 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C31181 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C31177 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C30881 * C31167 -
           ((C26134 + C26133) * C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C30881 * C31147) *
              C2648 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C31177 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31181 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31167 +
           ((C14725 + C14724) * C30811 * C18965 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C30811 * C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C3302 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C30922 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C3302) *
               C30929 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C30811 * C18965 +
             (C25663 + C25664) * C30811 * C18966) *
                C3302 -
            ((C25665 + C25666) * C30811 * C18966 +
             (C25664 + C25663) * C30811 * C18965) *
                C30968) *
               C2908) *
              C31092 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C3302) *
               C30922 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C3302 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30929 +
           (((C14933 + C14932) * C30811 * C18965 +
             (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 +
              C13229 * C1336 + C13235 * C6432 - C13236 * C6431 -
              C13235 * C6433 + C13230 * C6434) *
                 C30811 * C18966) *
                C30968 -
            ((C14932 + C14933) * C30811 * C18966 +
             (C13491 + C13490) * C30811 * C18965) *
                C3302) *
               C2908) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30964 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30971 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C26533 + C26534) * C30811 * C18966) *
               C3810) *
              C30922 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C30971 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30964 -
           ((C27003 + C27004) * C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C3810) *
              C30929 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C30964 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C30971 +
           ((C25666 + C25665) * C30811 * C18965 +
            (C13233 * C6276 - C13234 * C6273 - C13233 * C6277 + C13229 * C6282 +
             C13235 * C6636 - C13236 * C6635 - C13235 * C6637 +
             C13230 * C6638) *
                C30811 * C18966) *
               C3810) *
              C2908) *
         C30835) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C3302 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C31181 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C30968 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C3302) *
              C31177 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C3302 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C30968) *
              C31167 +
          (((C26133 + C26134) * C30811 * C18965 +
            (C13233 * C5628 - C13234 * C5625 - C13233 * C5629 + C13229 * C5634 +
             C13235 * C5632 - C13236 * C5627 - C13235 * C5633 +
             C13230 * C5636) *
                C30811 * C18966) *
               C30968 -
           ((C26134 + C26133) * C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C3302 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C2540 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C3302) *
               C30926) *
              C31171 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C3302) *
               C2540 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C3302 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30926) *
              C31158 +
          ((((C13289 + C13288) * C30811 * C18965 +
             (C13694 + C13695) * C30811 * C18966) *
                C3302 -
            ((C13696 + C13697) * C30811 * C18966 +
             (C13695 + C13694) * C30811 * C18965) *
                C30968) *
               C2540 +
           (((C14207 + C14206) * C30811 * C18965 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C30811 * C18966) *
                C30968 -
            ((C14206 + C14207) * C30811 * C18966 +
             (C13493 + C13492) * C30811 * C18965) *
                C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31182 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C31179 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C26533 + C26534) * C30811 * C18966) *
               C31170 -
           ((C26535 + C26536) * C30811 * C18966 +
            (C26534 + C26533) * C30811 * C18965) *
               C31153) *
              C2540 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C31179 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C31182 -
           ((C27003 + C27004) * C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C31170 +
           ((C27004 + C27003) * C30811 * C18965 +
            (C13233 * C6278 - C13234 * C6274 - C13233 * C6279 + C13229 * C6283 +
             C13235 * C6280 - C13236 * C6275 - C13235 * C6281 +
             C13230 * C6284) *
                C30811 * C18966) *
               C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C30964 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30971 +
            ((C24782 + C24781) * C30811 * C18965 +
             (C26533 + C26534) * C30811 * C18966) *
                C3810) *
               C2540 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30971 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C30964 -
            ((C27003 + C27004) * C30811 * C18966 +
             (C25662 + C25661) * C30811 * C18965) *
                C3810) *
               C30926) *
              C31092 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30971 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C30964 -
            ((C15788 + C15789) * C30811 * C18966 +
             (C13693 + C13692) * C30811 * C18965) *
                C3810) *
               C2540 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C30964 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30971 +
            ((C15645 + C15644) * C30811 * C18965 +
             (C13233 * C2435 - C13234 * C2431 - C13233 * C2436 +
              C13229 * C2440 + C13235 * C6534 - C13236 * C6533 -
              C13235 * C6535 + C13230 * C6536) *
                 C30811 * C18966) *
                C3810) *
               C30926) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C3302 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C2540 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C3302) *
               C30926) *
              C31171 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C3302) *
               C2540 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C3302 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30926) *
              C31158 +
          ((((C13289 + C13288) * C30811 * C18965 +
             (C13694 + C13695) * C30811 * C18966) *
                C3302 -
            ((C13696 + C13697) * C30811 * C18966 +
             (C13695 + C13694) * C30811 * C18965) *
                C30968) *
               C2540 +
           (((C14207 + C14206) * C30811 * C18965 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C30811 * C18966) *
                C30968 -
            ((C14206 + C14207) * C30811 * C18966 +
             (C13493 + C13492) * C30811 * C18965) *
                C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C3302 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C31181 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C30968 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C3302) *
              C31177 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C3302 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C30968) *
              C31167 +
          (((C26133 + C26134) * C30811 * C18965 +
            (C13233 * C5628 - C13234 * C5625 - C13233 * C5629 + C13229 * C5634 +
             C13235 * C5632 - C13236 * C5627 - C13235 * C5633 +
             C13230 * C5636) *
                C30811 * C18966) *
               C30968 -
           ((C26134 + C26133) * C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C1436 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C1437 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C30881 * C1438 -
           ((C13235 * C5630 - C13236 * C5626 - C13235 * C5631 + C13230 * C5635 +
             C13233 * C1725 - C13234 * C1722 - C13233 * C1726 +
             C13229 * C1731) *
                C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C30881 * C31147) *
              C31092 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C1437 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C1436 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C1438 +
           ((C14725 + C14724) * C30811 * C18965 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C30811 * C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C31106 -
           ((C13235 * C1321 - C13236 * C1307 - C13235 * C1322 + C13230 * C1334 +
             C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958) *
                C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C30926) *
              C671 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C30926 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31106) *
              C672 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C31106 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C30926) *
              C673 +
          (((C13841 + C13840) * C30811 * C18965 +
            (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
             C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
             C13230 * C1609) *
                C30811 * C18966) *
               C30881 * C30926 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C1844 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C1845 +
            ((C24782 + C24781) * C30811 * C18965 +
             (C26533 + C26534) * C30811 * C18966) *
                C31140) *
               C31106 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C1845 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C1844 -
            ((C13235 * C6276 - C13236 * C6273 - C13235 * C6277 +
              C13230 * C6282 + C13233 * C2433 - C13234 * C2430 -
              C13233 * C2434 + C13229 * C2439) *
                 C30811 * C18966 +
             (C25662 + C25661) * C30811 * C18965) *
                C31140) *
               C30926) *
              C31092 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C1845 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C1844 -
            ((C15788 + C15789) * C30811 * C18966 +
             (C13693 + C13692) * C30811 * C18965) *
                C31140) *
               C31106 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C1844 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C1845 +
            ((C15645 + C15644) * C30811 * C18965 +
             (C13233 * C2435 - C13234 * C2431 - C13233 * C2436 +
              C13229 * C2440 + C13235 * C6534 - C13236 * C6533 -
              C13235 * C6535 + C13230 * C6536) *
                 C30811 * C18966) *
                C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31107 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C1436 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C30968 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C31107) *
              C1437 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C31107 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C30968) *
              C1438 +
          (((C26133 + C26134) * C30811 * C18965 +
            (C13233 * C5628 - C13234 * C5625 - C13233 * C5629 + C13229 * C5634 +
             C13235 * C5632 - C13236 * C5627 - C13235 * C5633 +
             C13230 * C5636) *
                C30811 * C18966) *
               C30968 -
           ((C26134 + C26133) * C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31107 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C31106 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
              C13229 * C1331 + C13235 * C1323 - C13236 * C1308 -
              C13235 * C1324 + C13230 * C1335) *
                 C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31107) *
               C30926) *
              C291 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31107) *
               C31106 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31107 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30926) *
              C292 +
          ((((C13289 + C13288) * C30811 * C18965 +
             (C13694 + C13695) * C30811 * C18966) *
                C31107 -
            ((C13696 + C13697) * C30811 * C18966 +
             (C13695 + C13694) * C30811 * C18965) *
                C30968) *
               C31106 +
           (((C14207 + C14206) * C30811 * C18965 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C30811 * C18966) *
                C30968 -
            ((C14206 + C14207) * C30811 * C18966 +
             (C13493 + C13492) * C30811 * C18965) *
                C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C2310 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C2311 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C26533 + C26534) * C30811 * C18966) *
               C2312 -
           ((C26535 + C26536) * C30811 * C18966 +
            (C26534 + C26533) * C30811 * C18965) *
               C31153) *
              C31106 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C2311 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C2310 -
           ((C27003 + C27004) * C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C2312 +
           ((C27004 + C27003) * C30811 * C18965 +
            (C13233 * C6278 - C13234 * C6274 - C13233 * C6279 + C13229 * C6283 +
             C13235 * C6280 - C13236 * C6275 - C13235 * C6281 +
             C13230 * C6284) *
                C30811 * C18966) *
               C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
                C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                   C30811 * C18965 +
               (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
                C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
                   C30811 * C18966) *
                  C30881 * C30863 * C108 -
              ((C13690 + C13691) * C30811 * C18966 +
               (C13287 + C13286) * C30811 * C18965) *
                  C30881 * C30863 * C109 +
              ((C13289 + C13288) * C30811 * C18965 +
               (C13694 + C13695) * C30811 * C18966) *
                  C30881 * C30863 * C110 -
              ((C13984 + C13985) * C30811 * C18966 +
               (C13291 + C13290) * C30811 * C18965) *
                  C30881 * C30863 * C111 +
              ((C13293 + C13292) * C30811 * C18965 +
               (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
                C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
                   C30811 * C18966) *
                  C30881 * C30863 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
                 C13235 * C308 - C13236 * C296 - C13235 * C309 +
                 C13230 * C326) *
                    C30811 * C18965 +
                (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
                 C13235 * C948 - C13236 * C943 - C13235 * C949 +
                 C13230 * C958) *
                    C30811 * C18966) *
                   C30881 * C31174 -
               ((C13235 * C1321 - C13236 * C1307 - C13235 * C1322 +
                 C13230 * C1334 + C13233 * C948 - C13234 * C943 -
                 C13233 * C949 + C13229 * C958) *
                    C30811 * C18966 +
                (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
                 C13233 * C308 - C13234 * C296 - C13233 * C309 +
                 C13229 * C326) *
                    C30811 * C18965) *
                   C30881 * C31162 +
               ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
                 C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
                 C13230 * C1188) *
                    C30811 * C18965 +
                (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 +
                 C13229 * C1334 + C13235 * C1725 - C13236 * C1722 -
                 C13235 * C1726 + C13230 * C1731) *
                    C30811 * C18966) *
                   C30881 * C31137) *
                  C291 +
              (((C13489 + C13488) * C30811 * C18965 +
                (C14204 + C14205) * C30811 * C18966) *
                   C30881 * C31162 -
               ((C13690 + C13691) * C30811 * C18966 +
                (C13287 + C13286) * C30811 * C18965) *
                   C30881 * C31174 -
               ((C14932 + C14933) * C30811 * C18966 +
                (C13491 + C13490) * C30811 * C18965) *
                   C30881 * C31137) *
                  C292 +
              (((C13289 + C13288) * C30811 * C18965 +
                (C13694 + C13695) * C30811 * C18966) *
                   C30881 * C31174 -
               ((C14206 + C14207) * C30811 * C18966 +
                (C13493 + C13492) * C30811 * C18965) *
                   C30881 * C31162 +
               ((C13495 + C13494) * C30811 * C18965 +
                (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 +
                 C13229 * C1332 + C13235 * C1729 - C13236 * C1724 -
                 C13235 * C1730 + C13230 * C1733) *
                    C30811 * C18966) *
                   C30881 * C31137) *
                  C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31175 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C31164 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C30863 * C291 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C31164 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C31175 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C31140) *
              C30863 * C292 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C31175 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C31164 +
           ((C13697 + C13696) * C30811 * C18965 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C30811 * C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C1094 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C1095 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C1094 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C1094 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C1095 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C24779 + C24780) * C30811 * C18966) *
              C30881 * C1162 -
          ((C25250 + C25249) * C30811 * C18966 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C30811 * C18965) *
              C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C30811 * C18965 +
           (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
            C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731) *
               C30811 * C18966) *
              C30881 * C1164 -
          ((C13235 * C5630 - C13236 * C5626 - C13235 * C5631 + C13230 * C5635 +
            C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731) *
               C30811 * C18966 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C30811 * C18965) *
              C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C30811 * C18965 +
           (C13233 * C5630 - C13234 * C5626 - C13233 * C5631 + C13229 * C5635 +
            C13235 * C5988 - C13236 * C5987 - C13235 * C5989 + C13230 * C5990) *
               C30811 * C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31175 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C31164 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C1094 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C31164 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C31175 -
           ((C13235 * C6276 - C13236 * C6273 - C13235 * C6277 + C13230 * C6282 +
             C13233 * C2433 - C13234 * C2430 - C13233 * C2434 +
             C13229 * C2439) *
                C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C31140) *
              C1095 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C31175 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C31164 +
           ((C25666 + C25665) * C30811 * C18965 +
            (C13233 * C6276 - C13234 * C6273 - C13233 * C6277 + C13229 * C6282 +
             C13235 * C6636 - C13236 * C6635 - C13235 * C6637 +
             C13230 * C6638) *
                C30811 * C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C1844 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C1845 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C30863 * C31171 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C1845 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C1844 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C31140) *
              C30863 * C31158 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C1844 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C1845 +
           ((C13697 + C13696) * C30811 * C18965 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C30811 * C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C1844 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C1845 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C31174 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C1845 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C1844 -
           ((C13235 * C6276 - C13236 * C6273 - C13235 * C6277 + C13230 * C6282 +
             C13233 * C2433 - C13234 * C2430 - C13233 * C2434 +
             C13229 * C2439) *
                C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C31140) *
              C31162 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C1844 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C1845 +
           ((C25666 + C25665) * C30811 * C18965 +
            (C13233 * C6276 - C13234 * C6273 - C13233 * C6277 + C13229 * C6282 +
             C13235 * C6636 - C13236 * C6635 - C13235 * C6637 +
             C13230 * C6638) *
                C30811 * C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C24779 + C24780) * C30811 * C18966) *
              C2019 -
          ((C24781 + C24782) * C30811 * C18966 +
           (C24780 + C24779) * C30811 * C18965) *
              C2020 +
          ((C24782 + C24781) * C30811 * C18965 +
           (C26533 + C26534) * C30811 * C18966) *
              C2021 -
          ((C26535 + C26536) * C30811 * C18966 +
           (C26534 + C26533) * C30811 * C18965) *
              C2022 +
          ((C26536 + C26535) * C30811 * C18965 +
           (C13233 * C10515 - C13234 * C10513 - C13233 * C10516 +
            C13229 * C10519 + C13235 * C10904 - C13236 * C10903 -
            C13235 * C10905 + C13230 * C10906) *
               C30811 * C18966) *
              C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31107 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C1094 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31107) *
               C1095 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C30811 * C18965 +
             (C25663 + C25664) * C30811 * C18966) *
                C31107 -
            ((C25665 + C25666) * C30811 * C18966 +
             (C25664 + C25663) * C30811 * C18965) *
                C30968) *
               C31137) *
              C31092 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31107) *
               C1094 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31107 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C1095 +
           (((C14933 + C14932) * C30811 * C18965 +
             (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 +
              C13229 * C1336 + C13235 * C6432 - C13236 * C6431 -
              C13235 * C6433 + C13230 * C6434) *
                 C30811 * C18966) *
                C30968 -
            ((C14932 + C14933) * C30811 * C18966 +
             (C13491 + C13490) * C30811 * C18965) *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31107 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C30863 * C671 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C30968 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C31107) *
              C30863 * C672 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C31107 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C30968) *
              C30863 * C673 +
          (((C13985 + C13984) * C30811 * C18965 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C30811 * C18966) *
               C30968 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C2310 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C2311 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C26533 + C26534) * C30811 * C18966) *
               C2312 -
           ((C26535 + C26536) * C30811 * C18966 +
            (C26534 + C26533) * C30811 * C18965) *
               C31153) *
              C30863 * C31092 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C2311 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C2310 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C2312 +
           ((C15789 + C15788) * C30811 * C18965 +
            (C13233 * C2038 - C13234 * C2028 - C13233 * C2039 + C13229 * C2046 +
             C13235 * C10684 - C13236 * C10683 - C13235 * C10685 +
             C13230 * C10686) *
                C30811 * C18966) *
               C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
             C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
                C30811 * C18966) *
               C30881 * C31174 -
           ((C13235 * C1321 - C13236 * C1307 - C13235 * C1322 + C13230 * C1334 +
             C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958) *
                C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C31162 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C291 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C31162 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31174 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C292 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C31174 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C31162 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
            C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
               C30811 * C18966) *
              C30881 * C30863 * C108 -
          ((C13690 + C13691) * C30811 * C18966 +
           (C13287 + C13286) * C30811 * C18965) *
              C30881 * C30863 * C109 +
          ((C13289 + C13288) * C30811 * C18965 +
           (C13694 + C13695) * C30811 * C18966) *
              C30881 * C30863 * C110 -
          ((C13984 + C13985) * C30811 * C18966 +
           (C13291 + C13290) * C30811 * C18965) *
              C30881 * C30863 * C111 +
          ((C13293 + C13292) * C30811 * C18965 +
           (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
            C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
               C30811 * C18966) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C1094 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C1095 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C1094 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C1094 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C1095 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C24779 + C24780) * C30811 * C18966) *
              C30881 * C1162 -
          ((C25250 + C25249) * C30811 * C18966 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C30811 * C18965) *
              C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C30811 * C18965 +
           (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
            C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731) *
               C30811 * C18966) *
              C30881 * C1164 -
          ((C13235 * C5630 - C13236 * C5626 - C13235 * C5631 + C13230 * C5635 +
            C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731) *
               C30811 * C18966 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C30811 * C18965) *
              C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C30811 * C18965 +
           (C13233 * C5630 - C13234 * C5626 - C13233 * C5631 + C13229 * C5635 +
            C13235 * C5988 - C13236 * C5987 - C13235 * C5989 + C13230 * C5990) *
               C30811 * C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C1844 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C1845 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C30863 * C31171 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C1845 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C1844 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C31140) *
              C30863 * C31158 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C1844 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C1845 +
           ((C13697 + C13696) * C30811 * C18965 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C30811 * C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C1844 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C1845 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C31174 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C1845 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C1844 -
           ((C13235 * C6276 - C13236 * C6273 - C13235 * C6277 + C13230 * C6282 +
             C13233 * C2433 - C13234 * C2430 - C13233 * C2434 +
             C13229 * C2439) *
                C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C31140) *
              C31162 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C1844 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C1845 +
           ((C25666 + C25665) * C30811 * C18965 +
            (C13233 * C6276 - C13234 * C6273 - C13233 * C6277 + C13229 * C6282 +
             C13235 * C6636 - C13236 * C6635 - C13235 * C6637 +
             C13230 * C6638) *
                C30811 * C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C3302 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C31106 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C3302) *
               C30926) *
              C30840 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C3302) *
               C31106 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C3302 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30926) *
              C30849 +
          ((((C13289 + C13288) * C30811 * C18965 +
             (C13694 + C13695) * C30811 * C18966) *
                C3302 -
            ((C13696 + C13697) * C30811 * C18966 +
             (C13695 + C13694) * C30811 * C18965) *
                C30968) *
               C31106 +
           (((C14207 + C14206) * C30811 * C18965 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C30811 * C18966) *
                C30968 -
            ((C14206 + C14207) * C30811 * C18966 +
             (C13493 + C13492) * C30811 * C18965) *
                C3302) *
               C30926) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C30964 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30971 +
            ((C24782 + C24781) * C30811 * C18965 +
             (C26533 + C26534) * C30811 * C18966) *
                C3810) *
               C31106 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30971 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C30964 -
            ((C27003 + C27004) * C30811 * C18966 +
             (C25662 + C25661) * C30811 * C18965) *
                C3810) *
               C30926) *
              C2648 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30971 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C30964 -
            ((C15788 + C15789) * C30811 * C18966 +
             (C13693 + C13692) * C30811 * C18965) *
                C3810) *
               C31106 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C30964 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30971 +
            ((C15645 + C15644) * C30811 * C18965 +
             (C13233 * C2435 - C13234 * C2431 - C13233 * C2436 +
              C13229 * C2440 + C13235 * C6534 - C13236 * C6533 -
              C13235 * C6535 + C13230 * C6536) *
                 C30811 * C18966) *
                C3810) *
               C30926) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C3302 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C31174 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C3302) *
               C31162 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C30811 * C18965 +
             (C25663 + C25664) * C30811 * C18966) *
                C3302 -
            ((C25665 + C25666) * C30811 * C18966 +
             (C25664 + C25663) * C30811 * C18965) *
                C30968) *
               C31137) *
              C2648 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C3302) *
               C31174 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C3302 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C31162 +
           (((C14933 + C14932) * C30811 * C18965 +
             (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 +
              C13229 * C1336 + C13235 * C6432 - C13236 * C6431 -
              C13235 * C6433 + C13230 * C6434) *
                 C30811 * C18966) *
                C30968 -
            ((C14932 + C14933) * C30811 * C18966 +
             (C13491 + C13490) * C30811 * C18965) *
                C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C3302 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C30863 * C31180 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C30968 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C3302) *
              C30863 * C31173 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C3302 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C30968) *
              C30863 * C31160 +
          (((C13985 + C13984) * C30811 * C18965 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C30811 * C18966) *
               C30968 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31182 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C31179 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C26533 + C26534) * C30811 * C18966) *
               C31170 -
           ((C26535 + C26536) * C30811 * C18966 +
            (C26534 + C26533) * C30811 * C18965) *
               C31153) *
              C30863 * C2648 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C31179 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C31182 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C31170 +
           ((C15789 + C15788) * C30811 * C18965 +
            (C13233 * C2038 - C13234 * C2028 - C13233 * C2039 + C13229 * C2046 +
             C13235 * C10684 - C13236 * C10683 - C13235 * C10685 +
             C13230 * C10686) *
                C30811 * C18966) *
               C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30964 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30971 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C26533 + C26534) * C30811 * C18966) *
               C3810) *
              C30863 * C30840 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C30971 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30964 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C3810) *
              C30863 * C30849 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30964 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C30971 +
           ((C13697 + C13696) * C30811 * C18965 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C30811 * C18966) *
               C3810) *
              C30863 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C3302 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C30863 * C31180 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C30968 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C3302) *
              C30863 * C31173 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C3302 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C30968) *
              C30863 * C31160 +
          (((C13985 + C13984) * C30811 * C18965 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C30811 * C18966) *
               C30968 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C3302 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C31174 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C3302) *
               C31162 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C30811 * C18965 +
             (C25663 + C25664) * C30811 * C18966) *
                C3302 -
            ((C25665 + C25666) * C30811 * C18966 +
             (C25664 + C25663) * C30811 * C18965) *
                C30968) *
               C31137) *
              C2648 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C3302) *
               C31174 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C3302 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C31162 +
           (((C14933 + C14932) * C30811 * C18965 +
             (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 +
              C13229 * C1336 + C13235 * C6432 - C13236 * C6431 -
              C13235 * C6433 + C13230 * C6434) *
                 C30811 * C18966) *
                C30968 -
            ((C14932 + C14933) * C30811 * C18966 +
             (C13491 + C13490) * C30811 * C18965) *
                C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C31106 -
           ((C13235 * C1321 - C13236 * C1307 - C13235 * C1322 + C13230 * C1334 +
             C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958) *
                C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C30926) *
              C671 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C30926 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31106) *
              C672 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C31106 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C30926) *
              C673 +
          (((C13841 + C13840) * C30811 * C18965 +
            (C13233 * C954 - C13234 * C946 - C13233 * C955 + C13229 * C961 +
             C13235 * C1607 - C13236 * C1606 - C13235 * C1608 +
             C13230 * C1609) *
                C30811 * C18966) *
               C30881 * C30926 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C1436 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C1437 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C30881 * C1438 -
           ((C13235 * C5630 - C13236 * C5626 - C13235 * C5631 + C13230 * C5635 +
             C13233 * C1725 - C13234 * C1722 - C13233 * C1726 +
             C13229 * C1731) *
                C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C30881 * C31147) *
              C31092 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C1437 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C1436 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C1438 +
           ((C14725 + C14724) * C30811 * C18965 +
            (C13233 * C1727 - C13234 * C1723 - C13233 * C1728 + C13229 * C1732 +
             C13235 * C5886 - C13236 * C5885 - C13235 * C5887 +
             C13230 * C5888) *
                C30811 * C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31107 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C31106 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C13233 * C1315 - C13234 * C1304 - C13233 * C1316 +
              C13229 * C1331 + C13235 * C1323 - C13236 * C1308 -
              C13235 * C1324 + C13230 * C1335) *
                 C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31107) *
               C30926) *
              C291 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31107) *
               C31106 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31107 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C30926) *
              C292 +
          ((((C13289 + C13288) * C30811 * C18965 +
             (C13694 + C13695) * C30811 * C18966) *
                C31107 -
            ((C13696 + C13697) * C30811 * C18966 +
             (C13695 + C13694) * C30811 * C18965) *
                C30968) *
               C31106 +
           (((C14207 + C14206) * C30811 * C18965 +
             (C13233 * C1311 - C13234 * C1302 - C13233 * C1312 +
              C13229 * C1329 + C13235 * C1327 - C13236 * C1310 -
              C13235 * C1328 + C13230 * C1337) *
                 C30811 * C18966) *
                C30968 -
            ((C14206 + C14207) * C30811 * C18966 +
             (C13493 + C13492) * C30811 * C18965) *
                C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31107 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C1436 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C30968 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C31107) *
              C1437 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C31107 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C30968) *
              C1438 +
          (((C26133 + C26134) * C30811 * C18965 +
            (C13233 * C5628 - C13234 * C5625 - C13233 * C5629 + C13229 * C5634 +
             C13235 * C5632 - C13236 * C5627 - C13235 * C5633 +
             C13230 * C5636) *
                C30811 * C18966) *
               C30968 -
           ((C26134 + C26133) * C30811 * C18966 +
            (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
             C13233 * C1178 - C13234 * C1170 - C13233 * C1179 +
             C13229 * C1188) *
                C30811 * C18965) *
               C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
             C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
                C30811 * C18966) *
               C30881 * C31174 -
           ((C13235 * C1321 - C13236 * C1307 - C13235 * C1322 + C13230 * C1334 +
             C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958) *
                C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C31162 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C291 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C31162 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31174 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C292 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C31174 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C31162 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
            C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
               C30811 * C18966) *
              C30881 * C30863 * C108 -
          ((C13690 + C13691) * C30811 * C18966 +
           (C13287 + C13286) * C30811 * C18965) *
              C30881 * C30863 * C109 +
          ((C13289 + C13288) * C30811 * C18965 +
           (C13694 + C13695) * C30811 * C18966) *
              C30881 * C30863 * C110 -
          ((C13984 + C13985) * C30811 * C18966 +
           (C13291 + C13290) * C30811 * C18965) *
              C30881 * C30863 * C111 +
          ((C13293 + C13292) * C30811 * C18965 +
           (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
            C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
               C30811 * C18966) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31175 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C31164 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C30863 * C291 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C31164 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C31175 -
           ((C15788 + C15789) * C30811 * C18966 +
            (C13693 + C13692) * C30811 * C18965) *
               C31140) *
              C30863 * C292 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C31175 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C31164 +
           ((C13697 + C13696) * C30811 * C18965 +
            (C13233 * C2030 - C13234 * C2024 - C13233 * C2031 + C13229 * C2042 +
             C13235 * C2437 - C13236 * C2432 - C13235 * C2438 +
             C13230 * C2441) *
                C30811 * C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C1094 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C1095 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C1094 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C1094 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C1095 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C24779 + C24780) * C30811 * C18966) *
              C30881 * C1162 -
          ((C25250 + C25249) * C30811 * C18966 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C30811 * C18965) *
              C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C30811 * C18965 +
           (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
            C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731) *
               C30811 * C18966) *
              C30881 * C1164 -
          ((C13235 * C5630 - C13236 * C5626 - C13235 * C5631 + C13230 * C5635 +
            C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731) *
               C30811 * C18966 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C30811 * C18965) *
              C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C30811 * C18965 +
           (C13233 * C5630 - C13234 * C5626 - C13233 * C5631 + C13229 * C5635 +
            C13235 * C5988 - C13236 * C5987 - C13235 * C5989 + C13230 * C5990) *
               C30811 * C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31175 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C31164 +
           ((C24782 + C24781) * C30811 * C18965 +
            (C13233 * C2034 - C13234 * C2026 - C13233 * C2035 + C13229 * C2044 +
             C13235 * C2433 - C13236 * C2430 - C13235 * C2434 +
             C13230 * C2439) *
                C30811 * C18966) *
               C31140) *
              C1094 +
          (((C25249 + C25250) * C30811 * C18965 +
            (C25661 + C25662) * C30811 * C18966) *
               C31164 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C31175 -
           ((C13235 * C6276 - C13236 * C6273 - C13235 * C6277 + C13230 * C6282 +
             C13233 * C2433 - C13234 * C2430 - C13233 * C2434 +
             C13229 * C2439) *
                C30811 * C18966 +
            (C25662 + C25661) * C30811 * C18965) *
               C31140) *
              C1095 +
          (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C25663 + C25664) * C30811 * C18966) *
               C31175 -
           ((C25665 + C25666) * C30811 * C18966 +
            (C25664 + C25663) * C30811 * C18965) *
               C31164 +
           ((C25666 + C25665) * C30811 * C18965 +
            (C13233 * C6276 - C13234 * C6273 - C13233 * C6277 + C13229 * C6282 +
             C13235 * C6636 - C13236 * C6635 - C13235 * C6637 +
             C13230 * C6638) *
                C30811 * C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C31107 -
           ((C24781 + C24782) * C30811 * C18966 +
            (C24780 + C24779) * C30811 * C18965) *
               C30968) *
              C30863 * C671 +
          (((C13691 + C13690) * C30811 * C18965 +
            (C13692 + C13693) * C30811 * C18966) *
               C30968 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C31107) *
              C30863 * C672 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C31107 -
           ((C13696 + C13697) * C30811 * C18966 +
            (C13695 + C13694) * C30811 * C18965) *
               C30968) *
              C30863 * C673 +
          (((C13985 + C13984) * C30811 * C18965 +
            (C13233 * C513 - C13234 * C496 - C13233 * C514 + C13229 * C526 +
             C13235 * C2195 - C13236 * C2194 - C13235 * C2196 +
             C13230 * C2197) *
                C30811 * C18966) *
               C30968 -
           ((C13984 + C13985) * C30811 * C18966 +
            (C13291 + C13290) * C30811 * C18965) *
               C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
              C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                 C30811 * C18965 +
             (C24779 + C24780) * C30811 * C18966) *
                C31107 -
            ((C24781 + C24782) * C30811 * C18966 +
             (C24780 + C24779) * C30811 * C18965) *
                C30968) *
               C1094 +
           (((C25249 + C25250) * C30811 * C18965 +
             (C25661 + C25662) * C30811 * C18966) *
                C30968 -
            ((C25250 + C25249) * C30811 * C18966 +
             (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
              C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                 C30811 * C18965) *
                C31107) *
               C1095 +
           (((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
              C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
              C13230 * C1188) *
                 C30811 * C18965 +
             (C25663 + C25664) * C30811 * C18966) *
                C31107 -
            ((C25665 + C25666) * C30811 * C18966 +
             (C25664 + C25663) * C30811 * C18965) *
                C30968) *
               C31137) *
              C31092 +
          ((((C13691 + C13690) * C30811 * C18965 +
             (C13692 + C13693) * C30811 * C18966) *
                C30968 -
            ((C13690 + C13691) * C30811 * C18966 +
             (C13287 + C13286) * C30811 * C18965) *
                C31107) *
               C1094 +
           (((C13489 + C13488) * C30811 * C18965 +
             (C14204 + C14205) * C30811 * C18966) *
                C31107 -
            ((C15644 + C15645) * C30811 * C18966 +
             (C14205 + C14204) * C30811 * C18965) *
                C30968) *
               C1095 +
           (((C14933 + C14932) * C30811 * C18965 +
             (C13233 * C1325 - C13234 * C1309 - C13233 * C1326 +
              C13229 * C1336 + C13235 * C6432 - C13236 * C6431 -
              C13235 * C6433 + C13230 * C6434) *
                 C30811 * C18966) *
                C30968 -
            ((C14932 + C14933) * C30811 * C18966 +
             (C13491 + C13490) * C30811 * C18965) *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
            C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
               C30811 * C18966) *
              C30881 * C30863 * C108 -
          ((C13690 + C13691) * C30811 * C18966 +
           (C13287 + C13286) * C30811 * C18965) *
              C30881 * C30863 * C109 +
          ((C13289 + C13288) * C30811 * C18965 +
           (C13694 + C13695) * C30811 * C18966) *
              C30881 * C30863 * C110 -
          ((C13984 + C13985) * C30811 * C18966 +
           (C13291 + C13290) * C30811 * C18965) *
              C30881 * C30863 * C111 +
          ((C13293 + C13292) * C30811 * C18965 +
           (C13233 * C515 - C13234 * C497 - C13233 * C516 + C13229 * C527 +
            C13235 * C956 - C13236 * C947 - C13235 * C957 + C13230 * C962) *
               C30811 * C18966) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C13233 * C503 - C13234 * C491 - C13233 * C504 + C13229 * C521 +
             C13235 * C948 - C13236 * C943 - C13235 * C949 + C13230 * C958) *
                C30811 * C18966) *
               C30881 * C31174 -
           ((C13235 * C1321 - C13236 * C1307 - C13235 * C1322 + C13230 * C1334 +
             C13233 * C948 - C13234 * C943 - C13233 * C949 + C13229 * C958) *
                C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C31162 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C291 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C31162 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C31174 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C292 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C31174 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C31162 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
             C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
                C30811 * C18965 +
            (C24779 + C24780) * C30811 * C18966) *
               C30881 * C1094 -
           ((C25250 + C25249) * C30811 * C18966 +
            (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
             C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
                C30811 * C18965) *
               C30881 * C1095 +
           ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
             C13235 * C1178 - C13236 * C1170 - C13235 * C1179 +
             C13230 * C1188) *
                C30811 * C18965 +
            (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
             C13235 * C1725 - C13236 * C1722 - C13235 * C1726 +
             C13230 * C1731) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C13489 + C13488) * C30811 * C18965 +
            (C14204 + C14205) * C30811 * C18966) *
               C30881 * C1095 -
           ((C13690 + C13691) * C30811 * C18966 +
            (C13287 + C13286) * C30811 * C18965) *
               C30881 * C1094 -
           ((C14932 + C14933) * C30811 * C18966 +
            (C13491 + C13490) * C30811 * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C13289 + C13288) * C30811 * C18965 +
            (C13694 + C13695) * C30811 * C18966) *
               C30881 * C1094 -
           ((C14206 + C14207) * C30811 * C18966 +
            (C13493 + C13492) * C30811 * C18965) *
               C30881 * C1095 +
           ((C13495 + C13494) * C30811 * C18965 +
            (C13233 * C1317 - C13234 * C1305 - C13233 * C1318 + C13229 * C1332 +
             C13235 * C1729 - C13236 * C1724 - C13235 * C1730 +
             C13230 * C1733) *
                C30811 * C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C122 - C13234 * C115 - C13233 * C123 + C13229 * C136 +
            C13235 * C308 - C13236 * C296 - C13235 * C309 + C13230 * C326) *
               C30811 * C18965 +
           (C24779 + C24780) * C30811 * C18966) *
              C30881 * C1162 -
          ((C25250 + C25249) * C30811 * C18966 +
           (C13235 * C310 - C13236 * C297 - C13235 * C311 + C13230 * C327 +
            C13233 * C308 - C13234 * C296 - C13233 * C309 + C13229 * C326) *
               C30811 * C18965) *
              C30881 * C1163 +
          ((C13233 * C310 - C13234 * C297 - C13233 * C311 + C13229 * C327 +
            C13235 * C1178 - C13236 * C1170 - C13235 * C1179 + C13230 * C1188) *
               C30811 * C18965 +
           (C13233 * C1321 - C13234 * C1307 - C13233 * C1322 + C13229 * C1334 +
            C13235 * C1725 - C13236 * C1722 - C13235 * C1726 + C13230 * C1731) *
               C30811 * C18966) *
              C30881 * C1164 -
          ((C13235 * C5630 - C13236 * C5626 - C13235 * C5631 + C13230 * C5635 +
            C13233 * C1725 - C13234 * C1722 - C13233 * C1726 + C13229 * C1731) *
               C30811 * C18966 +
           (C13235 * C1180 - C13236 * C1171 - C13235 * C1181 + C13230 * C1189 +
            C13233 * C1178 - C13234 * C1170 - C13233 * C1179 + C13229 * C1188) *
               C30811 * C18965) *
              C30881 * C1165 +
          ((C13233 * C1180 - C13234 * C1171 - C13233 * C1181 + C13229 * C1189 +
            C13235 * C5509 - C13236 * C5507 - C13235 * C5510 + C13230 * C5513) *
               C30811 * C18965 +
           (C13233 * C5630 - C13234 * C5626 - C13233 * C5631 + C13229 * C5635 +
            C13235 * C5988 - C13236 * C5987 - C13235 * C5989 + C13230 * C5990) *
               C30811 * C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C30922 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30929 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C2908) *
              C30840 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30929 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C30922 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C2908) *
              C30849 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C30922 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30929 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C2908) *
              C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C30922 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30929 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C2908) *
              C30840 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30929 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C30922 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C2908) *
              C30849 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C30922 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30929 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C2908) *
              C2911)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C30922 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C30929 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C30881 * C2908) *
              C30840 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C30929 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C30922 -
           (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) * C30881 *
               C2908) *
              C30849 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C30922 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C30929 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C2908) *
              C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C30922 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30929 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C31107 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C2908) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C30922 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30929 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C31107) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C30922 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30929 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C31107 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C2908) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C30922 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30929 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C31107) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31107 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C30922 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31107) *
               C30929 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C30811 * C8933 +
             C9862 * C8934 + C9863 * C8935) *
                C31107 -
            (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
               C2908) *
              C2648 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
               C30922 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31107 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C30929 +
           ((C10109 * C8933 + C10117 * C8934 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C30811 * C8935) *
                C30968 -
            (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) *
                C31107) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C2540 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C30926) *
                  C31180 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C30926 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C2540) *
                  C31173 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                   C2540 -
               (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
                   C30926) *
                  C31160 +
              ((C375 * C102 + C686 * C103 +
                (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) *
                    C104) *
                   C31060 * C30881 * C30926 -
               (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
                   C2540) *
                  C31141) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C31181 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C31177 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C30881 * C31167 -
               (C1459 * C104 + C1460 * C103 +
                (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                    C102) *
                   C31060 * C30881 * C31147) *
                  C2648 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C31177 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C31181 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
                   C31167 +
               (C1460 * C102 + C1459 * C103 +
                (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                    C104) *
                   C31060 * C30881 * C31147) *
                  C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31175 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C31164 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C31140) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C31164 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31175 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C31140) *
               C30926) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31164 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31175 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31175 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C31164 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C31180 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C2540) *
              C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C31160 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31177 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31167 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C2648 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31177 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31167 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31175 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C31164 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C31140) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C31164 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31175 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C31140) *
               C30926) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C31164 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31175 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C31140) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31175 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C31164 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C2540 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C30926) *
              C31180 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C30926 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C2540) *
              C31173 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C2540 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C30926) *
              C31160 +
          ((C375 * C30811 * C8933 + C984 * C30811 * C8934 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                C30811 * C8935) *
               C30881 * C30926 -
           (C9384 * C8935 + C9383 * C8934 + C176 * C30811 * C8933) * C30881 *
               C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C31181 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C31177 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C30881 * C31167 -
           (C10231 * C8935 + C10230 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C30881 * C31147) *
              C2648 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C31177 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C31181 -
           (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) * C30881 *
               C31167 +
           (C1460 * C30811 * C8933 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C30811 * C8934 +
            (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                C30811 * C8935) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31175 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31164 +
            (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C31140) *
               C2540 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C31164 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31175 -
            (C10915 * C8935 + C9861 * C8934 + C9550 * C8933) * C31140) *
               C30926) *
              C2648 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C31164 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31175 -
            (C10805 * C8935 + C9171 * C8934 + C9170 * C8933) * C31140) *
               C2540 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31175 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C31164 +
            (C9540 * C8933 + C10695 * C8934 +
             (C113 * C10684 - C114 * C10683 - C113 * C10685 + C31046 * C10686) *
                 C30811 * C8935) *
                C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30926) *
              C30840 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C31107 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C31107) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30926) *
              C30840 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C31107) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31107 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C2540 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31107) *
               C30926) *
              C30840 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
               C2540 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31107 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C30926) *
              C30849 +
          (((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31107 -
            (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
               C2540 +
           ((C9541 * C8933 + C9542 * C8934 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                 C30811 * C8935) *
                C30968 -
            (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C31107) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31181 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31177 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31167 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C30881 * C31147) *
              C2648 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31177 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31181 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31167 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                C104) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C2540 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30926) *
              C31180 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30926 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C2540) *
              C31173 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C2540 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30926) *
              C31160 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) * C104) *
               C31060 * C30881 * C30926 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
               C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C31180 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C2540) *
              C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C31160 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31177 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31167 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C2648 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31177 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31167 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C2540 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C30926) *
              C31180 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C30926 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C2540) *
              C31173 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C2540 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C30926) *
              C31160 +
          ((C375 * C30811 * C8933 + C984 * C30811 * C8934 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                C30811 * C8935) *
               C30881 * C30926 -
           (C9384 * C8935 + C9383 * C8934 + C176 * C30811 * C8933) * C30881 *
               C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C31181 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C31177 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C30881 * C31167 -
           (C10231 * C8935 + C10230 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C30881 * C31147) *
              C2648 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C31177 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C31181 -
           (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) * C30881 *
               C31167 +
           (C1460 * C30811 * C8933 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C30811 * C8934 +
            (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                C30811 * C8935) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C30922 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30929 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C3302 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C2908) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C30922 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30929 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C3302) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C30922 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30929 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C2908) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C30922 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30929 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C3302) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C3302 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C30922 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C3302) *
               C30929 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C30811 * C8933 +
             C9862 * C8934 + C9863 * C8935) *
                C3302 -
            (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
               C2908) *
              C31092 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
               C30922 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C3302 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C30929 +
           ((C10109 * C8933 + C10117 * C8934 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C30811 * C8935) *
                C30968 -
            (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) * C3302) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30964 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30971 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C3810) *
              C30922 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30971 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30964 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C3810) *
              C30929 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30964 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30971 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C3810) *
              C2908) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30964 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30971 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C3810) *
              C30922 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30971 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30964 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C3810) *
              C30929 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30964 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30971 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C3810) *
              C2908) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30964 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30971 +
           (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C3810) *
              C30922 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30971 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30964 -
           (C10915 * C8935 + C9861 * C8934 + C9550 * C8933) * C3810) *
              C30929 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C30964 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30971 +
           (C9863 * C8933 + C9864 * C8934 +
            (C113 * C6280 - C114 * C6275 - C113 * C6281 + C31046 * C6284) *
                C30811 * C8935) *
               C3810) *
              C2908) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                     C102 +
                 C174 * C103 + C175 * C104) *
                    C31060 * C3302 -
                (C566 * C104 + C567 * C103 +
                 (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                     C102) *
                    C31060 * C30968) *
                   C2540 +
               (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                     C102 +
                 C982 * C103 + C983 * C104) *
                    C31060 * C30968 -
                (C371 * C104 + C372 * C103 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                     C102) *
                    C31060 * C3302) *
                   C30926) *
                  C31171 +
              (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
                (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
                   C2540 +
               ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
                (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
                   C30926) *
                  C31158 +
              (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
                (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
                   C2540 +
               ((C983 * C102 + C984 * C103 +
                 (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) *
                     C104) *
                    C31060 * C30968 -
                (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C3302) *
                   C30926) *
                  C31131) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C3302 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C30968) *
                  C31181 +
              (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                    C102 +
                C982 * C103 + C983 * C104) *
                   C31060 * C30968 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C3302) *
                  C31177 +
              (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C3302 -
               (C1623 * C104 + C1624 * C103 +
                (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                    C102) *
                   C31060 * C30968) *
                  C31167 +
              (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                    C102 +
                (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                    C103 +
                (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                    C104) *
                   C31060 * C30968 -
               (C1459 * C104 + C1460 * C103 +
                (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                    C102) *
                   C31060 * C3302) *
                  C31147) *
             C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31182 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31179 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31170 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C2540 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C31179 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31182 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31170 +
           ((C113 * C2433 - C114 * C2430 - C113 * C2434 + C31046 * C2439) *
                C102 +
            (C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                C103 +
            (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                C104) *
               C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31171 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C3302 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C31181 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C3302) *
              C31177 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C3302 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C31167 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31182 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31179 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31170 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C2540 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C31179 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31182 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31170 +
           (C4767 * C2433 - C4768 * C2430 - C4767 * C2434 + C4763 * C2439 +
            C4769 * C6276 - C4770 * C6273 - C4769 * C6277 + C4764 * C6282 +
            C4771 * C6636 - C4772 * C6635 - C4771 * C6637 + C4765 * C6638) *
               C30811 * C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C3302 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C2540 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C3302) *
               C30926) *
              C31171 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
               C2540 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C3302 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C30926) *
              C31158 +
          (((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C3302 -
            (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
               C2540 +
           ((C9541 * C8933 + C9542 * C8934 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                 C30811 * C8935) *
                C30968 -
            (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C3302 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C31181 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C3302) *
              C31177 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C3302 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
              C31167 +
          ((C10230 * C8933 + C10231 * C8934 +
            (C113 * C6636 - C114 * C6635 - C113 * C6637 + C31046 * C6638) *
                C30811 * C8935) *
               C30968 -
           (C10231 * C8935 + C10230 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31182 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31179 +
           (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C31170 -
           (C10537 * C8935 + C10536 * C8934 + C9186 * C8933) * C31153) *
              C2540 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C31179 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C31182 -
           (C10915 * C8935 + C9861 * C8934 + C9550 * C8933) * C31170 +
           (C9861 * C8933 + C10915 * C8934 +
            (C113 * C10904 - C114 * C10903 - C113 * C10905 + C31046 * C10906) *
                C30811 * C8935) *
               C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C30964 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30971 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C3810) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30971 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C30964 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C3810) *
               C30926) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30971 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C30964 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C3810) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C30964 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30971 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C30964 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30971 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C3810) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30971 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C30964 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C3810) *
               C30926) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30971 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30964 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C3810) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30964 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30971 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C30964 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30971 +
            (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C3810) *
               C2540 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30971 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C30964 -
            (C10915 * C8935 + C9861 * C8934 + C9550 * C8933) * C3810) *
               C30926) *
              C31092 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30971 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30964 -
            (C10805 * C8935 + C9171 * C8934 + C9170 * C8933) * C3810) *
               C2540 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30964 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30971 +
            (C9540 * C8933 + C10695 * C8934 +
             (C113 * C10684 - C114 * C10683 - C113 * C10685 + C31046 * C10686) *
                 C30811 * C8935) *
                C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C31181 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30968 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C3302) *
              C31177 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C3302 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30968) *
              C31167 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                C104) *
               C31060 * C30968 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30926) *
              C31171 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31171 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C3302 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C31181 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C3302) *
              C31177 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C3302 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C31167 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C3302 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C2540 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C3302) *
               C30926) *
              C31171 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
               C2540 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C3302 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C30926) *
              C31158 +
          (((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C3302 -
            (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
               C2540 +
           ((C9541 * C8933 + C9542 * C8934 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                 C30811 * C8935) *
                C30968 -
            (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C3302 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C31181 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C3302) *
              C31177 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C3302 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
              C31167 +
          ((C10230 * C8933 + C10231 * C8934 +
            (C113 * C6636 - C114 * C6635 - C113 * C6637 + C31046 * C6638) *
                C30811 * C8935) *
               C30968 -
           (C10231 * C8935 + C10230 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C31106 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C30926) *
                  C671 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C30926 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C31106) *
                  C672 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                   C31106 -
               (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
                   C30926) *
                  C673 +
              ((C375 * C102 + C686 * C103 +
                (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) *
                    C104) *
                   C31060 * C30881 * C30926 -
               (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
                   C31106) *
                  C31141) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C1436 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C1437 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C30881 * C1438 -
               (C1459 * C104 + C1460 * C103 +
                (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                    C102) *
                   C31060 * C30881 * C31147) *
                  C31092 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C1437 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C1436 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
                   C1438 +
               (C1460 * C102 + C1459 * C103 +
                (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                    C104) *
                   C31060 * C30881 * C31147) *
                  C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C1844 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C1845 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C31140) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C1845 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C1844 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C31140) *
               C30926) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C1845 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C1844 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C1844 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C1845 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C671 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31106) *
              C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C673 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1437 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C1438 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C31092 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1437 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C1438 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C1844 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C1845 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C31140) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C1845 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C1844 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C31140) *
               C30926) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C1845 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C1844 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C31140) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C1844 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C1845 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C31106 -
           ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C30811 * C8935 +
            (C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C30811 *
                C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C30926) *
              C671 +
          ((C372 * C30811 * C8933 + C982 * C30811 * C8934 +
            C2212 * C30811 * C8935) *
               C30881 * C30926 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C31106) *
              C672 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C31106 -
           (C2211 * C30811 * C8935 + C983 * C30811 * C8934 +
            C371 * C30811 * C8933) *
               C30881 * C30926) *
              C673 +
          ((C375 * C30811 * C8933 + C984 * C30811 * C8934 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                C30811 * C8935) *
               C30881 * C30926 -
           (C571 * C30811 * C8935 + C570 * C30811 * C8934 +
            C176 * C30811 * C8933) *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C1436 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C30881 * C1438 -
           ((C113 * C5628 - C114 * C5625 - C113 * C5629 + C31046 * C5634) *
                C30811 * C8935 +
            (C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C30811 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C30881 * C31147) *
              C31092 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C1437 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C1436 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C1438 +
           (C1460 * C30811 * C8933 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C30811 * C8934 +
            (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                C30811 * C8935) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C1844 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C1845 +
            (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C31140) *
               C31106 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C1845 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C1844 -
            ((C113 * C6278 - C114 * C6274 - C113 * C6279 + C31046 * C6283) *
                 C30811 * C8935 +
             C9861 * C8934 + C9550 * C8933) *
                C31140) *
               C30926) *
              C31092 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C1845 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C1844 -
            ((C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
                 C30811 * C8935 +
             C9171 * C8934 + C9170 * C8933) *
                C31140) *
               C31106 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C1844 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C1845 +
            (C9540 * C8933 + C10695 * C8934 +
             (C113 * C10684 - C114 * C10683 - C113 * C10685 + C31046 * C10686) *
                 C30811 * C8935) *
                C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                     C102 +
                 C174 * C103 + C175 * C104) *
                    C31060 * C31107 -
                (C566 * C104 + C567 * C103 +
                 (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                     C102) *
                    C31060 * C30968) *
                   C31106 +
               (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                     C102 +
                 C982 * C103 + C983 * C104) *
                    C31060 * C30968 -
                (C371 * C104 + C372 * C103 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                     C102) *
                    C31060 * C31107) *
                   C30926) *
                  C291 +
              (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
                (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
                   C31106 +
               ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
                (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
                   C30926) *
                  C292 +
              (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
                (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
                   C31106 +
               ((C983 * C102 + C984 * C103 +
                 (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) *
                     C104) *
                    C31060 * C30968 -
                (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C31107) *
                   C30926) *
                  C31131) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C31107 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C30968) *
                  C1436 +
              (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                    C102 +
                C982 * C103 + C983 * C104) *
                   C31060 * C30968 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C31107) *
                  C1437 +
              (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C31107 -
               (C1623 * C104 + C1624 * C103 +
                (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                    C102) *
                   C31060 * C30968) *
                  C1438 +
              (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                    C102 +
                (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                    C103 +
                (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                    C104) *
                   C31060 * C30968 -
               (C1459 * C104 + C1460 * C103 +
                (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                    C102) *
                   C31060 * C31107) *
                  C31147) *
             C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C2310 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C2311 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C2312 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C31106 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C2311 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C2310 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C2312 +
           ((C113 * C2433 - C114 * C2430 - C113 * C2434 + C31046 * C2439) *
                C102 +
            (C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                C103 +
            (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                C104) *
               C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30926) *
              C291 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C292 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C31107 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C1436 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31107) *
              C1437 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31107 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C1438 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C2310 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C2311 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C2312 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C31106 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C2311 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C2310 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C2312 +
           (C4767 * C2433 - C4768 * C2430 - C4767 * C2434 + C4763 * C2439 +
            C4769 * C6276 - C4770 * C6273 - C4769 * C6277 + C4764 * C6282 +
            C4771 * C6636 - C4772 * C6635 - C4771 * C6637 + C4765 * C6638) *
               C30811 * C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31107 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C31106 +
           ((C9549 * C8933 + C9550 * C8934 +
             (C113 * C2433 - C114 * C2430 - C113 * C2434 + C31046 * C2439) *
                 C30811 * C8935) *
                C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31107) *
               C30926) *
              C291 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
               C31106 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31107 -
            ((C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                 C30811 * C8935 +
             C9540 * C8934 + C9539 * C8933) *
                C30968) *
               C30926) *
              C292 +
          (((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31107 -
            (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
               C31106 +
           ((C9541 * C8933 + C9542 * C8934 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                 C30811 * C8935) *
                C30968 -
            (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31107 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C1436 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C31107) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C31107 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
              C1438 +
          ((C10230 * C8933 + C10231 * C8934 +
            (C113 * C6636 - C114 * C6635 - C113 * C6637 + C31046 * C6638) *
                C30811 * C8935) *
               C30968 -
           (C10231 * C8935 + C10230 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C2310 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C2311 +
           (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C2312 -
           (C10537 * C8935 + C10536 * C8934 + C9186 * C8933) * C31153) *
              C31106 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C2311 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C2310 -
           (C10915 * C8935 + C9861 * C8934 + C9550 * C8933) * C2312 +
           (C9861 * C8933 + C10915 * C8934 +
            (C113 * C10904 - C114 * C10903 - C113 * C10905 + C31046 * C10906) *
                C30811 * C8935) *
               C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                   C102 +
               C174 * C103 + C175 * C104) *
                  C31060 * C30881 * C30863 * C108 -
              (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                  C30863 * C109 +
              (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                  C30863 * C110 -
              (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
                  C30863 * C111 +
              (C177 * C102 + C178 * C103 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) *
                   C104) *
                  C31060 * C30881 * C30863 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C31174 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C31162 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C30881 * C31137) *
                  C291 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C31162 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C31174 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
                   C31137) *
                  C292 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                   C31174 -
               ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) *
                    C104 +
                C375 * C103 + C371 * C102) *
                   C31060 * C30881 * C31162 +
               (C374 * C102 + C376 * C103 +
                (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) *
                    C104) *
                   C31060 * C30881 * C31137) *
                  C31131) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C31175 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C31164 +
               ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) *
                    C102 +
                C568 * C103 + C569 * C104) *
                   C31060 * C31140) *
                  C30863 * C291 +
              ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31164 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31175 -
               (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
                  C30863 * C292 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31175 -
               ((C113 * C515 - C114 * C497 - C113 * C516 + C31046 * C527) *
                    C104 +
                C570 * C103 + C566 * C102) *
                   C31060 * C31164 +
               (C569 * C102 + C571 * C103 +
                (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) *
                    C104) *
                   C31060 * C31140) *
                  C30863 * C31131) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C1094 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C1095 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C30881 * C31137) *
                  C31171 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C1095 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C1094 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
                   C31137) *
                  C31158 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                   C1094 -
               (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
                   C1095 +
               (C374 * C102 + C376 * C103 +
                (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) *
                    C104) *
                   C31060 * C30881 * C31137) *
                  C31131) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                   C102 +
               C174 * C103 + C175 * C104) *
                  C31060 * C30881 * C1162 -
              (C371 * C104 + C372 * C103 +
               (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                   C102) *
                  C31060 * C30881 * C1163 +
              ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                   C102 +
               C373 * C103 + C374 * C104) *
                  C31060 * C30881 * C1164 -
              ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
                   C104 +
               (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
                   C103 +
               (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                   C102) *
                  C31060 * C30881 * C1165 +
              ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
                   C102 +
               (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
                   C103 +
               (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
                   C104) *
                  C31060 * C30881 * C1166) *
             C30835 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C31175 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C31164 +
               ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) *
                    C102 +
                C568 * C103 + C569 * C104) *
                   C31060 * C31140) *
                  C1094 +
              (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                    C102 +
                C982 * C103 + C983 * C104) *
                   C31060 * C31164 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C31175 -
               ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                    C104 +
                (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                    C103 +
                (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                    C102) *
                   C31060 * C31140) *
                  C1095 +
              (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C31175 -
               ((C113 * C1317 - C114 * C1305 - C113 * C1318 + C31046 * C1332) *
                    C104 +
                (C113 * C1319 - C114 * C1306 - C113 * C1320 + C31046 * C1333) *
                    C103 +
                (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                    C102) *
                   C31060 * C31164 +
               ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                    C102 +
                (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                    C103 +
                (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                    C104) *
                   C31060 * C31140) *
                  C31137) *
             C30835 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C1844 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C1845 +
               ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) *
                    C102 +
                C568 * C103 + C569 * C104) *
                   C31060 * C31140) *
                  C30863 * C31171 +
              ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C1845 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C1844 -
               (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
                  C30863 * C31158 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C1844 -
               (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C1845 +
               (C569 * C102 + C571 * C103 +
                (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) *
                    C104) *
                   C31060 * C31140) *
                  C30863 * C31131) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C1844 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C1845 +
               ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) *
                    C102 +
                C568 * C103 + C569 * C104) *
                   C31060 * C31140) *
                  C31174 +
              (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                    C102 +
                C982 * C103 + C983 * C104) *
                   C31060 * C1845 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C1844 -
               ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                    C104 +
                (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                    C103 +
                (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                    C102) *
                   C31060 * C31140) *
                  C31162 +
              (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C1844 -
               (C1623 * C104 + C1624 * C103 +
                (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                    C102) *
                   C31060 * C1845 +
               ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                    C102 +
                (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                    C103 +
                (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                    C104) *
                   C31060 * C31140) *
                  C31137) *
             C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C2019 -
          (C566 * C104 + C567 * C103 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
              C31060 * C2020 +
          ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
           C568 * C103 + C569 * C104) *
              C31060 * C2021 -
          ((C113 * C2030 - C114 * C2024 - C113 * C2031 + C31046 * C2042) *
               C104 +
           (C113 * C2032 - C114 * C2025 - C113 * C2033 + C31046 * C2043) *
               C103 +
           (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
               C102) *
              C31060 * C2022 +
          ((C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
               C102 +
           (C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
               C103 +
           (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
               C104) *
              C31060 * C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C291 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C31164 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31175 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31175 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C31164 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C1094 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C31164 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31175 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C1095 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31175 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C31164 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C31171 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C1845 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C1844 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C1844 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C1845 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C31174 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C1845 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C1844 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C31162 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C1844 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C1845 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C2019 -
          (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
           C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
           C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
              C30811 * C31060 * C2020 +
          (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
           C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
           C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
              C30811 * C31060 * C2021 -
          (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
           C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
           C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
              C30811 * C31060 * C2022 +
          (C4767 * C2036 - C4768 * C2027 - C4767 * C2037 + C4763 * C2045 +
           C4769 * C6278 - C4770 * C6274 - C4769 * C6279 + C4764 * C6283 +
           C4771 * C6280 - C4772 * C6275 - C4771 * C6281 + C4765 * C6284) *
              C30811 * C31060 * C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
               C8934 +
           (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
               C8935) *
              C30881 * C30863 * C108 -
          (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
           C174 * C30811 * C8933) *
              C30881 * C30863 * C109 +
          (C175 * C30811 * C8933 + C566 * C30811 * C8934 +
           C569 * C30811 * C8935) *
              C30881 * C30863 * C110 -
          (C571 * C30811 * C8935 + C570 * C30811 * C8934 +
           C176 * C30811 * C8933) *
              C30881 * C30863 * C111 +
          (C177 * C30811 * C8933 + C797 * C30811 * C8934 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C30811 *
               C8935) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
                C8934 +
            (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
                C8935) *
               C30881 * C31174 -
           ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C30811 * C8935 +
            (C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C30811 *
                C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C291 +
          ((C372 * C30811 * C8933 + C982 * C30811 * C8934 +
            C2212 * C30811 * C8935) *
               C30881 * C31162 -
           (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
            C174 * C30811 * C8933) *
               C30881 * C31174 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C292 +
          ((C175 * C30811 * C8933 + C566 * C30811 * C8934 +
            C569 * C30811 * C8935) *
               C30881 * C31174 -
           (C2211 * C30811 * C8935 + C983 * C30811 * C8934 +
            C371 * C30811 * C8933) *
               C30881 * C31162 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31175 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31164 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C30863 * C291 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C31164 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31175 -
           ((C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
                C30811 * C8935 +
            C9171 * C8934 + C9170 * C8933) *
               C31140) *
              C30863 * C292 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31175 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C31164 +
           (C9173 * C8933 + C9174 * C8934 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                C30811 * C8935) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C1094 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31171 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C1095 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C1094 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C31158 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C1094 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C1095 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           C9184 * C8934 + C9185 * C8935) *
              C30881 * C1162 -
          (C9550 * C8935 + C9549 * C8934 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
               C8933) *
              C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
               C8933 +
           (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
               C30811 * C8934 +
           (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
               C30811 * C8935) *
              C30881 * C1164 -
          ((C113 * C5628 - C114 * C5625 - C113 * C5629 + C31046 * C5634) *
               C30811 * C8935 +
           (C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
               C30811 * C8934 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C30811 * C8933) *
              C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C30811 * C8933 +
           (C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
               C30811 * C8934 +
           (C113 * C5632 - C114 * C5627 - C113 * C5633 + C31046 * C5636) *
               C30811 * C8935) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31175 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31164 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C1094 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C31164 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C31175 -
           ((C113 * C6278 - C114 * C6274 - C113 * C6279 + C31046 * C6283) *
                C30811 * C8935 +
            C9861 * C8934 + C9550 * C8933) *
               C31140) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C31175 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C31164 +
           (C9863 * C8933 + C9864 * C8934 +
            (C113 * C6280 - C114 * C6275 - C113 * C6281 + C31046 * C6284) *
                C30811 * C8935) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C1844 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C1845 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C30863 * C31171 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C1845 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C1844 -
           ((C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
                C30811 * C8935 +
            C9171 * C8934 + C9170 * C8933) *
               C31140) *
              C30863 * C31158 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C1844 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C1845 +
           (C9173 * C8933 + C9174 * C8934 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                C30811 * C8935) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C1844 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C1845 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C31174 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C1845 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C1844 -
           ((C113 * C6278 - C114 * C6274 - C113 * C6279 + C31046 * C6283) *
                C30811 * C8935 +
            C9861 * C8934 + C9550 * C8933) *
               C31140) *
              C31162 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C1844 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C1845 +
           (C9863 * C8933 + C9864 * C8934 +
            (C113 * C6280 - C114 * C6275 - C113 * C6281 + C31046 * C6284) *
                C30811 * C8935) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           C9184 * C8934 + C9185 * C8935) *
              C2019 -
          (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C2020 +
          (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C2021 -
          (C10537 * C8935 + C10536 * C8934 + C9186 * C8933) * C2022 +
          (C10536 * C8933 + C10537 * C8934 +
           (C113 * C10517 - C114 * C10514 - C113 * C10518 + C31046 * C10520) *
               C30811 * C8935) *
              C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C31107 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C30968) *
                  C30863 * C671 +
              ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
                  C30863 * C672 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
               (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
                  C30863 * C673 +
              ((C570 * C102 + C797 * C103 +
                (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) *
                    C104) *
                   C31060 * C30968 -
               (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C31107) *
                  C30863 * C31141) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                     C102 +
                 C174 * C103 + C175 * C104) *
                    C31060 * C31107 -
                (C566 * C104 + C567 * C103 +
                 (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                     C102) *
                    C31060 * C30968) *
                   C1094 +
               (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                     C102 +
                 C982 * C103 + C983 * C104) *
                    C31060 * C30968 -
                (C371 * C104 + C372 * C103 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                     C102) *
                    C31060 * C31107) *
                   C1095 +
               (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                     C102 +
                 C373 * C103 + C374 * C104) *
                    C31060 * C31107 -
                (C1623 * C104 + C1624 * C103 +
                 (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                     C102) *
                    C31060 * C30968) *
                   C31137) *
                  C31092 +
              (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
                (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
                   C1094 +
               ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
                (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
                   C1095 +
               ((C1624 * C102 + C1623 * C103 +
                 (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                     C104) *
                    C31060 * C30968 -
                (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C31107) *
                   C31137) *
                  C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C2310 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C2311 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C2312 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C30863 * C31092 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C2311 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C2310 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C2312 +
           (C2332 * C102 + C2331 * C103 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C104) *
               C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C671 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31107) *
              C30863 * C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31107 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C673 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C1094 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C1095 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C31107 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C1094 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C1095 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C2310 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C2311 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C2312 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C30863 * C31092 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C2311 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C2310 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C2312 +
           (C4767 * C2032 - C4768 * C2025 - C4767 * C2033 + C4763 * C2043 +
            C4769 * C2435 - C4770 * C2431 - C4769 * C2436 + C4764 * C2440 +
            C4771 * C6534 - C4772 * C6533 - C4771 * C6535 + C4765 * C6536) *
               C30811 * C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31107 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C30863 * C671 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
              C30863 * C672 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31107 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
              C30863 * C673 +
          ((C9383 * C8933 + C9384 * C8934 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C30811 * C8935) *
               C30968 -
           (C9384 * C8935 + C9383 * C8934 + C176 * C30811 * C8933) * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31107 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C1094 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31107) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C30811 * C8933 +
             C9862 * C8934 + C9863 * C8935) *
                C31107 -
            (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
               C31137) *
              C31092 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
               C1094 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31107 -
            ((C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                 C30811 * C8935 +
             C9540 * C8934 + C9539 * C8933) *
                C30968) *
               C1095 +
           ((C10109 * C8933 + C10117 * C8934 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C30811 * C8935) *
                C30968 -
            (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C2310 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C2311 +
           (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C2312 -
           (C10537 * C8935 + C10536 * C8934 + C9186 * C8933) * C31153) *
              C30863 * C31092 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C2311 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C2310 -
           (C10805 * C8935 + C9171 * C8934 + C9170 * C8933) * C2312 +
           (C9171 * C8933 + C10805 * C8934 +
            (C113 * C10794 - C114 * C10793 - C113 * C10795 + C31046 * C10796) *
                C30811 * C8935) *
               C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C30863 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C30863 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C30863 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 * C30863 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) * C104) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31174 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31162 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31174 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31174 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C31060 * C30881 * C31162 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C30863 * C31171 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C1845 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C1844 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
              C30863 * C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C1844 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C1845 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C31174 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C1845 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C1844 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31140) *
              C31162 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C1844 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C1845 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C31171 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C1845 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C1844 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C1844 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C1845 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C31174 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C1845 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C1844 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C31162 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C1844 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C1845 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
               C8934 +
           (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
               C8935) *
              C30881 * C30863 * C108 -
          (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
           C174 * C30811 * C8933) *
              C30881 * C30863 * C109 +
          (C175 * C30811 * C8933 + C566 * C30811 * C8934 +
           C569 * C30811 * C8935) *
              C30881 * C30863 * C110 -
          (C571 * C30811 * C8935 + C570 * C30811 * C8934 +
           C176 * C30811 * C8933) *
              C30881 * C30863 * C111 +
          (C177 * C30811 * C8933 + C797 * C30811 * C8934 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C30811 *
               C8935) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
                C8934 +
            (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
                C8935) *
               C30881 * C31174 -
           ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C30811 * C8935 +
            (C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C30811 *
                C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C291 +
          ((C372 * C30811 * C8933 + C982 * C30811 * C8934 +
            C2212 * C30811 * C8935) *
               C30881 * C31162 -
           (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
            C174 * C30811 * C8933) *
               C30881 * C31174 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C292 +
          ((C175 * C30811 * C8933 + C566 * C30811 * C8934 +
            C569 * C30811 * C8935) *
               C30881 * C31174 -
           (C2211 * C30811 * C8935 + C983 * C30811 * C8934 +
            C371 * C30811 * C8933) *
               C30881 * C31162 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C1094 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31171 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C1095 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C1094 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C31158 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C1094 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C1095 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           C9184 * C8934 + C9185 * C8935) *
              C30881 * C1162 -
          (C9550 * C8935 + C9549 * C8934 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
               C8933) *
              C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
               C8933 +
           (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
               C30811 * C8934 +
           (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
               C30811 * C8935) *
              C30881 * C1164 -
          ((C113 * C5628 - C114 * C5625 - C113 * C5629 + C31046 * C5634) *
               C30811 * C8935 +
           (C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
               C30811 * C8934 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C30811 * C8933) *
              C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C30811 * C8933 +
           (C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
               C30811 * C8934 +
           (C113 * C5632 - C114 * C5627 - C113 * C5633 + C31046 * C5636) *
               C30811 * C8935) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C1844 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C1845 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C30863 * C31171 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C1845 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C1844 -
           ((C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
                C30811 * C8935 +
            C9171 * C8934 + C9170 * C8933) *
               C31140) *
              C30863 * C31158 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C1844 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C1845 +
           (C9173 * C8933 + C9174 * C8934 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                C30811 * C8935) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C1844 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C1845 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C31174 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C1845 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C1844 -
           ((C113 * C6278 - C114 * C6274 - C113 * C6279 + C31046 * C6283) *
                C30811 * C8935 +
            C9861 * C8934 + C9550 * C8933) *
               C31140) *
              C31162 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C1844 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C1845 +
           (C9863 * C8933 + C9864 * C8934 +
            (C113 * C6280 - C114 * C6275 - C113 * C6281 + C31046 * C6284) *
                C30811 * C8935) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30926) *
              C30840 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C3302 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C3302) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30926) *
              C30840 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C31106 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C3302) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C3302 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C31106 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C3302) *
               C30926) *
              C30840 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
               C31106 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C3302 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C30926) *
              C30849 +
          (((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C3302 -
            (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
               C31106 +
           ((C9541 * C8933 + C9542 * C8934 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                 C30811 * C8935) *
                C30968 -
            (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C3302) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C30964 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30971 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C3810) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30971 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C30964 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C3810) *
               C30926) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30971 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C30964 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C3810) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C30964 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30971 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C30964 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30971 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C3810) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30971 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C30964 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C3810) *
               C30926) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30971 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30964 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C3810) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30964 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30971 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C30964 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30971 +
            (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C3810) *
               C31106 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30971 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C30964 -
            (C10915 * C8935 + C9861 * C8934 + C9550 * C8933) * C3810) *
               C30926) *
              C2648 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30971 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30964 -
            (C10805 * C8935 + C9171 * C8934 + C9170 * C8933) * C3810) *
               C31106 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30964 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30971 +
            (C9540 * C8933 + C10695 * C8934 +
             (C113 * C10684 - C114 * C10683 - C113 * C10685 + C31046 * C10686) *
                 C30811 * C8935) *
                C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C3302 -
               (C566 * C104 + C567 * C103 +
                (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                    C102) *
                   C31060 * C30968) *
                  C30863 * C31180 +
              ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
                  C30863 * C31173 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
               (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
                  C30863 * C31160 +
              ((C570 * C102 + C797 * C103 +
                (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) *
                    C104) *
                   C31060 * C30968 -
               (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C3302) *
                  C30863 * C31141) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                     C102 +
                 C174 * C103 + C175 * C104) *
                    C31060 * C3302 -
                (C566 * C104 + C567 * C103 +
                 (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) *
                     C102) *
                    C31060 * C30968) *
                   C31174 +
               (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) *
                     C102 +
                 C982 * C103 + C983 * C104) *
                    C31060 * C30968 -
                (C371 * C104 + C372 * C103 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                     C102) *
                    C31060 * C3302) *
                   C31162 +
               (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                     C102 +
                 C373 * C103 + C374 * C104) *
                    C31060 * C3302 -
                (C1623 * C104 + C1624 * C103 +
                 (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                     C102) *
                    C31060 * C30968) *
                   C31137) *
                  C2648 +
              (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
                (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
                   C31174 +
               ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
                (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
                   C31162 +
               ((C1624 * C102 + C1623 * C103 +
                 (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                     C104) *
                    C31060 * C30968 -
                (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C3302) *
                   C31137) *
                  C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31182 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31179 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31170 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C30863 * C2648 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31179 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31182 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31170 +
           (C2332 * C102 + C2331 * C103 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C104) *
               C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C31180 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C3302) *
              C30863 * C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C3302 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C31160 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31174 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C31162 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C3302 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C31174 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C31162 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31182 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31179 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31170 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C30863 * C2648 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C31179 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31182 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31170 +
           (C4767 * C2032 - C4768 * C2025 - C4767 * C2033 + C4763 * C2043 +
            C4769 * C2435 - C4770 * C2431 - C4769 * C2436 + C4764 * C2440 +
            C4771 * C6534 - C4772 * C6533 - C4771 * C6535 + C4765 * C6536) *
               C30811 * C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C3302 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C30863 * C31180 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
              C30863 * C31173 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C3302 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
              C30863 * C31160 +
          ((C9383 * C8933 + C9384 * C8934 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C30811 * C8935) *
               C30968 -
           (C9384 * C8935 + C9383 * C8934 + C176 * C30811 * C8933) * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C3302 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C31174 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C3302) *
               C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C30811 * C8933 +
             C9862 * C8934 + C9863 * C8935) *
                C3302 -
            (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
               C31137) *
              C2648 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
               C31174 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C3302 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C31162 +
           ((C10109 * C8933 + C10117 * C8934 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C30811 * C8935) *
                C30968 -
            (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31182 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31179 +
           (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C31170 -
           (C10537 * C8935 + C10536 * C8934 + C9186 * C8933) * C31153) *
              C30863 * C2648 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C31179 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31182 -
           (C10805 * C8935 + C9171 * C8934 + C9170 * C8933) * C31170 +
           (C9171 * C8933 + C10805 * C8934 +
            (C113 * C10794 - C114 * C10793 - C113 * C10795 + C31046 * C10796) *
                C30811 * C8935) *
               C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30964 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30971 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C3810) *
              C30863 * C30840 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30971 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30964 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C3810) *
              C30863 * C30849 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30964 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30971 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C3810) *
              C30863 * C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30964 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30971 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C3810) *
              C30863 * C30840 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30971 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30964 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C3810) *
              C30863 * C30849 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30964 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30971 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C3810) *
              C30863 * C2911)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30964 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30971 +
           (C9185 * C8933 + C9186 * C8934 + C10536 * C8935) * C3810) *
              C30863 * C30840 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30971 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30964 -
           (C10805 * C8935 + C9171 * C8934 + C9170 * C8933) * C3810) *
              C30863 * C30849 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30964 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30971 +
           (C9173 * C8933 + C9174 * C8934 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                C30811 * C8935) *
               C3810) *
              C30863 * C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31174 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C31137) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C31174 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C31162 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C30863 * C31180 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
              C30863 * C31173 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
              C30863 * C31160 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) * C104) *
               C31060 * C30968 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C31180 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C3302) *
              C30863 * C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C3302 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C31160 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31174 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C31162 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C3302 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C31174 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C31162 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C3302 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C30863 * C31180 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
              C30863 * C31173 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C3302 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
              C30863 * C31160 +
          ((C9383 * C8933 + C9384 * C8934 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C30811 * C8935) *
               C30968 -
           (C9384 * C8935 + C9383 * C8934 + C176 * C30811 * C8933) * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C3302 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C31174 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C3302) *
               C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C30811 * C8933 +
             C9862 * C8934 + C9863 * C8935) *
                C3302 -
            (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
               C31137) *
              C2648 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C3302) *
               C31174 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C3302 -
            (C10695 * C8935 + C9540 * C8934 + C9539 * C8933) * C30968) *
               C31162 +
           ((C10109 * C8933 + C10117 * C8934 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C30811 * C8935) *
                C30968 -
            (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1436 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C1438 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C30881 * C31147) *
              C31092 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1437 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1436 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 * C1438 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                C104) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31106 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30926) *
              C671 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30926 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31106) *
              C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31106 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30926) *
              C673 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) * C104) *
               C31060 * C30881 * C30926 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
               C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C671 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31106) *
              C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C673 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1437 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C1438 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C31092 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1437 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C1438 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C31106 -
           ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C30811 * C8935 +
            (C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C30811 *
                C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C30926) *
              C671 +
          ((C372 * C30811 * C8933 + C982 * C30811 * C8934 +
            C2212 * C30811 * C8935) *
               C30881 * C30926 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C31106) *
              C672 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C31106 -
           (C2211 * C30811 * C8935 + C983 * C30811 * C8934 +
            C371 * C30811 * C8933) *
               C30881 * C30926) *
              C673 +
          ((C375 * C30811 * C8933 + C984 * C30811 * C8934 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                C30811 * C8935) *
               C30881 * C30926 -
           (C571 * C30811 * C8935 + C570 * C30811 * C8934 +
            C176 * C30811 * C8933) *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C1436 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C30881 * C1438 -
           ((C113 * C5628 - C114 * C5625 - C113 * C5629 + C31046 * C5634) *
                C30811 * C8935 +
            (C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C30811 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C30881 * C31147) *
              C31092 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C1437 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C1436 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C1438 +
           (C1460 * C30811 * C8933 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C30811 * C8934 +
            (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                C30811 * C8935) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31107 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C1436 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30968 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31107) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C31107 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30968) *
              C1438 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                C104) *
               C31060 * C30968 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30926) *
              C291 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C292 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C31106 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30926) *
              C291 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C292 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C31107 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C1436 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31107) *
              C1437 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31107 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C1438 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31107 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C31106 +
           ((C9549 * C8933 + C9550 * C8934 +
             (C113 * C2433 - C114 * C2430 - C113 * C2434 + C31046 * C2439) *
                 C30811 * C8935) *
                C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31107) *
               C30926) *
              C291 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
               C31106 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31107 -
            ((C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                 C30811 * C8935 +
             C9540 * C8934 + C9539 * C8933) *
                C30968) *
               C30926) *
              C292 +
          (((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31107 -
            (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
               C31106 +
           ((C9541 * C8933 + C9542 * C8934 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                 C30811 * C8935) *
                C30968 -
            (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31107 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C1436 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C31107) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C31107 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
              C1438 +
          ((C10230 * C8933 + C10231 * C8934 +
            (C113 * C6636 - C114 * C6635 - C113 * C6637 + C31046 * C6638) *
                C30811 * C8935) *
               C30968 -
           (C10231 * C8935 + C10230 * C8934 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C30811 * C8933) *
               C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                   C102 +
               C174 * C103 + C175 * C104) *
                  C31060 * C30881 * C30863 * C108 -
              (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                  C30863 * C109 +
              (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                  C30863 * C110 -
              (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
                  C30863 * C111 +
              (C177 * C102 + C178 * C103 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) *
                   C104) *
                  C31060 * C30881 * C30863 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C31174 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C31162 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C30881 * C31137) *
                  C291 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C31162 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C31174 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
                   C31137) *
                  C292 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                   C31174 -
               ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) *
                    C104 +
                C375 * C103 + C371 * C102) *
                   C31060 * C30881 * C31162 +
               (C374 * C102 + C376 * C103 +
                (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) *
                    C104) *
                   C31060 * C30881 * C31137) *
                  C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31175 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31164 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C30863 * C291 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31164 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31175 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
              C30863 * C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31175 -
           ((C113 * C515 - C114 * C497 - C113 * C516 + C31046 * C527) * C104 +
            C570 * C103 + C566 * C102) *
               C31060 * C31164 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31175 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31164 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C1094 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C31164 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31175 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31140) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C31175 -
           ((C113 * C1317 - C114 * C1305 - C113 * C1318 + C31046 * C1332) *
                C104 +
            (C113 * C1319 - C114 * C1306 - C113 * C1320 + C31046 * C1333) *
                C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C31164 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C291 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C31164 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31175 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31175 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C31164 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C1094 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C31164 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31175 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C1095 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31175 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C31164 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
               C8934 +
           (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
               C8935) *
              C30881 * C30863 * C108 -
          (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
           C174 * C30811 * C8933) *
              C30881 * C30863 * C109 +
          (C175 * C30811 * C8933 + C566 * C30811 * C8934 +
           C569 * C30811 * C8935) *
              C30881 * C30863 * C110 -
          (C571 * C30811 * C8935 + C570 * C30811 * C8934 +
           C176 * C30811 * C8933) *
              C30881 * C30863 * C111 +
          (C177 * C30811 * C8933 + C797 * C30811 * C8934 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C30811 *
               C8935) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
                C8934 +
            (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
                C8935) *
               C30881 * C31174 -
           ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C30811 * C8935 +
            (C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C30811 *
                C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C291 +
          ((C372 * C30811 * C8933 + C982 * C30811 * C8934 +
            C2212 * C30811 * C8935) *
               C30881 * C31162 -
           (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
            C174 * C30811 * C8933) *
               C30881 * C31174 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C292 +
          ((C175 * C30811 * C8933 + C566 * C30811 * C8934 +
            C569 * C30811 * C8935) *
               C30881 * C31174 -
           (C2211 * C30811 * C8935 + C983 * C30811 * C8934 +
            C371 * C30811 * C8933) *
               C30881 * C31162 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31175 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31164 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C30863 * C291 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C31164 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31175 -
           ((C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
                C30811 * C8935 +
            C9171 * C8934 + C9170 * C8933) *
               C31140) *
              C30863 * C292 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31175 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C31164 +
           (C9173 * C8933 + C9174 * C8934 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                C30811 * C8935) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C1094 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31171 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C1095 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C1094 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C31158 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C1094 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C1095 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           C9184 * C8934 + C9185 * C8935) *
              C30881 * C1162 -
          (C9550 * C8935 + C9549 * C8934 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
               C8933) *
              C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
               C8933 +
           (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
               C30811 * C8934 +
           (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
               C30811 * C8935) *
              C30881 * C1164 -
          ((C113 * C5628 - C114 * C5625 - C113 * C5629 + C31046 * C5634) *
               C30811 * C8935 +
           (C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
               C30811 * C8934 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C30811 * C8933) *
              C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C30811 * C8933 +
           (C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
               C30811 * C8934 +
           (C113 * C5632 - C114 * C5627 - C113 * C5633 + C31046 * C5636) *
               C30811 * C8935) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31175 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C31164 +
           (C9185 * C8933 + C9186 * C8934 +
            (C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
                C30811 * C8935) *
               C31140) *
              C1094 +
          ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C31164 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C31175 -
           ((C113 * C6278 - C114 * C6274 - C113 * C6279 + C31046 * C6283) *
                C30811 * C8935 +
            C9861 * C8934 + C9550 * C8933) *
               C31140) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            C9862 * C8934 + C9863 * C8935) *
               C31175 -
           (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C31164 +
           (C9863 * C8933 + C9864 * C8934 +
            (C113 * C6280 - C114 * C6275 - C113 * C6281 + C31046 * C6284) *
                C30811 * C8935) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C1094 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C31107 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C31137) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C1094 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C1095 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31107 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C30863 * C671 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
              C30863 * C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
              C30863 * C673 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) * C104) *
               C31060 * C30968 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C671 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31107) *
              C30863 * C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31107 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C673 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C1094 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C1095 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C31107 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C1094 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C1095 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C31107 -
           (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
              C30863 * C671 +
          ((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
              C30863 * C672 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C31107 -
           (C9174 * C8935 + C9173 * C8934 + C9172 * C8933) * C30968) *
              C30863 * C673 +
          ((C9383 * C8933 + C9384 * C8934 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C30811 * C8935) *
               C30968 -
           (C9384 * C8935 + C9383 * C8934 + C176 * C30811 * C8933) * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C30811 * C8933 +
             C9184 * C8934 + C9185 * C8935) *
                C31107 -
            (C9186 * C8935 + C9185 * C8934 + C9184 * C8933) * C30968) *
               C1094 +
           ((C9549 * C8933 + C9550 * C8934 + C9861 * C8935) * C30968 -
            (C9550 * C8935 + C9549 * C8934 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C30811 * C8933) *
                C31107) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C30811 * C8933 +
             C9862 * C8934 + C9863 * C8935) *
                C31107 -
            (C9864 * C8935 + C9863 * C8934 + C9862 * C8933) * C30968) *
               C31137) *
              C31092 +
          (((C9169 * C8933 + C9170 * C8934 + C9171 * C8935) * C30968 -
            (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C31107) *
               C1094 +
           ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C31107 -
            ((C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                 C30811 * C8935 +
             C9540 * C8934 + C9539 * C8933) *
                C30968) *
               C1095 +
           ((C10109 * C8933 + C10117 * C8934 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C30811 * C8935) *
                C30968 -
            (C10117 * C8935 + C10109 * C8934 + C373 * C30811 * C8933) *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31174 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31162 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31174 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31174 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C31060 * C30881 * C31162 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C30863 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C30863 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C30863 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 * C30863 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) * C104) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
               C8934 +
           (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
               C8935) *
              C30881 * C30863 * C108 -
          (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
           C174 * C30811 * C8933) *
              C30881 * C30863 * C109 +
          (C175 * C30811 * C8933 + C566 * C30811 * C8934 +
           C569 * C30811 * C8935) *
              C30881 * C30863 * C110 -
          (C571 * C30811 * C8935 + C570 * C30811 * C8934 +
           C176 * C30811 * C8933) *
              C30881 * C30863 * C111 +
          (C177 * C30811 * C8933 + C797 * C30811 * C8934 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C30811 *
               C8935) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C30811 *
                C8934 +
            (C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C30811 *
                C8935) *
               C30881 * C31174 -
           ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C30811 * C8935 +
            (C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C30811 *
                C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C291 +
          ((C372 * C30811 * C8933 + C982 * C30811 * C8934 +
            C2212 * C30811 * C8935) *
               C30881 * C31162 -
           (C568 * C30811 * C8935 + C567 * C30811 * C8934 +
            C174 * C30811 * C8933) *
               C30881 * C31174 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C292 +
          ((C175 * C30811 * C8933 + C566 * C30811 * C8934 +
            C569 * C30811 * C8935) *
               C30881 * C31174 -
           (C2211 * C30811 * C8935 + C983 * C30811 * C8934 +
            C371 * C30811 * C8933) *
               C30881 * C31162 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
                C8933 +
            C9184 * C8934 + C9185 * C8935) *
               C30881 * C1094 -
           (C9550 * C8935 + C9549 * C8934 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
                C8933) *
               C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
                C8933 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C30811 * C8934 +
            (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31171 +
          ((C372 * C30811 * C8933 + C9539 * C8934 + C9540 * C8935) * C30881 *
               C1095 -
           (C9170 * C8935 + C9169 * C8934 + C174 * C30811 * C8933) * C30881 *
               C1094 -
           ((C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C30811 * C8935 +
            C1624 * C30811 * C8934 + C373 * C30811 * C8933) *
               C30881 * C31137) *
              C31158 +
          ((C175 * C30811 * C8933 + C9172 * C8934 + C9173 * C8935) * C30881 *
               C1094 -
           (C9542 * C8935 + C9541 * C8934 + C371 * C30811 * C8933) * C30881 *
               C1095 +
           (C374 * C30811 * C8933 + C1623 * C30811 * C8934 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C30811 * C8935) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C30811 *
               C8933 +
           C9184 * C8934 + C9185 * C8935) *
              C30881 * C1162 -
          (C9550 * C8935 + C9549 * C8934 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C30811 *
               C8933) *
              C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C30811 *
               C8933 +
           (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
               C30811 * C8934 +
           (C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
               C30811 * C8935) *
              C30881 * C1164 -
          ((C113 * C5628 - C114 * C5625 - C113 * C5629 + C31046 * C5634) *
               C30811 * C8935 +
           (C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
               C30811 * C8934 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C30811 * C8933) *
              C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C30811 * C8933 +
           (C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
               C30811 * C8934 +
           (C113 * C5632 - C114 * C5627 - C113 * C5633 + C31046 * C5636) *
               C30811 * C8935) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                         C13231 +
                     C174 * C13232) *
                        C18965 +
                    (C19260 + C19261) * C18966) *
                       C30881 * C30922 -
                   ((C19729 + C19728) * C18966 +
                    (C372 * C13232 +
                     (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                         C13231) *
                        C18965) *
                       C30881 * C30929 +
                   (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                         C13231 +
                     C373 * C13232) *
                        C18965 +
                    (C20110 + C20111) * C18966) *
                       C30881 * C2908) *
                      C30840 +
                  (((C372 * C13231 + C371 * C13232) * C18965 +
                    (C19730 + C19731) * C18966) *
                       C30881 * C30929 -
                   ((C19265 + C19264) * C18966 +
                    (C175 * C13232 + C174 * C13231) * C18965) *
                       C30881 * C30922 -
                   ((C20446 + C20445) * C18966 +
                    (C374 * C13232 + C373 * C13231) * C18965) *
                       C30881 * C2908) *
                      C30849 +
                  (((C175 * C13231 + C176 * C13232) * C18965 +
                    (C19268 + C19269) * C18966) *
                       C30881 * C30922 -
                   ((C19733 + C19732) * C18966 +
                    (C375 * C13232 + C371 * C13231) * C18965) *
                       C30881 * C30929 +
                   ((C374 * C13231 + C376 * C13232) * C18965 +
                    (C1623 * C13231 + (C113 * C1607 - C114 * C1606 -
                                       C113 * C1608 + C31046 * C1609) *
                                          C13232) *
                        C18966) *
                       C30881 * C2908) *
                      C2911)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31107 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C30922 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31107) *
               C30929 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                  C13231 +
              C373 * C13232) *
                 C18965 +
             (C20110 + C20111) * C18966) *
                C31107 -
            ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) *
                C30968) *
               C2908) *
              C2648 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31107) *
               C30922 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31107 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C30929 +
           (((C20445 + C20446) * C18965 +
             (C10116 * C13231 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C20446 + C20445) * C18966 +
             (C374 * C13232 + C373 * C13231) * C18965) *
                C31107) *
               C2908) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C31181 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C31177 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C30881 * C31167 -
           ((C20578 + C20577) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C30881 * C31147) *
              C2648 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C31177 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31181 -
           ((C20446 + C20445) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31167 +
           ((C1460 * C13231 + C1459 * C13232) * C18965 +
            (C20250 * C13231 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                 C13232) *
                C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C2540 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C30926) *
              C31180 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C30926 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C2540) *
              C31173 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C2540 -
           ((C19733 + C19732) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C30926) *
              C31160 +
          (((C375 * C13231 + C686 * C13232) * C18965 +
            (C984 * C13231 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) *
                 C13232) *
                C18966) *
               C30881 * C30926 -
           ((C19533 + C19532) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31175 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31164 +
            ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) *
                C31140) *
               C2540 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C31164 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31175 -
            ((C21415 + C21416) * C18966 + (C20109 + C20108) * C18965) *
                C31140) *
               C30926) *
              C2648 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C31164 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31175 -
            ((C21283 + C21284) * C18966 + (C19267 + C19266) * C18965) *
                C31140) *
               C2540 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31175 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) * C31164 +
            ((C21152 + C21151) * C18965 +
             (C10694 * C13231 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                  C13232) *
                 C18966) *
                C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31107 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C2540 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31107) *
               C30926) *
              C30840 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31107) *
               C2540 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31107 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C30926) *
              C30849 +
          ((((C175 * C13231 + C176 * C13232) * C18965 +
             (C19268 + C19269) * C18966) *
                C31107 -
            ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) *
                C30968) *
               C2540 +
           (((C19732 + C19733) * C18965 +
             (C2211 * C13231 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C19733 + C19732) * C18966 +
             (C375 * C13232 + C371 * C13231) * C18965) *
                C31107) *
               C30926) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C2540 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C30926) *
              C31180 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C30926 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C2540) *
              C31173 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C2540 -
           ((C19733 + C19732) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C30926) *
              C31160 +
          (((C375 * C13231 + C686 * C13232) * C18965 +
            (C984 * C13231 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) *
                 C13232) *
                C18966) *
               C30881 * C30926 -
           ((C19533 + C19532) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C31181 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C31177 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C30881 * C31167 -
           ((C20578 + C20577) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C30881 * C31147) *
              C2648 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C31177 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31181 -
           ((C20446 + C20445) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31167 +
           ((C1460 * C13231 + C1459 * C13232) * C18965 +
            (C20250 * C13231 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                 C13232) *
                C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C3302 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C30922 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C3302) *
               C30929 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                  C13231 +
              C373 * C13232) *
                 C18965 +
             (C20110 + C20111) * C18966) *
                C3302 -
            ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) *
                C30968) *
               C2908) *
              C31092 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C3302) *
               C30922 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C3302 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C30929 +
           (((C20445 + C20446) * C18965 +
             (C10116 * C13231 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C20446 + C20445) * C18966 +
             (C374 * C13232 + C373 * C13231) * C18965) *
                C3302) *
               C2908) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30964 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30971 +
           ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C3810) *
              C30922 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30971 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30964 -
           ((C21415 + C21416) * C18966 + (C20109 + C20108) * C18965) * C3810) *
              C30929 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C30964 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C30971 +
           ((C20113 + C20112) * C18965 +
            (C9860 * C13231 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C13232) *
                C18966) *
               C3810) *
              C2908) *
         C30835) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C3302 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C31181 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C3302) *
              C31177 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C3302 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C30968) *
              C31167 +
          (((C20577 + C20578) * C18965 +
            (C10229 * C13231 +
             (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                 C13232) *
                C18966) *
               C30968 -
           ((C20578 + C20577) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C3302 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C2540 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C3302) *
               C30926) *
              C31171 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C3302) *
               C2540 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C3302 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C30926) *
              C31158 +
          ((((C175 * C13231 + C176 * C13232) * C18965 +
             (C19268 + C19269) * C18966) *
                C3302 -
            ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) *
                C30968) *
               C2540 +
           (((C19732 + C19733) * C18965 +
             (C2211 * C13231 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C19733 + C19732) * C18966 +
             (C375 * C13232 + C371 * C13231) * C18965) *
                C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31182 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31179 +
           ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C31170 -
           ((C20955 + C20956) * C18966 + (C20954 + C20953) * C18965) * C31153) *
              C2540 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C31179 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C31182 -
           ((C21415 + C21416) * C18966 + (C20109 + C20108) * C18965) * C31170 +
           ((C21416 + C21415) * C18965 +
            (C10914 * C13231 +
             (C113 * C10684 - C114 * C10683 - C113 * C10685 + C31046 * C10686) *
                 C13232) *
                C18966) *
               C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C30964 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30971 +
            ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C3810) *
               C2540 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30971 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C30964 -
            ((C21415 + C21416) * C18966 + (C20109 + C20108) * C18965) * C3810) *
               C30926) *
              C31092 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30971 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C30964 -
            ((C21283 + C21284) * C18966 + (C19267 + C19266) * C18965) * C3810) *
               C2540 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C30964 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) * C30971 +
            ((C21152 + C21151) * C18965 +
             (C10694 * C13231 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                  C13232) *
                 C18966) *
                C3810) *
               C30926) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C3302 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C2540 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C3302) *
               C30926) *
              C31171 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C3302) *
               C2540 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C3302 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C30926) *
              C31158 +
          ((((C175 * C13231 + C176 * C13232) * C18965 +
             (C19268 + C19269) * C18966) *
                C3302 -
            ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) *
                C30968) *
               C2540 +
           (((C19732 + C19733) * C18965 +
             (C2211 * C13231 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C19733 + C19732) * C18966 +
             (C375 * C13232 + C371 * C13231) * C18965) *
                C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C3302 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C31181 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C3302) *
              C31177 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C3302 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C30968) *
              C31167 +
          (((C20577 + C20578) * C18965 +
            (C10229 * C13231 +
             (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                 C13232) *
                C18966) *
               C30968 -
           ((C20578 + C20577) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C1436 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C1437 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C30881 * C1438 -
           ((C20250 * C13232 + C10228 * C13231) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C30881 * C31147) *
              C31092 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C1437 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C1436 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C1438 +
           ((C1460 * C13231 + C1459 * C13232) * C18965 +
            (C20250 * C13231 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                 C13232) *
                C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C31106 -
           ((C982 * C13232 + C9547 * C13231) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C30926) *
              C671 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C982 * C13231 + C983 * C13232) * C18966) *
               C30881 * C30926 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31106) *
              C672 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C31106 -
           ((C984 * C13232 + C983 * C13231) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C30926) *
              C673 +
          (((C375 * C13231 + C686 * C13232) * C18965 +
            (C984 * C13231 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) *
                 C13232) *
                C18966) *
               C30881 * C30926 -
           ((C797 * C13232 + C570 * C13231) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C1844 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C1845 +
            ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) *
                C31140) *
               C31106 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C1845 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C1844 -
            ((C10694 * C13232 + C9857 * C13231) * C18966 +
             (C20109 + C20108) * C18965) *
                C31140) *
               C30926) *
              C31092 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C1845 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C1844 -
            ((C2331 * C13232 + C2332 * C13231) * C18966 +
             (C19267 + C19266) * C18965) *
                C31140) *
               C31106 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C1844 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) * C1845 +
            ((C21152 + C21151) * C18965 +
             (C10694 * C13231 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                  C13232) *
                 C18966) *
                C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31107 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C1436 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C31107) *
              C1437 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C31107 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C30968) *
              C1438 +
          (((C20577 + C20578) * C18965 +
            (C10229 * C13231 +
             (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                 C13232) *
                C18966) *
               C30968 -
           ((C20578 + C20577) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31107 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C31106 +
           (((C19728 + C19729) * C18965 +
             (C9548 * C13231 + C2212 * C13232) * C18966) *
                C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31107) *
               C30926) *
              C291 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31107) *
               C31106 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31107 -
            ((C2211 * C13232 + C2212 * C13231) * C18966 +
             (C19731 + C19730) * C18965) *
                C30968) *
               C30926) *
              C292 +
          ((((C175 * C13231 + C176 * C13232) * C18965 +
             (C19268 + C19269) * C18966) *
                C31107 -
            ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) *
                C30968) *
               C31106 +
           (((C19732 + C19733) * C18965 +
             (C2211 * C13231 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C19733 + C19732) * C18966 +
             (C375 * C13232 + C371 * C13231) * C18965) *
                C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C2310 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C2311 +
           ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C2312 -
           ((C20955 + C20956) * C18966 + (C20954 + C20953) * C18965) * C31153) *
              C31106 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C2311 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C2310 -
           ((C21415 + C21416) * C18966 + (C20109 + C20108) * C18965) * C2312 +
           ((C21416 + C21415) * C18965 +
            (C10914 * C13231 +
             (C113 * C10684 - C114 * C10683 - C113 * C10685 + C31046 * C10686) *
                 C13232) *
                C18966) *
               C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C13231 +
                C174 * C13232) *
                   C18965 +
               (C9181 * C13231 + C567 * C13232) * C18966) *
                  C30881 * C30863 * C108 -
              ((C566 * C13232 + C567 * C13231) * C18966 +
               (C175 * C13232 + C174 * C13231) * C18965) *
                  C30881 * C30863 * C109 +
              ((C175 * C13231 + C176 * C13232) * C18965 +
               (C566 * C13231 + C570 * C13232) * C18966) *
                  C30881 * C30863 * C110 -
              ((C797 * C13232 + C570 * C13231) * C18966 +
               (C177 * C13232 + C176 * C13231) * C18965) *
                  C30881 * C30863 * C111 +
              ((C177 * C13231 + C178 * C13232) * C18965 +
               (C797 * C13231 +
                (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) *
                    C13232) *
                   C18966) *
                  C30881 * C30863 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                     C13231 +
                 C174 * C13232) *
                    C18965 +
                (C9181 * C13231 + C567 * C13232) * C18966) *
                   C30881 * C31174 -
               ((C982 * C13232 + C9547 * C13231) * C18966 +
                (C372 * C13232 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                     C13231) *
                    C18965) *
                   C30881 * C31162 +
               (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                     C13231 +
                 C373 * C13232) *
                    C18965 +
                (C9858 * C13231 + C1624 * C13232) * C18966) *
                   C30881 * C31137) *
                  C291 +
              (((C372 * C13231 + C371 * C13232) * C18965 +
                (C982 * C13231 + C983 * C13232) * C18966) *
                   C30881 * C31162 -
               ((C566 * C13232 + C567 * C13231) * C18966 +
                (C175 * C13232 + C174 * C13231) * C18965) *
                   C30881 * C31174 -
               ((C1623 * C13232 + C1624 * C13231) * C18966 +
                (C374 * C13232 + C373 * C13231) * C18965) *
                   C30881 * C31137) *
                  C292 +
              (((C175 * C13231 + C176 * C13232) * C18965 +
                (C566 * C13231 + C570 * C13232) * C18966) *
                   C30881 * C31174 -
               ((C984 * C13232 + C983 * C13231) * C18966 +
                (C375 * C13232 + C371 * C13231) * C18965) *
                   C30881 * C31162 +
               ((C374 * C13231 + C376 * C13232) * C18965 +
                (C1623 * C13231 +
                 (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                     C13232) *
                    C18966) *
                   C30881 * C31137) *
                  C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31175 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31164 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C30863 * C291 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C31164 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C31175 -
           ((C2331 * C13232 + C2332 * C13231) * C18966 +
            (C19267 + C19266) * C18965) *
               C31140) *
              C30863 * C292 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C31175 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C31164 +
           ((C19271 + C19270) * C18965 +
            (C2331 * C13231 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                 C13232) *
                C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C1094 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C1095 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C1094 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C1094 -
           ((C19733 + C19732) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C1095 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C19260 + C19261) * C18966) *
              C30881 * C1162 -
          ((C19729 + C19728) * C18966 +
           (C372 * C13232 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                C13231) *
               C18965) *
              C30881 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C13231 +
            C373 * C13232) *
               C18965 +
           (C9858 * C13231 + C1624 * C13232) * C18966) *
              C30881 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C13232 +
            C10228 * C13231) *
               C18966 +
           (C1460 * C13232 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C13231) *
               C18965) *
              C30881 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
                C13231 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
                C13232) *
               C18965 +
           ((C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
                C13231 +
            (C113 * C5886 - C114 * C5885 - C113 * C5887 + C31046 * C5888) *
                C13232) *
               C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31175 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31164 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C1094 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C31164 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C31175 -
           ((C10694 * C13232 + C9857 * C13231) * C18966 +
            (C20109 + C20108) * C18965) *
               C31140) *
              C1095 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C31175 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C31164 +
           ((C20113 + C20112) * C18965 +
            (C9860 * C13231 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C13232) *
                C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C1844 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C1845 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C30863 * C31171 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C1845 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C1844 -
           ((C2331 * C13232 + C2332 * C13231) * C18966 +
            (C19267 + C19266) * C18965) *
               C31140) *
              C30863 * C31158 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C1844 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C1845 +
           ((C19271 + C19270) * C18965 +
            (C2331 * C13231 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                 C13232) *
                C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C1844 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C1845 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C31174 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C1845 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C1844 -
           ((C10694 * C13232 + C9857 * C13231) * C18966 +
            (C20109 + C20108) * C18965) *
               C31140) *
              C31162 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C1844 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C1845 +
           ((C20113 + C20112) * C18965 +
            (C9860 * C13231 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C13232) *
                C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C19260 + C19261) * C18966) *
              C2019 -
          ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C2020 +
          ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C2021 -
          ((C20955 + C20956) * C18966 + (C20954 + C20953) * C18965) * C2022 +
          ((C20956 + C20955) * C18965 +
           (C10535 * C13231 +
            (C113 * C10794 - C114 * C10793 - C113 * C10795 + C31046 * C10796) *
                C13232) *
               C18966) *
              C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31107 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C1094 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31107) *
               C1095 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                  C13231 +
              C373 * C13232) *
                 C18965 +
             (C20110 + C20111) * C18966) *
                C31107 -
            ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) *
                C30968) *
               C31137) *
              C31092 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31107) *
               C1094 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31107 -
            ((C2211 * C13232 + C2212 * C13231) * C18966 +
             (C19731 + C19730) * C18965) *
                C30968) *
               C1095 +
           (((C20445 + C20446) * C18965 +
             (C10116 * C13231 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C20446 + C20445) * C18966 +
             (C374 * C13232 + C373 * C13231) * C18965) *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31107 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C30863 * C671 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C31107) *
              C30863 * C672 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C31107 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C30968) *
              C30863 * C673 +
          (((C19532 + C19533) * C18965 +
            (C571 * C13231 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) *
                 C13232) *
                C18966) *
               C30968 -
           ((C19533 + C19532) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C2310 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C2311 +
           ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C2312 -
           ((C20955 + C20956) * C18966 + (C20954 + C20953) * C18965) * C31153) *
              C30863 * C31092 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C2311 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C2310 -
           ((C21283 + C21284) * C18966 + (C19267 + C19266) * C18965) * C2312 +
           ((C21284 + C21283) * C18965 +
            (C10804 * C13231 +
             (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                 C13232) *
                C18966) *
               C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C9181 * C13231 + C567 * C13232) * C18966) *
               C30881 * C31174 -
           ((C982 * C13232 + C9547 * C13231) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C291 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C982 * C13231 + C983 * C13232) * C18966) *
               C30881 * C31162 -
           ((C566 * C13232 + C567 * C13231) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31174 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C292 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C566 * C13231 + C570 * C13232) * C18966) *
               C30881 * C31174 -
           ((C984 * C13232 + C983 * C13231) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C31162 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C9181 * C13231 + C567 * C13232) * C18966) *
              C30881 * C30863 * C108 -
          ((C566 * C13232 + C567 * C13231) * C18966 +
           (C175 * C13232 + C174 * C13231) * C18965) *
              C30881 * C30863 * C109 +
          ((C175 * C13231 + C176 * C13232) * C18965 +
           (C566 * C13231 + C570 * C13232) * C18966) *
              C30881 * C30863 * C110 -
          ((C797 * C13232 + C570 * C13231) * C18966 +
           (C177 * C13232 + C176 * C13231) * C18965) *
              C30881 * C30863 * C111 +
          ((C177 * C13231 + C178 * C13232) * C18965 +
           (C797 * C13231 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) *
                C13232) *
               C18966) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C1094 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C1095 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C1094 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C1094 -
           ((C19733 + C19732) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C1095 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C19260 + C19261) * C18966) *
              C30881 * C1162 -
          ((C19729 + C19728) * C18966 +
           (C372 * C13232 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                C13231) *
               C18965) *
              C30881 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C13231 +
            C373 * C13232) *
               C18965 +
           (C9858 * C13231 + C1624 * C13232) * C18966) *
              C30881 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C13232 +
            C10228 * C13231) *
               C18966 +
           (C1460 * C13232 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C13231) *
               C18965) *
              C30881 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
                C13231 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
                C13232) *
               C18965 +
           ((C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
                C13231 +
            (C113 * C5886 - C114 * C5885 - C113 * C5887 + C31046 * C5888) *
                C13232) *
               C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C1844 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C1845 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C30863 * C31171 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C1845 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C1844 -
           ((C2331 * C13232 + C2332 * C13231) * C18966 +
            (C19267 + C19266) * C18965) *
               C31140) *
              C30863 * C31158 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C1844 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C1845 +
           ((C19271 + C19270) * C18965 +
            (C2331 * C13231 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                 C13232) *
                C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C1844 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C1845 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C31174 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C1845 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C1844 -
           ((C10694 * C13232 + C9857 * C13231) * C18966 +
            (C20109 + C20108) * C18965) *
               C31140) *
              C31162 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C1844 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C1845 +
           ((C20113 + C20112) * C18965 +
            (C9860 * C13231 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C13232) *
                C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C3302 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C31106 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C3302) *
               C30926) *
              C30840 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C3302) *
               C31106 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C3302 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C30926) *
              C30849 +
          ((((C175 * C13231 + C176 * C13232) * C18965 +
             (C19268 + C19269) * C18966) *
                C3302 -
            ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) *
                C30968) *
               C31106 +
           (((C19732 + C19733) * C18965 +
             (C2211 * C13231 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C19733 + C19732) * C18966 +
             (C375 * C13232 + C371 * C13231) * C18965) *
                C3302) *
               C30926) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C30964 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30971 +
            ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C3810) *
               C31106 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30971 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C30964 -
            ((C21415 + C21416) * C18966 + (C20109 + C20108) * C18965) * C3810) *
               C30926) *
              C2648 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30971 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C30964 -
            ((C21283 + C21284) * C18966 + (C19267 + C19266) * C18965) * C3810) *
               C31106 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C30964 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) * C30971 +
            ((C21152 + C21151) * C18965 +
             (C10694 * C13231 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                  C13232) *
                 C18966) *
                C3810) *
               C30926) *
              C30846)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C3302 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C31174 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C3302) *
               C31162 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                  C13231 +
              C373 * C13232) *
                 C18965 +
             (C20110 + C20111) * C18966) *
                C3302 -
            ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) *
                C30968) *
               C31137) *
              C2648 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C3302) *
               C31174 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C3302 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C31162 +
           (((C20445 + C20446) * C18965 +
             (C10116 * C13231 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C20446 + C20445) * C18966 +
             (C374 * C13232 + C373 * C13231) * C18965) *
                C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C3302 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C30863 * C31180 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C3302) *
              C30863 * C31173 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C3302 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C30968) *
              C30863 * C31160 +
          (((C19532 + C19533) * C18965 +
            (C571 * C13231 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) *
                 C13232) *
                C18966) *
               C30968 -
           ((C19533 + C19532) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31182 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31179 +
           ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C31170 -
           ((C20955 + C20956) * C18966 + (C20954 + C20953) * C18965) * C31153) *
              C30863 * C2648 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C31179 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C31182 -
           ((C21283 + C21284) * C18966 + (C19267 + C19266) * C18965) * C31170 +
           ((C21284 + C21283) * C18965 +
            (C10804 * C13231 +
             (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
                 C13232) *
                C18966) *
               C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30964 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30971 +
           ((C19263 + C19262) * C18965 + (C20953 + C20954) * C18966) * C3810) *
              C30863 * C30840 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30971 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30964 -
           ((C21283 + C21284) * C18966 + (C19267 + C19266) * C18965) * C3810) *
              C30863 * C30849 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30964 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C30971 +
           ((C19271 + C19270) * C18965 +
            (C2331 * C13231 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                 C13232) *
                C18966) *
               C3810) *
              C30863 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C3302 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C30863 * C31180 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C3302) *
              C30863 * C31173 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C3302 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C30968) *
              C30863 * C31160 +
          (((C19532 + C19533) * C18965 +
            (C571 * C13231 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) *
                 C13232) *
                C18966) *
               C30968 -
           ((C19533 + C19532) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C3302 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C31174 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C3302) *
               C31162 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                  C13231 +
              C373 * C13232) *
                 C18965 +
             (C20110 + C20111) * C18966) *
                C3302 -
            ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) *
                C30968) *
               C31137) *
              C2648 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C3302) *
               C31174 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C3302 -
            ((C21151 + C21152) * C18966 + (C19731 + C19730) * C18965) *
                C30968) *
               C31162 +
           (((C20445 + C20446) * C18965 +
             (C10116 * C13231 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C20446 + C20445) * C18966 +
             (C374 * C13232 + C373 * C13231) * C18965) *
                C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C31106 -
           ((C982 * C13232 + C9547 * C13231) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C30926) *
              C671 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C982 * C13231 + C983 * C13232) * C18966) *
               C30881 * C30926 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31106) *
              C672 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C31106 -
           ((C984 * C13232 + C983 * C13231) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C30926) *
              C673 +
          (((C375 * C13231 + C686 * C13232) * C18965 +
            (C984 * C13231 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) *
                 C13232) *
                C18966) *
               C30881 * C30926 -
           ((C797 * C13232 + C570 * C13231) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C1436 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C1437 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C30881 * C1438 -
           ((C20250 * C13232 + C10228 * C13231) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C30881 * C31147) *
              C31092 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C1437 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C1436 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C1438 +
           ((C1460 * C13231 + C1459 * C13232) * C18965 +
            (C20250 * C13231 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                 C13232) *
                C18966) *
               C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31107 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C31106 +
           (((C19728 + C19729) * C18965 +
             (C9548 * C13231 + C2212 * C13232) * C18966) *
                C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31107) *
               C30926) *
              C291 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31107) *
               C31106 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31107 -
            ((C2211 * C13232 + C2212 * C13231) * C18966 +
             (C19731 + C19730) * C18965) *
                C30968) *
               C30926) *
              C292 +
          ((((C175 * C13231 + C176 * C13232) * C18965 +
             (C19268 + C19269) * C18966) *
                C31107 -
            ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) *
                C30968) *
               C31106 +
           (((C19732 + C19733) * C18965 +
             (C2211 * C13231 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C19733 + C19732) * C18966 +
             (C375 * C13232 + C371 * C13231) * C18965) *
                C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31107 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C1436 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C31107) *
              C1437 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C31107 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C30968) *
              C1438 +
          (((C20577 + C20578) * C18965 +
            (C10229 * C13231 +
             (C113 * C6432 - C114 * C6431 - C113 * C6433 + C31046 * C6434) *
                 C13232) *
                C18966) *
               C30968 -
           ((C20578 + C20577) * C18966 +
            (C1460 * C13232 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                 C13231) *
                C18965) *
               C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C9181 * C13231 + C567 * C13232) * C18966) *
               C30881 * C31174 -
           ((C982 * C13232 + C9547 * C13231) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C291 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C982 * C13231 + C983 * C13232) * C18966) *
               C30881 * C31162 -
           ((C566 * C13232 + C567 * C13231) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31174 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C292 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C566 * C13231 + C570 * C13232) * C18966) *
               C30881 * C31174 -
           ((C984 * C13232 + C983 * C13231) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C31162 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C9181 * C13231 + C567 * C13232) * C18966) *
              C30881 * C30863 * C108 -
          ((C566 * C13232 + C567 * C13231) * C18966 +
           (C175 * C13232 + C174 * C13231) * C18965) *
              C30881 * C30863 * C109 +
          ((C175 * C13231 + C176 * C13232) * C18965 +
           (C566 * C13231 + C570 * C13232) * C18966) *
              C30881 * C30863 * C110 -
          ((C797 * C13232 + C570 * C13231) * C18966 +
           (C177 * C13232 + C176 * C13231) * C18965) *
              C30881 * C30863 * C111 +
          ((C177 * C13231 + C178 * C13232) * C18965 +
           (C797 * C13231 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) *
                C13232) *
               C18966) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31175 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31164 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C30863 * C291 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C31164 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C31175 -
           ((C2331 * C13232 + C2332 * C13231) * C18966 +
            (C19267 + C19266) * C18965) *
               C31140) *
              C30863 * C292 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C31175 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C31164 +
           ((C19271 + C19270) * C18965 +
            (C2331 * C13231 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                 C13232) *
                C18966) *
               C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C1094 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C1095 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C1094 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C1094 -
           ((C19733 + C19732) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C1095 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C19260 + C19261) * C18966) *
              C30881 * C1162 -
          ((C19729 + C19728) * C18966 +
           (C372 * C13232 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                C13231) *
               C18965) *
              C30881 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C13231 +
            C373 * C13232) *
               C18965 +
           (C9858 * C13231 + C1624 * C13232) * C18966) *
              C30881 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C13232 +
            C10228 * C13231) *
               C18966 +
           (C1460 * C13232 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C13231) *
               C18965) *
              C30881 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
                C13231 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
                C13232) *
               C18965 +
           ((C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
                C13231 +
            (C113 * C5886 - C114 * C5885 - C113 * C5887 + C31046 * C5888) *
                C13232) *
               C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31175 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C31164 +
           ((C19263 + C19262) * C18965 +
            (C9183 * C13231 + C2332 * C13232) * C18966) *
               C31140) *
              C1094 +
          (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C31164 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C31175 -
           ((C10694 * C13232 + C9857 * C13231) * C18966 +
            (C20109 + C20108) * C18965) *
               C31140) *
              C1095 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C20110 + C20111) * C18966) *
               C31175 -
           ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) * C31164 +
           ((C20113 + C20112) * C18965 +
            (C9860 * C13231 +
             (C113 * C6534 - C114 * C6533 - C113 * C6535 + C31046 * C6536) *
                 C13232) *
                C18966) *
               C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C31107 -
           ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) * C30968) *
              C30863 * C671 +
          (((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C31107) *
              C30863 * C672 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C31107 -
           ((C19270 + C19271) * C18966 + (C19269 + C19268) * C18965) * C30968) *
              C30863 * C673 +
          (((C19532 + C19533) * C18965 +
            (C571 * C13231 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) *
                 C13232) *
                C18966) *
               C30968 -
           ((C19533 + C19532) * C18966 +
            (C177 * C13232 + C176 * C13231) * C18965) *
               C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                  C13231 +
              C174 * C13232) *
                 C18965 +
             (C19260 + C19261) * C18966) *
                C31107 -
            ((C19262 + C19263) * C18966 + (C19261 + C19260) * C18965) *
                C30968) *
               C1094 +
           (((C19728 + C19729) * C18965 + (C20108 + C20109) * C18966) * C30968 -
            ((C19729 + C19728) * C18966 +
             (C372 * C13232 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                  C13231) *
                 C18965) *
                C31107) *
               C1095 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                  C13231 +
              C373 * C13232) *
                 C18965 +
             (C20110 + C20111) * C18966) *
                C31107 -
            ((C20112 + C20113) * C18966 + (C20111 + C20110) * C18965) *
                C30968) *
               C31137) *
              C31092 +
          ((((C19264 + C19265) * C18965 + (C19266 + C19267) * C18966) * C30968 -
            ((C19265 + C19264) * C18966 +
             (C175 * C13232 + C174 * C13231) * C18965) *
                C31107) *
               C1094 +
           (((C372 * C13231 + C371 * C13232) * C18965 +
             (C19730 + C19731) * C18966) *
                C31107 -
            ((C2211 * C13232 + C2212 * C13231) * C18966 +
             (C19731 + C19730) * C18965) *
                C30968) *
               C1095 +
           (((C20445 + C20446) * C18965 +
             (C10116 * C13231 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                  C13232) *
                 C18966) *
                C30968 -
            ((C20446 + C20445) * C18966 +
             (C374 * C13232 + C373 * C13231) * C18965) *
                C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C9181 * C13231 + C567 * C13232) * C18966) *
              C30881 * C30863 * C108 -
          ((C566 * C13232 + C567 * C13231) * C18966 +
           (C175 * C13232 + C174 * C13231) * C18965) *
              C30881 * C30863 * C109 +
          ((C175 * C13231 + C176 * C13232) * C18965 +
           (C566 * C13231 + C570 * C13232) * C18966) *
              C30881 * C30863 * C110 -
          ((C797 * C13232 + C570 * C13231) * C18966 +
           (C177 * C13232 + C176 * C13231) * C18965) *
              C30881 * C30863 * C111 +
          ((C177 * C13231 + C178 * C13232) * C18965 +
           (C797 * C13231 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) *
                C13232) *
               C18966) *
              C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C9181 * C13231 + C567 * C13232) * C18966) *
               C30881 * C31174 -
           ((C982 * C13232 + C9547 * C13231) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C291 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C982 * C13231 + C983 * C13232) * C18966) *
               C30881 * C31162 -
           ((C566 * C13232 + C567 * C13231) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C31174 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C292 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C566 * C13231 + C570 * C13232) * C18966) *
               C30881 * C31174 -
           ((C984 * C13232 + C983 * C13231) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C31162 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                 C13231 +
             C174 * C13232) *
                C18965 +
            (C19260 + C19261) * C18966) *
               C30881 * C1094 -
           ((C19729 + C19728) * C18966 +
            (C372 * C13232 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                 C13231) *
                C18965) *
               C30881 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                 C13231 +
             C373 * C13232) *
                C18965 +
            (C9858 * C13231 + C1624 * C13232) * C18966) *
               C30881 * C31137) *
              C31171 +
          (((C372 * C13231 + C371 * C13232) * C18965 +
            (C19730 + C19731) * C18966) *
               C30881 * C1095 -
           ((C19265 + C19264) * C18966 +
            (C175 * C13232 + C174 * C13231) * C18965) *
               C30881 * C1094 -
           ((C1623 * C13232 + C1624 * C13231) * C18966 +
            (C374 * C13232 + C373 * C13231) * C18965) *
               C30881 * C31137) *
              C31158 +
          (((C175 * C13231 + C176 * C13232) * C18965 +
            (C19268 + C19269) * C18966) *
               C30881 * C1094 -
           ((C19733 + C19732) * C18966 +
            (C375 * C13232 + C371 * C13231) * C18965) *
               C30881 * C1095 +
           ((C374 * C13231 + C376 * C13232) * C18965 +
            (C1623 * C13231 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C13232) *
                C18966) *
               C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C13231 +
            C174 * C13232) *
               C18965 +
           (C19260 + C19261) * C18966) *
              C30881 * C1162 -
          ((C19729 + C19728) * C18966 +
           (C372 * C13232 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                C13231) *
               C18965) *
              C30881 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C13231 +
            C373 * C13232) *
               C18965 +
           (C9858 * C13231 + C1624 * C13232) * C18966) *
              C30881 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C13232 +
            C10228 * C13231) *
               C18966 +
           (C1460 * C13232 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C13231) *
               C18965) *
              C30881 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
                C13231 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
                C13232) *
               C18965 +
           ((C113 * C5630 - C114 * C5626 - C113 * C5631 + C31046 * C5635) *
                C13231 +
            (C113 * C5886 - C114 * C5885 - C113 * C5887 + C31046 * C5888) *
                C13232) *
               C18966) *
              C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C30922 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30929 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C2908) *
              C30840 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30929 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C30922 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C2908) *
              C30849 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C30922 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30929 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C2908) *
              C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C30922 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30929 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C2908) *
              C30840 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30929 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C30922 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C2908) *
              C30849 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C30922 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30929 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C2908) *
              C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C30922 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30929 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C31107 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C2908) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C30922 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30929 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C31107) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C30922 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30929 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C31107 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C2908) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C30922 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30929 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C31107) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31181 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31177 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31167 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C30881 * C31147) *
              C2648 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31177 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31181 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31167 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                C104) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C2540 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30926) *
              C31180 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30926 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C2540) *
              C31173 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C2540 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30926) *
              C31160 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) * C104) *
               C31060 * C30881 * C30926 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
               C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31175 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C31164 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C31140) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C31164 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31175 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C31140) *
               C30926) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31164 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31175 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31175 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C31164 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C31180 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C2540) *
              C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C31160 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31177 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31167 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C2648 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31177 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31167 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31175 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C31164 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C31140) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C31164 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31175 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C31140) *
               C30926) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C31164 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31175 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C31140) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31175 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C31164 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30926) *
              C30840 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C31107) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30926) *
              C30840 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C31107 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C31107) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C2540 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30926) *
              C31180 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30926 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C2540) *
              C31173 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C2540 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30926) *
              C31160 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) * C104) *
               C31060 * C30881 * C30926 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
               C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31181 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31177 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31167 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C30881 * C31147) *
              C2648 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31177 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31181 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31167 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                C104) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C31180 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C2540) *
              C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C2540 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C31160 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C2540) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31177 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31167 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C2648 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31177 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31181 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31167 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C30922 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30929 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C2908) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C30922 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30929 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C3302) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C30922 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30929 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C3302 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C2908) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C30922 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30929 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C3302) *
               C2908) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30964 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30971 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C3810) *
              C30922 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30971 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30964 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C3810) *
              C30929 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30964 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30971 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C3810) *
              C2908) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30964 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30971 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C3810) *
              C30922 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30971 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30964 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C3810) *
              C30929 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30964 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30971 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C3810) *
              C2908) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C31181 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30968 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C3302) *
              C31177 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C3302 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30968) *
              C31167 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                C104) *
               C31060 * C30968 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30926) *
              C31171 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31182 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31179 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31170 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C2540 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C31179 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31182 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31170 +
           ((C113 * C2433 - C114 * C2430 - C113 * C2434 + C31046 * C2439) *
                C102 +
            (C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                C103 +
            (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                C104) *
               C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31171 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C3302 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C31181 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C3302) *
              C31177 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C3302 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C31167 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31182 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31179 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31170 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C2540 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C31179 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31182 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31170 +
           (C4767 * C2433 - C4768 * C2430 - C4767 * C2434 + C4763 * C2439 +
            C4769 * C6276 - C4770 * C6273 - C4769 * C6277 + C4764 * C6282 +
            C4771 * C6636 - C4772 * C6635 - C4771 * C6637 + C4765 * C6638) *
               C30811 * C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C30964 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30971 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C3810) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30971 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C30964 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C3810) *
               C30926) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30971 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30964 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C3810) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30964 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30971 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C30964 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30971 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C3810) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30971 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C30964 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C3810) *
               C30926) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30971 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C30964 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C3810) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C30964 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30971 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30926) *
              C31171 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C31181 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30968 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C3302) *
              C31177 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C3302 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30968) *
              C31167 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                C104) *
               C31060 * C30968 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31171 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C2540 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C31158 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C3302 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C2540 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C3302) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C31181 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C3302) *
              C31177 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C3302 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C31167 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C3302) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1436 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C1438 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C30881 * C31147) *
              C31092 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1437 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1436 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 * C1438 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                C104) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31106 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30926) *
              C671 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30926 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31106) *
              C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31106 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30926) *
              C673 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) * C104) *
               C31060 * C30881 * C30926 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
               C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C1844 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C1845 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C31140) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C1845 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C1844 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C31140) *
               C30926) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C1845 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C1844 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C1844 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C1845 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C671 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31106) *
              C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C673 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1437 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C1438 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C31092 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1437 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C1438 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C1844 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C1845 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C31140) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C1845 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C1844 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C31140) *
               C30926) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C1845 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C1844 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C31140) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C1844 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C1845 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C31140) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31107 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C1436 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30968 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31107) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C31107 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30968) *
              C1438 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                C104) *
               C31060 * C30968 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30926) *
              C291 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C292 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C31106 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C2310 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C2311 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C2312 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C31106 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C2311 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C2310 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C2312 +
           ((C113 * C2433 - C114 * C2430 - C113 * C2434 + C31046 * C2439) *
                C102 +
            (C113 * C2435 - C114 * C2431 - C113 * C2436 + C31046 * C2440) *
                C103 +
            (C113 * C2437 - C114 * C2432 - C113 * C2438 + C31046 * C2441) *
                C104) *
               C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30926) *
              C291 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C292 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C31107 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C1436 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31107) *
              C1437 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31107 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C1438 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C2310 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C2311 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C2312 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C31106 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C2311 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C2310 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C2312 +
           (C4767 * C2433 - C4768 * C2430 - C4767 * C2434 + C4763 * C2439 +
            C4769 * C6276 - C4770 * C6273 - C4769 * C6277 + C4764 * C6282 +
            C4771 * C6636 - C4772 * C6635 - C4771 * C6637 + C4765 * C6638) *
               C30811 * C31060 * C31153) *
              C30926) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                   C102 +
               C174 * C103 + C175 * C104) *
                  C31060 * C30881 * C30863 * C108 -
              (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                  C30863 * C109 +
              (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                  C30863 * C110 -
              (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
                  C30863 * C111 +
              (C177 * C102 + C178 * C103 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) *
                   C104) *
                  C31060 * C30881 * C30863 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C31060 * C30881 * C31174 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) *
                    C102) *
                   C31060 * C30881 * C31162 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C31060 * C30881 * C31137) *
                  C291 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
                   C31162 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
                   C31174 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
                   C31137) *
                  C292 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
                   C31174 -
               ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) *
                    C104 +
                C375 * C103 + C371 * C102) *
                   C31060 * C30881 * C31162 +
               (C374 * C102 + C376 * C103 +
                (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) *
                    C104) *
                   C31060 * C30881 * C31137) *
                  C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31175 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31164 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C30863 * C291 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31164 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31175 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
              C30863 * C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31175 -
           ((C113 * C515 - C114 * C497 - C113 * C516 + C31046 * C527) * C104 +
            C570 * C103 + C566 * C102) *
               C31060 * C31164 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31175 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31164 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C1094 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C31164 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31175 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31140) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C31175 -
           ((C113 * C1317 - C114 * C1305 - C113 * C1318 + C31046 * C1332) *
                C104 +
            (C113 * C1319 - C114 * C1306 - C113 * C1320 + C31046 * C1333) *
                C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C31164 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C30863 * C31171 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C1845 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C1844 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
              C30863 * C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C1844 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C1845 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C31174 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C1845 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C1844 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31140) *
              C31162 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C1844 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C1845 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C2019 -
          (C566 * C104 + C567 * C103 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
              C31060 * C2020 +
          ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
           C568 * C103 + C569 * C104) *
              C31060 * C2021 -
          ((C113 * C2030 - C114 * C2024 - C113 * C2031 + C31046 * C2042) *
               C104 +
           (C113 * C2032 - C114 * C2025 - C113 * C2033 + C31046 * C2043) *
               C103 +
           (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
               C102) *
              C31060 * C2022 +
          ((C113 * C2036 - C114 * C2027 - C113 * C2037 + C31046 * C2045) *
               C102 +
           (C113 * C2038 - C114 * C2028 - C113 * C2039 + C31046 * C2046) *
               C103 +
           (C113 * C2040 - C114 * C2029 - C113 * C2041 + C31046 * C2047) *
               C104) *
              C31060 * C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C291 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C31164 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31175 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31175 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C31164 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C1094 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C31164 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31175 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C1095 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31175 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C31164 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C31171 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C1845 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C1844 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C1844 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C1845 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C31174 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C1845 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C1844 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C31162 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C1844 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C1845 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C2019 -
          (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
           C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
           C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
              C30811 * C31060 * C2020 +
          (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
           C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
           C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
              C30811 * C31060 * C2021 -
          (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
           C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
           C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
              C30811 * C31060 * C2022 +
          (C4767 * C2036 - C4768 * C2027 - C4767 * C2037 + C4763 * C2045 +
           C4769 * C6278 - C4770 * C6274 - C4769 * C6279 + C4764 * C6283 +
           C4771 * C6280 - C4772 * C6275 - C4771 * C6281 + C4765 * C6284) *
              C30811 * C31060 * C2023) *
         C30863 * C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C1094 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C31107 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C31137) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C1094 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C1095 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31107 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C30863 * C671 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
              C30863 * C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
              C30863 * C673 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) * C104) *
               C31060 * C30968 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C2310 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C2311 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C2312 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C30863 * C31092 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C2311 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C2310 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C2312 +
           (C2332 * C102 + C2331 * C103 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C104) *
               C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C671 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31107) *
              C30863 * C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31107 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C673 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C1094 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C1095 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C31107 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C1094 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C1095 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C2310 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C2311 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C2312 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C30863 * C31092 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C2311 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C2310 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C2312 +
           (C4767 * C2032 - C4768 * C2025 - C4767 * C2033 + C4763 * C2043 +
            C4769 * C2435 - C4770 * C2431 - C4769 * C2436 + C4764 * C2440 +
            C4771 * C6534 - C4772 * C6533 - C4771 * C6535 + C4765 * C6536) *
               C30811 * C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31174 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31162 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31174 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31174 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C31060 * C30881 * C31162 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C30863 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C30863 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C30863 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 * C30863 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) * C104) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C30863 * C31171 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C1845 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C1844 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
              C30863 * C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C1844 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C1845 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C31174 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C1845 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C1844 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31140) *
              C31162 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C1844 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C1845 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C31171 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C1845 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C1844 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C1844 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C1845 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C1844 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C1845 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C31174 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C1845 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C1844 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C31162 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C1844 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C1845 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C30926) *
              C30840 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C31106 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C3302) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C30926) *
              C30840 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C30849 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C3302 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C3302) *
               C30926) *
              C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C30964 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30971 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C31060 * C3810) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30971 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C30964 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                 C102) *
                C31060 * C3810) *
               C30926) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30971 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30964 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C3810) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30964 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30971 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C31046 * C2197) *
                 C104) *
                C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C30964 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30971 +
            (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
             C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
             C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
                C30811 * C31060 * C3810) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30971 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C30964 -
            (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
             C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
             C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
                C30811 * C31060 * C3810) *
               C30926) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30971 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C30964 -
            (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
             C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
             C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
                C30811 * C31060 * C3810) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C30964 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30971 +
            (C4767 * C1313 - C4768 * C1303 - C4767 * C1314 + C4763 * C1330 +
             C4769 * C1325 - C4770 * C1309 - C4769 * C1326 + C4764 * C1336 +
             C4771 * C6432 - C4772 * C6431 - C4771 * C6433 + C4765 * C6434) *
                C30811 * C31060 * C3810) *
               C30926) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31174 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C31137) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C31174 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C31162 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C30863 * C31180 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
              C30863 * C31173 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
              C30863 * C31160 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) * C104) *
               C31060 * C30968 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31182 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31179 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31170 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C31046 * C2044) *
                C102) *
               C31060 * C31153) *
              C30863 * C2648 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31179 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31182 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31170 +
           (C2332 * C102 + C2331 * C103 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C31046 * C2317) *
                C104) *
               C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C31180 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C3302) *
              C30863 * C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C3302 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C31160 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31174 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C31162 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C3302 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C31174 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C31162 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31182 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31179 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31170 -
           (C4771 * C6276 - C4772 * C6273 - C4771 * C6277 + C4765 * C6282 +
            C4769 * C2433 - C4770 * C2430 - C4769 * C2434 + C4764 * C2439 +
            C4767 * C2034 - C4768 * C2026 - C4767 * C2035 + C4763 * C2044) *
               C30811 * C31060 * C31153) *
              C30863 * C2648 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C31179 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31182 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31170 +
           (C4767 * C2032 - C4768 * C2025 - C4767 * C2033 + C4763 * C2043 +
            C4769 * C2435 - C4770 * C2431 - C4769 * C2436 + C4764 * C2440 +
            C4771 * C6534 - C4772 * C6533 - C4771 * C6535 + C4765 * C6536) *
               C30811 * C31060 * C31153) *
              C30863 * C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30964 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30971 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C3810) *
              C30863 * C30840 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30971 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30964 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C3810) *
              C30863 * C30849 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30964 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30971 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C3810) *
              C30863 * C2911)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30964 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30971 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C3810) *
              C30863 * C30840 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30971 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30964 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C3810) *
              C30863 * C30849 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30964 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30971 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C3810) *
              C30863 * C2911)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C30863 * C31180 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
              C30863 * C31173 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C3302 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
              C30863 * C31160 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) * C104) *
               C31060 * C30968 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31174 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C3302) *
               C31162 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C31137) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C3302) *
               C31174 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C31162 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C3302 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C31180 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C3302) *
              C30863 * C31173 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C3302 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C31160 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C3302) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C3302 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31174 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C3302) *
               C31162 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C3302 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C2648 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C3302) *
               C31174 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C3302 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C31162 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C3302) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31106 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C30926) *
              C671 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C30926 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31106) *
              C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31106 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 *
               C30926) *
              C673 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C31046 * C678) * C104) *
               C31060 * C30881 * C30926 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 *
               C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1436 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C1438 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C30881 * C31147) *
              C31092 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1437 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1436 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 * C1438 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C31046 * C1445) *
                C104) *
               C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C30926) *
              C671 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31106) *
              C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31106 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C30926) *
              C673 +
          ((C4767 * C316 - C4768 * C300 - C4767 * C317 + C4763 * C330 +
            C4769 * C318 - C4770 * C301 - C4769 * C319 + C4764 * C331 +
            C4771 * C1443 - C4772 * C1442 - C4771 * C1444 + C4765 * C1445) *
               C30811 * C31060 * C30881 * C30926 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C30881 * C31106) *
              C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1437 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C1438 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C30881 * C31147) *
              C31092 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1437 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1436 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C1438 +
           (C4767 * C1176 - C4768 * C1169 - C4767 * C1177 + C4763 * C1187 +
            C4769 * C1182 - C4770 * C1172 - C4769 * C1183 + C4764 * C1190 +
            C4771 * C5736 - C4772 * C5735 - C4771 * C5737 + C4765 * C5738) *
               C30811 * C31060 * C30881 * C31147) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C31106 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C30926) *
              C291 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C31106 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C30926) *
              C292 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
               C31106 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C31046 * C962) * C104) *
                C31060 * C30968 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31107 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C1436 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C30968 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31107) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C31107 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C30968) *
              C1438 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C31046 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C31046 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C31046 * C1733) *
                C104) *
               C31060 * C30968 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
                C102) *
               C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C30926) *
              C291 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C31106 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C30926) *
              C292 +
          (((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
             C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
             C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
                C30811 * C31060 * C31107 -
            (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
             C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
             C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
                C30811 * C31060 * C30968) *
               C31106 +
           ((C4767 * C952 - C4768 * C945 - C4767 * C953 + C4763 * C960 +
             C4769 * C1317 - C4770 * C1305 - C4769 * C1318 + C4764 * C1332 +
             C4771 * C1729 - C4772 * C1724 - C4771 * C1730 + C4765 * C1733) *
                C30811 * C31060 * C30968 -
            (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
             C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
             C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
                C30811 * C31060 * C31107) *
               C30926) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C1436 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C30968 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31107) *
              C1437 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31107 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C30968) *
              C1438 +
          ((C4767 * C1725 - C4768 * C1722 - C4767 * C1726 + C4763 * C1731 +
            C4769 * C5630 - C4770 * C5626 - C4769 * C5631 + C4764 * C5635 +
            C4771 * C5988 - C4772 * C5987 - C4771 * C5989 + C4765 * C5990) *
               C30811 * C31060 * C30968 -
           (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
            C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
            C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
               C30811 * C31060 * C31107) *
              C31147) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31174 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31162 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31174 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31174 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C31060 * C30881 * C31162 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C30863 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C30863 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C30863 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 * C30863 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) * C104) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31175 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31164 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C30863 * C291 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C31164 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31175 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C31060 * C31140) *
              C30863 * C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31175 -
           ((C113 * C515 - C114 * C497 - C113 * C516 + C31046 * C527) * C104 +
            C570 * C103 + C566 * C102) *
               C31060 * C31164 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C31046 * C528) * C104) *
               C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31175 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C31164 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C31046 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C31060 * C31140) *
              C1094 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C31060 * C31164 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C31175 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C31046 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C31046 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C31046 * C1331) *
                C102) *
               C31060 * C31140) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C31175 -
           ((C113 * C1317 - C114 * C1305 - C113 * C1318 + C31046 * C1332) *
                C104 +
            (C113 * C1319 - C114 * C1306 - C113 * C1320 + C31046 * C1333) *
                C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                C102) *
               C31060 * C31164 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C31046 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C31046 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C31046 * C1337) *
                C104) *
               C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C30863 * C291 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C31164 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31175 -
           (C4771 * C1325 - C4772 * C1309 - C4771 * C1326 + C4765 * C1336 +
            C4769 * C1313 - C4770 * C1303 - C4769 * C1314 + C4764 * C1330 +
            C4767 * C507 - C4768 * C493 - C4767 * C508 + C4763 * C523) *
               C30811 * C31060 * C31140) *
              C30863 * C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31175 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C31164 +
           (C4767 * C509 - C4768 * C494 - C4767 * C510 + C4763 * C524 +
            C4769 * C1311 - C4770 * C1302 - C4769 * C1312 + C4764 * C1329 +
            C4771 * C1327 - C4772 * C1310 - C4771 * C1328 + C4765 * C1337) *
               C30811 * C31060 * C31140) *
              C30863 * C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31175 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C31164 +
           (C4767 * C505 - C4768 * C492 - C4767 * C506 + C4763 * C522 +
            C4769 * C1315 - C4770 * C1304 - C4769 * C1316 + C4764 * C1331 +
            C4771 * C1323 - C4772 * C1308 - C4771 * C1324 + C4765 * C1335) *
               C30811 * C31060 * C31140) *
              C1094 +
          ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
            C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
            C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
               C30811 * C31060 * C31164 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C31175 -
           (C4771 * C5628 - C4772 * C5625 - C4771 * C5629 + C4765 * C5634 +
            C4769 * C1323 - C4770 * C1308 - C4769 * C1324 + C4764 * C1335 +
            C4767 * C1315 - C4768 * C1304 - C4767 * C1316 + C4763 * C1331) *
               C30811 * C31060 * C31140) *
              C1095 +
          ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C31175 -
           (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
            C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
            C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
               C30811 * C31060 * C31164 +
           (C4767 * C1323 - C4768 * C1308 - C4767 * C1324 + C4763 * C1335 +
            C4769 * C5628 - C4770 * C5625 - C4769 * C5629 + C4764 * C5634 +
            C4771 * C5632 - C4772 * C5627 - C4771 * C5633 + C4765 * C5636) *
               C30811 * C31060 * C31140) *
              C31137) *
         C30835) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C31107 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
               C31060 * C30968) *
              C30863 * C671 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
              C30863 * C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C31107 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C31060 * C30968) *
              C30863 * C673 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C31046 * C789) * C104) *
               C31060 * C30968 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C31060 * C31107 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C31046 * C521) * C102) *
                C31060 * C30968) *
               C1094 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C31046 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C31060 * C30968 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
                C31060 * C31107) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C31060 * C31107 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C31046 * C1334) *
                 C102) *
                C31060 * C30968) *
               C31137) *
              C31092 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C31060 * C30968 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C31107) *
               C1094 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C31107 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C31060 * C30968) *
               C1095 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C31046 * C1609) *
                 C104) *
                C31060 * C30968 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C31107 -
           (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
            C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
            C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
               C30811 * C31060 * C30968) *
              C30863 * C671 +
          ((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
            C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
            C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
               C30811 * C31060 * C30968 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C31107) *
              C30863 * C672 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C31107 -
           (C4771 * C1317 - C4772 * C1305 - C4771 * C1318 + C4765 * C1332 +
            C4769 * C952 - C4770 * C945 - C4769 * C953 + C4764 * C960 +
            C4767 * C499 - C4768 * C489 - C4767 * C500 + C4763 * C519) *
               C30811 * C31060 * C30968) *
              C30863 * C673 +
          ((C4767 * C511 - C4768 * C495 - C4767 * C512 + C4763 * C525 +
            C4769 * C954 - C4770 * C946 - C4769 * C955 + C4764 * C961 +
            C4771 * C1607 - C4772 * C1606 - C4771 * C1608 + C4765 * C1609) *
               C30811 * C31060 * C30968 -
           (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
            C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
            C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
               C30811 * C31060 * C31107) *
              C30863 * C31141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
             C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
             C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
                C30811 * C31060 * C31107 -
            (C4771 * C1321 - C4772 * C1307 - C4771 * C1322 + C4765 * C1334 +
             C4769 * C948 - C4770 * C943 - C4769 * C949 + C4764 * C958 +
             C4767 * C503 - C4768 * C491 - C4767 * C504 + C4763 * C521) *
                C30811 * C31060 * C30968) *
               C1094 +
           ((C4767 * C948 - C4768 * C943 - C4767 * C949 + C4763 * C958 +
             C4769 * C1321 - C4770 * C1307 - C4769 * C1322 + C4764 * C1334 +
             C4771 * C1725 - C4772 * C1722 - C4771 * C1726 + C4765 * C1731) *
                C30811 * C31060 * C30968 -
            (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
             C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
             C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
                C30811 * C31060 * C31107) *
               C1095 +
           ((C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
             C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
             C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
                C30811 * C31060 * C31107 -
            (C4771 * C5630 - C4772 * C5626 - C4771 * C5631 + C4765 * C5635 +
             C4769 * C1725 - C4770 * C1722 - C4769 * C1726 + C4764 * C1731 +
             C4767 * C1321 - C4768 * C1307 - C4767 * C1322 + C4763 * C1334) *
                C30811 * C31060 * C30968) *
               C31137) *
              C31092 +
          (((C4767 * C501 - C4768 * C490 - C4767 * C502 + C4763 * C520 +
             C4769 * C950 - C4770 * C944 - C4769 * C951 + C4764 * C959 +
             C4771 * C1319 - C4772 * C1306 - C4771 * C1320 + C4765 * C1333) *
                C30811 * C31060 * C30968 -
            (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
             C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
             C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
                C30811 * C31060 * C31107) *
               C1094 +
           ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
             C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
             C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
                C30811 * C31060 * C31107 -
            (C4771 * C1727 - C4772 * C1723 - C4771 * C1728 + C4765 * C1732 +
             C4769 * C1319 - C4770 * C1306 - C4769 * C1320 + C4764 * C1333 +
             C4767 * C950 - C4768 * C944 - C4767 * C951 + C4763 * C959) *
                C30811 * C31060 * C30968) *
               C1095 +
           ((C4767 * C1319 - C4768 * C1306 - C4767 * C1320 + C4763 * C1333 +
             C4769 * C1727 - C4770 * C1723 - C4769 * C1728 + C4764 * C1732 +
             C4771 * C5886 - C4772 * C5885 - C4771 * C5887 + C4765 * C5888) *
                C30811 * C31060 * C30968 -
            (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
             C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
             C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
                C30811 * C31060 * C31107) *
               C31137) *
              C30846)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C30863 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C30863 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C30863 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C31060 * C30881 * C30863 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C31046 * C142) * C104) *
              C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C31174 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C31162 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 *
               C31162 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 *
               C31174 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 *
               C31174 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C31046 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C31060 * C30881 * C31162 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C31060 * C30881 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
               C31060 * C30881 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C31060 * C30881 * C31137) *
              C31171 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C31060 * C30881 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C31060 * C30881 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C31060 * C30881 *
               C31137) *
              C31158 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C31060 * C30881 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C31060 * C30881 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C31046 * C333) * C104) *
               C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C31046 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C31060 * C30881 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C31046 * C326) * C102) *
              C31060 * C30881 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C31046 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C31060 * C30881 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C31046 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C31046 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C31046 * C1188) *
               C102) *
              C31060 * C30881 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C31046 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C31046 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C31046 * C1191) *
               C104) *
              C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C30863 * C108 -
          (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
           C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
           C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
              C30811 * C31060 * C30881 * C30863 * C109 +
          (C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
           C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
           C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
              C30811 * C31060 * C30881 * C30863 * C110 -
          (C4771 * C318 - C4772 * C301 - C4771 * C319 + C4765 * C331 +
           C4769 * C316 - C4770 * C300 - C4769 * C317 + C4764 * C330 +
           C4767 * C128 - C4768 * C118 - C4767 * C129 + C4763 * C139) *
              C30811 * C31060 * C30881 * C30863 * C111 +
          (C4767 * C130 - C4768 * C119 - C4767 * C131 + C4763 * C140 +
           C4769 * C320 - C4770 * C302 - C4769 * C321 + C4764 * C332 +
           C4771 * C322 - C4772 * C303 - C4771 * C323 + C4765 * C333) *
              C30811 * C31060 * C30881 * C30863 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C291 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C31162 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C292 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C31174 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C31162 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
            C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
            C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
            C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
            C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
            C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
            C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
               C30811 * C31060 * C30881 * C31137) *
              C31171 +
          ((C4767 * C306 - C4768 * C295 - C4767 * C307 + C4763 * C325 +
            C4769 * C312 - C4770 * C298 - C4769 * C313 + C4764 * C328 +
            C4771 * C1176 - C4772 * C1169 - C4771 * C1177 + C4765 * C1187) *
               C30811 * C31060 * C30881 * C1095 -
           (C4771 * C312 - C4772 * C298 - C4771 * C313 + C4765 * C328 +
            C4769 * C306 - C4770 * C295 - C4769 * C307 + C4764 * C325 +
            C4767 * C124 - C4768 * C116 - C4767 * C125 + C4763 * C137) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1182 - C4772 * C1172 - C4771 * C1183 + C4765 * C1190 +
            C4769 * C1176 - C4770 * C1169 - C4769 * C1177 + C4764 * C1187 +
            C4767 * C312 - C4768 * C298 - C4767 * C313 + C4763 * C328) *
               C30811 * C31060 * C30881 * C31137) *
              C31158 +
          ((C4767 * C126 - C4768 * C117 - C4767 * C127 + C4763 * C138 +
            C4769 * C304 - C4770 * C294 - C4769 * C305 + C4764 * C324 +
            C4771 * C314 - C4772 * C299 - C4771 * C315 + C4765 * C329) *
               C30811 * C31060 * C30881 * C1094 -
           (C4771 * C1174 - C4772 * C1168 - C4771 * C1175 + C4765 * C1186 +
            C4769 * C314 - C4770 * C299 - C4769 * C315 + C4764 * C329 +
            C4767 * C304 - C4768 * C294 - C4767 * C305 + C4763 * C324) *
               C30811 * C31060 * C30881 * C1095 +
           (C4767 * C314 - C4768 * C299 - C4767 * C315 + C4763 * C329 +
            C4769 * C1174 - C4770 * C1168 - C4769 * C1175 + C4764 * C1186 +
            C4771 * C1184 - C4772 * C1173 - C4771 * C1185 + C4765 * C1191) *
               C30811 * C31060 * C30881 * C31137) *
              C31131)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C4767 * C122 - C4768 * C115 - C4767 * C123 + C4763 * C136 +
           C4769 * C308 - C4770 * C296 - C4769 * C309 + C4764 * C326 +
           C4771 * C310 - C4772 * C297 - C4771 * C311 + C4765 * C327) *
              C30811 * C31060 * C30881 * C1162 -
          (C4771 * C1178 - C4772 * C1170 - C4771 * C1179 + C4765 * C1188 +
           C4769 * C310 - C4770 * C297 - C4769 * C311 + C4764 * C327 +
           C4767 * C308 - C4768 * C296 - C4767 * C309 + C4763 * C326) *
              C30811 * C31060 * C30881 * C1163 +
          (C4767 * C310 - C4768 * C297 - C4767 * C311 + C4763 * C327 +
           C4769 * C1178 - C4770 * C1170 - C4769 * C1179 + C4764 * C1188 +
           C4771 * C1180 - C4772 * C1171 - C4771 * C1181 + C4765 * C1189) *
              C30811 * C31060 * C30881 * C1164 -
          (C4771 * C5509 - C4772 * C5507 - C4771 * C5510 + C4765 * C5513 +
           C4769 * C1180 - C4770 * C1171 - C4769 * C1181 + C4764 * C1189 +
           C4767 * C1178 - C4768 * C1170 - C4767 * C1179 + C4763 * C1188) *
              C30811 * C31060 * C30881 * C1165 +
          (C4767 * C1180 - C4768 * C1171 - C4767 * C1181 + C4763 * C1189 +
           C4769 * C5509 - C4770 * C5507 - C4769 * C5510 + C4764 * C5513 +
           C4771 * C5511 - C4772 * C5508 - C4771 * C5512 + C4765 * C5514) *
              C30811 * C31060 * C30881 * C1166) *
         C30835) /
            (p * q * std::sqrt(p + q));
}
