/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AB_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_12_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29678 = ae * be;
    const double C29677 = ae + be;
    const double C29676 = 0 * be;
    const double C29675 = xA - xB;
    const double C29699 = 0 * be;
    const double C29698 = zA - zB;
    const double C29720 = xP - xQ;
    const double C29719 = zP - zQ;
    const double C29718 = p + q;
    const double C29717 = p * q;
    const double C29725 = bs[3];
    const double C29735 = bs[4];
    const double C29744 = bs[5];
    const double C29758 = bs[6];
    const double C29780 = bs[7];
    const double C29889 = yP - yQ;
    const double C30095 = bs[2];
    const double C117 = bs[0];
    const double C30523 = ce + de;
    const double C30522 = ce * de;
    const double C30521 = xC - xD;
    const double C30555 = yC - yD;
    const double C30573 = zC - zD;
    const double C30741 = yA - yB;
    const double C29679 = std::pow(C29677, 2);
    const double C30796 = 2 * C29677;
    const double C29680 = C29678 * C29675;
    const double C30502 = std::pow(C29675, 2);
    const double C30795 = C29675 * ae;
    const double C29700 = C29678 * C29698;
    const double C30753 = std::pow(C29698, 2);
    const double C30828 = C29698 * ae;
    const double C29745 = std::pow(C29720, 2);
    const double C29815 = C29720 * be;
    const double C29727 = C29719 * ae;
    const double C29726 = C29719 * C29720;
    const double C29931 = std::pow(C29719, 2);
    const double C29721 = 2 * C29717;
    const double C29898 = std::pow(C29889, 2);
    const double C30527 = 2 * C30523;
    const double C30526 = std::pow(C30523, 2);
    const double C30528 = C30521 * de;
    const double C30525 = C30521 * ce;
    const double C30524 = std::pow(C30521, 2);
    const double C30556 = std::pow(C30555, 2);
    const double C30615 = C30555 * de;
    const double C30613 = C30555 * ce;
    const double C30574 = std::pow(C30573, 2);
    const double C30657 = C30573 * de;
    const double C30655 = C30573 * ce;
    const double C30742 = std::pow(C30741, 2);
    const double C30827 = C30741 * ae;
    const double C29681 = 2 * C29679;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (xP - xQ) * ae * be) /
                        C29679;
    const double C30831 = std::pow(C30796, -2);
    const double C30829 = std::pow(C30796, -1);
    const double C30503 = C30502 * C29678;
    const double C30754 = C30753 * C29678;
    const double C29818 = C29725 * C29815;
    const double C29821 = C29735 * C29815;
    const double C29827 = C29744 * C29815;
    const double C29841 = C29758 * C29815;
    const double C29862 = C29780 * C29815;
    const double C29730 = C29725 * C29727;
    const double C29737 = C29735 * C29727;
    const double C29747 = C29744 * C29727;
    const double C29762 = C29758 * C29727;
    const double C29786 = C29780 * C29727;
    const double C29729 = C29726 * ae;
    const double C29722 = C29721 / C29718;
    const double C124 = (-(bs[1] * C29815 * C29721) / C29718) / C29677;
    const double C127 = (-(bs[1] * C29727 * C29721) / C29718) / C29677;
    const double C118 = -(C29720 * bs[1] * C29721) / C29718;
    const double C261 = -(C29889 * bs[1] * C29721) / C29718;
    const double C414 = -(C29719 * bs[1] * C29721) / C29718;
    const double C30540 = std::pow(C30527, -1);
    const double C30804 = std::pow(C30527, -2);
    const double C30541 = 2 * C30526;
    const double C30808 = C30526 * C30527;
    const double C30807 = 4 * C30526;
    const double C30797 = std::pow(C30525, 2);
    const double C30529 = C30524 * C30522;
    const double C30557 = C30556 * C30522;
    const double C30809 = std::pow(C30613, 2);
    const double C30575 = C30574 * C30522;
    const double C30811 = std::pow(C30655, 2);
    const double C30743 = C30742 * C29678;
    const double C30504 = C30503 / C29677;
    const double C30755 = C30754 / C29677;
    const double C29731 = C29729 * be;
    const double C29724 = -C29722;
    const double C29734 = std::pow(C29722, 4);
    const double C29757 = std::pow(C29722, 6);
    const double C139 =
        (be * std::pow(C29722, 2) * bs[2] * C29719 * ae +
         C29720 * std::pow(-C29722, 3) * bs[3] * C29719 * C29720 * ae * be) /
        C29679;
    const double C30094 = std::pow(C29722, 2);
    const double C125 =
        (C29720 * std::pow(C29722, 2) * bs[2] * C29815) / C29677 -
        (be * bs[1] * C29721) / (C29718 * C29677);
    const double C30841 = 4 * C30808;
    const double C30840 = C30523 * C30807;
    const double C30530 = C30529 / C30523;
    const double C30558 = C30557 / C30523;
    const double C30576 = C30575 / C30523;
    const double C30744 = C30743 / C29677;
    const double C30505 = -C30504;
    const double C30756 = -C30755;
    const double C29736 = C29735 * C29731;
    const double C29746 = C29744 * C29731;
    const double C29760 = C29758 * C29731;
    const double C29784 = C29780 * C29731;
    const double C29728 = std::pow(C29724, 3);
    const double C29743 = std::pow(C29724, 5);
    const double C29779 = std::pow(C29724, 7);
    const double C29739 = C29734 * C29737;
    const double C29823 = C29734 * C29821;
    const double C29828 = C29735 * C29734;
    const double C29765 = C29757 * C29762;
    const double C29843 = C29757 * C29841;
    const double C29863 = C29758 * C29757;
    const double C30096 = C30095 * C30094;
    const double C128 = (C29720 * C30094 * C30095 * C29727) / C29677;
    const double C271 = (C29889 * C30094 * C30095 * C29815) / C29677;
    const double C274 = (C29889 * C30094 * C30095 * C29727) / C29677;
    const double C424 = (C29719 * C30094 * C30095 * C29815) / C29677;
    const double C427 = (C29719 * C30094 * C30095 * C29727) / C29677 -
                        (ae * bs[1] * C29721) / (C29718 * C29677);
    const double C30531 = -C30530;
    const double C30559 = -C30558;
    const double C30577 = -C30576;
    const double C30745 = -C30744;
    const double C30506 = std::exp(C30505);
    const double C30757 = std::exp(C30756);
    const double C29738 = C29734 * C29736;
    const double C29764 = C29757 * C29760;
    const double C29732 = C29728 * C29730;
    const double C29816 = C29725 * C29728;
    const double C29819 = C29728 * C29818;
    const double C291 = ((yP - yQ) * C29728 * C29725 * C29731) / C29679;
    const double C444 = (ae * std::pow(C29722, 2) * bs[2] * C29720 * be +
                         C29719 * C29728 * C29725 * C29731) /
                        C29679;
    const double C29749 = C29743 * C29747;
    const double C29748 = C29743 * C29746;
    const double C29829 = C29743 * C29827;
    const double C29842 = C29744 * C29743;
    const double C29789 = C29779 * C29786;
    const double C29788 = C29779 * C29784;
    const double C29865 = C29779 * C29862;
    const double C29742 = be * C29739;
    const double C29741 = C29720 * C29739;
    const double C30230 = C29719 * C29739;
    const double C30259 = C29889 * C29739;
    const double C29824 = C29720 * C29823;
    const double C29902 = C29889 * C29823;
    const double C29929 = ae * C29823;
    const double C29928 = C29719 * C29823;
    const double C29831 = C29720 * C29828;
    const double C29830 = C29828 * be;
    const double C30104 = C29828 * C29745;
    const double C30202 = C29828 * C29898;
    const double C30233 = C29828 * C29931;
    const double C30260 = C29889 * C29828;
    const double C30340 = C29719 * C29828;
    const double C30339 = C29828 * ae;
    const double C29767 = C29765 * C29745;
    const double C29778 = be * C29765;
    const double C29777 = C29720 * C29765;
    const double C30274 = C29765 * C29898;
    const double C30354 = C29719 * C29765;
    const double C30401 = C29889 * C29765;
    const double C29847 = C29720 * C29843;
    const double C29973 = C29843 * C29898;
    const double C29980 = C29889 * C29843;
    const double C30020 = C29843 * C29931;
    const double C30034 = ae * C29843;
    const double C30033 = C29719 * C29843;
    const double C29868 = C29863 * C29745;
    const double C29867 = C29720 * C29863;
    const double C29866 = C29863 * be;
    const double C30292 = C29863 * C29898;
    const double C30358 = C29863 * C29931;
    const double C30404 = C29889 * C29863;
    const double C119 = C30096 * C29745 - (bs[1] * C29721) / C29718;
    const double C262 = C29889 * C29720 * C30096;
    const double C264 = C30096 * C29898 - (bs[1] * C29721) / C29718;
    const double C415 = C29719 * C29720 * C30096;
    const double C417 = C30096 * C29931 - (bs[1] * C29721) / C29718;
    const double C812 = C29719 * C29889 * C30096;
    const double C30532 = std::exp(C30531);
    const double C30560 = std::exp(C30559);
    const double C30578 = std::exp(C30577);
    const double C30746 = std::exp(C30745);
    const double C4671 = C30506 * C271;
    const double C9117 = C30506 * C424;
    const double C29682 = C29680 * C30506;
    const double C30830 = C30506 * C30795;
    const double C101 =
        (C30506 * std::pow(C30795, 2)) / C29679 + C30506 / C30796;
    const double C103 = C30831 * C30506;
    const double C13127 = C30829 * C30506;
    const double C29701 = C29700 * C30757;
    const double C116 = -(2 * C29678 * (zA - zB) * C30757) / C29677;
    const double C30862 = C30757 * C30828;
    const double C8890 =
        (C30757 * std::pow(C30828, 2)) / C29679 + C30757 / C30796;
    const double C8892 = C30831 * C30757;
    const double C18741 = C30829 * C30757;
    const double C294 =
        (C29728 * C29725 * C29731 + C29738 * std::pow(yP - yQ, 2)) / C29679;
    const double C29766 = C29720 * C29764;
    const double C29962 = C29764 * C29898;
    const double C29965 = C29889 * C29764;
    const double C30019 = C29719 * C29764;
    const double C140 = (C29728 * C29725 * C29731 + be * C29720 * C29732 +
                         C29720 * (be * C29732 + C29720 * std::pow(C29722, 4) *
                                                     bs[4] * C29731)) /
                        C29679;
    const double C141 =
        (2 * (be * C29732 + C29720 * C29738) +
         be * (C29732 + C29739 * std::pow(C29720, 2)) +
         C29720 * (C29738 + be * C29720 * C29739 +
                   C29720 * (be * C29739 +
                             C29720 * std::pow(C29724, 5) * bs[5] * C29731))) /
        C29679;
    const double C292 = ((yP - yQ) * (be * C29732 + C29720 * C29738)) / C29679;
    const double C445 = (ae * (C29720 * C29728 * C29725 * C29720 * be +
                               bs[2] * std::pow(C29722, 2) * be) +
                         C29719 * (be * C29732 + C29720 * C29738)) /
                        C29679;
    const double C129 = (C30094 * C30095 * C29727 + C29732 * C29745) / C29677;
    const double C131 =
        (2 * C29720 * C29732 + C29720 * (C29732 + C29739 * C29745)) / C29677;
    const double C275 = (C29889 * C29720 * C29732) / C29677;
    const double C276 = (C29889 * (C29732 + C29739 * C29745)) / C29677;
    const double C280 = (C30094 * C30095 * C29727 + C29732 * C29898) / C29677;
    const double C428 =
        (C29719 * C29720 * C29732 + C29720 * C30096 * ae) / C29677;
    const double C433 =
        (C30094 * C30095 * C29727 + C29719 * (C29719 * C29732 + C30096 * ae) +
         C29719 * C30096 * ae) /
        C29677;
    const double C820 =
        (C29719 * C29889 * C29732 + C29889 * C30096 * ae) / C29677;
    const double C1025 =
        (2 * C29889 * C29732 + C29889 * (C29732 + C29739 * C29898)) / C29677;
    const double C29822 = C29816 * be;
    const double C30103 = C29720 * C29816;
    const double C30187 = C29889 * C29816;
    const double C30232 = C29719 * C29816;
    const double C30231 = C29816 * ae;
    const double C429 = (C29719 * (C29732 + C29739 * C29745) +
                         (C30096 + C29816 * C29745) * ae) /
                        C29677;
    const double C1168 = (C29719 * (C29732 + C29739 * C29898) +
                          (C30096 + C29816 * C29898) * ae) /
                         C29677;
    const double C1853 =
        (2 * (C29719 * C29732 + C30096 * ae) +
         C29719 * (C29732 + C29719 * (C29719 * C29739 + C29816 * ae) +
                   C29719 * C29816 * ae) +
         (C30096 + C29816 * C29931) * ae) /
        C29677;
    const double C120 =
        2 * C29720 * C30096 + C29720 * (C30096 + C29816 * C29745);
    const double C263 = C29889 * (C30096 + C29816 * C29745);
    const double C416 = C29719 * (C30096 + C29816 * C29745);
    const double C1016 =
        2 * C29889 * C30096 + C29889 * (C30096 + C29816 * C29898);
    const double C1153 = C29719 * (C30096 + C29816 * C29898);
    const double C1844 =
        2 * C29719 * C30096 + C29719 * (C30096 + C29816 * C29931);
    const double C447 = (C29728 * C29725 * C29731 + ae * C29719 * C29819 +
                         C29719 * (ae * C29819 + C29719 * C29738)) /
                        C29679;
    const double C827 =
        (ae * C29889 * C29819 + C29719 * C29889 * C29738) / C29679;
    const double C126 =
        (C30094 * C30095 * C29815 + C29720 * (C29720 * C29819 + C30096 * be) +
         C29720 * C30096 * be) /
        C29677;
    const double C272 = (C29889 * (C29720 * C29819 + C30096 * be)) / C29677;
    const double C277 = (C30094 * C30095 * C29815 + C29819 * C29898) / C29677;
    const double C425 = (C29719 * (C29720 * C29819 + C30096 * be)) / C29677;
    const double C430 = (C30094 * C30095 * C29815 + C29819 * C29931) / C29677;
    const double C817 = (C29719 * C29889 * C29819) / C29677;
    const double C1022 =
        (2 * C29889 * C29819 + C29889 * (C29819 + C29823 * C29898)) / C29677;
    const double C1165 = (C29719 * (C29819 + C29823 * C29898)) / C29677;
    const double C1850 =
        (2 * C29719 * C29819 + C29719 * (C29819 + C29823 * C29931)) / C29677;
    const double C4673 = C30506 * C291;
    const double C9119 = C30506 * C444;
    const double C29751 = C29749 * C29745;
    const double C29756 = be * C29749;
    const double C29755 = C29720 * C29749;
    const double C30269 = C29749 * C29898;
    const double C30273 = C29889 * C29749;
    const double C30338 = C29719 * C29749;
    const double C1031 =
        (3 * (C29732 + C29739 * C29898) +
         C29889 * (2 * C29889 * C29739 + C29889 * (C29739 + C29749 * C29898))) /
        C29677;
    const double C29750 = C29720 * C29748;
    const double C29930 = C29719 * C29748;
    const double C29953 = C29889 * C29748;
    const double C1034 = (2 * C29889 * C29738 +
                          C29889 * (C29738 + C29748 * std::pow(C29889, 2))) /
                         C29679;
    const double C1037 =
        (3 * (C29738 + C29748 * C29898) +
         C29889 * (2 * C29889 * C29748 + C29889 * (C29748 + C29764 * C29898))) /
        C29679;
    const double C1180 = (ae * (C29819 + C29823 * C29898) +
                          C29719 * (C29738 + C29748 * C29898)) /
                         C29679;
    const double C1862 = (2 * (ae * C29819 + C29719 * C29738) +
                          ae * (C29819 + C29823 * std::pow(C29719, 2)) +
                          C29719 * (C29738 + ae * C29719 * C29823 +
                                    C29719 * (ae * C29823 + C29719 * C29748))) /
                         C29679;
    const double C29832 = C29720 * C29829;
    const double C29911 = C29829 * C29898;
    const double C29933 = C29829 * C29931;
    const double C29954 = C29889 * C29829;
    const double C30018 = ae * C29829;
    const double C30017 = C29719 * C29829;
    const double C29846 = C29842 * C29745;
    const double C29845 = C29720 * C29842;
    const double C29844 = C29842 * be;
    const double C30282 = C29842 * C29898;
    const double C30291 = C29889 * C29842;
    const double C30341 = C29842 * C29931;
    const double C30356 = C29719 * C29842;
    const double C30355 = C29842 * ae;
    const double C29791 = C29789 * C29745;
    const double C29790 = C29720 * C29788;
    const double C29966 = C29788 * C29898;
    const double C30035 = C29719 * C29788;
    const double C30078 = C29889 * C29788;
    const double C29869 = C29720 * C29865;
    const double C29981 = C29865 * C29898;
    const double C30037 = C29865 * C29931;
    const double C30079 = C29889 * C29865;
    const double C281 = (C29720 * C29732 + C29741 * C29898) / C29677;
    const double C1177 = (C29889 * C29738 + ae * C29719 * C29902 +
                          C29719 * (ae * C29902 + C29719 * C29889 * C29748)) /
                         C29679;
    const double C1159 = (C29889 * C29819 + C29902 * C29931) / C29677;
    const double C29833 = C29831 * be;
    const double C30108 = 2 * C29831;
    const double C30189 = C29889 * C29831;
    const double C30239 = C29719 * C29831;
    const double C30238 = C29831 * ae;
    const double C30105 = C29816 + C30104;
    const double C30203 = C29816 + C30202;
    const double C30235 = C29816 + C30233;
    const double C30281 = 2 * C30260;
    const double C30313 = C29719 * C30260;
    const double C30312 = C30260 * ae;
    const double C30345 = 2 * C30340;
    const double C30343 = C30340 * ae;
    const double C29769 = C29749 + C29767;
    const double C29785 = 2 * C29777;
    const double C29783 = be * C29777;
    const double C30301 = C29777 * C29898;
    const double C30376 = C29889 * C29777;
    const double C30386 = C29719 * C29777;
    const double C30276 = C29749 + C30274;
    const double C30405 = C29719 * C30401;
    const double C29974 = C29829 + C29973;
    const double C29982 = 2 * C29980;
    const double C29998 = C29980 * C29931;
    const double C30077 = ae * C29980;
    const double C30076 = C29719 * C29980;
    const double C30024 = C29829 + C30020;
    const double C30041 = 2 * C30033;
    const double C30039 = ae * C30033;
    const double C29871 = C29842 + C29868;
    const double C29870 = C29867 * be;
    const double C30328 = C29867 * C29898;
    const double C30379 = C29889 * C29867;
    const double C30389 = C29867 * C29931;
    const double C30294 = C29842 + C30292;
    const double C30362 = C29842 + C30358;
    const double C30407 = C30404 * C29931;
    const double C30534 = C30532 * C30525;
    const double C30533 = C30532 / C30527;
    const double C30543 = C30540 * C30532;
    const double C30800 = C30532 * C30528;
    const double C30838 = C30804 * C30532;
    const double C30832 = C30532 * C30797;
    const double C30614 = C30560 / C30527;
    const double C30616 = C30560 * C30613;
    const double C30623 = C30540 * C30560;
    const double C30815 = C30560 * C30615;
    const double C30844 = C30804 * C30560;
    const double C30842 = C30560 * C30809;
    const double C30656 = C30578 / C30527;
    const double C30658 = C30578 * C30655;
    const double C30665 = C30540 * C30578;
    const double C30821 = C30578 * C30657;
    const double C30847 = C30804 * C30578;
    const double C30845 = C30578 * C30811;
    const double C30861 = C30746 * C30827;
    const double C4556 =
        (C30746 * std::pow(C30827, 2)) / C29679 + C30746 / C30796;
    const double C4558 = C30831 * C30746;
    const double C13129 = C30829 * C30746;
    const double C115 = ((0 * ae) / C29677 - C29682 / C29679) / (2 * C29677) +
                        (0 * ae) / C29677;
    const double C4559 = -(2 * C29682) / C29677;
    const double C13130 =
        ((C30506 - (C29675 * 2 * C29682) / C29677) * ae) / C29677 -
        C29676 / C29681;
    const double C13131 = (0 * ae) / C29677 - C29682 / C29679;
    const double C102 = (2 * C30829 * C30830) / C29677;
    const double C13126 = C30830 / C29677;
    const double C114 =
        (((C30506 - (C29675 * 2 * C29682) / C29677) * ae) / C29677 -
         C29676 / C29681) /
            (2 * C29677) +
        ((C29675 * ((0 * ae) / C29677 - C29682 / C29679) + C13127) * ae) /
            C29677;
    const double C8895 = ((0 * ae) / C29677 - C29701 / C29679) / (2 * C29677) +
                         (0 * ae) / C29677;
    const double C18742 =
        ((C30757 - (C29698 * 2 * C29701) / C29677) * ae) / C29677 -
        C29699 / C29681;
    const double C18743 = (0 * ae) / C29677 - C29701 / C29679;
    const double C8891 = (2 * C30829 * C30862) / C29677;
    const double C18740 = C30862 / C29677;
    const double C8894 =
        (((C30757 - (C29698 * 2 * C29701) / C29677) * ae) / C29677 -
         C29699 / C29681) /
            (2 * C29677) +
        ((C29698 * ((0 * ae) / C29677 - C29701 / C29679) + C18741) * ae) /
            C29677;
    const double C4677 = C30506 * C294;
    const double C29963 = C29748 + C29962;
    const double C29967 = 2 * C29965;
    const double C29997 = C29719 * C29965;
    const double C4686 = C30506 * C292;
    const double C13285 = C13127 * C292;
    const double C9132 = C30506 * C445;
    const double C19043 = C13127 * C445;
    const double C29825 = C29824 + C29822;
    const double C434 =
        (C29720 * C29732 + C29719 * (C29719 * C29741 + C30103 * ae) +
         C29719 * C30103 * ae) /
        C29677;
    const double C821 =
        (C29719 * C29889 * C29741 + C29889 * C30103 * ae) / C29677;
    const double C265 = C29720 * C30096 + C30103 * C29898;
    const double C418 = C29720 * C30096 + C30103 * C29931;
    const double C813 = C29719 * C29889 * C30103;
    const double C1017 =
        2 * C29889 * C30103 + C29889 * (C30103 + C29831 * C29898);
    const double C1154 = C29719 * (C30103 + C29831 * C29898);
    const double C1845 =
        2 * C29719 * C30103 + C29719 * (C30103 + C29831 * C29931);
    const double C1162 =
        (C29889 * C29732 + C29719 * (C29719 * C29889 * C29739 + C30187 * ae) +
         C29719 * C30187 * ae) /
        C29677;
    const double C2228 =
        (2 * (C29719 * C30259 + C30187 * ae) +
         C29719 * (C30259 + C29719 * (C29719 * C29889 * C29749 + C30260 * ae) +
                   C29719 * C30260 * ae) +
         (C30187 + C30260 * C29931) * ae) /
        C29677;
    const double C1150 = C29889 * C30096 + C30187 * C29931;
    const double C2222 =
        2 * C29719 * C30187 + C29719 * (C30187 + C30260 * C29931);
    const double C30234 = C30230 + C30231;
    const double C9123 = C30506 * C447;
    const double C5185 = C30506 * C827;
    const double C4684 = C30506 * C272;
    const double C13281 = C13127 * C272;
    const double C4675 = C30506 * C277;
    const double C9130 = C30506 * C425;
    const double C19039 = C13127 * C425;
    const double C9121 = C30506 * C430;
    const double C5183 = C30506 * C817;
    const double C4680 = C30506 * C1022;
    const double C5187 = C30506 * C1165;
    const double C9126 = C30506 * C1850;
    const double C29753 = C29739 + C29751;
    const double C29768 = C29756 + C29766;
    const double C29761 = 2 * C29755;
    const double C29759 = be * C29755;
    const double C30237 = C29719 * C29755;
    const double C30262 = C29889 * C29755;
    const double C1026 =
        (2 * C29889 * C29741 + C29889 * (C29741 + C29755 * C29898)) / C29677;
    const double C1032 =
        (3 * (C29741 + C29755 * C29898) +
         C29889 * (2 * C29889 * C29755 + C29889 * (C29755 + C29777 * C29898))) /
        C29677;
    const double C1169 = (C29719 * (C29741 + C29755 * C29898) +
                          (C30103 + C29831 * C29898) * ae) /
                         C29677;
    const double C1854 =
        (2 * (C29719 * C29741 + C30103 * ae) +
         C29719 * (C29741 + C29719 * (C29719 * C29755 + C29831 * ae) +
                   C29719 * C29831 * ae) +
         (C30103 + C29831 * C29931) * ae) /
        C29677;
    const double C30270 = C29739 + C30269;
    const double C30275 = 2 * C30273;
    const double C30311 = C29719 * C30273;
    const double C30342 = C30338 + C30339;
    const double C29752 = C29742 + C29750;
    const double C29932 = C29929 + C29930;
    const double C4682 = C30506 * C1034;
    const double C5390 = C30506 * C1037;
    const double C5189 = C30506 * C1180;
    const double C9128 = C30506 * C1862;
    const double C29834 = C29832 + C29830;
    const double C29912 = C29823 + C29911;
    const double C29934 = C29823 + C29933;
    const double C29972 = 2 * C29954;
    const double C29996 = ae * C29954;
    const double C29995 = C29719 * C29954;
    const double C2231 =
        (2 * (ae * C29902 + C29719 * C29953) + ae * (C29902 + C29954 * C29931) +
         C29719 * (C29953 + ae * C29719 * C29954 +
                   C29719 * (ae * C29954 + C29719 * C29889 * C29764))) /
        C29679;
    const double C2225 =
        (2 * C29719 * C29902 + C29719 * (C29902 + C29954 * C29931)) / C29677;
    const double C30022 = C30018 + C30019;
    const double C30023 = 2 * C30017;
    const double C30021 = ae * C30017;
    const double C29849 = C29828 + C29846;
    const double C29848 = C29845 * be;
    const double C29864 = 2 * C29845;
    const double C30205 = C29845 * C29898;
    const double C30240 = C29845 * C29931;
    const double C30263 = C29889 * C29845;
    const double C30388 = C29719 * C29845;
    const double C30387 = C29845 * ae;
    const double C29850 = C29847 + C29844;
    const double C30283 = C29828 + C30282;
    const double C30293 = 2 * C30291;
    const double C30314 = C30291 * C29931;
    const double C30403 = C29719 * C30291;
    const double C30402 = C30291 * ae;
    const double C30344 = C29828 + C30341;
    const double C30363 = 2 * C30356;
    const double C30361 = C30356 * ae;
    const double C30360 = C30354 + C30355;
    const double C29793 = C29765 + C29791;
    const double C29792 = C29778 + C29790;
    const double C29968 = C29764 + C29966;
    const double C30040 = C30034 + C30035;
    const double C30081 = C29719 * C30078;
    const double C29872 = C29869 + C29866;
    const double C29983 = C29843 + C29981;
    const double C30042 = C29843 + C30037;
    const double C30083 = C30079 * C29931;
    const double C5530 = C30506 * C1177;
    const double C5528 = C30506 * C1159;
    const double C1163 =
        (C29889 * C29741 + C29719 * (C29719 * C29889 * C29755 + C30189 * ae) +
         C29719 * C30189 * ae) /
        C29677;
    const double C1151 = C29889 * C30103 + C30189 * C29931;
    const double C121 = 3 * (C30096 + C29816 * C29745) +
                        C29720 * (2 * C30103 + C29720 * C30105);
    const double C266 = C30096 + C29816 * C29745 + C30105 * C29898;
    const double C267 = C29889 * (2 * C30103 + C29720 * C30105);
    const double C419 = C30096 + C29816 * C29745 + C30105 * C29931;
    const double C420 = C29719 * (2 * C30103 + C29720 * C30105);
    const double C814 = C29719 * C29889 * C30105;
    const double C1174 =
        (C29732 + C29739 * C29898 +
         C29719 * (C29719 * (C29739 + C29749 * C29898) + C30203 * ae) +
         C29719 * C30203 * ae) /
        C29677;
    const double C1548 =
        (C29719 * (2 * C29889 * C29739 + C29889 * (C29739 + C29749 * C29898)) +
         (2 * C30187 + C29889 * C30203) * ae) /
        C29677;
    const double C1019 = 3 * (C30096 + C29816 * C29898) +
                         C29889 * (2 * C30187 + C29889 * C30203);
    const double C1156 = C30096 + C29816 * C29898 + C30203 * C29931;
    const double C1542 = C29719 * (2 * C30187 + C29889 * C30203);
    const double C1847 = 3 * (C30096 + C29816 * C29931) +
                         C29719 * (2 * C30232 + C29719 * C30235);
    const double C29771 = C29720 * C29769;
    const double C29781 = 3 * C29769;
    const double C29776 = be * C29769;
    const double C30244 = C29719 * C29769;
    const double C30265 = C29889 * C29769;
    const double C29787 = C29764 + C29783;
    const double C30302 = C29755 + C30301;
    const double C30380 = C29719 * C30376;
    const double C30277 = C29889 * C30276;
    const double C30319 = C29719 * C30276;
    const double C29975 = C29889 * C29974;
    const double C29979 = 3 * C29974;
    const double C30003 = ae * C29974;
    const double C30002 = C29719 * C29974;
    const double C30000 = C29954 + C29998;
    const double C30082 = 2 * C30076;
    const double C30080 = ae * C30076;
    const double C30027 = C29719 * C30024;
    const double C30036 = 3 * C30024;
    const double C30032 = ae * C30024;
    const double C30043 = C29764 + C30039;
    const double C29874 = C29720 * C29871;
    const double C29873 = C29871 * be;
    const double C30208 = C29871 * C29898;
    const double C30247 = C29871 * C29931;
    const double C30266 = C29889 * C29871;
    const double C30329 = C29845 + C30328;
    const double C30381 = C30379 * C29931;
    const double C30392 = C29845 + C30389;
    const double C30295 = C29889 * C30294;
    const double C30322 = C30294 * C29931;
    const double C30365 = C29719 * C30362;
    const double C30410 = C30291 + C30407;
    const double C30535 = C30534 * C30528;
    const double C30542 = C30534 / C30541;
    const double C30801 = C30540 * C30534;
    const double C30799 = C30534 / C30523;
    const double C258 = (C30532 * std::pow(C30528, 2)) / C30526 + C30533;
    const double C30544 = C30543 * C30528;
    const double C30805 = C30525 * C30543;
    const double C30803 = 2 * C30543;
    const double C30848 = C30543 / C30807;
    const double C112 = C30543 / C30841;
    const double C2703 = C30543 / C30527;
    const double C30834 = C30800 / C30523;
    const double C259 = (-2 * C30540 * C30800) / C30523;
    const double C30863 = C30832 / C30526;
    const double C942 = (C30560 * std::pow(C30615, 2)) / C30526 + C30614;
    const double C30617 = C30616 * C30615;
    const double C30622 = C30616 / C30541;
    const double C30813 = C30616 / C30523;
    const double C30810 = C30540 * C30616;
    const double C30624 = C30623 * C30615;
    const double C30819 = C30613 * C30623;
    const double C30818 = 2 * C30623;
    const double C30854 = C30623 / C30807;
    const double C1014 = C30623 / C30841;
    const double C2700 = C30623 / C30527;
    const double C30850 = C30815 / C30523;
    const double C943 = (-2 * C30540 * C30815) / C30523;
    const double C30868 = C30842 / C30526;
    const double C1664 = (C30578 * std::pow(C30657, 2)) / C30526 + C30656;
    const double C30659 = C30658 * C30657;
    const double C30664 = C30658 / C30541;
    const double C30814 = C30658 / C30523;
    const double C30812 = C30540 * C30658;
    const double C30666 = C30665 * C30657;
    const double C30825 = C30655 * C30665;
    const double C30824 = 2 * C30665;
    const double C30860 = C30665 / C30807;
    const double C1843 = C30665 / C30841;
    const double C3602 = C30665 / C30527;
    const double C30856 = C30821 / C30523;
    const double C1665 = (-2 * C30540 * C30821) / C30523;
    const double C30870 = C30845 / C30526;
    const double C4557 = (2 * C30829 * C30861) / C29677;
    const double C13128 = C30861 / C29677;
    const double C4698 = C4559 * C276;
    const double C4696 = C4559 * C263;
    const double C4689 = C4559 * C281;
    const double C4685 = C4559 * C275;
    const double C4683 = C4559 * C262;
    const double C4681 = C4559 * C1025;
    const double C4679 = C4559 * C1016;
    const double C4678 = C4559 * C280;
    const double C4676 = C4559 * C264;
    const double C4674 = C4559 * C274;
    const double C4672 = C4559 * C261;
    const double C5188 = C4559 * C1168;
    const double C5186 = C4559 * C1153;
    const double C5184 = C4559 * C820;
    const double C5182 = C4559 * C812;
    const double C5391 = C4559 * C1031;
    const double C9144 = C4559 * C429;
    const double C9142 = C4559 * C416;
    const double C9131 = C4559 * C428;
    const double C9129 = C4559 * C415;
    const double C9127 = C4559 * C1853;
    const double C9125 = C4559 * C1844;
    const double C9124 = C4559 * C433;
    const double C9122 = C4559 * C417;
    const double C9120 = C4559 * C427;
    const double C9118 = C4559 * C414;
    const double C13316 = C13130 * C276;
    const double C13312 = C13130 * C263;
    const double C13308 = C13130 * C281;
    const double C13299 = C13130 * C275;
    const double C13295 = C13130 * C262;
    const double C13291 = C13130 * C280;
    const double C13287 = C13130 * C264;
    const double C13284 = C13130 * C274;
    const double C13280 = C13130 * C261;
    const double C13939 = C13130 * C820;
    const double C13935 = C13130 * C812;
    const double C14199 = C13130 * C1031;
    const double C14192 = C13130 * C1025;
    const double C14188 = C13130 * C1016;
    const double C14362 = C13130 * C1168;
    const double C14358 = C13130 * C1153;
    const double C19074 = C13130 * C429;
    const double C19070 = C13130 * C416;
    const double C19057 = C13130 * C428;
    const double C19053 = C13130 * C415;
    const double C19049 = C13130 * C433;
    const double C19045 = C13130 * C417;
    const double C19042 = C13130 * C427;
    const double C19038 = C13130 * C414;
    const double C20754 = C13130 * C1853;
    const double C20750 = C13130 * C1844;
    const double C13301 = C13131 * C276;
    const double C13297 = C13131 * C263;
    const double C13293 = C13131 * C281;
    const double C13286 = C13131 * C275;
    const double C13282 = C13131 * C262;
    const double C19059 = C13131 * C429;
    const double C19055 = C13131 * C416;
    const double C19044 = C13131 * C428;
    const double C19040 = C13131 * C415;
    const double C13300 = C13126 * C292;
    const double C13296 = C13126 * C272;
    const double C13292 = C13126 * C294;
    const double C13288 = C13126 * C277;
    const double C13283 = C13126 * C291;
    const double C13279 = C13126 * C271;
    const double C13940 = C13126 * C827;
    const double C13936 = C13126 * C817;
    const double C14200 = C13126 * C1037;
    const double C14191 = C13126 * C1034;
    const double C14187 = C13126 * C1022;
    const double C14361 = C13126 * C1180;
    const double C14357 = C13126 * C1165;
    const double C14353 = C13126 * C1177;
    const double C14349 = C13126 * C1159;
    const double C19058 = C13126 * C445;
    const double C19054 = C13126 * C425;
    const double C19050 = C13126 * C447;
    const double C19046 = C13126 * C430;
    const double C19041 = C13126 * C444;
    const double C19037 = C13126 * C424;
    const double C20753 = C13126 * C1862;
    const double C20749 = C13126 * C1850;
    const double C113 =
        (((0 - (C29675 * C29676) / C29677) * ae) / C29677 - (0 * be) / C29681) /
            (2 * C29677) +
        ((C29675 * (((C30506 - (C29675 * 2 * C29682) / C29677) * ae) / C29677 -
                    C29676 / C29681) +
          C13126) *
         ae) /
            C29677 +
        (0 * ae) / C29677 - C29682 / C29679;
    const double C8893 =
        (((0 - (C29698 * C29699) / C29677) * ae) / C29677 - (0 * be) / C29681) /
            (2 * C29677) +
        ((C29698 * (((C30757 - (C29698 * 2 * C29701) / C29677) * ae) / C29677 -
                    C29699 / C29681) +
          C18740) *
         ae) /
            C29677 +
        (0 * ae) / C29677 - C29701 / C29679;
    const double C5383 =
        (4 * (2 * C29953 + C29889 * C29963) +
         C29889 *
             (3 * C29963 + C29889 * (2 * C29889 * C29764 +
                                     C29889 * (C29764 + C29788 * C29898)))) /
        C29679;
    const double C130 =
        (2 * (C29720 * C29819 + C30096 * be) +
         C29720 * (C29819 + C29720 * C29825 + C29720 * C29816 * be) +
         (C30096 + C29816 * C29745) * be) /
        C29677;
    const double C273 =
        (C29889 * (C29819 + C29720 * C29825 + C30103 * be)) / C29677;
    const double C278 =
        (C29720 * C29819 + C30096 * be + C29825 * C29898) / C29677;
    const double C426 =
        (C29719 * (C29819 + C29720 * C29825 + C30103 * be)) / C29677;
    const double C431 =
        (C29720 * C29819 + C30096 * be + C29825 * C29931) / C29677;
    const double C818 = (C29719 * C29889 * C29825) / C29677;
    const double C9135 = C4559 * C434;
    const double C19066 = C13130 * C434;
    const double C19051 = C13131 * C434;
    const double C5193 = C4559 * C821;
    const double C13948 = C13130 * C821;
    const double C13941 = C13131 * C821;
    const double C4687 = C4559 * C265;
    const double C13304 = C13130 * C265;
    const double C13289 = C13131 * C265;
    const double C9133 = C4559 * C418;
    const double C19062 = C13130 * C418;
    const double C19047 = C13131 * C418;
    const double C5191 = C4559 * C813;
    const double C13944 = C13130 * C813;
    const double C13937 = C13131 * C813;
    const double C4692 = C4559 * C1017;
    const double C14190 = C13131 * C1017;
    const double C14503 = C13130 * C1017;
    const double C5195 = C4559 * C1154;
    const double C14360 = C13131 * C1154;
    const double C14705 = C13130 * C1154;
    const double C9138 = C4559 * C1845;
    const double C20752 = C13131 * C1845;
    const double C21089 = C13130 * C1845;
    const double C5531 = C4559 * C1162;
    const double C14354 = C13130 * C1162;
    const double C6591 = C4559 * C2228;
    const double C15691 = C13130 * C2228;
    const double C5529 = C4559 * C1150;
    const double C14350 = C13130 * C1150;
    const double C6589 = C4559 * C2222;
    const double C15687 = C13130 * C2222;
    const double C1859 =
        (3 * (C29732 + C29719 * C30234 + C30232 * ae) +
         C29719 * (2 * C30234 +
                   C29719 * (C29739 + C29719 * (C29719 * C29749 + C29828 * ae) +
                             C29719 * C29828 * ae) +
                   C30235 * ae) +
         (2 * C30232 + C29719 * C30235) * ae) /
        C29677;
    const double C133 = (3 * (C29732 + C29739 * C29745) +
                         C29720 * (2 * C29741 + C29720 * C29753)) /
                        C29677;
    const double C282 = (C29732 + C29739 * C29745 + C29753 * C29898) / C29677;
    const double C284 = (C29889 * (2 * C29741 + C29720 * C29753)) / C29677;
    const double C435 =
        (C29732 + C29739 * C29745 + C29719 * (C29719 * C29753 + C30105 * ae) +
         C29719 * C30105 * ae) /
        C29677;
    const double C437 = (C29719 * (2 * C29741 + C29720 * C29753) +
                         (2 * C30103 + C29720 * C30105) * ae) /
                        C29677;
    const double C822 =
        (C29719 * C29889 * C29753 + C29889 * C30105 * ae) / C29677;
    const double C1027 =
        (2 * C29889 * C29753 + C29889 * (C29753 + C29769 * C29898)) / C29677;
    const double C29770 = C29720 * C29768;
    const double C29775 = 2 * C29768;
    const double C29938 = C29719 * C29768;
    const double C29956 = C29889 * C29768;
    const double C29763 = C29748 + C29759;
    const double C30241 = C30237 + C30238;
    const double C4694 = C4559 * C1026;
    const double C14194 = C13131 * C1026;
    const double C14507 = C13130 * C1026;
    const double C5658 = C4559 * C1032;
    const double C14201 = C13131 * C1032;
    const double C5197 = C4559 * C1169;
    const double C14364 = C13131 * C1169;
    const double C14709 = C13130 * C1169;
    const double C9140 = C4559 * C1854;
    const double C20756 = C13131 * C1854;
    const double C21093 = C13130 * C1854;
    const double C5380 =
        (4 * (2 * C30259 + C29889 * C30270) +
         C29889 *
             (3 * C30270 + C29889 * (2 * C29889 * C29749 +
                                     C29889 * (C29749 + C29765 * C29898)))) /
        C29677;
    const double C30315 = C30311 + C30312;
    const double C30346 = C29719 * C30342;
    const double C30353 = 2 * C30342;
    const double C142 =
        (3 * (C29738 + be * C29741 + C29720 * C29752) +
         be * (2 * C29741 + C29720 * C29753) +
         C29720 *
             (2 * C29752 + be * C29753 +
              C29720 * (C29748 + be * C29720 * C29749 +
                        C29720 * (be * C29749 + C29720 * std::pow(C29722, 6) *
                                                    bs[6] * C29731)))) /
        C29679;
    const double C293 =
        ((yP - yQ) * (C29738 + be * C29741 + C29720 * C29752)) / C29679;
    const double C295 =
        (be * C29732 + C29720 * C29738 + C29752 * std::pow(yP - yQ, 2)) /
        C29679;
    const double C446 =
        (ae * (C29728 * C29725 * C29815 +
               C29720 * (C29720 * C29734 * C29735 * C29815 + C29816 * be) +
               C29720 * C29816 * be) +
         C29719 * (C29738 + be * C29741 + C29720 * C29752)) /
        C29679;
    const double C448 = (be * C29732 + C29720 * C29738 + ae * C29719 * C29825 +
                         C29719 * (ae * C29825 + C29719 * C29752)) /
                        C29679;
    const double C828 =
        (ae * C29889 * C29825 + C29719 * C29889 * C29752) / C29679;
    const double C1035 = (2 * C29889 * C29752 +
                          C29889 * (C29752 + C29768 * std::pow(C29889, 2))) /
                         C29679;
    const double C29835 = C29720 * C29834;
    const double C29840 = 2 * C29834;
    const double C29904 = C29889 * C29834;
    const double C29937 = ae * C29834;
    const double C29936 = C29719 * C29834;
    const double C1181 = (ae * (C29825 + C29834 * C29898) +
                          C29719 * (C29752 + C29768 * C29898)) /
                         C29679;
    const double C1863 = (2 * (ae * C29825 + C29719 * C29752) +
                          ae * (C29825 + C29834 * std::pow(C29719, 2)) +
                          C29719 * (C29752 + ae * C29719 * C29834 +
                                    C29719 * (ae * C29834 + C29719 * C29768))) /
                         C29679;
    const double C1023 =
        (2 * C29889 * C29825 + C29889 * (C29825 + C29834 * C29898)) / C29677;
    const double C1166 = (C29719 * (C29825 + C29834 * C29898)) / C29677;
    const double C1851 =
        (2 * C29719 * C29825 + C29719 * (C29825 + C29834 * C29931)) / C29677;
    const double C1183 =
        (C29738 + C29748 * C29898 + ae * C29719 * C29912 +
         C29719 * (ae * C29912 + C29719 * (C29748 + C29764 * C29898))) /
        C29679;
    const double C1551 =
        (ae * (2 * C29902 + C29889 * C29912) +
         C29719 * (2 * C29889 * C29748 + C29889 * (C29748 + C29764 * C29898))) /
        C29679;
    const double C1028 = (3 * (C29819 + C29823 * C29898) +
                          C29889 * (2 * C29902 + C29889 * C29912)) /
                         C29677;
    const double C1171 = (C29819 + C29823 * C29898 + C29912 * C29931) / C29677;
    const double C1545 = (C29719 * (2 * C29902 + C29889 * C29912)) / C29677;
    const double C6217 =
        (2 * C29719 * C29912 + C29719 * (C29912 + C29974 * C29931)) / C29677;
    const double C1865 =
        (3 * (C29738 + ae * C29928 + C29719 * C29932) +
         ae * (2 * C29928 + C29719 * C29934) +
         C29719 * (2 * C29932 + ae * C29934 +
                   C29719 * (C29748 + ae * C29719 * C29829 +
                             C29719 * (ae * C29829 + C29719 * C29764)))) /
        C29679;
    const double C1856 = (3 * (C29819 + C29823 * C29931) +
                          C29719 * (2 * C29928 + C29719 * C29934)) /
                         C29677;
    const double C29999 = C29996 + C29997;
    const double C6592 = C30506 * C2231;
    const double C15692 = C13126 * C2231;
    const double C6590 = C30506 * C2225;
    const double C15688 = C13126 * C2225;
    const double C30026 = C29719 * C30022;
    const double C30031 = 2 * C30022;
    const double C30025 = C29748 + C30021;
    const double C29851 = C29849 * be;
    const double C30109 = C29720 * C29849;
    const double C30113 = 3 * C29849;
    const double C30191 = C29889 * C29849;
    const double C30246 = C29719 * C29849;
    const double C30245 = C29849 * ae;
    const double C1170 = (C29719 * (C29753 + C29769 * C29898) +
                          (C30105 + C29849 * C29898) * ae) /
                         C29677;
    const double C1855 =
        (2 * (C29719 * C29753 + C30105 * ae) +
         C29719 * (C29753 + C29719 * (C29719 * C29769 + C29849 * ae) +
                   C29719 * C29849 * ae) +
         (C30105 + C29849 * C29931) * ae) /
        C29677;
    const double C1018 =
        2 * C29889 * C30105 + C29889 * (C30105 + C29849 * C29898);
    const double C1155 = C29719 * (C30105 + C29849 * C29898);
    const double C1846 =
        2 * C29719 * C30105 + C29719 * (C30105 + C29849 * C29931);
    const double C30206 = C29831 + C30205;
    const double C30242 = C29831 + C30240;
    const double C30327 = 2 * C30263;
    const double C30378 = C29719 * C30263;
    const double C30377 = C30263 * ae;
    const double C2229 =
        (2 * (C29719 * C30262 + C30189 * ae) +
         C29719 * (C30262 + C29719 * (C29719 * C29889 * C29777 + C30263 * ae) +
                   C29719 * C30263 * ae) +
         (C30189 + C30263 * C29931) * ae) /
        C29677;
    const double C2223 =
        2 * C29719 * C30189 + C29719 * (C30189 + C30263 * C29931);
    const double C30393 = 2 * C30388;
    const double C30391 = C30388 * ae;
    const double C30390 = C30386 + C30387;
    const double C29852 = C29720 * C29850;
    const double C29861 = 2 * C29850;
    const double C29914 = C29850 * C29898;
    const double C29939 = C29850 * C29931;
    const double C29957 = C29889 * C29850;
    const double C30063 = ae * C29850;
    const double C30062 = C29719 * C29850;
    const double C30284 = C29889 * C30283;
    const double C30290 = 3 * C30283;
    const double C30321 = C29719 * C30283;
    const double C30320 = C30283 * ae;
    const double C6218 =
        (2 * (C29719 * C30270 + C30203 * ae) +
         C29719 * (C30270 + C29719 * (C29719 * C30276 + C30283 * ae) +
                   C29719 * C30283 * ae) +
         (C30203 + C30283 * C29931) * ae) /
        C29677;
    const double C6214 =
        2 * C29719 * C30203 + C29719 * (C30203 + C30283 * C29931);
    const double C30316 = C30260 + C30314;
    const double C30408 = 2 * C30403;
    const double C30406 = C30403 * ae;
    const double C30409 = C30405 + C30402;
    const double C30347 = C29719 * C30344;
    const double C30359 = 3 * C30344;
    const double C30357 = C30344 * ae;
    const double C30364 = C29719 * C30360;
    const double C29795 = C29720 * C29793;
    const double C1033 =
        (3 * (C29753 + C29769 * C29898) +
         C29889 * (2 * C29889 * C29769 + C29889 * (C29769 + C29793 * C29898))) /
        C29677;
    const double C29794 = C29720 * C29792;
    const double C29989 = C29792 * C29898;
    const double C30055 = C29889 * C29792;
    const double C30064 = C29719 * C29792;
    const double C1038 =
        (3 * (C29752 + C29768 * C29898) +
         C29889 * (2 * C29889 * C29768 + C29889 * (C29768 + C29792 * C29898))) /
        C29679;
    const double C29969 = C29889 * C29968;
    const double C30004 = C29719 * C29968;
    const double C6223 =
        (2 * (ae * C29912 + C29719 * C29963) + ae * (C29912 + C29974 * C29931) +
         C29719 * (C29963 + ae * C29719 * C29974 +
                   C29719 * (ae * C29974 + C29719 * C29968))) /
        C29679;
    const double C30044 = C29719 * C30040;
    const double C30085 = C30077 + C30081;
    const double C29875 = C29720 * C29872;
    const double C30010 = C29872 * C29898;
    const double C30056 = C29889 * C29872;
    const double C30065 = C29872 * C29931;
    const double C29984 = C29889 * C29983;
    const double C30005 = C29983 * C29931;
    const double C30045 = C29719 * C30042;
    const double C30086 = C29980 + C30083;
    const double C6379 = C4559 * C1163;
    const double C14356 = C13131 * C1163;
    const double C15423 = C13130 * C1163;
    const double C6377 = C4559 * C1151;
    const double C14352 = C13131 * C1151;
    const double C15419 = C13130 * C1151;
    const double C4700 = C4559 * C266;
    const double C13319 = C13130 * C266;
    const double C13306 = C13131 * C266;
    const double C4930 = C4559 * C267;
    const double C13314 = C13131 * C267;
    const double C13603 = C13130 * C267;
    const double C9146 = C4559 * C419;
    const double C19077 = C13130 * C419;
    const double C19064 = C13131 * C419;
    const double C9355 = C4559 * C420;
    const double C19072 = C13131 * C420;
    const double C19345 = C13130 * C420;
    const double C5198 = C4559 * C814;
    const double C13951 = C13130 * C814;
    const double C13946 = C13131 * C814;
    const double C5535 = C4559 * C1174;
    const double C14369 = C13130 * C1174;
    const double C5539 = C4559 * C1548;
    const double C14847 = C13130 * C1548;
    const double C5389 = C4559 * C1019;
    const double C14195 = C13130 * C1019;
    const double C5533 = C4559 * C1156;
    const double C14365 = C13130 * C1156;
    const double C5537 = C4559 * C1542;
    const double C14843 = C13130 * C1542;
    const double C10432 = C4559 * C1847;
    const double C20757 = C13130 * C1847;
    const double C29773 = C29761 + C29771;
    const double C5651 =
        (4 * (2 * C30262 + C29889 * C30302) +
         C29889 * (3 * C30302 +
                   C29889 * (2 * C29889 * C29777 +
                             C29889 * (C29777 + C29720 * C29789 * C29898)))) /
        C29677;
    const double C30278 = C30275 + C30277;
    const double C29976 = C29972 + C29975;
    const double C6219 = (3 * (C29902 + C29954 * C29931) +
                          C29719 * (2 * C29995 + C29719 * C30000)) /
                         C29677;
    const double C30084 = C29965 + C30080;
    const double C30029 = C30023 + C30027;
    const double C29876 = C29864 + C29874;
    const double C30209 = C29849 + C30208;
    const double C30249 = C29849 + C30247;
    const double C30330 = C29889 * C30329;
    const double C30383 = C30263 + C30381;
    const double C30395 = C29719 * C30392;
    const double C30296 = C30293 + C30295;
    const double C30324 = C30283 + C30322;
    const double C30367 = C30363 + C30365;
    const double C30412 = C29719 * C30410;
    const double C30536 = C30535 / C30526;
    const double C30835 = 2 * C30801;
    const double C30545 = C30544 / C30523;
    const double C30839 = C30805 / C30541;
    const double C30864 = C30799 - C30834;
    const double C2440 = -C30834;
    const double C30878 = C30863 + C30533;
    const double C30618 = C30617 / C30526;
    const double C30843 = 2 * C30810;
    const double C30625 = C30624 / C30523;
    const double C30853 = C30819 / C30541;
    const double C30872 = C30813 - C30850;
    const double C2332 = -C30850;
    const double C30881 = C30868 + C30614;
    const double C30660 = C30659 / C30526;
    const double C30846 = 2 * C30812;
    const double C30667 = C30666 / C30523;
    const double C30859 = C30825 / C30541;
    const double C30875 = C30814 - C30856;
    const double C3094 = -C30856;
    const double C30882 = C30870 + C30656;
    const double C5387 = C4681 - C4682;
    const double C5386 = C4679 - C4680;
    const double C4708 = C4677 - C4678;
    const double C4707 = C4675 - C4676;
    const double C5527 = C5188 - C5189;
    const double C25412 = C5189 - C5188;
    const double C5526 = C5186 - C5187;
    const double C25411 = C5187 - C5186;
    const double C25026 = C5184 - C5185;
    const double C25024 = C5185 - C5184;
    const double C25025 = C5182 - C5183;
    const double C25023 = C5183 - C5182;
    const double C5399 = C5390 - C5391;
    const double C10430 = C9127 - C9128;
    const double C10429 = C9125 - C9126;
    const double C9154 = C9123 - C9124;
    const double C9153 = C9121 - C9122;
    const double C5395 = C30506 * C5383;
    const double C4695 = C30506 * C273;
    const double C13311 = C13126 * C273;
    const double C13298 = C13127 * C273;
    const double C4688 = C30506 * C278;
    const double C13303 = C13126 * C278;
    const double C13290 = C13127 * C278;
    const double C9141 = C30506 * C426;
    const double C19069 = C13126 * C426;
    const double C19056 = C13127 * C426;
    const double C9134 = C30506 * C431;
    const double C19061 = C13126 * C431;
    const double C19048 = C13127 * C431;
    const double C5190 = C30506 * C818;
    const double C13943 = C13126 * C818;
    const double C13938 = C13127 * C818;
    const double C9796 = C5531 - C5530;
    const double C25410 = C5530 - C5531;
    const double C9795 = C5529 - C5528;
    const double C25409 = C5528 - C5529;
    const double C10434 = C4559 * C1859;
    const double C20761 = C13130 * C1859;
    const double C4702 = C4559 * C282;
    const double C13323 = C13130 * C282;
    const double C13310 = C13131 * C282;
    const double C4932 = C4559 * C284;
    const double C13318 = C13131 * C284;
    const double C13607 = C13130 * C284;
    const double C9148 = C4559 * C435;
    const double C19081 = C13130 * C435;
    const double C19068 = C13131 * C435;
    const double C9357 = C4559 * C437;
    const double C19076 = C13131 * C437;
    const double C19349 = C13130 * C437;
    const double C5200 = C4559 * C822;
    const double C13955 = C13130 * C822;
    const double C13950 = C13131 * C822;
    const double C4705 = C4559 * C1027;
    const double C14509 = C13131 * C1027;
    const double C29782 = C29775 + C29776;
    const double C29772 = C29763 + C29770;
    const double C5394 = C4559 * C5380;
    const double C30348 = C29739 + C30346;
    const double C4697 = C30506 * C293;
    const double C13315 = C13126 * C293;
    const double C13302 = C13127 * C293;
    const double C4690 = C30506 * C295;
    const double C13307 = C13126 * C295;
    const double C13294 = C13127 * C295;
    const double C9143 = C30506 * C446;
    const double C19073 = C13126 * C446;
    const double C19060 = C13127 * C446;
    const double C9136 = C30506 * C448;
    const double C19065 = C13126 * C448;
    const double C19052 = C13127 * C448;
    const double C5192 = C30506 * C828;
    const double C13947 = C13126 * C828;
    const double C13942 = C13127 * C828;
    const double C4693 = C30506 * C1035;
    const double C14193 = C13127 * C1035;
    const double C14508 = C13126 * C1035;
    const double C29836 = C29823 + C29835;
    const double C1178 = (C29889 * C29752 + ae * C29719 * C29904 +
                          C29719 * (ae * C29904 + C29719 * C29889 * C29768)) /
                         C29679;
    const double C1160 = (C29889 * C29825 + C29904 * C29931) / C29677;
    const double C29940 = C29937 + C29938;
    const double C5196 = C30506 * C1181;
    const double C14363 = C13127 * C1181;
    const double C14710 = C13126 * C1181;
    const double C9139 = C30506 * C1863;
    const double C20755 = C13127 * C1863;
    const double C21094 = C13126 * C1863;
    const double C4691 = C30506 * C1023;
    const double C14189 = C13127 * C1023;
    const double C14504 = C13126 * C1023;
    const double C5194 = C30506 * C1166;
    const double C14359 = C13127 * C1166;
    const double C14706 = C13126 * C1166;
    const double C9137 = C30506 * C1851;
    const double C20751 = C13127 * C1851;
    const double C21090 = C13126 * C1851;
    const double C5534 = C30506 * C1183;
    const double C14370 = C13126 * C1183;
    const double C5538 = C30506 * C1551;
    const double C14848 = C13126 * C1551;
    const double C5388 = C30506 * C1028;
    const double C14196 = C13126 * C1028;
    const double C5532 = C30506 * C1171;
    const double C14366 = C13126 * C1171;
    const double C5536 = C30506 * C1545;
    const double C14844 = C13126 * C1545;
    const double C6594 = C30506 * C6217;
    const double C10433 = C30506 * C1865;
    const double C20762 = C13126 * C1865;
    const double C10431 = C30506 * C1856;
    const double C20758 = C13126 * C1856;
    const double C6224 =
        (3 * (C29953 + ae * C29995 + C29719 * C29999) +
         ae * (2 * C29995 + C29719 * C30000) +
         C29719 *
             (2 * C29999 + ae * C30000 +
              C29719 * (C29965 + ae * C29719 * C29980 +
                        C29719 * (ae * C29980 + C29719 * C29889 * C29788)))) /
        C29679;
    const double C10808 = C6592 - C6591;
    const double C26704 = C6591 - C6592;
    const double C10807 = C6590 - C6589;
    const double C26703 = C6589 - C6590;
    const double C30038 = C30031 + C30032;
    const double C30028 = C30025 + C30026;
    const double C30110 = C30108 + C30109;
    const double C1164 =
        (C29889 * C29753 + C29719 * (C29719 * C29889 * C29769 + C30191 * ae) +
         C29719 * C30191 * ae) /
        C29677;
    const double C2230 =
        (2 * (C29719 * C30265 + C30191 * ae) +
         C29719 * (C30265 + C29719 * (C29719 * C29889 * C29793 + C30266 * ae) +
                   C29719 * C30266 * ae) +
         (C30191 + C30266 * C29931) * ae) /
        C29677;
    const double C1152 = C29889 * C30105 + C30191 * C29931;
    const double C2224 =
        2 * C29719 * C30191 + C29719 * (C30191 + C30266 * C29931);
    const double C30248 = C30244 + C30245;
    const double C5204 = C4559 * C1170;
    const double C14711 = C13131 * C1170;
    const double C9151 = C4559 * C1855;
    const double C21095 = C13131 * C1855;
    const double C4703 = C4559 * C1018;
    const double C14505 = C13131 * C1018;
    const double C5202 = C4559 * C1155;
    const double C14707 = C13131 * C1155;
    const double C9149 = C4559 * C1846;
    const double C21091 = C13131 * C1846;
    const double C1175 =
        (C29741 + C29755 * C29898 +
         C29719 * (C29719 * (C29755 + C29777 * C29898) + C30206 * ae) +
         C29719 * C30206 * ae) /
        C29677;
    const double C1549 =
        (C29719 * (2 * C29889 * C29755 + C29889 * (C29755 + C29777 * C29898)) +
         (2 * C30189 + C29889 * C30206) * ae) /
        C29677;
    const double C5810 =
        (C29719 * (3 * C30302 +
                   C29889 * (2 * C29889 * C29777 +
                             C29889 * (C29777 + C29720 * C29789 * C29898))) +
         (3 * C30206 +
          C29889 * (2 * C30263 + C29889 * (C29845 + C29867 * C29898))) *
             ae) /
        C29677;
    const double C6484 =
        (2 * (C29719 * C30302 + C30206 * ae) +
         C29719 * (C30302 +
                   C29719 * (C29719 * (C29777 + C29720 * C29789 * C29898) +
                             C30329 * ae) +
                   C29719 * C30329 * ae) +
         (C30206 + C30329 * C29931) * ae) /
        C29677;
    const double C1020 = 3 * (C30103 + C29831 * C29898) +
                         C29889 * (2 * C30189 + C29889 * C30206);
    const double C1157 = C30103 + C29831 * C29898 + C30206 * C29931;
    const double C1543 = C29719 * (2 * C30189 + C29889 * C30206);
    const double C6482 =
        2 * C29719 * C30206 + C29719 * (C30206 + C30329 * C29931);
    const double C1860 =
        (3 * (C29741 + C29719 * C30241 + C30239 * ae) +
         C29719 * (2 * C30241 +
                   C29719 * (C29755 + C29719 * (C29719 * C29777 + C29845 * ae) +
                             C29719 * C29845 * ae) +
                   C30242 * ae) +
         (2 * C30239 + C29719 * C30242) * ae) /
        C29677;
    const double C1848 = 3 * (C30103 + C29831 * C29931) +
                         C29719 * (2 * C30239 + C29719 * C30242);
    const double C30382 = C30380 + C30377;
    const double C10595 = C4559 * C2229;
    const double C15693 = C13131 * C2229;
    const double C10593 = C4559 * C2223;
    const double C15689 = C13131 * C2223;
    const double C30394 = C29719 * C30390;
    const double C29853 = C29829 + C29852;
    const double C29915 = C29834 + C29914;
    const double C29941 = C29834 + C29939;
    const double C30009 = 2 * C29957;
    const double C30054 = ae * C29957;
    const double C30053 = C29719 * C29957;
    const double C2232 =
        (2 * (ae * C29904 + C29719 * C29956) + ae * (C29904 + C29957 * C29931) +
         C29719 * (C29956 + ae * C29719 * C29957 +
                   C29719 * (ae * C29957 + C29719 * C29889 * C29792))) /
        C29679;
    const double C2226 =
        (2 * C29719 * C29904 + C29719 * (C29904 + C29957 * C29931)) / C29677;
    const double C30068 = 2 * C30062;
    const double C30066 = ae * C30062;
    const double C30285 = C30281 + C30284;
    const double C30323 = C30319 + C30320;
    const double C6595 = C4559 * C6218;
    const double C6593 = C4559 * C6214;
    const double C6220 =
        (3 * (C30259 + C29719 * C30315 + C30313 * ae) +
         C29719 * (2 * C30315 +
                   C29719 * (C30273 +
                             C29719 * (C29719 * C29889 * C29765 + C30291 * ae) +
                             C29719 * C30291 * ae) +
                   C30316 * ae) +
         (2 * C30313 + C29719 * C30316) * ae) /
        C29677;
    const double C6215 = 3 * (C30187 + C30260 * C29931) +
                         C29719 * (2 * C30313 + C29719 * C30316);
    const double C30411 = C29719 * C30409;
    const double C30349 = C30345 + C30347;
    const double C30366 = C29749 + C30364;
    const double C29797 = C29785 + C29795;
    const double C29796 = C29787 + C29794;
    const double C29990 = C29768 + C29989;
    const double C30057 = C29719 * C30055;
    const double C30067 = C30063 + C30064;
    const double C5659 = C30506 * C1038;
    const double C14202 = C13127 * C1038;
    const double C29970 = C29967 + C29969;
    const double C30006 = C30003 + C30004;
    const double C6596 = C30506 * C6223;
    const double C30046 = C30043 + C30044;
    const double C30087 = C29719 * C30085;
    const double C29877 = C29843 + C29875;
    const double C30011 = C29850 + C30010;
    const double C30058 = C30056 * C29931;
    const double C30069 = C29850 + C30065;
    const double C29985 = C29982 + C29984;
    const double C30007 = C29974 + C30005;
    const double C30047 = C30041 + C30045;
    const double C30088 = C29719 * C30086;
    const double C135 = (4 * (2 * C29741 + C29720 * C29753) +
                         C29720 * (3 * C29753 + C29720 * C29773)) /
                        C29677;
    const double C286 =
        (2 * C29741 + C29720 * C29753 + C29773 * C29898) / C29677;
    const double C288 = (C29889 * (3 * C29753 + C29720 * C29773)) / C29677;
    const double C5382 =
        (5 * (3 * C30270 + C29889 * C30278) +
         C29889 * (4 * C30278 +
                   C29889 * (3 * C30276 +
                             C29889 * (2 * C29889 * C29765 +
                                       C29889 * (C29765 + C29789 * C29898))))) /
        C29677;
    const double C5379 = (4 * (2 * C29902 + C29889 * C29912) +
                          C29889 * (3 * C29912 + C29889 * C29976)) /
                         C29677;
    const double C5516 =
        (2 * C29902 + C29889 * C29912 + C29976 * C29931) / C29677;
    const double C5518 = (C29719 * (3 * C29912 + C29889 * C29976)) / C29677;
    const double C10810 = C30506 * C6219;
    const double C10422 = (4 * (2 * C29928 + C29719 * C29934) +
                           C29719 * (3 * C29934 + C29719 * C30029)) /
                          C29677;
    const double C29878 = C29876 * be;
    const double C30114 = C29720 * C29876;
    const double C30252 = C29889 * C29876;
    const double C1176 =
        (C29753 + C29769 * C29898 +
         C29719 * (C29719 * (C29769 + C29793 * C29898) + C30209 * ae) +
         C29719 * C30209 * ae) /
        C29677;
    const double C1550 =
        (C29719 * (2 * C29889 * C29769 + C29889 * (C29769 + C29793 * C29898)) +
         (2 * C30191 + C29889 * C30209) * ae) /
        C29677;
    const double C1021 = 3 * (C30105 + C29849 * C29898) +
                         C29889 * (2 * C30191 + C29889 * C30209);
    const double C1158 = C30105 + C29849 * C29898 + C30209 * C29931;
    const double C1544 = C29719 * (2 * C30191 + C29889 * C30209);
    const double C1849 = 3 * (C30105 + C29849 * C29931) +
                         C29719 * (2 * C30246 + C29719 * C30249);
    const double C30331 = C30327 + C30330;
    const double C10586 = 3 * (C30189 + C30263 * C29931) +
                          C29719 * (2 * C30378 + C29719 * C30383);
    const double C30397 = C30393 + C30395;
    const double C30297 = C29889 * C30296;
    const double C6216 = 3 * (C30203 + C30283 * C29931) +
                         C29719 * (2 * C30321 + C29719 * C30324);
    const double C30369 = C29719 * C30367;
    const double C30414 = C30408 + C30412;
    const double C30537 = C30533 - C30536;
    const double C30865 = C30835 / C30523;
    const double C30546 = C30542 - C30545;
    const double C30879 = C30864 / C30527;
    const double C30619 = C30614 - C30618;
    const double C30869 = C30843 / C30523;
    const double C30626 = C30622 - C30625;
    const double C30883 = C30872 / C30527;
    const double C30661 = C30656 - C30660;
    const double C30871 = C30846 / C30523;
    const double C30668 = C30664 - C30667;
    const double C30885 = C30875 / C30527;
    const double C5397 = C5387 * C30757;
    const double C5396 = C5386 * C116;
    const double C4714 = C4708 * C30757;
    const double C4713 = C4707 * C116;
    const double C5545 = C5527 * C30757;
    const double C5544 = C5526 * C116;
    const double C5402 = C5399 * C30757;
    const double C4709 = C4687 - C4688;
    const double C9155 = C9133 - C9134;
    const double C25029 = C5190 - C5191;
    const double C25027 = C5191 - C5190;
    const double C143 =
        (4 * (2 * C29752 + be * C29753 + C29720 * C29772) +
         be * (3 * C29753 + C29720 * C29773) +
         C29720 * (3 * C29772 + be * C29773 +
                   C29720 * (2 * C29768 + be * C29769 +
                             C29720 * (C29764 + be * C29720 * C29765 +
                                       C29720 * (be * C29765 +
                                                 C29720 * std::pow(C29724, 7) *
                                                     bs[7] * C29731))))) /
        C29679;
    const double C296 = (C29738 + be * C29741 + C29720 * C29752 +
                         C29772 * std::pow(yP - yQ, 2)) /
                        C29679;
    const double C297 =
        ((yP - yQ) * (2 * C29752 + be * C29753 + C29720 * C29772)) / C29679;
    const double C30350 = C30348 + C30343;
    const double C4710 = C4689 - C4690;
    const double C9156 = C9135 - C9136;
    const double C25030 = C5192 - C5193;
    const double C25028 = C5193 - C5192;
    const double C5655 = C4693 - C4694;
    const double C29837 = C29836 + C29833;
    const double C6380 = C30506 * C1178;
    const double C14355 = C13127 * C1178;
    const double C15424 = C13126 * C1178;
    const double C6378 = C30506 * C1160;
    const double C14351 = C13127 * C1160;
    const double C15420 = C13126 * C1160;
    const double C5814 = C5196 - C5197;
    const double C25740 = C5197 - C5196;
    const double C10700 = C9139 - C9140;
    const double C5654 = C4691 - C4692;
    const double C5813 = C5194 - C5195;
    const double C25739 = C5195 - C5194;
    const double C10699 = C9137 - C9138;
    const double C5547 = C5534 - C5535;
    const double C25414 = C5535 - C5534;
    const double C5925 = C5538 - C5539;
    const double C25872 = C5539 - C5538;
    const double C5398 = C5388 - C5389;
    const double C5546 = C5532 - C5533;
    const double C25413 = C5533 - C5532;
    const double C5924 = C5536 - C5537;
    const double C25871 = C5537 - C5536;
    const double C10440 = C10433 - C10434;
    const double C10439 = C10431 - C10432;
    const double C10812 = C30506 * C6224;
    const double C10426 =
        (4 * (2 * C29932 + ae * C29934 + C29719 * C30028) +
         ae * (3 * C29934 + C29719 * C30029) +
         C29719 *
             (3 * C30028 + ae * C30029 +
              C29719 * (2 * C30022 + ae * C30024 +
                        C29719 * (C29764 + ae * C29719 * C29843 +
                                  C29719 * (ae * C29843 + C29719 * C29788))))) /
        C29679;
    const double C439 =
        (2 * C29741 + C29720 * C29753 +
         C29719 * (C29719 * C29773 + C30110 * ae) + C29719 * C30110 * ae) /
        C29677;
    const double C441 = (C29719 * (3 * C29753 + C29720 * C29773) +
                         (3 * C30105 + C29720 * C30110) * ae) /
                        C29677;
    const double C824 =
        (C29719 * C29889 * C29773 + C29889 * C30110 * ae) / C29677;
    const double C122 = 4 * (2 * C30103 + C29720 * C30105) +
                        C29720 * (3 * C30105 + C29720 * C30110);
    const double C268 = 2 * C30103 + C29720 * C30105 + C30110 * C29898;
    const double C269 = C29889 * (3 * C30105 + C29720 * C30110);
    const double C421 = 2 * C30103 + C29720 * C30105 + C30110 * C29931;
    const double C422 = C29719 * (3 * C30105 + C29720 * C30110);
    const double C815 = C29719 * C29889 * C30110;
    const double C1290 =
        2 * C29889 * C30110 + C29889 * (C30110 + C29876 * C29898);
    const double C1440 = C29719 * (C30110 + C29876 * C29898);
    const double C2120 =
        2 * C29719 * C30110 + C29719 * (C30110 + C29876 * C29931);
    const double C9511 = C4559 * C1164;
    const double C15425 = C13131 * C1164;
    const double C9509 = C4559 * C1152;
    const double C15421 = C13131 * C1152;
    const double C1861 =
        (3 * (C29753 + C29719 * C30248 + C30246 * ae) +
         C29719 * (2 * C30248 +
                   C29719 * (C29769 + C29719 * (C29719 * C29793 + C29871 * ae) +
                             C29719 * C29871 * ae) +
                   C30249 * ae) +
         (2 * C30246 + C29719 * C30249) * ae) /
        C29677;
    const double C6383 = C4559 * C1175;
    const double C14371 = C13131 * C1175;
    const double C5817 = C4559 * C1549;
    const double C14849 = C13131 * C1549;
    const double C5656 = C4559 * C1020;
    const double C14197 = C13131 * C1020;
    const double C6381 = C4559 * C1157;
    const double C14367 = C13131 * C1157;
    const double C5815 = C4559 * C1543;
    const double C14845 = C13131 * C1543;
    const double C10703 = C4559 * C1860;
    const double C20763 = C13131 * C1860;
    const double C10701 = C4559 * C1848;
    const double C20759 = C13131 * C1848;
    const double C10588 =
        (3 * (C30262 + C29719 * C30382 + C30378 * ae) +
         C29719 * (2 * C30382 +
                   C29719 * (C30376 +
                             C29719 * (C29719 * C29889 * C29720 * C29789 +
                                       C30379 * ae) +
                             C29719 * C30379 * ae) +
                   C30383 * ae) +
         (2 * C30378 + C29719 * C30383) * ae) /
        C29677;
    const double C30396 = C29755 + C30394;
    const double C29854 = C29853 + C29848;
    const double C1184 =
        (C29752 + C29768 * C29898 + ae * C29719 * C29915 +
         C29719 * (ae * C29915 + C29719 * (C29768 + C29792 * C29898))) /
        C29679;
    const double C1552 =
        (ae * (2 * C29904 + C29889 * C29915) +
         C29719 * (2 * C29889 * C29768 + C29889 * (C29768 + C29792 * C29898))) /
        C29679;
    const double C1029 = (3 * (C29825 + C29834 * C29898) +
                          C29889 * (2 * C29904 + C29889 * C29915)) /
                         C29677;
    const double C1172 = (C29825 + C29834 * C29898 + C29915 * C29931) / C29677;
    const double C1546 = (C29719 * (2 * C29904 + C29889 * C29915)) / C29677;
    const double C1866 =
        (3 * (C29752 + ae * C29936 + C29719 * C29940) +
         ae * (2 * C29936 + C29719 * C29941) +
         C29719 * (2 * C29940 + ae * C29941 +
                   C29719 * (C29768 + ae * C29719 * C29850 +
                             C29719 * (ae * C29850 + C29719 * C29792)))) /
        C29679;
    const double C1857 = (3 * (C29825 + C29834 * C29931) +
                          C29719 * (2 * C29936 + C29719 * C29941)) /
                         C29677;
    const double C10596 = C30506 * C2232;
    const double C15694 = C13127 * C2232;
    const double C10594 = C30506 * C2226;
    const double C15690 = C13127 * C2226;
    const double C30070 = C29768 + C30066;
    const double C5517 =
        (2 * C30259 + C29889 * C30270 +
         C29719 * (C29719 * C30278 + C30285 * ae) + C29719 * C30285 * ae) /
        C29677;
    const double C5519 = (C29719 * (3 * C30270 + C29889 * C30278) +
                          (3 * C30203 + C29889 * C30285) * ae) /
                         C29677;
    const double C6586 =
        (2 * (C29719 * C30278 + C30285 * ae) +
         C29719 * (C30278 +
                   C29719 * (C29719 * (2 * C29889 * C29765 +
                                       C29889 * (C29765 + C29789 * C29898)) +
                             C30296 * ae) +
                   C29719 * C30296 * ae) +
         (C30285 + C30296 * C29931) * ae) /
        C29677;
    const double C5377 = 4 * (2 * C30187 + C29889 * C30203) +
                         C29889 * (3 * C30203 + C29889 * C30285);
    const double C5513 = 2 * C30187 + C29889 * C30203 + C30285 * C29931;
    const double C5514 = C29719 * (3 * C30203 + C29889 * C30285);
    const double C6584 =
        2 * C29719 * C30285 + C29719 * (C30285 + C30296 * C29931);
    const double C6222 =
        (3 * (C30270 + C29719 * C30323 + C30321 * ae) +
         C29719 * (2 * C30323 +
                   C29719 * (C30276 +
                             C29719 * (C29719 * (C29765 + C29789 * C29898) +
                                       C30294 * ae) +
                             C29719 * C30294 * ae) +
                   C30324 * ae) +
         (2 * C30321 + C29719 * C30324) * ae) /
        C29677;
    const double C10811 = C4559 * C6220;
    const double C10809 = C4559 * C6215;
    const double C30413 = C30273 + C30411;
    const double C10420 = 4 * (2 * C30232 + C29719 * C30235) +
                          C29719 * (3 * C30235 + C29719 * C30349);
    const double C30368 = C30366 + C30361;
    const double C29799 = C29720 * C29797;
    const double C1292 =
        (2 * C29889 * C29773 + C29889 * (C29773 + C29797 * C29898)) / C29677;
    const double C1442 = (C29719 * (C29773 + C29797 * C29898) +
                          (C30110 + C29876 * C29898) * ae) /
                         C29677;
    const double C2122 =
        (2 * (C29719 * C29773 + C30110 * ae) +
         C29719 * (C29773 + C29719 * (C29719 * C29797 + C29876 * ae) +
                   C29719 * C29876 * ae) +
         (C30110 + C29876 * C29931) * ae) /
        C29677;
    const double C29798 = C29720 * C29796;
    const double C29945 = C29719 * C29796;
    const double C29959 = C29889 * C29796;
    const double C1036 = (2 * C29889 * C29772 +
                          C29889 * (C29772 + C29796 * std::pow(C29889, 2))) /
                         C29679;
    const double C1039 =
        (3 * (C29772 + C29796 * C29898) +
         C29889 * (2 * C29889 * C29796 +
                   C29889 * (C29796 + (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29898))) /
        C29679;
    const double C5652 =
        (4 * (2 * C29956 + C29889 * C29990) +
         C29889 * (3 * C29990 +
                   C29889 * (2 * C29889 * C29792 +
                             C29889 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29898)))) /
        C29679;
    const double C5811 =
        (ae * (3 * C29915 +
               C29889 * (2 * C29957 + C29889 * (C29850 + C29872 * C29898))) +
         C29719 * (3 * C29990 +
                   C29889 * (2 * C29889 * C29792 +
                             C29889 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29898)))) /
        C29679;
    const double C30059 = C30054 + C30057;
    const double C30071 = C29719 * C30067;
    const double C5384 =
        (5 * (3 * C29963 + C29889 * C29970) +
         C29889 * (4 * C29970 +
                   C29889 * (3 * C29968 +
                             C29889 * (2 * C29889 * C29788 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29898))))) /
        C29679;
    const double C5522 = (2 * C29953 + C29889 * C29963 + ae * C29719 * C29976 +
                          C29719 * (ae * C29976 + C29719 * C29970)) /
                         C29679;
    const double C5523 = (ae * (3 * C29912 + C29889 * C29976) +
                          C29719 * (3 * C29963 + C29889 * C29970)) /
                         C29679;
    const double C30048 = C29719 * C30046;
    const double C30089 = C30084 + C30087;
    const double C29879 = C29877 + C29870;
    const double C30012 = C29889 * C30011;
    const double C6485 =
        (2 * (ae * C29915 + C29719 * C29990) + ae * (C29915 + C30011 * C29931) +
         C29719 * (C29990 + ae * C29719 * C30011 +
                   C29719 * (ae * C30011 +
                             C29719 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29898)))) /
        C29679;
    const double C6483 =
        (2 * C29719 * C29915 + C29719 * (C29915 + C30011 * C29931)) / C29677;
    const double C30060 = C29957 + C30058;
    const double C30072 = C29719 * C30069;
    const double C29986 = C29889 * C29985;
    const double C6587 =
        (2 * (ae * C29976 + C29719 * C29970) + ae * (C29976 + C29985 * C29931) +
         C29719 * (C29970 + ae * C29719 * C29985 +
                   C29719 * (ae * C29985 +
                             C29719 * (2 * C29889 * C29788 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29898))))) /
        C29679;
    const double C6585 =
        (2 * C29719 * C29976 + C29719 * (C29976 + C29985 * C29931)) / C29677;
    const double C6225 =
        (3 * (C29963 + ae * C30002 + C29719 * C30006) +
         ae * (2 * C30002 + C29719 * C30007) +
         C29719 * (2 * C30006 + ae * C30007 +
                   C29719 * (C29968 + ae * C29719 * C29983 +
                             C29719 * (ae * C29983 +
                                       C29719 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29898))))) /
        C29679;
    const double C6221 = (3 * (C29912 + C29974 * C29931) +
                          C29719 * (2 * C30002 + C29719 * C30007)) /
                         C29677;
    const double C30049 = C29719 * C30047;
    const double C30090 = C30082 + C30088;
    const double C4936 = C4559 * C286;
    const double C13325 = C13131 * C286;
    const double C13609 = C13131 * C288;
    const double C5393 = C30506 * C5379;
    const double C5541 = C30506 * C5516;
    const double C5927 = C30506 * C5518;
    const double C10436 = C30506 * C10422;
    const double C30115 = C30113 + C30114;
    const double C2016 =
        (C29889 * C29773 + C29719 * (C29719 * C29889 * C29797 + C30252 * ae) +
         C29719 * C30252 * ae) /
        C29677;
    const double C2014 = C29889 * C30110 + C30252 * C29931;
    const double C6374 =
        (2 * C30262 + C29889 * C30302 +
         C29719 * (C29719 * (2 * C29889 * C29777 +
                             C29889 * (C29777 + C29720 * C29789 * C29898)) +
                   C30331 * ae) +
         C29719 * C30331 * ae) /
        C29677;
    const double C5649 = 4 * (2 * C30189 + C29889 * C30206) +
                         C29889 * (3 * C30206 + C29889 * C30331);
    const double C5808 = C29719 * (3 * C30206 + C29889 * C30331);
    const double C6372 = 2 * C30189 + C29889 * C30206 + C30331 * C29931;
    const double C10694 = 4 * (2 * C30239 + C29719 * C30242) +
                          C29719 * (3 * C30242 + C29719 * C30397);
    const double C30298 = C30290 + C30297;
    const double C30371 = C30359 + C30369;
    const double C10802 = 4 * (2 * C30313 + C29719 * C30316) +
                          C29719 * (3 * C30316 + C29719 * C30414);
    const double C30798 = C30537 * C30525;
    const double C30837 = C30803 + C30537;
    const double C30806 = C30546 / C30527;
    const double C30802 = C30546 * C30525;
    const double C554 = C30879 - (C30537 * C30528) / C30523;
    const double C30816 = C30619 * C30613;
    const double C30852 = C30818 + C30619;
    const double C30820 = C30626 / C30527;
    const double C30817 = C30626 * C30613;
    const double C1284 = C30883 - (C30619 * C30615) / C30523;
    const double C30822 = C30661 * C30655;
    const double C30858 = C30824 + C30661;
    const double C30826 = C30668 / C30527;
    const double C30823 = C30668 * C30655;
    const double C2116 = C30885 - (C30661 * C30657) / C30523;
    const double C5400 = C5396 + C5397;
    const double C4719 = C4713 + C4714;
    const double C5548 = C5544 + C5545;
    const double C4715 = C4709 * C116;
    const double C4701 = C30506 * C296;
    const double C13324 = C13126 * C296;
    const double C13309 = C13127 * C296;
    const double C4933 = C30506 * C297;
    const double C13317 = C13127 * C297;
    const double C13608 = C13126 * C297;
    const double C10423 =
        (4 * (2 * C30234 + C29719 * C30350 + C30235 * ae) +
         C29719 *
             (3 * C30350 +
              C29719 *
                  (2 * C30342 +
                   C29719 * (C29749 + C29719 * (C29719 * C29765 + C29842 * ae) +
                             C29719 * C29842 * ae) +
                   C30344 * ae) +
              C30349 * ae) +
         (3 * C30235 + C29719 * C30349) * ae) /
        C29677;
    const double C4716 = C4710 * C30757;
    const double C5661 = C5655 * C30757;
    const double C449 =
        (C29738 + be * C29741 + C29720 * C29752 + ae * C29719 * C29837 +
         C29719 * (ae * C29837 + C29719 * C29772)) /
        C29679;
    const double C450 =
        (ae * (2 * C29825 + C29720 * C29837 + (C29816 + C29828 * C29745) * be) +
         C29719 * (2 * C29752 + be * C29753 + C29720 * C29772)) /
        C29679;
    const double C829 =
        (ae * C29889 * C29837 + C29719 * C29889 * C29772) / C29679;
    const double C132 = (3 * (C29819 + C29720 * C29825 + C30103 * be) +
                         C29720 * (2 * C29825 + C29720 * C29837 + C30105 * be) +
                         (2 * C30103 + C29720 * C30105) * be) /
                        C29677;
    const double C279 =
        (C29819 + C29720 * C29825 + C30103 * be + C29837 * C29898) / C29677;
    const double C283 =
        (C29889 * (2 * C29825 + C29720 * C29837 + C30105 * be)) / C29677;
    const double C432 =
        (C29819 + C29720 * C29825 + C30103 * be + C29837 * C29931) / C29677;
    const double C436 =
        (C29719 * (2 * C29825 + C29720 * C29837 + C30105 * be)) / C29677;
    const double C819 = (C29719 * C29889 * C29837) / C29677;
    const double C10592 = C6380 - C6379;
    const double C26442 = C6379 - C6380;
    const double C10591 = C6378 - C6377;
    const double C26441 = C6377 - C6378;
    const double C5820 = C5814 * C30757;
    const double C5660 = C5654 * C116;
    const double C5819 = C5813 * C116;
    const double C5550 = C5547 * C30757;
    const double C5931 = C5925 * C30757;
    const double C5401 = C5398 * C116;
    const double C5549 = C5546 * C116;
    const double C5930 = C5924 * C116;
    const double C10438 = C30506 * C10426;
    const double C9361 = C4559 * C439;
    const double C19083 = C13131 * C439;
    const double C19351 = C13131 * C441;
    const double C13957 = C13131 * C824;
    const double C24697 = C4559 * C824;
    const double C4934 = C4559 * C268;
    const double C13321 = C13131 * C268;
    const double C13605 = C13131 * C269;
    const double C9359 = C4559 * C421;
    const double C19079 = C13131 * C421;
    const double C19347 = C13131 * C422;
    const double C13953 = C13131 * C815;
    const double C24695 = C4559 * C815;
    const double C30398 = C30396 + C30391;
    const double C29855 = C29720 * C29854;
    const double C29860 = 3 * C29854;
    const double C29906 = C29889 * C29854;
    const double C29944 = ae * C29854;
    const double C29943 = C29719 * C29854;
    const double C1182 = (ae * (C29837 + C29854 * C29898) +
                          C29719 * (C29772 + C29796 * C29898)) /
                         C29679;
    const double C1864 = (2 * (ae * C29837 + C29719 * C29772) +
                          ae * (C29837 + C29854 * std::pow(C29719, 2)) +
                          C29719 * (C29772 + ae * C29719 * C29854 +
                                    C29719 * (ae * C29854 + C29719 * C29796))) /
                         C29679;
    const double C1024 =
        (2 * C29889 * C29837 + C29889 * (C29837 + C29854 * C29898)) / C29677;
    const double C1167 = (C29719 * (C29837 + C29854 * C29898)) / C29677;
    const double C1852 =
        (2 * C29719 * C29837 + C29719 * (C29837 + C29854 * C29931)) / C29677;
    const double C6384 = C30506 * C1184;
    const double C14372 = C13127 * C1184;
    const double C5818 = C30506 * C1552;
    const double C14850 = C13127 * C1552;
    const double C5657 = C30506 * C1029;
    const double C14198 = C13127 * C1029;
    const double C6382 = C30506 * C1172;
    const double C14368 = C13127 * C1172;
    const double C5816 = C30506 * C1546;
    const double C14846 = C13127 * C1546;
    const double C10704 = C30506 * C1866;
    const double C20764 = C13127 * C1866;
    const double C10702 = C30506 * C1857;
    const double C20760 = C13127 * C1857;
    const double C5542 = C4559 * C5517;
    const double C5928 = C4559 * C5519;
    const double C5392 = C4559 * C5377;
    const double C5540 = C4559 * C5513;
    const double C5926 = C4559 * C5514;
    const double C30415 = C30413 + C30406;
    const double C10435 = C4559 * C10420;
    const double C30370 = C29719 * C30368;
    const double C29801 = C29781 + C29799;
    const double C29800 = C29782 + C29798;
    const double C4706 = C30506 * C1036;
    const double C14510 = C13127 * C1036;
    const double C30073 = C30070 + C30071;
    const double C5543 = C30506 * C5522;
    const double C5929 = C30506 * C5523;
    const double C30050 = C30038 + C30048;
    const double C29880 = C29720 * C29879;
    const double C29917 = C29879 * C29898;
    const double C29946 = C29879 * C29931;
    const double C29960 = C29889 * C29879;
    const double C30013 = C30009 + C30012;
    const double C10589 =
        (3 * (C29956 + ae * C30053 + C29719 * C30059) +
         ae * (2 * C30053 + C29719 * C30060) +
         C29719 * (2 * C30059 + ae * C30060 +
                   C29719 * (C30055 + ae * C29719 * C30056 +
                             C29719 * (ae * C30056 +
                                       C29719 * C29889 *
                                           (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C10587 = (3 * (C29904 + C29957 * C29931) +
                           C29719 * (2 * C30053 + C29719 * C30060)) /
                          C29677;
    const double C30074 = C30068 + C30072;
    const double C29987 = C29979 + C29986;
    const double C30051 = C30036 + C30049;
    const double C10805 =
        (4 * (2 * C29999 + ae * C30000 + C29719 * C30089) +
         ae * (3 * C30000 + C29719 * C30090) +
         C29719 * (3 * C30089 + ae * C30090 +
                   C29719 * (2 * C30085 + ae * C30086 +
                             C29719 * (C30078 + ae * C29719 * C30079 +
                                       C29719 * (ae * C30079 +
                                                 C29719 * C29889 *
                                                     std::pow(C29722, 8) *
                                                     bs[8] * C29731))))) /
        C29679;
    const double C10803 = (4 * (2 * C29995 + C29719 * C30000) +
                           C29719 * (3 * C30000 + C29719 * C30090)) /
                          C29677;
    const double C123 = 5 * (3 * C30105 + C29720 * C30110) +
                        C29720 * (4 * C30110 + C29720 * C30115);
    const double C270 = 3 * C30105 + C29720 * C30110 + C30115 * C29898;
    const double C423 = 3 * C30105 + C29720 * C30110 + C30115 * C29931;
    const double C558 = C29889 * (4 * C30110 + C29720 * C30115);
    const double C662 = C29719 * (4 * C30110 + C29720 * C30115);
    const double C816 = C29719 * C29889 * C30115;
    const double C5521 =
        (3 * C30270 + C29889 * C30278 +
         C29719 * (C29719 * (3 * C30276 +
                             C29889 * (2 * C29889 * C29765 +
                                       C29889 * (C29765 + C29789 * C29898))) +
                   C30298 * ae) +
         C29719 * C30298 * ae) /
        C29677;
    const double C5921 =
        (C29719 * (4 * C30278 +
                   C29889 * (3 * C30276 +
                             C29889 * (2 * C29889 * C29765 +
                                       C29889 * (C29765 + C29789 * C29898)))) +
         (4 * C30285 + C29889 * C30298) * ae) /
        C29677;
    const double C5378 = 5 * (3 * C30203 + C29889 * C30285) +
                         C29889 * (4 * C30285 + C29889 * C30298);
    const double C5515 = 3 * C30203 + C29889 * C30285 + C30298 * C29931;
    const double C5919 = C29719 * (4 * C30285 + C29889 * C30298);
    const double C10421 = 5 * (3 * C30235 + C29719 * C30349) +
                          C29719 * (4 * C30349 + C29719 * C30371);
    const double C30833 = C30798 / C30523;
    const double C30866 = C30837 / C30527;
    const double C30867 = C30839 + C30806;
    const double C556 = C30806 - C30544 / C30541;
    const double C30836 = C30802 / C30523;
    const double C30849 = C30816 / C30523;
    const double C30873 = C30852 / C30527;
    const double C30874 = C30853 + C30820;
    const double C1286 = C30820 - C30624 / C30541;
    const double C30851 = C30817 / C30523;
    const double C30855 = C30822 / C30523;
    const double C30876 = C30858 / C30527;
    const double C30877 = C30859 + C30826;
    const double C2118 = C30826 - C30666 / C30541;
    const double C30857 = C30823 / C30523;
    const double C4712 = C4701 - C4702;
    const double C10437 = C4559 * C10423;
    const double C4720 = C4715 + C4716;
    const double C9147 = C30506 * C449;
    const double C19082 = C13126 * C449;
    const double C19067 = C13127 * C449;
    const double C9358 = C30506 * C450;
    const double C19075 = C13127 * C450;
    const double C19350 = C13126 * C450;
    const double C5201 = C30506 * C829;
    const double C13956 = C13126 * C829;
    const double C13949 = C13127 * C829;
    const double C4699 = C30506 * C279;
    const double C13320 = C13126 * C279;
    const double C13305 = C13127 * C279;
    const double C4931 = C30506 * C283;
    const double C13313 = C13127 * C283;
    const double C13604 = C13126 * C283;
    const double C9145 = C30506 * C432;
    const double C19078 = C13126 * C432;
    const double C19063 = C13127 * C432;
    const double C9356 = C30506 * C436;
    const double C19071 = C13127 * C436;
    const double C19346 = C13126 * C436;
    const double C5199 = C30506 * C819;
    const double C13952 = C13126 * C819;
    const double C13945 = C13127 * C819;
    const double C5662 = C5660 + C5661;
    const double C5821 = C5819 + C5820;
    const double C5403 = C5401 + C5402;
    const double C5551 = C5549 + C5550;
    const double C5932 = C5930 + C5931;
    const double C10696 =
        (4 * (2 * C30241 + C29719 * C30398 + C30242 * ae) +
         C29719 * (3 * C30398 +
                   C29719 * (2 * C30390 +
                             C29719 * (C29777 +
                                       C29719 * (C29719 * C29720 * C29789 +
                                                 C29867 * ae) +
                                       C29719 * C29867 * ae) +
                             C30392 * ae) +
                   C30397 * ae) +
         (3 * C30242 + C29719 * C30397) * ae) /
        C29677;
    const double C29856 = C29840 + C29855;
    const double C1179 = (C29889 * C29772 + ae * C29719 * C29906 +
                          C29719 * (ae * C29906 + C29719 * C29889 * C29796)) /
                         C29679;
    const double C1161 = (C29889 * C29837 + C29906 * C29931) / C29677;
    const double C29947 = C29944 + C29945;
    const double C5205 = C30506 * C1182;
    const double C14712 = C13127 * C1182;
    const double C9152 = C30506 * C1864;
    const double C21096 = C13127 * C1864;
    const double C4704 = C30506 * C1024;
    const double C14506 = C13127 * C1024;
    const double C5203 = C30506 * C1167;
    const double C14708 = C13127 * C1167;
    const double C9150 = C30506 * C1852;
    const double C21092 = C13127 * C1852;
    const double C10804 =
        (4 * (2 * C30315 + C29719 * C30415 + C30316 * ae) +
         C29719 * (3 * C30415 +
                   C29719 * (2 * C30409 +
                             C29719 * (C30401 +
                                       C29719 * (C29719 * C29889 * C29789 +
                                                 C30404 * ae) +
                                       C29719 * C30404 * ae) +
                             C30410 * ae) +
                   C30414 * ae) +
         (3 * C30316 + C29719 * C30414) * ae) /
        C29677;
    const double C30372 = C30353 + C30370;
    const double C137 = (5 * (3 * C29753 + C29720 * C29773) +
                         C29720 * (4 * C29773 + C29720 * C29801)) /
                        C29677;
    const double C290 =
        (3 * C29753 + C29720 * C29773 + C29801 * C29898) / C29677;
    const double C443 =
        (3 * C29753 + C29720 * C29773 +
         C29719 * (C29719 * C29801 + C30115 * ae) + C29719 * C30115 * ae) /
        C29677;
    const double C560 = (C29889 * (4 * C29773 + C29720 * C29801)) / C29677;
    const double C664 = (C29719 * (4 * C29773 + C29720 * C29801) +
                         (4 * C30110 + C29720 * C30115) * ae) /
                        C29677;
    const double C826 =
        (C29719 * C29889 * C29801 + C29889 * C30115 * ae) / C29677;
    const double C144 =
        (5 * (3 * C29772 + be * C29773 + C29720 * C29800) +
         be * (4 * C29773 + C29720 * C29801) +
         C29720 *
             (4 * C29800 + be * C29801 +
              C29720 *
                  (3 * C29796 + be * C29797 +
                   C29720 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C298 = (2 * C29752 + be * C29753 + C29720 * C29772 +
                         C29800 * std::pow(yP - yQ, 2)) /
                        C29679;
    const double C299 =
        ((yP - yQ) * (3 * C29772 + be * C29773 + C29720 * C29800)) / C29679;
    const double C300 =
        (3 * C29772 + be * C29773 + C29720 * C29800 +
         (3 * C29796 + be * C29797 +
          C29720 *
              (2 * C29792 + be * C29793 +
               C29720 * (C29788 + be * C29720 * C29789 +
                         C29720 * (be * C29789 + C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))) *
             std::pow(yP - yQ, 2)) /
        C29679;
    const double C561 =
        ((yP - yQ) *
         (4 * C29800 + be * C29801 +
          C29720 * (3 * C29796 + be * C29797 +
                    C29720 * (2 * C29792 + be * C29793 +
                              C29720 * (C29788 + be * C29720 * C29789 +
                                        C29720 * (be * C29789 +
                                                  C29720 * std::pow(C29722, 8) *
                                                      bs[8] * C29731)))))) /
        C29679;
    const double C1293 =
        (2 * C29889 * C29800 +
         C29889 * (C29800 + (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29898)) /
        C29679;
    const double C29881 = C29861 + C29880;
    const double C29918 = C29854 + C29917;
    const double C29948 = C29854 + C29946;
    const double C2233 =
        (2 * (ae * C29906 + C29719 * C29959) + ae * (C29906 + C29960 * C29931) +
         C29719 * (C29959 + ae * C29719 * C29960 +
                   C29719 * (ae * C29960 +
                             C29719 * C29889 *
                                 (C29788 + be * C29720 * C29789 +
                                  C29720 * (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C2227 =
        (2 * C29719 * C29906 + C29719 * (C29906 + C29960 * C29931)) / C29677;
    const double C6375 =
        (2 * C29956 + C29889 * C29990 + ae * C29719 * C30013 +
         C29719 * (ae * C30013 +
                   C29719 * (2 * C29889 * C29792 +
                             C29889 * (C29792 + (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731) *
                                                    C29898)))) /
        C29679;
    const double C5650 = (4 * (2 * C29904 + C29889 * C29915) +
                          C29889 * (3 * C29915 + C29889 * C30013)) /
                         C29677;
    const double C5809 = (C29719 * (3 * C29915 + C29889 * C30013)) / C29677;
    const double C6373 =
        (2 * C29904 + C29889 * C29915 + C30013 * C29931) / C29677;
    const double C10697 =
        (4 * (2 * C29940 + ae * C29941 + C29719 * C30073) +
         ae * (3 * C29941 + C29719 * C30074) +
         C29719 *
             (3 * C30073 + ae * C30074 +
              C29719 *
                  (2 * C30067 + ae * C30069 +
                   C29719 * (C29792 + ae * C29719 * C29872 +
                             C29719 * (ae * C29872 +
                                       C29719 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C10695 = (4 * (2 * C29936 + C29719 * C29941) +
                           C29719 * (3 * C29941 + C29719 * C30074)) /
                          C29677;
    const double C5524 =
        (3 * C29963 + C29889 * C29970 + ae * C29719 * C29987 +
         C29719 * (ae * C29987 +
                   C29719 * (3 * C29968 +
                             C29889 * (2 * C29889 * C29788 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29898))))) /
        C29679;
    const double C5922 =
        (ae * (4 * C29976 + C29889 * C29987) +
         C29719 * (4 * C29970 +
                   C29889 * (3 * C29968 +
                             C29889 * (2 * C29889 * C29788 +
                                       C29889 * (C29788 + std::pow(C29722, 8) *
                                                              bs[8] * C29731 *
                                                              C29898))))) /
        C29679;
    const double C5381 = (5 * (3 * C29912 + C29889 * C29976) +
                          C29889 * (4 * C29976 + C29889 * C29987)) /
                         C29677;
    const double C5520 =
        (3 * C29912 + C29889 * C29976 + C29987 * C29931) / C29677;
    const double C5920 = (C29719 * (4 * C29976 + C29889 * C29987)) / C29677;
    const double C10427 =
        (5 * (3 * C30028 + ae * C30029 + C29719 * C30050) +
         ae * (4 * C30029 + C29719 * C30051) +
         C29719 *
             (4 * C30050 + ae * C30051 +
              C29719 *
                  (3 * C30046 + ae * C30047 +
                   C29719 * (2 * C30040 + ae * C30042 +
                             C29719 * (C29788 + ae * C29719 * C29865 +
                                       C29719 * (ae * C29865 +
                                                 C29719 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C10424 = (5 * (3 * C29934 + C29719 * C30029) +
                           C29719 * (4 * C30029 + C29719 * C30051)) /
                          C29677;
    const double C30887 = C30833 + C30879;
    const double C555 = C30866 - (C30546 * C30528) / C30523;
    const double C111 = C30867 / C30527 - C30544 / C30840;
    const double C30880 = C30836 + C30866;
    const double C30888 = C30849 + C30883;
    const double C1285 = C30873 - (C30626 * C30615) / C30523;
    const double C1013 = C30874 / C30527 - C30624 / C30840;
    const double C30884 = C30851 + C30873;
    const double C30889 = C30855 + C30885;
    const double C2117 = C30876 - (C30668 * C30657) / C30523;
    const double C1842 = C30877 / C30527 - C30666 / C30840;
    const double C30886 = C30857 + C30876;
    const double C4718 = C4712 * C30757;
    const double C9158 = C9147 - C9148;
    const double C25034 = C5200 - C5201;
    const double C25032 = C5201 - C5200;
    const double C4711 = C4699 - C4700;
    const double C9157 = C9145 - C9146;
    const double C25033 = C5198 - C5199;
    const double C25031 = C5199 - C5198;
    const double C29857 = C29856 + C29851;
    const double C9512 = C30506 * C1179;
    const double C15426 = C13127 * C1179;
    const double C9510 = C30506 * C1161;
    const double C15422 = C13127 * C1161;
    const double C30373 = C30372 + C30357;
    const double C4937 = C30506 * C298;
    const double C13326 = C13127 * C298;
    const double C13610 = C13127 * C299;
    const double C29882 = C29881 + C29873;
    const double C1185 =
        (C29772 + C29796 * C29898 + ae * C29719 * C29918 +
         C29719 * (ae * C29918 +
                   C29719 * (C29796 + (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29898))) /
        C29679;
    const double C1553 =
        (ae * (2 * C29906 + C29889 * C29918) +
         C29719 * (2 * C29889 * C29796 +
                   C29889 * (C29796 + (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)) *
                                          C29898))) /
        C29679;
    const double C1030 = (3 * (C29837 + C29854 * C29898) +
                          C29889 * (2 * C29906 + C29889 * C29918)) /
                         C29677;
    const double C1173 = (C29837 + C29854 * C29898 + C29918 * C29931) / C29677;
    const double C1547 = (C29719 * (2 * C29906 + C29889 * C29918)) / C29677;
    const double C1867 =
        (3 * (C29772 + ae * C29943 + C29719 * C29947) +
         ae * (2 * C29943 + C29719 * C29948) +
         C29719 *
             (2 * C29947 + ae * C29948 +
              C29719 *
                  (C29796 + ae * C29719 * C29879 +
                   C29719 * (ae * C29879 +
                             C29719 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C1858 = (3 * (C29837 + C29854 * C29931) +
                          C29719 * (2 * C29943 + C29719 * C29948)) /
                         C29677;
    const double C108 =
        (C30878 + 2 * C30537) / C30527 - (C30887 * C30528) / C30523;
    const double C109 =
        (C30865 + 2 * C30546 + C30887) / C30527 - (C30880 * C30528) / C30523;
    const double C110 = (C30838 + C30543 / C30523 + C30880) / C30527 -
                        (C30867 * C30528) / C30523;
    const double C1010 =
        (C30881 + 2 * C30619) / C30527 - (C30888 * C30615) / C30523;
    const double C1011 =
        (C30869 + 2 * C30626 + C30888) / C30527 - (C30884 * C30615) / C30523;
    const double C1012 = (C30844 + C30623 / C30523 + C30884) / C30527 -
                         (C30874 * C30615) / C30523;
    const double C1839 =
        (C30882 + 2 * C30661) / C30527 - (C30889 * C30657) / C30523;
    const double C1840 =
        (C30871 + 2 * C30668 + C30889) / C30527 - (C30886 * C30657) / C30523;
    const double C1841 = (C30847 + C30665 / C30523 + C30886) / C30527 -
                         (C30877 * C30657) / C30523;
    const double C4717 = C4711 * C116;
    const double C451 =
        (2 * C29752 + be * C29753 + C29720 * C29772 + ae * C29719 * C29857 +
         C29719 * (ae * C29857 + C29719 * C29800)) /
        C29679;
    const double C452 =
        (ae * (3 * C29837 + C29720 * C29857 +
               (2 * C29831 + C29720 * C29849) * be) +
         C29719 * (3 * C29772 + be * C29773 + C29720 * C29800)) /
        C29679;
    const double C830 =
        (ae * C29889 * C29857 + C29719 * C29889 * C29800) / C29679;
    const double C134 = (4 * (2 * C29825 + C29720 * C29837 + C30105 * be) +
                         C29720 * (3 * C29837 + C29720 * C29857 + C30110 * be) +
                         (3 * C30105 + C29720 * C30110) * be) /
                        C29677;
    const double C285 =
        (2 * C29825 + C29720 * C29837 + C30105 * be + C29857 * C29898) / C29677;
    const double C287 =
        (C29889 * (3 * C29837 + C29720 * C29857 + C30110 * be)) / C29677;
    const double C438 =
        (2 * C29825 + C29720 * C29837 + C30105 * be + C29857 * C29931) / C29677;
    const double C440 =
        (C29719 * (3 * C29837 + C29720 * C29857 + C30110 * be)) / C29677;
    const double C823 = (C29719 * C29889 * C29857) / C29677;
    const double C10425 =
        (5 * (3 * C30350 + C29719 * C30373 + C30349 * ae) +
         C29719 * (4 * C30373 +
                   C29719 * (3 * C30368 +
                             C29719 * (2 * C30360 +
                                       C29719 * (C29765 +
                                                 C29719 * (C29719 * C29789 +
                                                           C29863 * ae) +
                                                 C29719 * C29863 * ae) +
                                       C30362 * ae) +
                             C30367 * ae) +
                   C30371 * ae) +
         (4 * C30349 + C29719 * C30371) * ae) /
        C29677;
    const double C29883 = C29720 * C29882;
    const double C29950 = C29889 * C29882;
    const double C1443 =
        (ae * (C29857 + C29882 * C29898) +
         C29719 * (C29800 + (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731))) *
                                C29898)) /
        C29679;
    const double C2123 =
        (2 * (ae * C29857 + C29719 * C29800) + ae * (C29857 + C29882 * C29931) +
         C29719 *
             (C29800 + ae * C29719 * C29882 +
              C29719 *
                  (ae * C29882 +
                   C29719 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C1291 =
        (2 * C29889 * C29857 + C29889 * (C29857 + C29882 * C29898)) / C29677;
    const double C1441 = (C29719 * (C29857 + C29882 * C29898)) / C29677;
    const double C2121 =
        (2 * C29719 * C29857 + C29719 * (C29857 + C29882 * C29931)) / C29677;
    const double C4721 = C4717 + C4718;
    const double C9362 = C30506 * C451;
    const double C19084 = C13127 * C451;
    const double C19352 = C13127 * C452;
    const double C13958 = C13127 * C830;
    const double C24698 = C30506 * C830;
    const double C4935 = C30506 * C285;
    const double C13322 = C13127 * C285;
    const double C13606 = C13127 * C287;
    const double C9360 = C30506 * C438;
    const double C19080 = C13127 * C438;
    const double C19348 = C13127 * C440;
    const double C13954 = C13127 * C823;
    const double C24696 = C30506 * C823;
    const double C29884 = C29860 + C29883;
    const double C2017 =
        (C29889 * C29800 + ae * C29719 * C29950 +
         C29719 * (ae * C29950 +
                   C29719 * C29889 *
                       (2 * C29792 + be * C29793 +
                        C29720 * (C29788 + be * C29720 * C29789 +
                                  C29720 * (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C2015 = (C29889 * C29857 + C29950 * C29931) / C29677;
    const double C29885 = C29884 + C29878;
    const double C453 =
        (3 * C29772 + be * C29773 + C29720 * C29800 + ae * C29719 * C29885 +
         C29719 *
             (ae * C29885 +
              C29719 *
                  (3 * C29796 + be * C29797 +
                   C29720 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C665 =
        (ae * (4 * C29857 + C29720 * C29885 +
               (3 * C29849 + C29720 * C29876) * be) +
         C29719 *
             (4 * C29800 + be * C29801 +
              C29720 *
                  (3 * C29796 + be * C29797 +
                   C29720 * (2 * C29792 + be * C29793 +
                             C29720 * (C29788 + be * C29720 * C29789 +
                                       C29720 * (be * C29789 +
                                                 C29720 * std::pow(C29722, 8) *
                                                     bs[8] * C29731)))))) /
        C29679;
    const double C831 =
        (ae * C29889 * C29885 +
         C29719 * C29889 *
             (3 * C29796 + be * C29797 +
              C29720 * (2 * C29792 + be * C29793 +
                        C29720 * (C29788 + be * C29720 * C29789 +
                                  C29720 * (be * C29789 +
                                            C29720 * std::pow(C29722, 8) *
                                                bs[8] * C29731))))) /
        C29679;
    const double C136 = (5 * (3 * C29837 + C29720 * C29857 + C30110 * be) +
                         C29720 * (4 * C29857 + C29720 * C29885 + C30115 * be) +
                         (4 * C30110 + C29720 * C30115) * be) /
                        C29677;
    const double C289 =
        (3 * C29837 + C29720 * C29857 + C30110 * be + C29885 * C29898) / C29677;
    const double C442 =
        (3 * C29837 + C29720 * C29857 + C30110 * be + C29885 * C29931) / C29677;
    const double C559 =
        (C29889 * (4 * C29857 + C29720 * C29885 + C30115 * be)) / C29677;
    const double C663 =
        (C29719 * (4 * C29857 + C29720 * C29885 + C30115 * be)) / C29677;
    const double C825 = (C29719 * C29889 * C29885) / C29677;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30619 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30626 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30578 * C2700) *
              C30537 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30619 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30626 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C14503 - C14504 + C14505 - C14506) * C116 +
             (C14507 - C14508 + C14509 - C14510) * C30757) *
                C13129) *
               C30578 * C2700) *
              C30546 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C30619 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30626 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30619 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30814 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30626 +
           ((((C13288 - C13287 + C13290 - C13289) * C116 +
              (C13292 - C13291 + C13294 - C13293) * C30757) *
                 C13128 +
             ((C14187 - C14188 + C14189 - C14190) * C116 +
              (C14191 - C14192 + C14193 - C14194) * C30757) *
                 C13129) *
                C30814 +
            (((C14358 - C14357 + C14360 - C14359) * C116 +
              (C14362 - C14361 + C14364 - C14363) * C30757) *
                 C13128 +
             ((C14843 - C14844 + C14845 - C14846) * C116 +
              (C14847 - C14848 + C14849 - C14850) * C30757) *
                 C13129) *
                C30665) *
               C2700) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30814 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30619 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30814 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30626 +
           ((((C13304 - C13303 + C13306 - C13305) * C116 +
              (C13308 - C13307 + C13310 - C13309) * C30757) *
                 C13128 +
             ((C14503 - C14504 + C14505 - C14506) * C116 +
              (C14507 - C14508 + C14509 - C14510) * C30757) *
                 C13129) *
                C30814 +
            (((C14706 - C14705 + C14708 - C14707) * C116 +
              (C14710 - C14709 + C14712 - C14711) * C30757) *
                 C13128 +
             ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
               C13131 * C1544) *
                  C116 +
              (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
               C13131 * C1550) *
                  C30757) *
                 C13129) *
                C30665) *
               C2700) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30888 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30884 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30578 * C30874 +
           (((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C30578 * C30854) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30888 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30884 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C14503 - C14504 + C14505 - C14506) * C116 +
             (C14507 - C14508 + C14509 - C14510) * C30757) *
                C13129) *
               C30578 * C30874 +
           (((C14504 - C14503 + C14506 - C14505) * C116 +
             (C14508 - C14507 + C14510 - C14509) * C30757) *
                C13128 +
            ((C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
              C13131 * C1021) *
                 C116 +
             (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
              C13131 * C1033) *
                 C30757) *
                C13129) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30623) *
              C30887 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30623) *
              C30880 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30623) *
              C30867 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13604 - C13603 + C13606 - C13605) * C116 +
             (C13608 - C13607 + C13610 - C13609) * C30757) *
                C13128 +
            ((C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                 C116 +
             (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                 C30757) *
                C13129) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30882 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30871 +
            (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                  C116 +
              (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                  C30757) *
                 C13128 +
             ((C14349 - C14350 + C14351 - C14352) * C116 +
              (C14353 - C14354 + C14355 - C14356) * C30757) *
                 C13129) *
                C30847) *
               C2332 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30882 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30871 +
            (((C14350 - C14349 + C14352 - C14351) * C116 +
              (C14354 - C14353 + C14356 - C14355) * C30757) *
                 C13128 +
             ((C14365 - C14366 + C14367 - C14368) * C116 +
              (C14369 - C14370 + C14371 - C14372) * C30757) *
                 C13129) *
                C30847) *
               C30623) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30882 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30871 +
            (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                  C116 +
              (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                  C30757) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C116 +
              (C15423 - C15424 + C15425 - C15426) * C30757) *
                 C13129) *
                C30847) *
               C2332 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30882 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30871 +
            (((C15420 - C15419 + C15422 - C15421) * C116 +
              (C15424 - C15423 + C15426 - C15425) * C30757) *
                 C13128 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30757) *
                 C13129) *
                C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30814 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30537 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30814 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30814 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30546 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30757) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C116 +
              (C13315 - C13316 + C13317 - C13318) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                  C116 +
              (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                  C30757) *
                 C13128 +
             ((C13951 - C13952 + C13953 - C13954) * C116 +
              (C13955 - C13956 + C13957 - C13958) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13312 - C13311 + C13314 - C13313) * C116 +
              (C13316 - C13315 + C13318 - C13317) * C30757) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C116 +
              (C13323 - C13324 + C13325 - C13326) * C30757) *
                 C13129) *
                C30814 +
            (((C13952 - C13951 + C13954 - C13953) * C116 +
              (C13956 - C13955 + C13958 - C13957) * C30757) *
                 C13128 +
             ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
               C13131 * C1440) *
                  C116 +
              (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
               C13131 * C1442) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30623) *
              C30887 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30623) *
              C30880 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30623) *
              C30867 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C30578 * C2332 +
           (((C13604 - C13603 + C13606 - C13605) * C116 +
             (C13608 - C13607 + C13610 - C13609) * C30757) *
                C13128 +
            ((C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                 C116 +
             (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                 C30757) *
                C13129) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30888 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30884 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30578 * C30874 +
           (((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C30578 * C30854) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30888 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30884 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C14503 - C14504 + C14505 - C14506) * C116 +
             (C14507 - C14508 + C14509 - C14510) * C30757) *
                C13129) *
               C30578 * C30874 +
           (((C14504 - C14503 + C14506 - C14505) * C116 +
             (C14508 - C14507 + C14510 - C14509) * C30757) *
                C13128 +
            ((C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
              C13131 * C1021) *
                 C116 +
             (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
              C13131 * C1033) *
                 C30757) *
                C13129) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30619 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C3094 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30626 +
           ((((C13288 - C13287 + C13290 - C13289) * C116 +
              (C13292 - C13291 + C13294 - C13293) * C30757) *
                 C13128 +
             ((C14187 - C14188 + C14189 - C14190) * C116 +
              (C14191 - C14192 + C14193 - C14194) * C30757) *
                 C13129) *
                C3094 +
            (((C14358 - C14357 + C14360 - C14359) * C116 +
              (C14362 - C14361 + C14364 - C14363) * C30757) *
                 C13128 +
             ((C14843 - C14844 + C14845 - C14846) * C116 +
              (C14847 - C14848 + C14849 - C14850) * C30757) *
                 C13129) *
                C30665) *
               C2700) *
              C30799 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C3094 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30619 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C3094 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30626 +
           ((((C13304 - C13303 + C13306 - C13305) * C116 +
              (C13308 - C13307 + C13310 - C13309) * C30757) *
                 C13128 +
             ((C14503 - C14504 + C14505 - C14506) * C116 +
              (C14507 - C14508 + C14509 - C14510) * C30757) *
                 C13129) *
                C3094 +
            (((C14706 - C14705 + C14708 - C14707) * C116 +
              (C14710 - C14709 + C14712 - C14711) * C30757) *
                 C13128 +
             ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
               C13131 * C1544) *
                  C116 +
              (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
               C13131 * C1550) *
                  C30757) *
                 C13129) *
                C30665) *
               C2700) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30661 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30668 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C3602) *
              C30619 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30661 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30668 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C3602) *
              C30626 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30661 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C30668 +
           (((C14366 - C14365 + C14368 - C14367) * C116 +
             (C14370 - C14369 + C14372 - C14371) * C30757) *
                C13128 +
            ((C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
              C13131 * C6372) *
                 C116 +
             (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
              C13131 * C6374) *
                 C30757) *
                C13129) *
               C3602) *
              C2700) *
         C30532) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C3094 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30665) *
              C30888 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C3094 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30665) *
              C30884 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C3094 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C30665) *
              C30874 +
          ((((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C3094 +
           (((C14844 - C14843 + C14846 - C14845) * C116 +
             (C14848 - C14847 + C14850 - C14849) * C30757) *
                C13128 +
            ((C13126 * C5518 - C13130 * C5514 + C13127 * C5809 -
              C13131 * C5808) *
                 C116 +
             (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 -
              C13131 * C5810) *
                 C30757) *
                C13129) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C3094 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30878 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C3094 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C3094 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30865 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30757) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C116 +
              (C13315 - C13316 + C13317 - C13318) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                  C116 +
              (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                  C30757) *
                 C13128 +
             ((C13951 - C13952 + C13953 - C13954) * C116 +
              (C13955 - C13956 + C13957 - C13958) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13312 - C13311 + C13314 - C13313) * C116 +
              (C13316 - C13315 + C13318 - C13317) * C30757) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C116 +
              (C13323 - C13324 + C13325 - C13326) * C30757) *
                 C13129) *
                C3094 +
            (((C13952 - C13951 + C13954 - C13953) * C116 +
              (C13956 - C13955 + C13958 - C13957) * C30757) *
                 C13128 +
             ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
               C13131 * C1440) *
                  C116 +
              (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
               C13131 * C1442) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30889 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30886 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30877 +
           (((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
              C13127 * C1851) *
                 C116 +
             (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
              C13127 * C1863) *
                 C30757) *
                C13128 +
            ((C15687 - C15688 + C15689 - C15690) * C116 +
             (C15691 - C15692 + C15693 - C15694) * C30757) *
                C13129) *
               C30860) *
              C2332 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30889 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30886 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C30877 +
           (((C15688 - C15687 + C15690 - C15689) * C116 +
             (C15692 - C15691 + C15694 - C15693) * C30757) *
                C13128 +
            ((C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
              C13131 * C6482) *
                 C116 +
             (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
              C13131 * C6484) *
                 C30757) *
                C13129) *
               C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30661 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30668 +
            (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                  C116 +
              (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                  C30757) *
                 C13128 +
             ((C14349 - C14350 + C14351 - C14352) * C116 +
              (C14353 - C14354 + C14355 - C14356) * C30757) *
                 C13129) *
                C3602) *
               C2332 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30661 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30668 +
            (((C14350 - C14349 + C14352 - C14351) * C116 +
              (C14354 - C14353 + C14356 - C14355) * C30757) *
                 C13128 +
             ((C14365 - C14366 + C14367 - C14368) * C116 +
              (C14369 - C14370 + C14371 - C14372) * C30757) *
                 C13129) *
                C3602) *
               C30623) *
              C30799 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30661 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30668 +
            (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                  C116 +
              (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                  C30757) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C116 +
              (C15423 - C15424 + C15425 - C15426) * C30757) *
                 C13129) *
                C3602) *
               C2332 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30661 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30668 +
            (((C15420 - C15419 + C15422 - C15421) * C116 +
              (C15424 - C15423 + C15426 - C15425) * C30757) *
                 C13128 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30757) *
                 C13129) *
                C3602) *
               C30623) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C3094 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30878 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C3094 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C3094 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30865 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30757) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C116 +
              (C13315 - C13316 + C13317 - C13318) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                  C116 +
              (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                  C30757) *
                 C13128 +
             ((C13951 - C13952 + C13953 - C13954) * C116 +
              (C13955 - C13956 + C13957 - C13958) * C30757) *
                 C13129) *
                C30665) *
               C2332 +
           ((((C13312 - C13311 + C13314 - C13313) * C116 +
              (C13316 - C13315 + C13318 - C13317) * C30757) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C116 +
              (C13323 - C13324 + C13325 - C13326) * C30757) *
                 C13129) *
                C3094 +
            (((C13952 - C13951 + C13954 - C13953) * C116 +
              (C13956 - C13955 + C13958 - C13957) * C30757) *
                 C13128 +
             ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
               C13131 * C1440) *
                  C116 +
              (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
               C13131 * C1442) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C3094 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30665) *
              C30888 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C3094 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30665) *
              C30884 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C3094 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C30665) *
              C30874 +
          ((((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C3094 +
           (((C14844 - C14843 + C14846 - C14845) * C116 +
             (C14848 - C14847 + C14850 - C14849) * C30757) *
                C13128 +
            ((C13126 * C5518 - C13130 * C5514 + C13127 * C5809 -
              C13131 * C5808) *
                 C116 +
             (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 -
              C13131 * C5810) *
                 C30757) *
                C13129) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C1284 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C1285 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30578 * C1286 +
           (((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C30578 * C30854) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C1284 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C1285 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C14503 - C14504 + C14505 - C14506) * C116 +
             (C14507 - C14508 + C14509 - C14510) * C30757) *
                C13129) *
               C30578 * C1286 +
           (((C14504 - C14503 + C14506 - C14505) * C116 +
             (C14508 - C14507 + C14510 - C14509) * C30757) *
                C13128 +
            ((C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
              C13131 * C1021) *
                 C116 +
             (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
              C13131 * C1033) *
                 C30757) *
                C13129) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30623) *
              C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30623) *
              C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30623) *
              C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13604 - C13603 + C13606 - C13605) * C116 +
             (C13608 - C13607 + C13610 - C13609) * C30757) *
                C13128 +
            ((C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                 C116 +
             (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                 C30757) *
                C13129) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C1664 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C1665 +
            (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                  C116 +
              (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                  C30757) *
                 C13128 +
             ((C14349 - C14350 + C14351 - C14352) * C116 +
              (C14353 - C14354 + C14355 - C14356) * C30757) *
                 C13129) *
                C30847) *
               C30813 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C1664 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C1665 +
            (((C14350 - C14349 + C14352 - C14351) * C116 +
              (C14354 - C14353 + C14356 - C14355) * C30757) *
                 C13128 +
             ((C14365 - C14366 + C14367 - C14368) * C116 +
              (C14369 - C14370 + C14371 - C14372) * C30757) *
                 C13129) *
                C30847) *
               C30623) *
              C30799 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C1664 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C1665 +
            (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                  C116 +
              (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                  C30757) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C116 +
              (C15423 - C15424 + C15425 - C15426) * C30757) *
                 C13129) *
                C30847) *
               C30813 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C1664 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C1665 +
            (((C15420 - C15419 + C15422 - C15421) * C116 +
              (C15424 - C15423 + C15426 - C15425) * C30757) *
                 C13128 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30757) *
                 C13129) *
                C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30814 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30665) *
              C1284 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30814 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30665) *
              C1285 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30814 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C30665) *
              C1286 +
          ((((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C30814 +
           (((C14844 - C14843 + C14846 - C14845) * C116 +
             (C14848 - C14847 + C14850 - C14849) * C30757) *
                C13128 +
            ((C13126 * C5518 - C13130 * C5514 + C13127 * C5809 -
              C13131 * C5808) *
                 C116 +
             (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 -
              C13131 * C5810) *
                 C30757) *
                C13129) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30814 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C13126 * C1165 - C13130 * C1153 + C13127 * C1166 -
               C13131 * C1154) *
                  C116 +
              (C13126 * C1180 - C13130 * C1168 + C13127 * C1181 -
               C13131 * C1169) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C258 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30814 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30814 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C13130 * C1154 - C13126 * C1166 + C13131 * C1155 -
               C13127 * C1167) *
                  C116 +
              (C13130 * C1169 - C13126 * C1181 + C13131 * C1170 -
               C13127 * C1182) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C259 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30757) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C116 +
              (C13315 - C13316 + C13317 - C13318) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                  C116 +
              (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                  C30757) *
                 C13128 +
             ((C13951 - C13952 + C13953 - C13954) * C116 +
              (C13955 - C13956 + C13957 - C13958) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13312 - C13311 + C13314 - C13313) * C116 +
              (C13316 - C13315 + C13318 - C13317) * C30757) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C116 +
              (C13323 - C13324 + C13325 - C13326) * C30757) *
                 C13129) *
                C30814 +
            (((C13952 - C13951 + C13954 - C13953) * C116 +
              (C13956 - C13955 + C13958 - C13957) * C30757) *
                 C13128 +
             ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
               C13131 * C1440) *
                  C116 +
              (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
               C13131 * C1442) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C2116 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C2117 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C2118 +
           (((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
              C13127 * C1851) *
                 C116 +
             (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
              C13127 * C1863) *
                 C30757) *
                C13128 +
            ((C15687 - C15688 + C15689 - C15690) * C116 +
             (C15691 - C15692 + C15693 - C15694) * C30757) *
                C13129) *
               C30860) *
              C30813 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C2116 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C2117 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C2118 +
           (((C15688 - C15687 + C15690 - C15689) * C116 +
             (C15692 - C15691 + C15694 - C15693) * C30757) *
                C13128 +
            ((C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
              C13131 * C6482) *
                 C116 +
             (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
              C13131 * C6484) *
                 C30757) *
                C13129) *
               C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C124 - C13130 * C117 + C13127 * C125 -
                 C13131 * C118) *
                    C116 +
                (C13126 * C138 - C13130 * C127 + C13127 * C139 -
                 C13131 * C128) *
                    C30757) *
                   C13128 +
               ((C13126 * C271 - C13130 * C261 + C13127 * C272 -
                 C13131 * C262) *
                    C116 +
                (C13126 * C291 - C13130 * C274 + C13127 * C292 -
                 C13131 * C275) *
                    C30757) *
                   C13129) *
                  C30578 * C30560 * C108 +
              (((C13130 * C118 - C13126 * C125 + C13131 * C119 -
                 C13127 * C126) *
                    C116 +
                (C13130 * C128 - C13126 * C139 + C13131 * C129 -
                 C13127 * C140) *
                    C30757) *
                   C13128 +
               ((C13130 * C262 - C13126 * C272 + C13131 * C263 -
                 C13127 * C273) *
                    C116 +
                (C13130 * C275 - C13126 * C292 + C13131 * C276 -
                 C13127 * C293) *
                    C30757) *
                   C13129) *
                  C30578 * C30560 * C109 +
              (((C13126 * C126 - C13130 * C119 + C13127 * C130 -
                 C13131 * C120) *
                    C116 +
                (C13126 * C140 - C13130 * C129 + C13127 * C141 -
                 C13131 * C131) *
                    C30757) *
                   C13128 +
               ((C13126 * C273 - C13130 * C263 + C13127 * C283 -
                 C13131 * C267) *
                    C116 +
                (C13126 * C293 - C13130 * C276 + C13127 * C297 -
                 C13131 * C284) *
                    C30757) *
                   C13129) *
                  C30578 * C30560 * C110 +
              (((C13130 * C120 - C13126 * C130 + C13131 * C121 -
                 C13127 * C132) *
                    C116 +
                (C13130 * C131 - C13126 * C141 + C13131 * C133 -
                 C13127 * C142) *
                    C30757) *
                   C13128 +
               ((C13130 * C267 - C13126 * C283 + C13131 * C269 -
                 C13127 * C287) *
                    C116 +
                (C13130 * C284 - C13126 * C297 + C13131 * C288 -
                 C13127 * C299) *
                    C30757) *
                   C13129) *
                  C30578 * C30560 * C111 +
              (((C13126 * C132 - C13130 * C121 + C13127 * C134 -
                 C13131 * C122) *
                    C116 +
                (C13126 * C142 - C13130 * C133 + C13127 * C143 -
                 C13131 * C135) *
                    C30757) *
                   C13128 +
               ((C13126 * C287 - C13130 * C269 + C13127 * C559 -
                 C13131 * C558) *
                    C116 +
                (C13126 * C299 - C13130 * C288 + C13127 * C561 -
                 C13131 * C560) *
                    C30757) *
                   C13129) *
                  C30578 * C30560 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C13126 * C124 - C13130 * C117 + C13127 * C125 -
                  C13131 * C118) *
                     C116 +
                 (C13126 * C138 - C13130 * C127 + C13127 * C139 -
                  C13131 * C128) *
                     C30757) *
                    C13128 +
                ((C13279 - C13280 + C13281 - C13282) * C116 +
                 (C13283 - C13284 + C13285 - C13286) * C30757) *
                    C13129) *
                   C30578 * C30881 +
               (((C13280 - C13279 + C13282 - C13281) * C116 +
                 (C13284 - C13283 + C13286 - C13285) * C30757) *
                    C13128 +
                ((C13287 - C13288 + C13289 - C13290) * C116 +
                 (C13291 - C13292 + C13293 - C13294) * C30757) *
                    C13129) *
                   C30578 * C30869 +
               (((C13288 - C13287 + C13290 - C13289) * C116 +
                 (C13292 - C13291 + C13294 - C13293) * C30757) *
                    C13128 +
                ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
                  C13131 * C1017) *
                     C116 +
                 (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
                  C13131 * C1026) *
                     C30757) *
                    C13129) *
                   C30578 * C30844) *
                  C258 +
              ((((C13130 * C118 - C13126 * C125 + C13131 * C119 -
                  C13127 * C126) *
                     C116 +
                 (C13130 * C128 - C13126 * C139 + C13131 * C129 -
                  C13127 * C140) *
                     C30757) *
                    C13128 +
                ((C13295 - C13296 + C13297 - C13298) * C116 +
                 (C13299 - C13300 + C13301 - C13302) * C30757) *
                    C13129) *
                   C30578 * C30881 +
               (((C13296 - C13295 + C13298 - C13297) * C116 +
                 (C13300 - C13299 + C13302 - C13301) * C30757) *
                    C13128 +
                ((C13303 - C13304 + C13305 - C13306) * C116 +
                 (C13307 - C13308 + C13309 - C13310) * C30757) *
                    C13129) *
                   C30578 * C30869 +
               (((C13304 - C13303 + C13306 - C13305) * C116 +
                 (C13308 - C13307 + C13310 - C13309) * C30757) *
                    C13128 +
                ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
                  C13127 * C1024) *
                     C116 +
                 (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
                  C13127 * C1036) *
                     C30757) *
                    C13129) *
                   C30578 * C30844) *
                  C259 +
              ((((C13126 * C126 - C13130 * C119 + C13127 * C130 -
                  C13131 * C120) *
                     C116 +
                 (C13126 * C140 - C13130 * C129 + C13127 * C141 -
                  C13131 * C131) *
                     C30757) *
                    C13128 +
                ((C13311 - C13312 + C13313 - C13314) * C116 +
                 (C13315 - C13316 + C13317 - C13318) * C30757) *
                    C13129) *
                   C30578 * C30881 +
               (((C13312 - C13311 + C13314 - C13313) * C116 +
                 (C13316 - C13315 + C13318 - C13317) * C30757) *
                    C13128 +
                ((C13319 - C13320 + C13321 - C13322) * C116 +
                 (C13323 - C13324 + C13325 - C13326) * C30757) *
                    C13129) *
                   C30578 * C30869 +
               (((C13320 - C13319 + C13322 - C13321) * C116 +
                 (C13324 - C13323 + C13326 - C13325) * C30757) *
                    C13128 +
                ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
                  C13131 * C1290) *
                     C116 +
                 (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
                  C13131 * C1292) *
                     C30757) *
                    C13129) *
                   C30578 * C30844) *
                  C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30882 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                 C116 +
             (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                 C30757) *
                C13129) *
               C30871 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C13126 * C1159 - C13130 * C1150 + C13127 * C1160 -
              C13131 * C1151) *
                 C116 +
             (C13126 * C1177 - C13130 * C1162 + C13127 * C1178 -
              C13131 * C1163) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30882 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                 C116 +
             (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                 C30757) *
                C13129) *
               C30871 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
              C13127 * C1161) *
                 C116 +
             (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
              C13127 * C1179) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30882 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                 C116 +
             (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                 C30757) *
                C13129) *
               C30871 +
           (((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                 C116 +
             (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                 C30757) *
                C13128 +
            ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C116 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13279 - C13280 + C13281 - C13282) * C116 +
            (C13283 - C13284 + C13285 - C13286) * C30757) *
               C13129) *
              C30578 * C1010 +
          (((C13280 - C13279 + C13282 - C13281) * C116 +
            (C13284 - C13283 + C13286 - C13285) * C30757) *
               C13128 +
           ((C13287 - C13288 + C13289 - C13290) * C116 +
            (C13291 - C13292 + C13293 - C13294) * C30757) *
               C13129) *
              C30578 * C1011 +
          (((C13288 - C13287 + C13290 - C13289) * C116 +
            (C13292 - C13291 + C13294 - C13293) * C30757) *
               C13128 +
           ((C14187 - C14188 + C14189 - C14190) * C116 +
            (C14191 - C14192 + C14193 - C14194) * C30757) *
               C13129) *
              C30578 * C1012 +
          (((C14188 - C14187 + C14190 - C14189) * C116 +
            (C14192 - C14191 + C14194 - C14193) * C30757) *
               C13128 +
           ((C14195 - C14196 + C14197 - C14198) * C116 +
            (C14199 - C14200 + C14201 - C14202) * C30757) *
               C13129) *
              C30578 * C1013 +
          (((C14196 - C14195 + C14198 - C14197) * C116 +
            (C14200 - C14199 + C14202 - C14201) * C30757) *
               C13128 +
           ((C13126 * C5379 - C13130 * C5377 + C13127 * C5650 -
             C13131 * C5649) *
                C116 +
            (C13126 * C5383 - C13130 * C5380 + C13127 * C5652 -
             C13131 * C5651) *
                C30757) *
               C13129) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30882 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30871 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30847) *
              C942 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30882 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30871 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C30847) *
              C943 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30882 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
              C13127 * C1546) *
                 C116 +
             (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
              C13127 * C1552) *
                 C30757) *
                C13129) *
               C30871 +
           (((C14366 - C14365 + C14368 - C14367) * C116 +
             (C14370 - C14369 + C14372 - C14371) * C30757) *
                C13128 +
            ((C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
              C13131 * C6372) *
                 C116 +
             (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
              C13131 * C6374) *
                 C30757) *
                C13129) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C1664 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C1665 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30847) *
              C30560 * C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C1664 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C1665 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
              C13127 * C1161) *
                 C116 +
             (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
              C13127 * C1179) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C1664 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13951 - C13952 + C13953 - C13954) * C116 +
             (C13955 - C13956 + C13957 - C13958) * C30757) *
                C13129) *
               C1665 +
           (((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                 C116 +
             (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                 C30757) *
                C13128 +
            ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C116 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C1664 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C1665 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30847) *
              C30881 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C1664 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C1665 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C30847) *
              C30869 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C1664 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C1665 +
           (((C14366 - C14365 + C14368 - C14367) * C116 +
             (C14370 - C14369 + C14372 - C14371) * C30757) *
                C13128 +
            ((C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
              C13131 * C6372) *
                 C116 +
             (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
              C13131 * C6374) *
                 C30757) *
                C13129) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13279 - C13280 + C13281 - C13282) * C116 +
            (C13283 - C13284 + C13285 - C13286) * C30757) *
               C13129) *
              C1839 +
          (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                C116 +
            (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                C30757) *
               C13128 +
           ((C13935 - C13936 + C13937 - C13938) * C116 +
            (C13939 - C13940 + C13941 - C13942) * C30757) *
               C13129) *
              C1840 +
          (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                C116 +
            (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                C30757) *
               C13128 +
           ((C14349 - C14350 + C14351 - C14352) * C116 +
            (C14353 - C14354 + C14355 - C14356) * C30757) *
               C13129) *
              C1841 +
          (((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
             C13127 * C1851) *
                C116 +
            (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
             C13127 * C1863) *
                C30757) *
               C13128 +
           ((C13130 * C2222 - C13126 * C2225 + C13131 * C2223 -
             C13127 * C2226) *
                C116 +
            (C13130 * C2228 - C13126 * C2231 + C13131 * C2229 -
             C13127 * C2232) *
                C30757) *
               C13129) *
              C1842 +
          (((C13126 * C1856 - C13130 * C1847 + C13127 * C1857 -
             C13131 * C1848) *
                C116 +
            (C13126 * C1865 - C13130 * C1859 + C13127 * C1866 -
             C13131 * C1860) *
                C30757) *
               C13128 +
           ((C13126 * C6219 - C13130 * C6215 + C13127 * C10587 -
             C13131 * C10586) *
                C116 +
            (C13126 * C6224 - C13130 * C6220 + C13127 * C10589 -
             C13131 * C10588) *
                C30757) *
               C13129) *
              C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C942 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30814 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C943 +
           ((((C13288 - C13287 + C13290 - C13289) * C116 +
              (C13292 - C13291 + C13294 - C13293) * C30757) *
                 C13128 +
             ((C14187 - C14188 + C14189 - C14190) * C116 +
              (C14191 - C14192 + C14193 - C14194) * C30757) *
                 C13129) *
                C30814 +
            (((C14358 - C14357 + C14360 - C14359) * C116 +
              (C14362 - C14361 + C14364 - C14363) * C30757) *
                 C13128 +
             ((C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
               C13127 * C1546) *
                  C116 +
              (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
               C13127 * C1552) *
                  C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C30799 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30814 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C942 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30814 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C943 +
           ((((C13304 - C13303 + C13306 - C13305) * C116 +
              (C13308 - C13307 + C13310 - C13309) * C30757) *
                 C13128 +
             ((C14503 - C14504 + C14505 - C14506) * C116 +
              (C14507 - C14508 + C14509 - C14510) * C30757) *
                 C13129) *
                C30814 +
            (((C14706 - C14705 + C14708 - C14707) * C116 +
              (C14710 - C14709 + C14712 - C14711) * C30757) *
                 C13128 +
             ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
               C13131 * C1544) *
                  C116 +
              (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
               C13131 * C1550) *
                  C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30814 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                 C116 +
             (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30814 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                 C116 +
             (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30814 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                 C116 +
             (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C30814 +
           (((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                 C116 +
             (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                 C30757) *
                C13128 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C2116 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C2117 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C2118 +
           (((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
              C13127 * C1851) *
                 C116 +
             (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
              C13127 * C1863) *
                 C30757) *
                C13128 +
            ((C13130 * C2222 - C13126 * C2225 + C13131 * C2223 -
              C13127 * C2226) *
                 C116 +
             (C13130 * C2228 - C13126 * C2231 + C13131 * C2229 -
              C13127 * C2232) *
                 C30757) *
                C13129) *
               C30860) *
              C30560 * C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C2116 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C2117 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C15419 - C15420 + C15421 - C15422) * C116 +
             (C15423 - C15424 + C15425 - C15426) * C30757) *
                C13129) *
               C2118 +
           (((C13126 * C1851 - C13130 * C1845 + C13127 * C1852 -
              C13131 * C1846) *
                 C116 +
             (C13126 * C1863 - C13130 * C1854 + C13127 * C1864 -
              C13131 * C1855) *
                 C30757) *
                C13128 +
            ((C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
              C13131 * C2224) *
                 C116 +
             (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
              C13131 * C2230) *
                 C30757) *
                C13129) *
               C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
                C116 +
            (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
                C30757) *
               C13129) *
              C30578 * C30560 * C108 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C116 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C30757) *
               C13128 +
           ((C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
                C116 +
            (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
                C30757) *
               C13129) *
              C30578 * C30560 * C109 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C116 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C30757) *
               C13128 +
           ((C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
                C116 +
            (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
                C30757) *
               C13129) *
              C30578 * C30560 * C110 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C116 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C30757) *
               C13128 +
           ((C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
                C116 +
            (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
                C30757) *
               C13129) *
              C30578 * C30560 * C111 +
          (((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                C116 +
            (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                C30757) *
               C13128 +
           ((C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
                C116 +
            (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
                C30757) *
               C13129) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13279 - C13280 + C13281 - C13282) * C116 +
            (C13283 - C13284 + C13285 - C13286) * C30757) *
               C13129) *
              C30578 * C1010 +
          (((C13280 - C13279 + C13282 - C13281) * C116 +
            (C13284 - C13283 + C13286 - C13285) * C30757) *
               C13128 +
           ((C13287 - C13288 + C13289 - C13290) * C116 +
            (C13291 - C13292 + C13293 - C13294) * C30757) *
               C13129) *
              C30578 * C1011 +
          (((C13288 - C13287 + C13290 - C13289) * C116 +
            (C13292 - C13291 + C13294 - C13293) * C30757) *
               C13128 +
           ((C14187 - C14188 + C14189 - C14190) * C116 +
            (C14191 - C14192 + C14193 - C14194) * C30757) *
               C13129) *
              C30578 * C1012 +
          (((C14188 - C14187 + C14190 - C14189) * C116 +
            (C14192 - C14191 + C14194 - C14193) * C30757) *
               C13128 +
           ((C14195 - C14196 + C14197 - C14198) * C116 +
            (C14199 - C14200 + C14201 - C14202) * C30757) *
               C13129) *
              C30578 * C1013 +
          (((C14196 - C14195 + C14198 - C14197) * C116 +
            (C14200 - C14199 + C14202 - C14201) * C30757) *
               C13128 +
           ((C13126 * C5379 - C13130 * C5377 + C13127 * C5650 -
             C13131 * C5649) *
                C116 +
            (C13126 * C5383 - C13130 * C5380 + C13127 * C5652 -
             C13131 * C5651) *
                C30757) *
               C13129) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C1664 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C1665 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30847) *
              C30560 * C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C1664 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C1665 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
              C13127 * C1161) *
                 C116 +
             (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
              C13127 * C1179) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C1664 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13951 - C13952 + C13953 - C13954) * C116 +
             (C13955 - C13956 + C13957 - C13958) * C30757) *
                C13129) *
               C1665 +
           (((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                 C116 +
             (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                 C30757) *
                C13128 +
            ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C116 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C1664 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C1665 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30847) *
              C30881 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C1664 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C1665 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C30847) *
              C30869 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C1664 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C1665 +
           (((C14366 - C14365 + C14368 - C14367) * C116 +
             (C14370 - C14369 + C14372 - C14371) * C30757) *
                C13128 +
            ((C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
              C13131 * C6372) *
                 C116 +
             (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
              C13131 * C6374) *
                 C30757) *
                C13129) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C3094 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30537 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C3094 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C3094 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30546 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30757) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C116 +
              (C13315 - C13316 + C13317 - C13318) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                  C116 +
              (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                  C30757) *
                 C13128 +
             ((C13951 - C13952 + C13953 - C13954) * C116 +
              (C13955 - C13956 + C13957 - C13958) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13312 - C13311 + C13314 - C13313) * C116 +
              (C13316 - C13315 + C13318 - C13317) * C30757) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C116 +
              (C13323 - C13324 + C13325 - C13326) * C30757) *
                 C13129) *
                C3094 +
            (((C13952 - C13951 + C13954 - C13953) * C116 +
              (C13956 - C13955 + C13958 - C13957) * C30757) *
                 C13128 +
             ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
               C13131 * C1440) *
                  C116 +
              (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
               C13131 * C1442) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30661 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30668 +
            (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                  C116 +
              (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                  C30757) *
                 C13128 +
             ((C14349 - C14350 + C14351 - C14352) * C116 +
              (C14353 - C14354 + C14355 - C14356) * C30757) *
                 C13129) *
                C3602) *
               C30813 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30661 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30668 +
            (((C14350 - C14349 + C14352 - C14351) * C116 +
              (C14354 - C14353 + C14356 - C14355) * C30757) *
                 C13128 +
             ((C14365 - C14366 + C14367 - C14368) * C116 +
              (C14369 - C14370 + C14371 - C14372) * C30757) *
                 C13129) *
                C3602) *
               C30623) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30661 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30668 +
            (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                  C116 +
              (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                  C30757) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C116 +
              (C15423 - C15424 + C15425 - C15426) * C30757) *
                 C13129) *
                C3602) *
               C30813 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30661 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30668 +
            (((C15420 - C15419 + C15422 - C15421) * C116 +
              (C15424 - C15423 + C15426 - C15425) * C30757) *
                 C13128 +
             ((C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
               C13131 * C1158) *
                  C116 +
              (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
               C13131 * C1176) *
                  C30757) *
                 C13129) *
                C3602) *
               C30623) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30881 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C3094 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30869 +
           ((((C13288 - C13287 + C13290 - C13289) * C116 +
              (C13292 - C13291 + C13294 - C13293) * C30757) *
                 C13128 +
             ((C14187 - C14188 + C14189 - C14190) * C116 +
              (C14191 - C14192 + C14193 - C14194) * C30757) *
                 C13129) *
                C3094 +
            (((C14358 - C14357 + C14360 - C14359) * C116 +
              (C14362 - C14361 + C14364 - C14363) * C30757) *
                 C13128 +
             ((C14843 - C14844 + C14845 - C14846) * C116 +
              (C14847 - C14848 + C14849 - C14850) * C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C3094 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30881 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C3094 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30869 +
           ((((C13304 - C13303 + C13306 - C13305) * C116 +
              (C13308 - C13307 + C13310 - C13309) * C30757) *
                 C13128 +
             ((C14503 - C14504 + C14505 - C14506) * C116 +
              (C14507 - C14508 + C14509 - C14510) * C30757) *
                 C13129) *
                C3094 +
            (((C14706 - C14705 + C14708 - C14707) * C116 +
              (C14710 - C14709 + C14712 - C14711) * C30757) *
                 C13128 +
             ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
               C13131 * C1544) *
                  C116 +
              (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
               C13131 * C1550) *
                  C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C3094 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30665) *
              C30560 * C30887 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C3094 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C30665) *
              C30560 * C30880 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C3094 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13951 - C13952 + C13953 - C13954) * C116 +
             (C13955 - C13956 + C13957 - C13958) * C30757) *
                C13129) *
               C30665) *
              C30560 * C30867 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C3094 +
           (((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                 C116 +
             (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                 C30757) *
                C13128 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30889 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30886 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30877 +
           (((C13130 * C1844 - C13126 * C1850 + C13131 * C1845 -
              C13127 * C1851) *
                 C116 +
             (C13130 * C1853 - C13126 * C1862 + C13131 * C1854 -
              C13127 * C1863) *
                 C30757) *
                C13128 +
            ((C15687 - C15688 + C15689 - C15690) * C116 +
             (C15691 - C15692 + C15693 - C15694) * C30757) *
                C13129) *
               C30860) *
              C30560 * C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30889 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C30886 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C15419 - C15420 + C15421 - C15422) * C116 +
             (C15423 - C15424 + C15425 - C15426) * C30757) *
                C13129) *
               C30877 +
           (((C13126 * C1851 - C13130 * C1845 + C13127 * C1852 -
              C13131 * C1846) *
                 C116 +
             (C13126 * C1863 - C13130 * C1854 + C13127 * C1864 -
              C13131 * C1855) *
                 C30757) *
                C13128 +
            ((C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
              C13131 * C2224) *
                 C116 +
             (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
              C13131 * C2230) *
                 C30757) *
                C13129) *
               C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30661 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30668 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C3602) *
              C30560 * C30537 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30661 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C30668 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C15419 - C15420 + C15421 - C15422) * C116 +
             (C15423 - C15424 + C15425 - C15426) * C30757) *
                C13129) *
               C3602) *
              C30560 * C30546 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30661 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13951 - C13952 + C13953 - C13954) * C116 +
             (C13955 - C13956 + C13957 - C13958) * C30757) *
                C13129) *
               C30668 +
           (((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                 C116 +
             (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                 C30757) *
                C13128 +
            ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C116 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C30757) *
                C13129) *
               C3602) *
              C30560 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C3094 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30665) *
              C30560 * C30887 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C3094 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13943 - C13944 + C13945 - C13946) * C116 +
             (C13947 - C13948 + C13949 - C13950) * C30757) *
                C13129) *
               C30665) *
              C30560 * C30880 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C3094 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13951 - C13952 + C13953 - C13954) * C116 +
             (C13955 - C13956 + C13957 - C13958) * C30757) *
                C13129) *
               C30665) *
              C30560 * C30867 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C3094 +
           (((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                 C116 +
             (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                 C30757) *
                C13128 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C3094 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30881 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C3094 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C30869 +
           ((((C13288 - C13287 + C13290 - C13289) * C116 +
              (C13292 - C13291 + C13294 - C13293) * C30757) *
                 C13128 +
             ((C14187 - C14188 + C14189 - C14190) * C116 +
              (C14191 - C14192 + C14193 - C14194) * C30757) *
                 C13129) *
                C3094 +
            (((C14358 - C14357 + C14360 - C14359) * C116 +
              (C14362 - C14361 + C14364 - C14363) * C30757) *
                 C13128 +
             ((C14843 - C14844 + C14845 - C14846) * C116 +
              (C14847 - C14848 + C14849 - C14850) * C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C2440 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C3094 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30881 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C3094 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C30869 +
           ((((C13304 - C13303 + C13306 - C13305) * C116 +
              (C13308 - C13307 + C13310 - C13309) * C30757) *
                 C13128 +
             ((C14503 - C14504 + C14505 - C14506) * C116 +
              (C14507 - C14508 + C14509 - C14510) * C30757) *
                 C13129) *
                C3094 +
            (((C14706 - C14705 + C14708 - C14707) * C116 +
              (C14710 - C14709 + C14712 - C14711) * C30757) *
                 C13128 +
             ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
               C13131 * C1544) *
                  C116 +
              (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
               C13131 * C1550) *
                  C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30623) *
              C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30623) *
              C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30623) *
              C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C30578 * C30813 +
           (((C13604 - C13603 + C13606 - C13605) * C116 +
             (C13608 - C13607 + C13610 - C13609) * C30757) *
                C13128 +
            ((C13126 * C285 - C13130 * C268 + C13127 * C289 - C13131 * C270) *
                 C116 +
             (C13126 * C298 - C13130 * C286 + C13127 * C300 - C13131 * C290) *
                 C30757) *
                C13129) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C1284 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C1285 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30578 * C1286 +
           (((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C30578 * C30854) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C1284 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C1285 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C14503 - C14504 + C14505 - C14506) * C116 +
             (C14507 - C14508 + C14509 - C14510) * C30757) *
                C13129) *
               C30578 * C1286 +
           (((C14504 - C14503 + C14506 - C14505) * C116 +
             (C14508 - C14507 + C14510 - C14509) * C30757) *
                C13128 +
            ((C13126 * C1029 - C13130 * C1020 + C13127 * C1030 -
              C13131 * C1021) *
                 C116 +
             (C13126 * C1038 - C13130 * C1032 + C13127 * C1039 -
              C13131 * C1033) *
                 C30757) *
                C13129) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30814 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C13126 * C1165 - C13130 * C1153 + C13127 * C1166 -
               C13131 * C1154) *
                  C116 +
              (C13126 * C1180 - C13130 * C1168 + C13127 * C1181 -
               C13131 * C1169) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C258 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30814 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30814 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C13130 * C1154 - C13126 * C1166 + C13131 * C1155 -
               C13127 * C1167) *
                  C116 +
              (C13130 * C1169 - C13126 * C1181 + C13131 * C1170 -
               C13127 * C1182) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C259 +
          (((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                  C116 +
              (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                  C30757) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C116 +
              (C13315 - C13316 + C13317 - C13318) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                  C116 +
              (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                  C30757) *
                 C13128 +
             ((C13951 - C13952 + C13953 - C13954) * C116 +
              (C13955 - C13956 + C13957 - C13958) * C30757) *
                 C13129) *
                C30665) *
               C30813 +
           ((((C13312 - C13311 + C13314 - C13313) * C116 +
              (C13316 - C13315 + C13318 - C13317) * C30757) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C116 +
              (C13323 - C13324 + C13325 - C13326) * C30757) *
                 C13129) *
                C30814 +
            (((C13952 - C13951 + C13954 - C13953) * C116 +
              (C13956 - C13955 + C13958 - C13957) * C30757) *
                 C13128 +
             ((C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
               C13131 * C1440) *
                  C116 +
              (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
               C13131 * C1442) *
                  C30757) *
                 C13129) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30814 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30665) *
              C1284 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30814 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30665) *
              C1285 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30814 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C14843 - C14844 + C14845 - C14846) * C116 +
             (C14847 - C14848 + C14849 - C14850) * C30757) *
                C13129) *
               C30665) *
              C1286 +
          ((((C14188 - C14187 + C14190 - C14189) * C116 +
             (C14192 - C14191 + C14194 - C14193) * C30757) *
                C13128 +
            ((C14195 - C14196 + C14197 - C14198) * C116 +
             (C14199 - C14200 + C14201 - C14202) * C30757) *
                C13129) *
               C30814 +
           (((C14844 - C14843 + C14846 - C14845) * C116 +
             (C14848 - C14847 + C14850 - C14849) * C30757) *
                C13128 +
            ((C13126 * C5518 - C13130 * C5514 + C13127 * C5809 -
              C13131 * C5808) *
                 C116 +
             (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 -
              C13131 * C5810) *
                 C30757) *
                C13129) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
                C116 +
            (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
                C30757) *
               C13129) *
              C30578 * C30560 * C108 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C116 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C30757) *
               C13128 +
           ((C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
                C116 +
            (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
                C30757) *
               C13129) *
              C30578 * C30560 * C109 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C116 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C30757) *
               C13128 +
           ((C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
                C116 +
            (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
                C30757) *
               C13129) *
              C30578 * C30560 * C110 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C116 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C30757) *
               C13128 +
           ((C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
                C116 +
            (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
                C30757) *
               C13129) *
              C30578 * C30560 * C111 +
          (((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                C116 +
            (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                C30757) *
               C13128 +
           ((C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
                C116 +
            (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
                C30757) *
               C13129) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30882 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                 C116 +
             (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                 C30757) *
                C13129) *
               C30871 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C13126 * C1159 - C13130 * C1150 + C13127 * C1160 -
              C13131 * C1151) *
                 C116 +
             (C13126 * C1177 - C13130 * C1162 + C13127 * C1178 -
              C13131 * C1163) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30882 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                 C116 +
             (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                 C30757) *
                C13129) *
               C30871 +
           (((C13130 * C418 - C13126 * C431 + C13131 * C419 - C13127 * C432) *
                 C116 +
             (C13130 * C434 - C13126 * C448 + C13131 * C435 - C13127 * C449) *
                 C30757) *
                C13128 +
            ((C13130 * C1151 - C13126 * C1160 + C13131 * C1152 -
              C13127 * C1161) *
                 C116 +
             (C13130 * C1163 - C13126 * C1178 + C13131 * C1164 -
              C13127 * C1179) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30882 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                 C116 +
             (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                 C30757) *
                C13129) *
               C30871 +
           (((C13126 * C432 - C13130 * C419 + C13127 * C438 - C13131 * C421) *
                 C116 +
             (C13126 * C449 - C13130 * C435 + C13127 * C451 - C13131 * C439) *
                 C30757) *
                C13128 +
            ((C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C116 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C30757) *
                C13129) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13279 - C13280 + C13281 - C13282) * C116 +
            (C13283 - C13284 + C13285 - C13286) * C30757) *
               C13129) *
              C30578 * C1010 +
          (((C13280 - C13279 + C13282 - C13281) * C116 +
            (C13284 - C13283 + C13286 - C13285) * C30757) *
               C13128 +
           ((C13287 - C13288 + C13289 - C13290) * C116 +
            (C13291 - C13292 + C13293 - C13294) * C30757) *
               C13129) *
              C30578 * C1011 +
          (((C13288 - C13287 + C13290 - C13289) * C116 +
            (C13292 - C13291 + C13294 - C13293) * C30757) *
               C13128 +
           ((C14187 - C14188 + C14189 - C14190) * C116 +
            (C14191 - C14192 + C14193 - C14194) * C30757) *
               C13129) *
              C30578 * C1012 +
          (((C14188 - C14187 + C14190 - C14189) * C116 +
            (C14192 - C14191 + C14194 - C14193) * C30757) *
               C13128 +
           ((C14195 - C14196 + C14197 - C14198) * C116 +
            (C14199 - C14200 + C14201 - C14202) * C30757) *
               C13129) *
              C30578 * C1013 +
          (((C14196 - C14195 + C14198 - C14197) * C116 +
            (C14200 - C14199 + C14202 - C14201) * C30757) *
               C13128 +
           ((C13126 * C5379 - C13130 * C5377 + C13127 * C5650 -
             C13131 * C5649) *
                C116 +
            (C13126 * C5383 - C13130 * C5380 + C13127 * C5652 -
             C13131 * C5651) *
                C30757) *
               C13129) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30882 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13935 - C13936 + C13937 - C13938) * C116 +
             (C13939 - C13940 + C13941 - C13942) * C30757) *
                C13129) *
               C30871 +
           (((C13126 * C430 - C13130 * C417 + C13127 * C431 - C13131 * C418) *
                 C116 +
             (C13126 * C447 - C13130 * C433 + C13127 * C448 - C13131 * C434) *
                 C30757) *
                C13128 +
            ((C14349 - C14350 + C14351 - C14352) * C116 +
             (C14353 - C14354 + C14355 - C14356) * C30757) *
                C13129) *
               C30847) *
              C942 +
          ((((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30882 +
           (((C13936 - C13935 + C13938 - C13937) * C116 +
             (C13940 - C13939 + C13942 - C13941) * C30757) *
                C13128 +
            ((C14357 - C14358 + C14359 - C14360) * C116 +
             (C14361 - C14362 + C14363 - C14364) * C30757) *
                C13129) *
               C30871 +
           (((C14350 - C14349 + C14352 - C14351) * C116 +
             (C14354 - C14353 + C14356 - C14355) * C30757) *
                C13128 +
            ((C14365 - C14366 + C14367 - C14368) * C116 +
             (C14369 - C14370 + C14371 - C14372) * C30757) *
                C13129) *
               C30847) *
              C943 +
          ((((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C14187 - C14188 + C14189 - C14190) * C116 +
             (C14191 - C14192 + C14193 - C14194) * C30757) *
                C13129) *
               C30882 +
           (((C14358 - C14357 + C14360 - C14359) * C116 +
             (C14362 - C14361 + C14364 - C14363) * C30757) *
                C13128 +
            ((C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
              C13127 * C1546) *
                 C116 +
             (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
              C13127 * C1552) *
                 C30757) *
                C13129) *
               C30871 +
           (((C14366 - C14365 + C14368 - C14367) * C116 +
             (C14370 - C14369 + C14372 - C14371) * C30757) *
                C13128 +
            ((C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
              C13131 * C6372) *
                 C116 +
             (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
              C13131 * C6374) *
                 C30757) *
                C13129) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30814 +
           (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                 C116 +
             (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                 C30757) *
                C13128 +
            ((C13130 * C812 - C13126 * C817 + C13131 * C813 - C13127 * C818) *
                 C116 +
             (C13130 * C820 - C13126 * C827 + C13131 * C821 - C13127 * C828) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C554 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30814 +
           (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                 C116 +
             (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                 C30757) *
                C13128 +
            ((C13126 * C818 - C13130 * C813 + C13127 * C819 - C13131 * C814) *
                 C116 +
             (C13126 * C828 - C13130 * C821 + C13127 * C829 - C13131 * C822) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C555 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30814 +
           (((C13130 * C416 - C13126 * C426 + C13131 * C420 - C13127 * C436) *
                 C116 +
             (C13130 * C429 - C13126 * C446 + C13131 * C437 - C13127 * C450) *
                 C30757) *
                C13128 +
            ((C13130 * C814 - C13126 * C819 + C13131 * C815 - C13127 * C823) *
                 C116 +
             (C13130 * C822 - C13126 * C829 + C13131 * C824 - C13127 * C830) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C556 +
          ((((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                 C116 +
             (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                 C30757) *
                C13128 +
            ((C13603 - C13604 + C13605 - C13606) * C116 +
             (C13607 - C13608 + C13609 - C13610) * C30757) *
                C13129) *
               C30814 +
           (((C13126 * C436 - C13130 * C420 + C13127 * C440 - C13131 * C422) *
                 C116 +
             (C13126 * C450 - C13130 * C437 + C13127 * C452 - C13131 * C441) *
                 C30757) *
                C13128 +
            ((C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                 C116 +
             (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                 C30757) *
                C13129) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                  C116 +
              (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                  C30757) *
                 C13128 +
             ((C13279 - C13280 + C13281 - C13282) * C116 +
              (C13283 - C13284 + C13285 - C13286) * C30757) *
                 C13129) *
                C30814 +
            (((C13130 * C414 - C13126 * C424 + C13131 * C415 - C13127 * C425) *
                  C116 +
              (C13130 * C427 - C13126 * C444 + C13131 * C428 - C13127 * C445) *
                  C30757) *
                 C13128 +
             ((C13935 - C13936 + C13937 - C13938) * C116 +
              (C13939 - C13940 + C13941 - C13942) * C30757) *
                 C13129) *
                C30665) *
               C942 +
           ((((C13280 - C13279 + C13282 - C13281) * C116 +
              (C13284 - C13283 + C13286 - C13285) * C30757) *
                 C13128 +
             ((C13287 - C13288 + C13289 - C13290) * C116 +
              (C13291 - C13292 + C13293 - C13294) * C30757) *
                 C13129) *
                C30814 +
            (((C13936 - C13935 + C13938 - C13937) * C116 +
              (C13940 - C13939 + C13942 - C13941) * C30757) *
                 C13128 +
             ((C14357 - C14358 + C14359 - C14360) * C116 +
              (C14361 - C14362 + C14363 - C14364) * C30757) *
                 C13129) *
                C30665) *
               C943 +
           ((((C13288 - C13287 + C13290 - C13289) * C116 +
              (C13292 - C13291 + C13294 - C13293) * C30757) *
                 C13128 +
             ((C14187 - C14188 + C14189 - C14190) * C116 +
              (C14191 - C14192 + C14193 - C14194) * C30757) *
                 C13129) *
                C30814 +
            (((C14358 - C14357 + C14360 - C14359) * C116 +
              (C14362 - C14361 + C14364 - C14363) * C30757) *
                 C13128 +
             ((C13130 * C1542 - C13126 * C1545 + C13131 * C1543 -
               C13127 * C1546) *
                  C116 +
              (C13130 * C1548 - C13126 * C1551 + C13131 * C1549 -
               C13127 * C1552) *
                  C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C30799 +
          (((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                  C116 +
              (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                  C30757) *
                 C13128 +
             ((C13295 - C13296 + C13297 - C13298) * C116 +
              (C13299 - C13300 + C13301 - C13302) * C30757) *
                 C13129) *
                C30814 +
            (((C13126 * C425 - C13130 * C415 + C13127 * C426 - C13131 * C416) *
                  C116 +
              (C13126 * C445 - C13130 * C428 + C13127 * C446 - C13131 * C429) *
                  C30757) *
                 C13128 +
             ((C13943 - C13944 + C13945 - C13946) * C116 +
              (C13947 - C13948 + C13949 - C13950) * C30757) *
                 C13129) *
                C30665) *
               C942 +
           ((((C13296 - C13295 + C13298 - C13297) * C116 +
              (C13300 - C13299 + C13302 - C13301) * C30757) *
                 C13128 +
             ((C13303 - C13304 + C13305 - C13306) * C116 +
              (C13307 - C13308 + C13309 - C13310) * C30757) *
                 C13129) *
                C30814 +
            (((C13944 - C13943 + C13946 - C13945) * C116 +
              (C13948 - C13947 + C13950 - C13949) * C30757) *
                 C13128 +
             ((C14705 - C14706 + C14707 - C14708) * C116 +
              (C14709 - C14710 + C14711 - C14712) * C30757) *
                 C13129) *
                C30665) *
               C943 +
           ((((C13304 - C13303 + C13306 - C13305) * C116 +
              (C13308 - C13307 + C13310 - C13309) * C30757) *
                 C13128 +
             ((C14503 - C14504 + C14505 - C14506) * C116 +
              (C14507 - C14508 + C14509 - C14510) * C30757) *
                 C13129) *
                C30814 +
            (((C14706 - C14705 + C14708 - C14707) * C116 +
              (C14710 - C14709 + C14712 - C14711) * C30757) *
                 C13128 +
             ((C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
               C13131 * C1544) *
                  C116 +
              (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
               C13131 * C1550) *
                  C30757) *
                 C13129) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13126 * C271 - C13130 * C261 + C13127 * C272 - C13131 * C262) *
                C116 +
            (C13126 * C291 - C13130 * C274 + C13127 * C292 - C13131 * C275) *
                C30757) *
               C13129) *
              C30578 * C30560 * C108 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C116 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C30757) *
               C13128 +
           ((C13130 * C262 - C13126 * C272 + C13131 * C263 - C13127 * C273) *
                C116 +
            (C13130 * C275 - C13126 * C292 + C13131 * C276 - C13127 * C293) *
                C30757) *
               C13129) *
              C30578 * C30560 * C109 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C116 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C30757) *
               C13128 +
           ((C13126 * C273 - C13130 * C263 + C13127 * C283 - C13131 * C267) *
                C116 +
            (C13126 * C293 - C13130 * C276 + C13127 * C297 - C13131 * C284) *
                C30757) *
               C13129) *
              C30578 * C30560 * C110 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C116 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C30757) *
               C13128 +
           ((C13130 * C267 - C13126 * C283 + C13131 * C269 - C13127 * C287) *
                C116 +
            (C13130 * C284 - C13126 * C297 + C13131 * C288 - C13127 * C299) *
                C30757) *
               C13129) *
              C30578 * C30560 * C111 +
          (((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                C116 +
            (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                C30757) *
               C13128 +
           ((C13126 * C287 - C13130 * C269 + C13127 * C559 - C13131 * C558) *
                C116 +
            (C13126 * C299 - C13130 * C288 + C13127 * C561 - C13131 * C560) *
                C30757) *
               C13129) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C30881 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C30869 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C116 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C30757) *
                C13128 +
            ((C13279 - C13280 + C13281 - C13282) * C116 +
             (C13283 - C13284 + C13285 - C13286) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13280 - C13279 + C13282 - C13281) * C116 +
             (C13284 - C13283 + C13286 - C13285) * C30757) *
                C13128 +
            ((C13287 - C13288 + C13289 - C13290) * C116 +
             (C13291 - C13292 + C13293 - C13294) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13288 - C13287 + C13290 - C13289) * C116 +
             (C13292 - C13291 + C13294 - C13293) * C30757) *
                C13128 +
            ((C13126 * C1022 - C13130 * C1016 + C13127 * C1023 -
              C13131 * C1017) *
                 C116 +
             (C13126 * C1034 - C13130 * C1025 + C13127 * C1035 -
              C13131 * C1026) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C116 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C30757) *
                C13128 +
            ((C13295 - C13296 + C13297 - C13298) * C116 +
             (C13299 - C13300 + C13301 - C13302) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13296 - C13295 + C13298 - C13297) * C116 +
             (C13300 - C13299 + C13302 - C13301) * C30757) *
                C13128 +
            ((C13303 - C13304 + C13305 - C13306) * C116 +
             (C13307 - C13308 + C13309 - C13310) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13304 - C13303 + C13306 - C13305) * C116 +
             (C13308 - C13307 + C13310 - C13309) * C30757) *
                C13128 +
            ((C13130 * C1017 - C13126 * C1023 + C13131 * C1018 -
              C13127 * C1024) *
                 C116 +
             (C13130 * C1026 - C13126 * C1035 + C13131 * C1027 -
              C13127 * C1036) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C116 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C30757) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C116 +
             (C13315 - C13316 + C13317 - C13318) * C30757) *
                C13129) *
               C30578 * C942 +
           (((C13312 - C13311 + C13314 - C13313) * C116 +
             (C13316 - C13315 + C13318 - C13317) * C30757) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C116 +
             (C13323 - C13324 + C13325 - C13326) * C30757) *
                C13129) *
               C30578 * C943 +
           (((C13320 - C13319 + C13322 - C13321) * C116 +
             (C13324 - C13323 + C13326 - C13325) * C30757) *
                C13128 +
            ((C13126 * C1024 - C13130 * C1018 + C13127 * C1291 -
              C13131 * C1290) *
                 C116 +
             (C13126 * C1036 - C13130 * C1027 + C13127 * C1293 -
              C13131 * C1292) *
                 C30757) *
                C13129) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C116 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C30757) *
               C13128 +
           ((C13279 - C13280 + C13281 - C13282) * C116 +
            (C13283 - C13284 + C13285 - C13286) * C30757) *
               C13129) *
              C30578 * C1010 +
          (((C13280 - C13279 + C13282 - C13281) * C116 +
            (C13284 - C13283 + C13286 - C13285) * C30757) *
               C13128 +
           ((C13287 - C13288 + C13289 - C13290) * C116 +
            (C13291 - C13292 + C13293 - C13294) * C30757) *
               C13129) *
              C30578 * C1011 +
          (((C13288 - C13287 + C13290 - C13289) * C116 +
            (C13292 - C13291 + C13294 - C13293) * C30757) *
               C13128 +
           ((C14187 - C14188 + C14189 - C14190) * C116 +
            (C14191 - C14192 + C14193 - C14194) * C30757) *
               C13129) *
              C30578 * C1012 +
          (((C14188 - C14187 + C14190 - C14189) * C116 +
            (C14192 - C14191 + C14194 - C14193) * C30757) *
               C13128 +
           ((C14195 - C14196 + C14197 - C14198) * C116 +
            (C14199 - C14200 + C14201 - C14202) * C30757) *
               C13129) *
              C30578 * C1013 +
          (((C14196 - C14195 + C14198 - C14197) * C116 +
            (C14200 - C14199 + C14202 - C14201) * C30757) *
               C13128 +
           ((C13126 * C5379 - C13130 * C5377 + C13127 * C5650 -
             C13131 * C5649) *
                C116 +
            (C13126 * C5383 - C13130 * C5380 + C13127 * C5652 -
             C13131 * C5651) *
                C30757) *
               C13129) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C30619 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30626 +
                   ((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C2700) *
                      C30537 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C30619 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30626 +
                   ((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                     C25740 * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C2700) *
                      C30546 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C30619 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30626 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C2700) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30619 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30626 +
                   (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                      C25412 * C18741) *
                         C13128 +
                     ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                      C5924 * C18743 + C5925 * C18741) *
                         C13129) *
                        C30814 +
                    ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                      C25414 * C18741) *
                         C13128 +
                     (C25871 * C18742 + C25872 * C18740 +
                      (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                         C13129) *
                        C30665) *
                       C2700) *
                      C2440 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30619 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30626 +
                   (((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                      C25740 * C18741) *
                         C13128 +
                     ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                      (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                         C13129) *
                        C30814 +
                    ((C5813 * C18742 + C5814 * C18740 +
                      (C6382 - C6381) * C18743 + (C6384 - C6383) * C18741) *
                         C13128 +
                     ((C5816 - C5815) * C18742 + (C5818 - C5817) * C18740 +
                      (C30506 * C6373 - C4559 * C6372) * C18743 +
                      (C30506 * C6375 - C4559 * C6374) * C18741) *
                         C13129) *
                        C30665) *
                       C2700) *
                      C30543)) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C30888 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30884 +
                   ((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30874 +
                   ((C5386 * C18742 + C5387 * C18740 + C25871 * C18743 +
                     C25872 * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C2440 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C30888 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30884 +
                   ((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                     C25740 * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30874 +
                   ((C5654 * C18742 + C5655 * C18740 +
                     (C5816 - C5815) * C18743 + (C5818 - C5817) * C18741) *
                        C13128 +
                    ((C5657 - C5656) * C18742 + (C5659 - C5658) * C18740 +
                     (C30506 * C5809 - C4559 * C5808) * C18743 +
                     (C30506 * C5811 - C4559 * C5810) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C30543)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30887 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30880 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30867 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4931 - C4930) * C18742 + (C4933 - C4932) * C18740 +
                     (C24696 - C24695) * C18743 + (C24698 - C24697) * C18741) *
                        C13128 +
                    ((C4935 - C4934) * C18742 + (C4937 - C4936) * C18740 +
                     (C30506 * C1441 - C4559 * C1440) * C18743 +
                     (C30506 * C1443 - C4559 * C1442) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30848)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30882 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30871 +
                    ((C9153 * C18742 + C9154 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                      C10808 * C18741) *
                         C13129) *
                        C30847) *
                       C2332 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30882 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30871 +
                    ((C9795 * C18742 + C9796 * C18740 + C26703 * C18743 +
                      C26704 * C18741) *
                         C13128 +
                     (C25413 * C18742 + C25414 * C18740 +
                      (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                         C13129) *
                        C30847) *
                       C30623) *
                      C2440 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30882 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30871 +
                    ((C9155 * C18742 + C9156 * C18740 +
                      (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                         C13128 +
                     (C26441 * C18742 + C26442 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C30847) *
                       C2332 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30882 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30871 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C6382 - C6381) * C18742 + (C6384 - C6383) * C18740 +
                      (C30506 * C6483 - C4559 * C6482) * C18743 +
                      (C30506 * C6485 - C4559 * C6484) * C18741) *
                         C13129) *
                        C30847) *
                       C30623) *
                      C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30537 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30546 +
                  (((((C30506 * C126 - C4559 * C119) * C18742 +
                      (C30506 * C140 - C4559 * C129) * C18740 +
                      (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                         C13128 +
                     ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                      C25031 * C18743 + C25032 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                      (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                         C13128 +
                     (C25033 * C18742 + C25034 * C18740 +
                      (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                      C25033 * C18743 + C25034 * C18741) *
                         C13128 +
                     ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                      (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                         C13129) *
                        C30814 +
                    ((C25031 * C18742 + C25032 * C18740 +
                      (C9510 - C9509) * C18743 + (C9512 - C9511) * C18741) *
                         C13128 +
                     ((C5203 - C5202) * C18742 + (C5205 - C5204) * C18740 +
                      (C30506 * C1173 - C4559 * C1158) * C18743 +
                      (C30506 * C1185 - C4559 * C1176) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30887 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30880 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30867 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C30578 * C2332 +
                   (((C4931 - C4930) * C18742 + (C4933 - C4932) * C18740 +
                     (C24696 - C24695) * C18743 + (C24698 - C24697) * C18741) *
                        C13128 +
                    ((C4935 - C4934) * C18742 + (C4937 - C4936) * C18740 +
                     (C30506 * C1441 - C4559 * C1440) * C18743 +
                     (C30506 * C1443 - C4559 * C1442) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30848)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C30888 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30884 +
                   ((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30874 +
                   ((C5386 * C18742 + C5387 * C18740 + C25871 * C18743 +
                     C25872 * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C2440 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C30888 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30884 +
                   ((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                     C25740 * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30874 +
                   ((C5654 * C18742 + C5655 * C18740 +
                     (C5816 - C5815) * C18743 + (C5818 - C5817) * C18741) *
                        C13128 +
                    ((C5657 - C5656) * C18742 + (C5659 - C5658) * C18740 +
                     (C30506 * C5809 - C4559 * C5808) * C18743 +
                     (C30506 * C5811 - C4559 * C5810) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30619 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30626 +
                   (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                      C25412 * C18741) *
                         C13128 +
                     ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                      C5924 * C18743 + C5925 * C18741) *
                         C13129) *
                        C3094 +
                    ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                      C25414 * C18741) *
                         C13128 +
                     (C25871 * C18742 + C25872 * C18740 +
                      (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                         C13129) *
                        C30665) *
                       C2700) *
                      C30799 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30619 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30626 +
                   (((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                      C25740 * C18741) *
                         C13128 +
                     ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                      (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                         C13129) *
                        C3094 +
                    ((C5813 * C18742 + C5814 * C18740 +
                      (C6382 - C6381) * C18743 + (C6384 - C6383) * C18741) *
                         C13128 +
                     ((C5816 - C5815) * C18742 + (C5818 - C5817) * C18740 +
                      (C30506 * C6373 - C4559 * C6372) * C18743 +
                      (C30506 * C6375 - C4559 * C6374) * C18741) *
                         C13129) *
                        C30665) *
                       C2700) *
                      C30543)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30661 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30668 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C3602) *
                      C30619 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30661 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30668 +
                   ((C9795 * C18742 + C9796 * C18740 + C26703 * C18743 +
                     C26704 * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C3602) *
                      C30626 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30661 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30668 +
                   ((C5546 * C18742 + C5547 * C18740 +
                     (C6594 - C6593) * C18743 + (C6596 - C6595) * C18741) *
                        C13128 +
                    ((C5541 - C5540) * C18742 + (C5543 - C5542) * C18740 +
                     (C30506 * C6585 - C4559 * C6584) * C18743 +
                     (C30506 * C6587 - C4559 * C6586) * C18741) *
                        C13129) *
                       C3602) *
                      C2700) *
                 C30532) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C30888 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C3094 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30665) *
                      C30884 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C3094 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30665) *
                      C30874 +
                  (((C5386 * C18742 + C5387 * C18740 + C25871 * C18743 +
                     C25872 * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C3094 +
                   ((C5924 * C18742 + C5925 * C18740 +
                     (C5541 - C5540) * C18743 + (C5543 - C5542) * C18741) *
                        C13128 +
                    ((C5927 - C5926) * C18742 + (C5929 - C5928) * C18740 +
                     (C30506 * C5520 - C4559 * C5515) * C18743 +
                     (C30506 * C5524 - C4559 * C5521) * C18741) *
                        C13129) *
                       C30665) *
                      C30854) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30878 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30865 +
                  (((((C30506 * C126 - C4559 * C119) * C18742 +
                      (C30506 * C140 - C4559 * C129) * C18740 +
                      (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                         C13128 +
                     ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                      C25031 * C18743 + C25032 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                      (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                         C13128 +
                     (C25033 * C18742 + C25034 * C18740 +
                      (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                      C25033 * C18743 + C25034 * C18741) *
                         C13128 +
                     ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                      (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                         C13129) *
                        C3094 +
                    ((C25031 * C18742 + C25032 * C18740 +
                      (C9510 - C9509) * C18743 + (C9512 - C9511) * C18741) *
                         C13128 +
                     ((C5203 - C5202) * C18742 + (C5205 - C5204) * C18740 +
                      (C30506 * C1173 - C4559 * C1158) * C18743 +
                      (C30506 * C1185 - C4559 * C1176) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30889 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30886 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30877 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C26703 * C18742 + C26704 * C18740 +
                     (C10809 - C10810) * C18743 + (C10811 - C10812) * C18741) *
                        C13129) *
                       C30860) *
                      C2332 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30889 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30886 +
                   ((C9795 * C18742 + C9796 * C18740 + C26703 * C18743 +
                     C26704 * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C30877 +
                   ((C10807 * C18742 + C10808 * C18740 +
                     (C10810 - C10809) * C18743 + (C10812 - C10811) * C18741) *
                        C13128 +
                    ((C6594 - C6593) * C18742 + (C6596 - C6595) * C18740 +
                     (C30506 * C6221 - C4559 * C6216) * C18743 +
                     (C30506 * C6225 - C4559 * C6222) * C18741) *
                        C13129) *
                       C30860) *
                      C30623) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30661 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30668 +
                    ((C9153 * C18742 + C9154 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                      C10808 * C18741) *
                         C13129) *
                        C3602) *
                       C2332 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30661 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30668 +
                    ((C9795 * C18742 + C9796 * C18740 + C26703 * C18743 +
                      C26704 * C18741) *
                         C13128 +
                     (C25413 * C18742 + C25414 * C18740 +
                      (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                         C13129) *
                        C3602) *
                       C30623) *
                      C30799 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30661 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30668 +
                    ((C9155 * C18742 + C9156 * C18740 +
                      (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                         C13128 +
                     (C26441 * C18742 + C26442 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C3602) *
                       C2332 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30661 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30668 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C6382 - C6381) * C18742 + (C6384 - C6383) * C18740 +
                      (C30506 * C6483 - C4559 * C6482) * C18743 +
                      (C30506 * C6485 - C4559 * C6484) * C18741) *
                         C13129) *
                        C3602) *
                       C30623) *
                      C30543)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30878 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30865 +
                  (((((C30506 * C126 - C4559 * C119) * C18742 +
                      (C30506 * C140 - C4559 * C129) * C18740 +
                      (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                         C13128 +
                     ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                      C25031 * C18743 + C25032 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                      (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                         C13128 +
                     (C25033 * C18742 + C25034 * C18740 +
                      (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                         C13129) *
                        C30665) *
                       C2332 +
                   ((((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                      C25033 * C18743 + C25034 * C18741) *
                         C13128 +
                     ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                      (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                         C13129) *
                        C3094 +
                    ((C25031 * C18742 + C25032 * C18740 +
                      (C9510 - C9509) * C18743 + (C9512 - C9511) * C18741) *
                         C13128 +
                     ((C5203 - C5202) * C18742 + (C5205 - C5204) * C18740 +
                      (C30506 * C1173 - C4559 * C1158) * C18743 +
                      (C30506 * C1185 - C4559 * C1176) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C30888 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C3094 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30665) *
                      C30884 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C3094 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30665) *
                      C30874 +
                  (((C5386 * C18742 + C5387 * C18740 + C25871 * C18743 +
                     C25872 * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C3094 +
                   ((C5924 * C18742 + C5925 * C18740 +
                     (C5541 - C5540) * C18743 + (C5543 - C5542) * C18741) *
                        C13128 +
                    ((C5927 - C5926) * C18742 + (C5929 - C5928) * C18740 +
                     (C30506 * C5520 - C4559 * C5515) * C18743 +
                     (C30506 * C5524 - C4559 * C5521) * C18741) *
                        C13129) *
                       C30665) *
                      C30854) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C1284 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C1285 +
                   ((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C1286 +
                   ((C5386 * C18742 + C5387 * C18740 +
                     (C5537 - C5536) * C18743 + (C5539 - C5538) * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C30799 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C1284 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C1285 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C1286 +
                   ((C5654 * C18742 + C5655 * C18740 +
                     (C5816 - C5815) * C18743 + (C5818 - C5817) * C18741) *
                        C13128 +
                    ((C5657 - C5656) * C18742 + (C5659 - C5658) * C18740 +
                     (C30506 * C5809 - C4559 * C5808) * C18743 +
                     (C30506 * C5811 - C4559 * C5810) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C30543)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     (C5182 - C5183) * C18743 + (C5184 - C5185) * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C554 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     (C5190 - C5191) * C18743 + (C5192 - C5193) * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C555 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     (C5198 - C5199) * C18743 + (C5200 - C5201) * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C556 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4931 - C4930) * C18742 + (C4933 - C4932) * C18740 +
                     (C24696 - C24695) * C18743 + (C24698 - C24697) * C18741) *
                        C13128 +
                    ((C4935 - C4934) * C18742 + (C4937 - C4936) * C18740 +
                     (C30506 * C1441 - C4559 * C1440) * C18743 +
                     (C30506 * C1443 - C4559 * C1442) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30848)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C1664 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C1665 +
                    ((C9153 * C18742 + C9154 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                      C10808 * C18741) *
                         C13129) *
                        C30847) *
                       C30813 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C1664 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C1665 +
                    ((C9795 * C18742 + C9796 * C18740 +
                      (C6589 - C6590) * C18743 + (C6591 - C6592) * C18741) *
                         C13128 +
                     (C25413 * C18742 + C25414 * C18740 +
                      (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                         C13129) *
                        C30847) *
                       C30623) *
                      C30799 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C1664 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C1665 +
                    ((C9155 * C18742 + C9156 * C18740 +
                      (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                         C13128 +
                     (C26441 * C18742 + C26442 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C30847) *
                       C30813 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C1664 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C1665 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C6382 - C6381) * C18742 + (C6384 - C6383) * C18740 +
                      (C30506 * C6483 - C4559 * C6482) * C18743 +
                      (C30506 * C6485 - C4559 * C6484) * C18741) *
                         C13129) *
                        C30847) *
                       C30623) *
                      C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30814 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C1284 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30814 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30665) *
                      C1285 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30814 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30665) *
                      C1286 +
                  (((C5386 * C18742 + C5387 * C18740 + C25871 * C18743 +
                     C25872 * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C30814 +
                   ((C5924 * C18742 + C5925 * C18740 +
                     (C5541 - C5540) * C18743 + (C5543 - C5542) * C18741) *
                        C13128 +
                    ((C5927 - C5926) * C18742 + (C5929 - C5928) * C18740 +
                     (C30506 * C5520 - C4559 * C5515) * C18743 +
                     (C30506 * C5524 - C4559 * C5521) * C18741) *
                        C13129) *
                       C30665) *
                      C30854) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25023 * C18742 + C25024 * C18740 +
                      (C5528 - C5529) * C18743 + (C5530 - C5531) * C18741) *
                         C13128 +
                     ((C5187 - C5186) * C18742 + (C5189 - C5188) * C18740 +
                      C5546 * C18743 + C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C258 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25027 * C18742 + C25028 * C18740 +
                      (C6377 - C6378) * C18743 + (C6379 - C6380) * C18741) *
                         C13128 +
                     ((C5195 - C5194) * C18742 + (C5197 - C5196) * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C259 +
                  (((((C30506 * C126 - C4559 * C119) * C18742 +
                      (C30506 * C140 - C4559 * C129) * C18740 +
                      (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                         C13128 +
                     ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                      C25031 * C18743 + C25032 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                      (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                         C13128 +
                     (C25033 * C18742 + C25034 * C18740 +
                      (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                      C25033 * C18743 + C25034 * C18741) *
                         C13128 +
                     ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                      (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                         C13129) *
                        C30814 +
                    ((C25031 * C18742 + C25032 * C18740 +
                      (C9510 - C9509) * C18743 + (C9512 - C9511) * C18741) *
                         C13128 +
                     ((C5203 - C5202) * C18742 + (C5205 - C5204) * C18740 +
                      (C30506 * C1173 - C4559 * C1158) * C18743 +
                      (C30506 * C1185 - C4559 * C1176) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C2116 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C2117 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C2118 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C26703 * C18742 + C26704 * C18740 +
                     (C10809 - C10810) * C18743 + (C10811 - C10812) * C18741) *
                        C13129) *
                       C30860) *
                      C30813 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C2116 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C2117 +
                   ((C9795 * C18742 + C9796 * C18740 + C26703 * C18743 +
                     C26704 * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C2118 +
                   ((C10807 * C18742 + C10808 * C18740 +
                     (C10810 - C10809) * C18743 + (C10812 - C10811) * C18741) *
                        C13128 +
                    ((C6594 - C6593) * C18742 + (C6596 - C6595) * C18740 +
                     (C30506 * C6221 - C4559 * C6216) * C18743 +
                     (C30506 * C6225 - C4559 * C6222) * C18741) *
                        C13129) *
                       C30860) *
                      C30623) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C30506 * C124 - C4559 * C117) * C18742 +
                        (C30506 * C138 - C4559 * C127) * C18740 +
                        (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                           C13128 +
                       ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                        (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                           C13129) *
                          C30578 * C30560 * C108 +
                      (((C4559 * C118 - C30506 * C125) * C18742 +
                        (C4559 * C128 - C30506 * C139) * C18740 +
                        (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                           C13128 +
                       ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                        (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                           C13129) *
                          C30578 * C30560 * C109 +
                      (((C30506 * C126 - C4559 * C119) * C18742 +
                        (C30506 * C140 - C4559 * C129) * C18740 +
                        (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                           C13128 +
                       ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                        (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                           C13129) *
                          C30578 * C30560 * C110 +
                      (((C4559 * C120 - C30506 * C130) * C18742 +
                        (C4559 * C131 - C30506 * C141) * C18740 +
                        (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                           C13128 +
                       ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                        (C4559 * C815 - C30506 * C823) * C18743 +
                        (C4559 * C824 - C30506 * C830) * C18741) *
                           C13129) *
                          C30578 * C30560 * C111 +
                      (((C30506 * C132 - C4559 * C121) * C18742 +
                        (C30506 * C142 - C4559 * C133) * C18740 +
                        (C30506 * C440 - C4559 * C422) * C18743 +
                        (C30506 * C452 - C4559 * C441) * C18741) *
                           C13128 +
                       ((C30506 * C287 - C4559 * C269) * C18742 +
                        (C30506 * C299 - C4559 * C288) * C18740 +
                        (C30506 * C825 - C4559 * C816) * C18743 +
                        (C30506 * C831 - C4559 * C826) * C18741) *
                           C13129) *
                          C30578 * C30560 * C112) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((((C30506 * C124 - C4559 * C117) * C18742 +
                         (C30506 * C138 - C4559 * C127) * C18740 +
                         (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                            C13128 +
                        ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                         (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                            C13129) *
                           C30578 * C30881 +
                       (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                         (C5182 - C5183) * C18743 + (C5184 - C5185) * C18741) *
                            C13128 +
                        ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                         C5526 * C18743 + C5527 * C18741) *
                            C13129) *
                           C30578 * C30869 +
                       ((C4707 * C18742 + C4708 * C18740 +
                         (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                            C13128 +
                        ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                         C5924 * C18743 + C5925 * C18741) *
                            C13129) *
                           C30578 * C30844) *
                          C258 +
                      ((((C4559 * C118 - C30506 * C125) * C18742 +
                         (C4559 * C128 - C30506 * C139) * C18740 +
                         (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                            C13128 +
                        ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                         (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                            C13129) *
                           C30578 * C30881 +
                       (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                         (C5190 - C5191) * C18743 + (C5192 - C5193) * C18741) *
                            C13128 +
                        ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                         C5813 * C18743 + C5814 * C18741) *
                            C13129) *
                           C30578 * C30869 +
                       ((C4709 * C18742 + C4710 * C18740 +
                         (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                            C13128 +
                        ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                         (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                            C13129) *
                           C30578 * C30844) *
                          C259 +
                      ((((C30506 * C126 - C4559 * C119) * C18742 +
                         (C30506 * C140 - C4559 * C129) * C18740 +
                         (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                            C13128 +
                        ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                         (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                            C13129) *
                           C30578 * C30881 +
                       (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                         (C5198 - C5199) * C18743 + (C5200 - C5201) * C18741) *
                            C13128 +
                        ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                         (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                            C13129) *
                           C30578 * C30869 +
                       ((C4711 * C18742 + C4712 * C18740 +
                         (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                            C13128 +
                        ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                         (C30506 * C1547 - C4559 * C1544) * C18743 +
                         (C30506 * C1553 - C4559 * C1550) * C18741) *
                            C13129) *
                           C30578 * C30844) *
                          C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30882 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    ((C5182 - C5183) * C18742 + (C5184 - C5185) * C18740 +
                     C9795 * C18743 + C9796 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    ((C5528 - C5529) * C18742 + (C5530 - C5531) * C18740 +
                     C10807 * C18743 + C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C258 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30882 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    ((C5190 - C5191) * C18742 + (C5192 - C5193) * C18740 +
                     C10591 * C18743 + C10592 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    ((C6377 - C6378) * C18742 + (C6379 - C6380) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C259 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30882 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    ((C5198 - C5199) * C18742 + (C5200 - C5201) * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30871 +
                   ((C9157 * C18742 + C9158 * C18740 +
                     (C9150 - C9149) * C18743 + (C9152 - C9151) * C18741) *
                        C13128 +
                    ((C9510 - C9509) * C18742 + (C9512 - C9511) * C18740 +
                     (C30506 * C2227 - C4559 * C2224) * C18743 +
                     (C30506 * C2233 - C4559 * C2230) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30878 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30865 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    C25023 * C18743 + C25024 * C18741) *
                       C13129) *
                      C30578 * C1010 +
                  (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                    C25025 * C18743 + C25026 * C18741) *
                       C13128 +
                   ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                    C5526 * C18743 + C5527 * C18741) *
                       C13129) *
                      C30578 * C1011 +
                  ((C4707 * C18742 + C4708 * C18740 + (C5187 - C5186) * C18743 +
                    (C5189 - C5188) * C18741) *
                       C13128 +
                   ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                    C5924 * C18743 + C5925 * C18741) *
                       C13129) *
                      C30578 * C1012 +
                  ((C5386 * C18742 + C5387 * C18740 + (C5537 - C5536) * C18743 +
                    (C5539 - C5538) * C18741) *
                       C13128 +
                   ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                    (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                       C13129) *
                      C30578 * C1013 +
                  ((C5398 * C18742 + C5399 * C18740 + (C5927 - C5926) * C18743 +
                    (C5929 - C5928) * C18741) *
                       C13128 +
                   ((C5393 - C5392) * C18742 + (C5395 - C5394) * C18740 +
                    (C30506 * C5920 - C4559 * C5919) * C18743 +
                    (C30506 * C5922 - C4559 * C5921) * C18741) *
                       C13129) *
                      C30578 * C1014) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30882 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C942 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30882 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9795 * C18742 + C9796 * C18740 +
                     (C6589 - C6590) * C18743 + (C6591 - C6592) * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C30847) *
                      C943 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30882 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    ((C5537 - C5536) * C18742 + (C5539 - C5538) * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30871 +
                   ((C5546 * C18742 + C5547 * C18740 +
                     (C6594 - C6593) * C18743 + (C6596 - C6595) * C18741) *
                        C13128 +
                    ((C5541 - C5540) * C18742 + (C5543 - C5542) * C18740 +
                     (C30506 * C6585 - C4559 * C6584) * C18743 +
                     (C30506 * C6587 - C4559 * C6586) * C18741) *
                        C13129) *
                       C30847) *
                      C30844) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30878 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    ((C6377 - C6378) * C18742 + (C6379 - C6380) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30865 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    (C25033 * C18742 + C25034 * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C1665 +
                   ((C9157 * C18742 + C9158 * C18740 +
                     (C9150 - C9149) * C18743 + (C9152 - C9151) * C18741) *
                        C13128 +
                    ((C9510 - C9509) * C18742 + (C9512 - C9511) * C18740 +
                     (C30506 * C2227 - C4559 * C2224) * C18743 +
                     (C30506 * C2233 - C4559 * C2230) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C30881 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C1664 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9795 * C18742 + C9796 * C18740 +
                     (C6589 - C6590) * C18743 + (C6591 - C6592) * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C30847) *
                      C30869 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C1664 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C1665 +
                   ((C5546 * C18742 + C5547 * C18740 +
                     (C6594 - C6593) * C18743 + (C6596 - C6595) * C18741) *
                        C13128 +
                    ((C5541 - C5540) * C18742 + (C5543 - C5542) * C18740 +
                     (C30506 * C6585 - C4559 * C6584) * C18743 +
                     (C30506 * C6587 - C4559 * C6586) * C18741) *
                        C13129) *
                       C30847) *
                      C30844) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    C25023 * C18743 + C25024 * C18741) *
                       C13129) *
                      C1839 +
                  (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                    (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                       C13128 +
                   (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                    C9796 * C18741) *
                       C13129) *
                      C1840 +
                  ((C9153 * C18742 + C9154 * C18740 + (C9126 - C9125) * C18743 +
                    (C9128 - C9127) * C18741) *
                       C13128 +
                   (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                    C10808 * C18741) *
                       C13129) *
                      C1841 +
                  ((C10429 * C18742 + C10430 * C18740 +
                    (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                       C13128 +
                   ((C6589 - C6590) * C18742 + (C6591 - C6592) * C18740 +
                    (C10809 - C10810) * C18743 + (C10811 - C10812) * C18741) *
                       C13129) *
                      C1842 +
                  ((C10439 * C18742 + C10440 * C18740 +
                    (C10436 - C10435) * C18743 + (C10438 - C10437) * C18741) *
                       C13128 +
                   ((C10810 - C10809) * C18742 + (C10812 - C10811) * C18740 +
                    (C30506 * C10803 - C4559 * C10802) * C18743 +
                    (C30506 * C10805 - C4559 * C10804) * C18741) *
                       C13129) *
                      C1843) *
                 C30560 * C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C942 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C943 +
                   (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                      C25412 * C18741) *
                         C13128 +
                     ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                      C5924 * C18743 + C5925 * C18741) *
                         C13129) *
                        C30814 +
                    ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                      C25414 * C18741) *
                         C13128 +
                     ((C5537 - C5536) * C18742 + (C5539 - C5538) * C18740 +
                      (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C30799 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C942 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25027 * C18742 + C25028 * C18740 +
                      (C6377 - C6378) * C18743 + (C6379 - C6380) * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C943 +
                   (((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                      C25740 * C18741) *
                         C13128 +
                     ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                      (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                         C13129) *
                        C30814 +
                    ((C5813 * C18742 + C5814 * C18740 +
                      (C6382 - C6381) * C18743 + (C6384 - C6383) * C18741) *
                         C13128 +
                     ((C5816 - C5815) * C18742 + (C5818 - C5817) * C18740 +
                      (C30506 * C6373 - C4559 * C6372) * C18743 +
                      (C30506 * C6375 - C4559 * C6374) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C30543)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    ((C5182 - C5183) * C18742 + (C5184 - C5185) * C18740 +
                     C9795 * C18743 + C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C554 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    ((C5190 - C5191) * C18742 + (C5192 - C5193) * C18740 +
                     C10591 * C18743 + C10592 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C555 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    ((C5198 - C5199) * C18742 + (C5200 - C5201) * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C556 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9356 - C9355) * C18742 + (C9358 - C9357) * C18740 +
                     (C9360 - C9359) * C18743 + (C9362 - C9361) * C18741) *
                        C13128 +
                    ((C24696 - C24695) * C18742 + (C24698 - C24697) * C18740 +
                     (C30506 * C2015 - C4559 * C2014) * C18743 +
                     (C30506 * C2017 - C4559 * C2016) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30848)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C2116 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C2117 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C2118 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    ((C6589 - C6590) * C18742 + (C6591 - C6592) * C18740 +
                     (C10809 - C10810) * C18743 + (C10811 - C10812) * C18741) *
                        C13129) *
                       C30860) *
                      C30560 * C30799 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C2116 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C2117 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    (C26441 * C18742 + C26442 * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C2118 +
                   ((C10699 * C18742 + C10700 * C18740 +
                     (C10702 - C10701) * C18743 + (C10704 - C10703) * C18741) *
                        C13128 +
                    ((C10594 - C10593) * C18742 + (C10596 - C10595) * C18740 +
                     (C30506 * C10587 - C4559 * C10586) * C18743 +
                     (C30506 * C10589 - C4559 * C10588) * C18741) *
                        C13129) *
                       C30860) *
                      C30560 * C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     (C5182 - C5183) * C18743 + (C5184 - C5185) * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C258 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     (C5190 - C5191) * C18743 + (C5192 - C5193) * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C259 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     (C5198 - C5199) * C18743 + (C5200 - C5201) * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                       C13129) *
                      C30578 * C30560 * C108 +
                  (((C4559 * C118 - C30506 * C125) * C18742 +
                    (C4559 * C128 - C30506 * C139) * C18740 +
                    (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                       C13128 +
                   ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                    (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                       C13129) *
                      C30578 * C30560 * C109 +
                  (((C30506 * C126 - C4559 * C119) * C18742 +
                    (C30506 * C140 - C4559 * C129) * C18740 +
                    (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                       C13128 +
                   ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                    (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                       C13129) *
                      C30578 * C30560 * C110 +
                  (((C4559 * C120 - C30506 * C130) * C18742 +
                    (C4559 * C131 - C30506 * C141) * C18740 +
                    (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                       C13128 +
                   ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                    (C4559 * C815 - C30506 * C823) * C18743 +
                    (C4559 * C824 - C30506 * C830) * C18741) *
                       C13129) *
                      C30578 * C30560 * C111 +
                  (((C30506 * C132 - C4559 * C121) * C18742 +
                    (C30506 * C142 - C4559 * C133) * C18740 +
                    (C30506 * C440 - C4559 * C422) * C18743 +
                    (C30506 * C452 - C4559 * C441) * C18741) *
                       C13128 +
                   ((C30506 * C287 - C4559 * C269) * C18742 +
                    (C30506 * C299 - C4559 * C288) * C18740 +
                    (C30506 * C825 - C4559 * C816) * C18743 +
                    (C30506 * C831 - C4559 * C826) * C18741) *
                       C13129) *
                      C30578 * C30560 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30878 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30865 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    C25023 * C18743 + C25024 * C18741) *
                       C13129) *
                      C30578 * C1010 +
                  (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                    C25025 * C18743 + C25026 * C18741) *
                       C13128 +
                   ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                    C5526 * C18743 + C5527 * C18741) *
                       C13129) *
                      C30578 * C1011 +
                  ((C4707 * C18742 + C4708 * C18740 + (C5187 - C5186) * C18743 +
                    (C5189 - C5188) * C18741) *
                       C13128 +
                   ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                    C5924 * C18743 + C5925 * C18741) *
                       C13129) *
                      C30578 * C1012 +
                  ((C5386 * C18742 + C5387 * C18740 + (C5537 - C5536) * C18743 +
                    (C5539 - C5538) * C18741) *
                       C13128 +
                   ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                    (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                       C13129) *
                      C30578 * C1013 +
                  ((C5398 * C18742 + C5399 * C18740 + (C5927 - C5926) * C18743 +
                    (C5929 - C5928) * C18741) *
                       C13128 +
                   ((C5393 - C5392) * C18742 + (C5395 - C5394) * C18740 +
                    (C30506 * C5920 - C4559 * C5919) * C18743 +
                    (C30506 * C5922 - C4559 * C5921) * C18741) *
                       C13129) *
                      C30578 * C1014) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30878 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    ((C6377 - C6378) * C18742 + (C6379 - C6380) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30865 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    (C25033 * C18742 + C25034 * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C1665 +
                   ((C9157 * C18742 + C9158 * C18740 +
                     (C9150 - C9149) * C18743 + (C9152 - C9151) * C18741) *
                        C13128 +
                    ((C9510 - C9509) * C18742 + (C9512 - C9511) * C18740 +
                     (C30506 * C2227 - C4559 * C2224) * C18743 +
                     (C30506 * C2233 - C4559 * C2230) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C1664 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C30881 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C1664 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C1665 +
                   ((C9795 * C18742 + C9796 * C18740 +
                     (C6589 - C6590) * C18743 + (C6591 - C6592) * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C30847) *
                      C30869 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C1664 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C1665 +
                   ((C5546 * C18742 + C5547 * C18740 +
                     (C6594 - C6593) * C18743 + (C6596 - C6595) * C18741) *
                        C13128 +
                    ((C5541 - C5540) * C18742 + (C5543 - C5542) * C18740 +
                     (C30506 * C6585 - C4559 * C6584) * C18743 +
                     (C30506 * C6587 - C4559 * C6586) * C18741) *
                        C13129) *
                       C30847) *
                      C30844) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[40] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30537 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30546 +
                  (((((C30506 * C126 - C4559 * C119) * C18742 +
                      (C30506 * C140 - C4559 * C129) * C18740 +
                      (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                         C13128 +
                     ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                      C25031 * C18743 + C25032 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                      (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                         C13128 +
                     (C25033 * C18742 + C25034 * C18740 +
                      (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                      C25033 * C18743 + C25034 * C18741) *
                         C13128 +
                     ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                      (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                         C13129) *
                        C3094 +
                    ((C25031 * C18742 + C25032 * C18740 +
                      (C9510 - C9509) * C18743 + (C9512 - C9511) * C18741) *
                         C13128 +
                     ((C5203 - C5202) * C18742 + (C5205 - C5204) * C18740 +
                      (C30506 * C1173 - C4559 * C1158) * C18743 +
                      (C30506 * C1185 - C4559 * C1176) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30661 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30668 +
                    ((C9153 * C18742 + C9154 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                      C10808 * C18741) *
                         C13129) *
                        C3602) *
                       C30813 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30661 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30668 +
                    ((C9795 * C18742 + C9796 * C18740 + C26703 * C18743 +
                      C26704 * C18741) *
                         C13128 +
                     (C25413 * C18742 + C25414 * C18740 +
                      (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                         C13129) *
                        C3602) *
                       C30623) *
                      C2440 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30661 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30668 +
                    ((C9155 * C18742 + C9156 * C18740 +
                      (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                         C13128 +
                     (C26441 * C18742 + C26442 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C3602) *
                       C30813 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30661 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30668 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C6382 - C6381) * C18742 + (C6384 - C6383) * C18740 +
                      (C30506 * C6483 - C4559 * C6482) * C18743 +
                      (C30506 * C6485 - C4559 * C6484) * C18741) *
                         C13129) *
                        C3602) *
                       C30623) *
                      C30543)) /
                (p * q * std::sqrt(p + q));
    d2ee[42] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30881 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30869 +
                   (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                      C25412 * C18741) *
                         C13128 +
                     ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                      C5924 * C18743 + C5925 * C18741) *
                         C13129) *
                        C3094 +
                    ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                      C25414 * C18741) *
                         C13128 +
                     (C25871 * C18742 + C25872 * C18740 +
                      (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C2440 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30881 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30869 +
                   (((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                      C25740 * C18741) *
                         C13128 +
                     ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                      (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                         C13129) *
                        C3094 +
                    ((C5813 * C18742 + C5814 * C18740 +
                      (C6382 - C6381) * C18743 + (C6384 - C6383) * C18741) *
                         C13128 +
                     ((C5816 - C5815) * C18742 + (C5818 - C5817) * C18740 +
                      (C30506 * C6373 - C4559 * C6372) * C18743 +
                      (C30506 * C6375 - C4559 * C6374) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C30543)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30887 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30880 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    (C25033 * C18742 + C25034 * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30867 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C3094 +
                   (((C9356 - C9355) * C18742 + (C9358 - C9357) * C18740 +
                     (C9360 - C9359) * C18743 + (C9362 - C9361) * C18741) *
                        C13128 +
                    ((C24696 - C24695) * C18742 + (C24698 - C24697) * C18740 +
                     (C30506 * C2015 - C4559 * C2014) * C18743 +
                     (C30506 * C2017 - C4559 * C2016) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30848)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30889 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30886 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30877 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C26703 * C18742 + C26704 * C18740 +
                     (C10809 - C10810) * C18743 + (C10811 - C10812) * C18741) *
                        C13129) *
                       C30860) *
                      C30560 * C2440 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30889 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30886 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    (C26441 * C18742 + C26442 * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30877 +
                   ((C10699 * C18742 + C10700 * C18740 +
                     (C10702 - C10701) * C18743 + (C10704 - C10703) * C18741) *
                        C13128 +
                    ((C10594 - C10593) * C18742 + (C10596 - C10595) * C18740 +
                     (C30506 * C10587 - C4559 * C10586) * C18743 +
                     (C30506 * C10589 - C4559 * C10588) * C18741) *
                        C13129) *
                       C30860) *
                      C30560 * C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30661 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30668 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C3602) *
                      C30560 * C30537 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30661 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30668 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    (C26441 * C18742 + C26442 * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C3602) *
                      C30560 * C30546 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30661 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    (C25033 * C18742 + C25034 * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30668 +
                   ((C9157 * C18742 + C9158 * C18740 +
                     (C9150 - C9149) * C18743 + (C9152 - C9151) * C18741) *
                        C13128 +
                    ((C9510 - C9509) * C18742 + (C9512 - C9511) * C18740 +
                     (C30506 * C2227 - C4559 * C2224) * C18743 +
                     (C30506 * C2233 - C4559 * C2230) * C18741) *
                        C13129) *
                       C3602) *
                      C30560 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30887 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30880 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C3094 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    (C25033 * C18742 + C25034 * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30867 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C3094 +
                   (((C9356 - C9355) * C18742 + (C9358 - C9357) * C18740 +
                     (C9360 - C9359) * C18743 + (C9362 - C9361) * C18741) *
                        C13128 +
                    ((C24696 - C24695) * C18742 + (C24698 - C24697) * C18740 +
                     (C30506 * C2015 - C4559 * C2014) * C18743 +
                     (C30506 * C2017 - C4559 * C2016) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30848)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30881 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30869 +
                   (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                      C25412 * C18741) *
                         C13128 +
                     ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                      C5924 * C18743 + C5925 * C18741) *
                         C13129) *
                        C3094 +
                    ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                      C25414 * C18741) *
                         C13128 +
                     (C25871 * C18742 + C25872 * C18740 +
                      (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C2440 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C3094 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30881 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C3094 +
                    ((C25027 * C18742 + C25028 * C18740 + C26441 * C18743 +
                      C26442 * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30869 +
                   (((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                      C25740 * C18741) *
                         C13128 +
                     ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                      (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                         C13129) *
                        C3094 +
                    ((C5813 * C18742 + C5814 * C18740 +
                      (C6382 - C6381) * C18743 + (C6384 - C6383) * C18741) *
                         C13128 +
                     ((C5816 - C5815) * C18742 + (C5818 - C5817) * C18740 +
                      (C30506 * C6373 - C4559 * C6372) * C18743 +
                      (C30506 * C6375 - C4559 * C6374) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     (C5182 - C5183) * C18743 + (C5184 - C5185) * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C554 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     (C5190 - C5191) * C18743 + (C5192 - C5193) * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C555 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     (C5198 - C5199) * C18743 + (C5200 - C5201) * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C556 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C30578 * C30813 +
                   (((C4931 - C4930) * C18742 + (C4933 - C4932) * C18740 +
                     (C24696 - C24695) * C18743 + (C24698 - C24697) * C18741) *
                        C13128 +
                    ((C4935 - C4934) * C18742 + (C4937 - C4936) * C18740 +
                     (C30506 * C1441 - C4559 * C1440) * C18743 +
                     (C30506 * C1443 - C4559 * C1442) * C18741) *
                        C13129) *
                       C30578 * C30623) *
                      C30848)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C1284 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C1285 +
                   ((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C1286 +
                   ((C5386 * C18742 + C5387 * C18740 +
                     (C5537 - C5536) * C18743 + (C5539 - C5538) * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C30799 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C1284 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C1285 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C1286 +
                   ((C5654 * C18742 + C5655 * C18740 +
                     (C5816 - C5815) * C18743 + (C5818 - C5817) * C18741) *
                        C13128 +
                    ((C5657 - C5656) * C18742 + (C5659 - C5658) * C18740 +
                     (C30506 * C5809 - C4559 * C5808) * C18743 +
                     (C30506 * C5811 - C4559 * C5810) * C18741) *
                        C13129) *
                       C30578 * C30854) *
                      C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25023 * C18742 + C25024 * C18740 +
                      (C5528 - C5529) * C18743 + (C5530 - C5531) * C18741) *
                         C13128 +
                     ((C5187 - C5186) * C18742 + (C5189 - C5188) * C18740 +
                      C5546 * C18743 + C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C258 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25027 * C18742 + C25028 * C18740 +
                      (C6377 - C6378) * C18743 + (C6379 - C6380) * C18741) *
                         C13128 +
                     ((C5195 - C5194) * C18742 + (C5197 - C5196) * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C259 +
                  (((((C30506 * C126 - C4559 * C119) * C18742 +
                      (C30506 * C140 - C4559 * C129) * C18740 +
                      (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                         C13128 +
                     ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                      C25031 * C18743 + C25032 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                      (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                         C13128 +
                     (C25033 * C18742 + C25034 * C18740 +
                      (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                         C13129) *
                        C30665) *
                       C30813 +
                   ((((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                      C25033 * C18743 + C25034 * C18741) *
                         C13128 +
                     ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                      (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                         C13129) *
                        C30814 +
                    ((C25031 * C18742 + C25032 * C18740 +
                      (C9510 - C9509) * C18743 + (C9512 - C9511) * C18741) *
                         C13128 +
                     ((C5203 - C5202) * C18742 + (C5205 - C5204) * C18740 +
                      (C30506 * C1173 - C4559 * C1158) * C18743 +
                      (C30506 * C1185 - C4559 * C1176) * C18741) *
                         C13129) *
                        C30665) *
                       C30623) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30814 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C1284 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30814 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30665) *
                      C1285 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30814 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    (C25871 * C18742 + C25872 * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30665) *
                      C1286 +
                  (((C5386 * C18742 + C5387 * C18740 + C25871 * C18743 +
                     C25872 * C18741) *
                        C13128 +
                    ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                     (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                        C13129) *
                       C30814 +
                   ((C5924 * C18742 + C5925 * C18740 +
                     (C5541 - C5540) * C18743 + (C5543 - C5542) * C18741) *
                        C13128 +
                    ((C5927 - C5926) * C18742 + (C5929 - C5928) * C18740 +
                     (C30506 * C5520 - C4559 * C5515) * C18743 +
                     (C30506 * C5524 - C4559 * C5521) * C18741) *
                        C13129) *
                       C30665) *
                      C30854) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[47] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     (C5182 - C5183) * C18743 + (C5184 - C5185) * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C258 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     (C5190 - C5191) * C18743 + (C5192 - C5193) * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C259 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     (C5198 - C5199) * C18743 + (C5200 - C5201) * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                       C13129) *
                      C30578 * C30560 * C108 +
                  (((C4559 * C118 - C30506 * C125) * C18742 +
                    (C4559 * C128 - C30506 * C139) * C18740 +
                    (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                       C13128 +
                   ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                    (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                       C13129) *
                      C30578 * C30560 * C109 +
                  (((C30506 * C126 - C4559 * C119) * C18742 +
                    (C30506 * C140 - C4559 * C129) * C18740 +
                    (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                       C13128 +
                   ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                    (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                       C13129) *
                      C30578 * C30560 * C110 +
                  (((C4559 * C120 - C30506 * C130) * C18742 +
                    (C4559 * C131 - C30506 * C141) * C18740 +
                    (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                       C13128 +
                   ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                    (C4559 * C815 - C30506 * C823) * C18743 +
                    (C4559 * C824 - C30506 * C830) * C18741) *
                       C13129) *
                      C30578 * C30560 * C111 +
                  (((C30506 * C132 - C4559 * C121) * C18742 +
                    (C30506 * C142 - C4559 * C133) * C18740 +
                    (C30506 * C440 - C4559 * C422) * C18743 +
                    (C30506 * C452 - C4559 * C441) * C18741) *
                       C13128 +
                   ((C30506 * C287 - C4559 * C269) * C18742 +
                    (C30506 * C299 - C4559 * C288) * C18740 +
                    (C30506 * C825 - C4559 * C816) * C18743 +
                    (C30506 * C831 - C4559 * C826) * C18741) *
                       C13129) *
                      C30578 * C30560 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30882 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    ((C5182 - C5183) * C18742 + (C5184 - C5185) * C18740 +
                     C9795 * C18743 + C9796 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    ((C5528 - C5529) * C18742 + (C5530 - C5531) * C18740 +
                     C10807 * C18743 + C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C258 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30882 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    ((C5190 - C5191) * C18742 + (C5192 - C5193) * C18740 +
                     C10591 * C18743 + C10592 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9155 * C18742 + C9156 * C18740 +
                     (C9138 - C9137) * C18743 + (C9140 - C9139) * C18741) *
                        C13128 +
                    ((C6377 - C6378) * C18742 + (C6379 - C6380) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C259 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30882 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    ((C5198 - C5199) * C18742 + (C5200 - C5201) * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30871 +
                   ((C9157 * C18742 + C9158 * C18740 +
                     (C9150 - C9149) * C18743 + (C9152 - C9151) * C18741) *
                        C13128 +
                    ((C9510 - C9509) * C18742 + (C9512 - C9511) * C18740 +
                     (C30506 * C2227 - C4559 * C2224) * C18743 +
                     (C30506 * C2233 - C4559 * C2230) * C18741) *
                        C13129) *
                       C30847) *
                      C30560 * C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30878 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30865 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    C25023 * C18743 + C25024 * C18741) *
                       C13129) *
                      C30578 * C1010 +
                  (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                    C25025 * C18743 + C25026 * C18741) *
                       C13128 +
                   ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                    C5526 * C18743 + C5527 * C18741) *
                       C13129) *
                      C30578 * C1011 +
                  ((C4707 * C18742 + C4708 * C18740 + (C5187 - C5186) * C18743 +
                    (C5189 - C5188) * C18741) *
                       C13128 +
                   ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                    C5924 * C18743 + C5925 * C18741) *
                       C13129) *
                      C30578 * C1012 +
                  ((C5386 * C18742 + C5387 * C18740 + (C5537 - C5536) * C18743 +
                    (C5539 - C5538) * C18741) *
                       C13128 +
                   ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                    (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                       C13129) *
                      C30578 * C1013 +
                  ((C5398 * C18742 + C5399 * C18740 + (C5927 - C5926) * C18743 +
                    (C5929 - C5928) * C18741) *
                       C13128 +
                   ((C5393 - C5392) * C18742 + (C5395 - C5394) * C18740 +
                    (C30506 * C5920 - C4559 * C5919) * C18743 +
                    (C30506 * C5922 - C4559 * C5921) * C18741) *
                       C13129) *
                      C30578 * C1014) *
                 C30532) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30882 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                     C9796 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9153 * C18742 + C9154 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C25409 * C18742 + C25410 * C18740 + C10807 * C18743 +
                     C10808 * C18741) *
                        C13129) *
                       C30847) *
                      C942 +
                  ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30882 +
                   ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                     C25410 * C18741) *
                        C13128 +
                    (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                     C5547 * C18741) *
                        C13129) *
                       C30871 +
                   ((C9795 * C18742 + C9796 * C18740 +
                     (C6589 - C6590) * C18743 + (C6591 - C6592) * C18741) *
                        C13128 +
                    (C25413 * C18742 + C25414 * C18740 +
                     (C6593 - C6594) * C18743 + (C6595 - C6596) * C18741) *
                        C13129) *
                       C30847) *
                      C943 +
                  (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                     C25412 * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30882 +
                   ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                     C25414 * C18741) *
                        C13128 +
                    ((C5537 - C5536) * C18742 + (C5539 - C5538) * C18740 +
                     (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                        C13129) *
                       C30871 +
                   ((C5546 * C18742 + C5547 * C18740 +
                     (C6594 - C6593) * C18743 + (C6596 - C6595) * C18741) *
                        C13128 +
                    ((C5541 - C5540) * C18742 + (C5543 - C5542) * C18740 +
                     (C30506 * C6585 - C4559 * C6584) * C18743 +
                     (C30506 * C6587 - C4559 * C6586) * C18741) *
                        C13129) *
                       C30847) *
                      C30844) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    ((C5182 - C5183) * C18742 + (C5184 - C5185) * C18740 +
                     C9795 * C18743 + C9796 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C554 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                     (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                        C13128 +
                    ((C5190 - C5191) * C18742 + (C5192 - C5193) * C18740 +
                     C10591 * C18743 + C10592 * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C555 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9142 - C9141) * C18742 + (C9144 - C9143) * C18740 +
                     (C9146 - C9145) * C18743 + (C9148 - C9147) * C18741) *
                        C13128 +
                    ((C5198 - C5199) * C18742 + (C5200 - C5201) * C18740 +
                     (C9509 - C9510) * C18743 + (C9511 - C9512) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C556 +
                  ((((C4559 * C120 - C30506 * C130) * C18742 +
                     (C4559 * C131 - C30506 * C141) * C18740 +
                     (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                        C13128 +
                    ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                     (C24695 - C24696) * C18743 + (C24697 - C24698) * C18741) *
                        C13129) *
                       C30814 +
                   (((C9356 - C9355) * C18742 + (C9358 - C9357) * C18740 +
                     (C9360 - C9359) * C18743 + (C9362 - C9361) * C18741) *
                        C13128 +
                    ((C24696 - C24695) * C18742 + (C24698 - C24697) * C18740 +
                     (C30506 * C2015 - C4559 * C2014) * C18743 +
                     (C30506 * C2017 - C4559 * C2016) * C18741) *
                        C13129) *
                       C30665) *
                      C30560 * C30848)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30506 * C124 - C4559 * C117) * C18742 +
                      (C30506 * C138 - C4559 * C127) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                      C25023 * C18743 + C25024 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C25025 * C18742 + C25026 * C18740 + C9795 * C18743 +
                      C9796 * C18741) *
                         C13129) *
                        C30665) *
                       C942 +
                   ((((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                      C25025 * C18743 + C25026 * C18741) *
                         C13128 +
                     ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                      C5526 * C18743 + C5527 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25023 * C18742 + C25024 * C18740 + C25409 * C18743 +
                      C25410 * C18741) *
                         C13128 +
                     (C25411 * C18742 + C25412 * C18740 + C5546 * C18743 +
                      C5547 * C18741) *
                         C13129) *
                        C30665) *
                       C943 +
                   (((C4707 * C18742 + C4708 * C18740 + C25411 * C18743 +
                      C25412 * C18741) *
                         C13128 +
                     ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                      C5924 * C18743 + C5925 * C18741) *
                         C13129) *
                        C30814 +
                    ((C5526 * C18742 + C5527 * C18740 + C25413 * C18743 +
                      C25414 * C18741) *
                         C13128 +
                     ((C5537 - C5536) * C18742 + (C5539 - C5538) * C18740 +
                      (C5540 - C5541) * C18743 + (C5542 - C5543) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C30799 +
                  (((((C4559 * C118 - C30506 * C125) * C18742 +
                      (C4559 * C128 - C30506 * C139) * C18740 +
                      (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                         C13128 +
                     ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                      C25027 * C18743 + C25028 * C18741) *
                         C13129) *
                        C30814 +
                    (((C9130 - C9129) * C18742 + (C9132 - C9131) * C18740 +
                      (C9134 - C9133) * C18743 + (C9136 - C9135) * C18741) *
                         C13128 +
                     (C25029 * C18742 + C25030 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30665) *
                       C942 +
                   ((((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                      C25029 * C18743 + C25030 * C18741) *
                         C13128 +
                     ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                      C5813 * C18743 + C5814 * C18741) *
                         C13129) *
                        C30814 +
                    ((C25027 * C18742 + C25028 * C18740 +
                      (C6377 - C6378) * C18743 + (C6379 - C6380) * C18741) *
                         C13128 +
                     (C25739 * C18742 + C25740 * C18740 +
                      (C6381 - C6382) * C18743 + (C6383 - C6384) * C18741) *
                         C13129) *
                        C30665) *
                       C943 +
                   (((C4709 * C18742 + C4710 * C18740 + C25739 * C18743 +
                      C25740 * C18741) *
                         C13128 +
                     ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                      (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                         C13129) *
                        C30814 +
                    ((C5813 * C18742 + C5814 * C18740 +
                      (C6382 - C6381) * C18743 + (C6384 - C6383) * C18741) *
                         C13128 +
                     ((C5816 - C5815) * C18742 + (C5818 - C5817) * C18740 +
                      (C30506 * C6373 - C4559 * C6372) * C18743 +
                      (C30506 * C6375 - C4559 * C6374) * C18741) *
                         C13129) *
                        C30665) *
                       C30844) *
                      C30543)) /
                    (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                       C13129) *
                      C30578 * C30560 * C108 +
                  (((C4559 * C118 - C30506 * C125) * C18742 +
                    (C4559 * C128 - C30506 * C139) * C18740 +
                    (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                       C13128 +
                   ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                    (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                       C13129) *
                      C30578 * C30560 * C109 +
                  (((C30506 * C126 - C4559 * C119) * C18742 +
                    (C30506 * C140 - C4559 * C129) * C18740 +
                    (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                       C13128 +
                   ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                    (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                       C13129) *
                      C30578 * C30560 * C110 +
                  (((C4559 * C120 - C30506 * C130) * C18742 +
                    (C4559 * C131 - C30506 * C141) * C18740 +
                    (C9355 - C9356) * C18743 + (C9357 - C9358) * C18741) *
                       C13128 +
                   ((C4930 - C4931) * C18742 + (C4932 - C4933) * C18740 +
                    (C4559 * C815 - C30506 * C823) * C18743 +
                    (C4559 * C824 - C30506 * C830) * C18741) *
                       C13129) *
                      C30578 * C30560 * C111 +
                  (((C30506 * C132 - C4559 * C121) * C18742 +
                    (C30506 * C142 - C4559 * C133) * C18740 +
                    (C30506 * C440 - C4559 * C422) * C18743 +
                    (C30506 * C452 - C4559 * C441) * C18741) *
                       C13128 +
                   ((C30506 * C287 - C4559 * C269) * C18742 +
                    (C30506 * C299 - C4559 * C288) * C18740 +
                    (C30506 * C825 - C4559 * C816) * C18743 +
                    (C30506 * C831 - C4559 * C826) * C18741) *
                       C13129) *
                      C30578 * C30560 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     (C5183 - C5182) * C18743 + (C5185 - C5184) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     (C5182 - C5183) * C18743 + (C5184 - C5185) * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C258 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     (C5191 - C5190) * C18743 + (C5193 - C5192) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     (C5190 - C5191) * C18743 + (C5192 - C5193) * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C259 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     (C5199 - C5198) * C18743 + (C5201 - C5200) * C18741) *
                        C13129) *
                       C30578 * C30881 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     (C5198 - C5199) * C18743 + (C5200 - C5201) * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C30869 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30506 * C124 - C4559 * C117) * C18742 +
                     (C30506 * C138 - C4559 * C127) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                     C25023 * C18743 + C25024 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                     C25025 * C18743 + C25026 * C18741) *
                        C13128 +
                    ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                     C5526 * C18743 + C5527 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4707 * C18742 + C4708 * C18740 +
                     (C5187 - C5186) * C18743 + (C5189 - C5188) * C18741) *
                        C13128 +
                    ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                     C5924 * C18743 + C5925 * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30878 +
                  ((((C4559 * C118 - C30506 * C125) * C18742 +
                     (C4559 * C128 - C30506 * C139) * C18740 +
                     (C9129 - C9130) * C18743 + (C9131 - C9132) * C18741) *
                        C13128 +
                    ((C4683 - C4684) * C18742 + (C4685 - C4686) * C18740 +
                     C25027 * C18743 + C25028 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4684 - C4683) * C18742 + (C4686 - C4685) * C18740 +
                     C25029 * C18743 + C25030 * C18741) *
                        C13128 +
                    ((C4688 - C4687) * C18742 + (C4690 - C4689) * C18740 +
                     C5813 * C18743 + C5814 * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4709 * C18742 + C4710 * C18740 +
                     (C5195 - C5194) * C18743 + (C5197 - C5196) * C18741) *
                        C13128 +
                    ((C4692 - C4691) * C18742 + (C4694 - C4693) * C18740 +
                     (C5815 - C5816) * C18743 + (C5817 - C5818) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30865 +
                  ((((C30506 * C126 - C4559 * C119) * C18742 +
                     (C30506 * C140 - C4559 * C129) * C18740 +
                     (C9141 - C9142) * C18743 + (C9143 - C9144) * C18741) *
                        C13128 +
                    ((C4695 - C4696) * C18742 + (C4697 - C4698) * C18740 +
                     C25031 * C18743 + C25032 * C18741) *
                        C13129) *
                       C30578 * C942 +
                   (((C4696 - C4695) * C18742 + (C4698 - C4697) * C18740 +
                     C25033 * C18743 + C25034 * C18741) *
                        C13128 +
                    ((C4700 - C4699) * C18742 + (C4702 - C4701) * C18740 +
                     (C5202 - C5203) * C18743 + (C5204 - C5205) * C18741) *
                        C13129) *
                       C30578 * C943 +
                   ((C4711 * C18742 + C4712 * C18740 +
                     (C5203 - C5202) * C18743 + (C5205 - C5204) * C18741) *
                        C13128 +
                    ((C4704 - C4703) * C18742 + (C4706 - C4705) * C18740 +
                     (C30506 * C1547 - C4559 * C1544) * C18743 +
                     (C30506 * C1553 - C4559 * C1550) * C18741) *
                        C13129) *
                       C30578 * C30844) *
                      C30838)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30506 * C124 - C4559 * C117) * C18742 +
                    (C30506 * C138 - C4559 * C127) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C4671 - C4672) * C18742 + (C4673 - C4674) * C18740 +
                    C25023 * C18743 + C25024 * C18741) *
                       C13129) *
                      C30578 * C1010 +
                  (((C4672 - C4671) * C18742 + (C4674 - C4673) * C18740 +
                    C25025 * C18743 + C25026 * C18741) *
                       C13128 +
                   ((C4676 - C4675) * C18742 + (C4678 - C4677) * C18740 +
                    C5526 * C18743 + C5527 * C18741) *
                       C13129) *
                      C30578 * C1011 +
                  ((C4707 * C18742 + C4708 * C18740 + (C5187 - C5186) * C18743 +
                    (C5189 - C5188) * C18741) *
                       C13128 +
                   ((C4680 - C4679) * C18742 + (C4682 - C4681) * C18740 +
                    C5924 * C18743 + C5925 * C18741) *
                       C13129) *
                      C30578 * C1012 +
                  ((C5386 * C18742 + C5387 * C18740 + (C5537 - C5536) * C18743 +
                    (C5539 - C5538) * C18741) *
                       C13128 +
                   ((C5389 - C5388) * C18742 + (C5391 - C5390) * C18740 +
                    (C5926 - C5927) * C18743 + (C5928 - C5929) * C18741) *
                       C13129) *
                      C30578 * C1013 +
                  ((C5398 * C18742 + C5399 * C18740 + (C5927 - C5926) * C18743 +
                    (C5929 - C5928) * C18741) *
                       C13128 +
                   ((C5393 - C5392) * C18742 + (C5395 - C5394) * C18740 +
                    (C30506 * C5920 - C4559 * C5919) * C18743 +
                    (C30506 * C5922 - C4559 * C5921) * C18741) *
                       C13129) *
                      C30578 * C1014) *
                 C30532) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30619 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30626 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C2700) *
              C30537 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30619 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30626 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C2700) *
              C30546 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30619 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30626 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30619 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30626 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C2700) *
              C30537 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30619 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30626 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C2700) *
              C30546 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30619 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30626 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C30619 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C30626 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C2700) *
              C30537 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C30619 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30746 * C30578 * C30626 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C2700) *
              C30546 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C30619 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C30626 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30619 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30626 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C30814 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C2700) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30619 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30626 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C30814 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30814 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C30619 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30814 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30626 +
           ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
             (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
                C30746 * C30814 +
            (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
             (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
             (C6595 - C6596) * C8892) *
                C30746 * C30665) *
               C2700) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30814 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C30619 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C30814 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30626 +
           ((C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
             (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
             (C6383 - C6384) * C8892) *
                C30746 * C30814 +
            (C5813 * C8893 + C5814 * C8890 + (C6382 - C6381) * C8894 +
             (C6384 - C6383) * C8891 +
             (C30506 * C6483 - C4559 * C6482) * C8895 +
             (C30506 * C6485 - C4559 * C6484) * C8892) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C2332 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C30887 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C2332 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C30880 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30578 * C2332 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C30867 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30757) *
                   C30746 * C30578 * C2332 +
               ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                 C103 * C559 - C115 * C558) *
                    C116 +
                (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                 C103 * C561 - C115 * C560) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C30848) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C30888 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C30884 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30578 * C30874 +
               ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30757) *
                   C30746 * C30578 * C30854) *
                  C2440 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C30888 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C30884 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30757) *
                   C30746 * C30578 * C30874 +
               ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                 C103 * C1291 - C115 * C1290) *
                    C116 +
                (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                 C103 * C1293 - C115 * C1292) *
                    C30757) *
                   C30746 * C30578 * C30854) *
                  C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30882 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30871 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C30847) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30882 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30871 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30882 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30871 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C30847) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30882 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30871 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C2332 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30623) *
              C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C2332 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30623) *
              C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C2332 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C2332 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30888 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30884 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C30874 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30888 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30884 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C30874 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30882 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30871 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C30847) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30882 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30871 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C30847) *
               C30623) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30882 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30871 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C30847) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30882 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30871 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C2332 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C2332 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C2332 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 + (C9355 - C9356) * C8894 +
            (C9357 - C9358) * C8891 + (C9359 - C9360) * C8895 +
            (C9361 - C9362) * C8892) *
               C30746 * C30578 * C2332 +
           ((C4931 - C4930) * C8893 + (C4933 - C4932) * C8890 +
            (C30506 * C823 - C4559 * C815) * C8894 +
            (C30506 * C830 - C4559 * C824) * C8891 +
            (C30506 * C2015 - C4559 * C2014) * C8895 +
            (C30506 * C2017 - C4559 * C2016) * C8892) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C30888 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C30884 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30874 +
           (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C30888 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30746 * C30578 * C30884 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30874 +
           (C5654 * C8893 + C5655 * C8890 + (C5816 - C5815) * C8894 +
            (C5818 - C5817) * C8891 + (C30506 * C6373 - C4559 * C6372) * C8895 +
            (C30506 * C6375 - C4559 * C6374) * C8892) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30882 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30871 +
            (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30746 * C30847) *
               C2332 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30882 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30871 +
            (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
             (C6591 - C6592) * C8891 + (C10809 - C10810) * C8895 +
             (C10811 - C10812) * C8892) *
                C30746 * C30847) *
               C30623) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30882 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30871 +
            (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
             (C9140 - C9139) * C8891 + (C10701 - C10702) * C8895 +
             (C10703 - C10704) * C8892) *
                C30746 * C30847) *
               C2332 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C30882 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30871 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30506 * C10587 - C4559 * C10586) * C8895 +
             (C30506 * C10589 - C4559 * C10588) * C8892) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30537 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30546 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C30814 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C2332 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C30814 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30814 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30814 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30814 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C30814 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C30506 * C126 - C4559 * C119) * C8893 +
             (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
             (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
                C30746 * C30814 +
            ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
             (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
             (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
             (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
             (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
                C30746 * C30814 +
            ((C5199 - C5198) * C8893 + (C5201 - C5200) * C8890 +
             (C9510 - C9509) * C8894 + (C9512 - C9511) * C8891 +
             (C30506 * C2227 - C4559 * C2224) * C8895 +
             (C30506 * C2233 - C4559 * C2230) * C8892) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30888 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30884 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30874 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30888 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30884 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30874 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C2332 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30623) *
              C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C2332 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30623) *
              C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C2332 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C2332 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30888 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30884 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C30874 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30888 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30884 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C30874 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C2332 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C2332 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C2332 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 + (C9355 - C9356) * C8894 +
            (C9357 - C9358) * C8891 + (C9359 - C9360) * C8895 +
            (C9361 - C9362) * C8892) *
               C30746 * C30578 * C2332 +
           ((C4931 - C4930) * C8893 + (C4933 - C4932) * C8890 +
            (C30506 * C823 - C4559 * C815) * C8894 +
            (C30506 * C830 - C4559 * C824) * C8891 +
            (C30506 * C2015 - C4559 * C2014) * C8895 +
            (C30506 * C2017 - C4559 * C2016) * C8892) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C30888 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C30884 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30874 +
           (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C30888 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30746 * C30578 * C30884 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30874 +
           (C5654 * C8893 + C5655 * C8890 + (C5816 - C5815) * C8894 +
            (C5818 - C5817) * C8891 + (C30506 * C6373 - C4559 * C6372) * C8895 +
            (C30506 * C6375 - C4559 * C6374) * C8892) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30619 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30626 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C3094 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C2700) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30619 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30626 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C3094 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C3094 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C30619 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C3094 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30626 +
           ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
             (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
                C30746 * C3094 +
            (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
             (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
             (C6595 - C6596) * C8892) *
                C30746 * C30665) *
               C2700) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C3094 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C30619 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C3094 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30626 +
           ((C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
             (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
             (C6383 - C6384) * C8892) *
                C30746 * C3094 +
            (C5813 * C8893 + C5814 * C8890 + (C6382 - C6381) * C8894 +
             (C6384 - C6383) * C8891 +
             (C30506 * C6483 - C4559 * C6482) * C8895 +
             (C30506 * C6485 - C4559 * C6484) * C8892) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30661 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30668 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C3602) *
              C30619 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30661 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30668 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C3602) *
              C30626 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30661 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30668 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C3602) *
              C2700) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C3602) *
              C30619 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30661 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30668 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C3602) *
              C30626 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C3602) *
              C2700) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30661 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30668 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30746 * C3602) *
              C30619 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30661 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30746 * C30668 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C10809 - C10810) * C8895 +
            (C10811 - C10812) * C8892) *
               C30746 * C3602) *
              C30626 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30661 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30668 +
           (C5546 * C8893 + C5547 * C8890 + (C6594 - C6593) * C8894 +
            (C6596 - C6595) * C8891 + (C30506 * C6221 - C4559 * C6216) * C8895 +
            (C30506 * C6225 - C4559 * C6222) * C8892) *
               C30746 * C3602) *
              C2700) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30757) *
                    C30746 * C3094 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30757) *
                    C30746 * C30665) *
                   C2332 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30757) *
                    C30746 * C3094 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30757) *
                    C30746 * C30665) *
                   C30623) *
                  C30878 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30757) *
                    C30746 * C3094 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30757) *
                    C30746 * C30665) *
                   C2332 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30757) *
                    C30746 * C3094 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30757) *
                    C30746 * C30665) *
                   C30623) *
                  C30865 +
              ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                  C103 * C132 - C115 * C121) *
                     C116 +
                 (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                  C103 * C142 - C115 * C133) *
                     C30757) *
                    C30746 * C3094 +
                ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                  C115 * C422 - C103 * C440) *
                     C116 +
                 (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                  C115 * C441 - C103 * C452) *
                     C30757) *
                    C30746 * C30665) *
                   C2332 +
               (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                  C115 * C269 - C103 * C287) *
                     C116 +
                 (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                  C115 * C288 - C103 * C299) *
                     C30757) *
                    C30746 * C3094 +
                ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                  C103 * C825 - C115 * C816) *
                     C116 +
                 (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                  C103 * C831 - C115 * C826) *
                     C30757) *
                    C30746 * C30665) *
                   C30623) *
                  C30838) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C3094 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C30665) *
                  C30888 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C3094 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30757) *
                   C30746 * C30665) *
                  C30884 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C3094 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30757) *
                   C30746 * C30665) *
                  C30874 +
              (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30757) *
                   C30746 * C3094 +
               ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                 C103 * C1547 - C115 * C1544) *
                    C116 +
                (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                 C103 * C1553 - C115 * C1550) *
                    C30757) *
                   C30746 * C30665) *
                  C30854) *
             C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30889 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30886 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30877 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C2332 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30889 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30886 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30877 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30757) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30878 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30865 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C3094 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C2332 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C3094 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30888 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C3094 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C30884 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C3094 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C30874 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C3094 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30889 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30886 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30877 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C6589 - C6590) * C116 + (C6591 - C6592) * C30757) * C4557 +
            ((C6593 - C6594) * C116 + (C6595 - C6596) * C30757) * C4558) *
               C30860) *
              C2332 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30889 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30886 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30877 +
           (((C6590 - C6589) * C116 + (C6592 - C6591) * C30757) * C4556 +
            ((C6594 - C6593) * C116 + (C6596 - C6595) * C30757) * C4557 +
            ((C30506 * C6585 - C4559 * C6584) * C116 +
             (C30506 * C6587 - C4559 * C6586) * C30757) *
                C4558) *
               C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C3094 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C3094 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C3094 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C3094 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C8893 +
             (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
             (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
                C30746 * C3094 +
            ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
             (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
             (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
             (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
             (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
                C30746 * C3094 +
            ((C5199 - C5198) * C8893 + (C5201 - C5200) * C8890 +
             (C9510 - C9509) * C8894 + (C9512 - C9511) * C8891 +
             (C30506 * C2227 - C4559 * C2224) * C8895 +
             (C30506 * C2233 - C4559 * C2230) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C3094 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30665) *
              C30888 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C3094 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30746 * C30665) *
              C30884 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C3094 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30665) *
              C30874 +
          ((C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C3094 +
           (C5924 * C8893 + C5925 * C8890 + (C5541 - C5540) * C8894 +
            (C5543 - C5542) * C8891 + (C30506 * C6585 - C4559 * C6584) * C8895 +
            (C30506 * C6587 - C4559 * C6586) * C8892) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30889 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30886 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30746 * C30877 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30746 * C30860) *
              C2332 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30889 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30746 * C30886 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C10809 - C10810) * C8895 +
            (C10811 - C10812) * C8892) *
               C30746 * C30877 +
           (C10807 * C8893 + C10808 * C8890 + (C10810 - C10809) * C8894 +
            (C10812 - C10811) * C8891 +
            (C30506 * C10803 - C4559 * C10802) * C8895 +
            (C30506 * C10805 - C4559 * C10804) * C8892) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30661 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30668 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C3602) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30661 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30668 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C3602) *
               C30623) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30661 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30668 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C3602) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30661 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30668 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C3602) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C3602) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30661 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30668 +
            (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30746 * C3602) *
               C2332 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30661 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30668 +
            (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
             (C6591 - C6592) * C8891 + (C10809 - C10810) * C8895 +
             (C10811 - C10812) * C8892) *
                C30746 * C3602) *
               C30623) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30661 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30668 +
            (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
             (C9140 - C9139) * C8891 + (C10701 - C10702) * C8895 +
             (C10703 - C10704) * C8892) *
                C30746 * C3602) *
               C2332 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C30661 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30668 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30506 * C10587 - C4559 * C10586) * C8895 +
             (C30506 * C10589 - C4559 * C10588) * C8892) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30888 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30665) *
              C30884 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30665) *
              C30874 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30757) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30878 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30865 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C3094 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C2332 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C3094 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30888 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C3094 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C30884 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C3094 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C30874 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C3094 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C3094 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C3094 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C3094 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C3094 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C8893 +
             (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
             (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
                C30746 * C3094 +
            ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
             (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
             (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
                C30746 * C30665) *
               C2332 +
           (((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
             (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
             (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
                C30746 * C3094 +
            ((C5199 - C5198) * C8893 + (C5201 - C5200) * C8890 +
             (C9510 - C9509) * C8894 + (C9512 - C9511) * C8891 +
             (C30506 * C2227 - C4559 * C2224) * C8895 +
             (C30506 * C2233 - C4559 * C2230) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C3094 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30665) *
              C30888 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C3094 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30746 * C30665) *
              C30884 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C3094 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30665) *
              C30874 +
          ((C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C3094 +
           (C5924 * C8893 + C5925 * C8890 + (C5541 - C5540) * C8894 +
            (C5543 - C5542) * C8891 + (C30506 * C6585 - C4559 * C6584) * C8895 +
            (C30506 * C6587 - C4559 * C6586) * C8892) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C30813 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C554 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C30813 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C555 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30578 * C30813 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C556 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30757) *
                   C30746 * C30578 * C30813 +
               ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                 C103 * C559 - C115 * C558) *
                    C116 +
                (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                 C103 * C561 - C115 * C560) *
                    C30757) *
                   C30746 * C30578 * C30623) *
                  C30848) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C1284 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C1285 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30578 * C1286 +
               ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30757) *
                   C30746 * C30578 * C30854) *
                  C30799 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C1284 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C1285 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30757) *
                   C30746 * C30578 * C1286 +
               ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                 C103 * C1291 - C115 * C1290) *
                    C116 +
                (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                 C103 * C1293 - C115 * C1292) *
                    C30757) *
                   C30746 * C30578 * C30854) *
                  C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C1664 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C1665 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C30847) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C1664 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C1665 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C1664 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C1665 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C30847) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C1664 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C1665 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30813 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30623) *
              C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30813 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30623) *
              C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30813 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C30813 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C1284 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C1285 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C1286 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C1284 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C1285 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C1286 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C1664 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C1665 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C30847) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C1664 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C1665 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C30847) *
               C30623) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C1664 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C1665 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C30847) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C1664 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C1665 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C30813 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C30813 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C30813 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C4559 * C1152 - C30506 * C1161) * C8895 +
            (C4559 * C1164 - C30506 * C1179) * C8892) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 +
            (C4559 * C420 - C30506 * C436) * C8894 +
            (C4559 * C437 - C30506 * C450) * C8891 +
            (C4559 * C421 - C30506 * C438) * C8895 +
            (C4559 * C439 - C30506 * C451) * C8892) *
               C30746 * C30578 * C30813 +
           ((C4931 - C4930) * C8893 + (C4933 - C4932) * C8890 +
            (C30506 * C823 - C4559 * C815) * C8894 +
            (C30506 * C830 - C4559 * C824) * C8891 +
            (C30506 * C2015 - C4559 * C2014) * C8895 +
            (C30506 * C2017 - C4559 * C2016) * C8892) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C1284 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C1285 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C1286 +
           (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C1284 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C1285 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C1286 +
           (C5654 * C8893 + C5655 * C8890 + (C5816 - C5815) * C8894 +
            (C5818 - C5817) * C8891 + (C30506 * C6373 - C4559 * C6372) * C8895 +
            (C30506 * C6375 - C4559 * C6374) * C8892) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C1664 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C1665 +
            (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30746 * C30847) *
               C30813 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C1664 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
                C30746 * C1665 +
            (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
             (C6591 - C6592) * C8891 +
             (C4559 * C6215 - C30506 * C6219) * C8895 +
             (C4559 * C6220 - C30506 * C6224) * C8892) *
                C30746 * C30847) *
               C30623) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C1664 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
                C30746 * C1665 +
            (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
             (C9140 - C9139) * C8891 +
             (C4559 * C1848 - C30506 * C1857) * C8895 +
             (C4559 * C1860 - C30506 * C1866) * C8892) *
                C30746 * C30847) *
               C30813 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C1664 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C1665 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30506 * C10587 - C4559 * C10586) * C8895 +
             (C30506 * C10589 - C4559 * C10588) * C8892) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30757) *
                    C30746 * C30814 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30757) *
                    C30746 * C30665) *
                   C30813 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30757) *
                    C30746 * C30814 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30757) *
                    C30746 * C30665) *
                   C30623) *
                  C258 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30757) *
                    C30746 * C30814 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30757) *
                    C30746 * C30665) *
                   C30813 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30757) *
                    C30746 * C30814 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30757) *
                    C30746 * C30665) *
                   C30623) *
                  C259 +
              ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                  C103 * C132 - C115 * C121) *
                     C116 +
                 (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                  C103 * C142 - C115 * C133) *
                     C30757) *
                    C30746 * C30814 +
                ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                  C115 * C422 - C103 * C440) *
                     C116 +
                 (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                  C115 * C441 - C103 * C452) *
                     C30757) *
                    C30746 * C30665) *
                   C30813 +
               (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                  C115 * C269 - C103 * C287) *
                     C116 +
                 (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                  C115 * C288 - C103 * C299) *
                     C30757) *
                    C30746 * C30814 +
                ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                  C103 * C825 - C115 * C816) *
                     C116 +
                 (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                  C103 * C831 - C115 * C826) *
                     C30757) *
                    C30746 * C30665) *
                   C30623) *
                  C30838) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30814 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C30665) *
                  C1284 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30814 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30757) *
                   C30746 * C30665) *
                  C1285 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30814 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30757) *
                   C30746 * C30665) *
                  C1286 +
              (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                 C115 * C1018 - C103 * C1024) *
                    C116 +
                (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                 C115 * C1027 - C103 * C1036) *
                    C30757) *
                   C30746 * C30814 +
               ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                 C103 * C1547 - C115 * C1544) *
                    C116 +
                (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                 C103 * C1553 - C115 * C1550) *
                    C30757) *
                   C30746 * C30665) *
                  C30854) *
             C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C30813 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C2116 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C2117 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C2118 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30757) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             ((C5186 - C5187) * C116 + (C5188 - C5189) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C30506 * C1545 - C4559 * C1542) * C116 +
              (C30506 * C1551 - C4559 * C1548) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C258 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             ((C5194 - C5195) * C116 + (C5196 - C5197) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C4559 * C1543 - C30506 * C1546) * C116 +
              (C4559 * C1549 - C30506 * C1552) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C259 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C30814 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C30814 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C1284 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30814 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C1285 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30814 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C1286 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30814 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C2116 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C2117 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C2118 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C6589 - C6590) * C116 + (C6591 - C6592) * C30757) * C4557 +
            ((C6593 - C6594) * C116 + (C6595 - C6596) * C30757) * C4558) *
               C30860) *
              C30813 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C2116 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C2117 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C2118 +
           (((C6590 - C6589) * C116 + (C6592 - C6591) * C30757) * C4556 +
            ((C6594 - C6593) * C116 + (C6596 - C6595) * C30757) * C4557 +
            ((C30506 * C6585 - C4559 * C6584) * C116 +
             (C30506 * C6587 - C4559 * C6586) * C30757) *
                C4558) *
               C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30814 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
             (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
                C30746 * C30814 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30814 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
                C30746 * C30814 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C4559 * C2223 - C30506 * C2226) * C8895 +
             (C4559 * C2229 - C30506 * C2232) * C8892) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C8893 +
             (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
             (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
                C30746 * C30814 +
            ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
             (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
             (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
             (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
             (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
                C30746 * C30814 +
            ((C5199 - C5198) * C8893 + (C5201 - C5200) * C8890 +
             (C9510 - C9509) * C8894 + (C9512 - C9511) * C8891 +
             (C30506 * C2227 - C4559 * C2224) * C8895 +
             (C30506 * C2233 - C4559 * C2230) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30814 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30665) *
              C1284 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30814 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
            (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
               C30746 * C30665) *
              C1285 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30814 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30665) *
              C1286 +
          ((C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C30814 +
           (C5924 * C8893 + C5925 * C8890 + (C5541 - C5540) * C8894 +
            (C5543 - C5542) * C8891 + (C30506 * C6585 - C4559 * C6584) * C8895 +
            (C30506 * C6587 - C4559 * C6586) * C8892) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C2116 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C2117 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30746 * C2118 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30746 * C30860) *
              C30813 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C2116 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30746 * C2117 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C10809 - C10810) * C8895 +
            (C10811 - C10812) * C8892) *
               C30746 * C2118 +
           (C10807 * C8893 + C10808 * C8890 + (C10810 - C10809) * C8894 +
            (C10812 - C10811) * C8891 +
            (C30506 * C10803 - C4559 * C10802) * C8895 +
            (C30506 * C10805 - C4559 * C10804) * C8892) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30757) *
                  C30746 * C30578 * C30560 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C30757) *
                  C30746 * C30578 * C30560 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C30757) *
                  C30746 * C30578 * C30560 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C30757) *
                  C30746 * C30578 * C30560 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C30757) *
                  C30746 * C30578 * C30560 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C30838) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30882 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C30871 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30757) *
                   C30746 * C30847) *
                  C30560 * C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30882 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30757) *
                   C30746 * C30871 +
               ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                 C115 * C421 - C103 * C438) *
                    C116 +
                (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                 C115 * C439 - C103 * C451) *
                    C30757) *
                   C30746 * C30847) *
                  C30560 * C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30882 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30757) *
                   C30746 * C30871 +
               ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                 C103 * C442 - C115 * C423) *
                    C116 +
                (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                 C103 * C453 - C115 * C443) *
                    C30757) *
                   C30746 * C30847) *
                  C30560 * C30838) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C942 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C943 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C30878 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C942 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C943 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C30865 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30578 * C942 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30757) *
                   C30746 * C30578 * C943 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C30838) -
         0.25 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30757) *
                  C30746 * C30578 * C1010 +
              ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                C115 * C263 - C103 * C273) *
                   C116 +
               (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                C115 * C276 - C103 * C293) *
                   C30757) *
                  C30746 * C30578 * C1011 +
              ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                C103 * C279 - C115 * C266) *
                   C116 +
               (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                C103 * C296 - C115 * C282) *
                   C30757) *
                  C30746 * C30578 * C1012 +
              ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                C115 * C1018 - C103 * C1024) *
                   C116 +
               (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                C115 * C1027 - C103 * C1036) *
                   C30757) *
                  C30746 * C30578 * C1013 +
              ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                C103 * C1030 - C115 * C1021) *
                   C116 +
               (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                C103 * C1039 - C115 * C1033) *
                   C30757) *
                  C30746 * C30578 * C1014) *
             C30532 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30882 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C30871 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30757) *
                   C30746 * C30847) *
                  C942 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30882 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30757) *
                   C30746 * C30871 +
               ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                 C115 * C1152 - C103 * C1161) *
                    C116 +
                (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                 C115 * C1164 - C103 * C1179) *
                    C30757) *
                   C30746 * C30847) *
                  C943 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30882 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30757) *
                   C30746 * C30871 +
               ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                 C103 * C1173 - C115 * C1158) *
                    C116 +
                (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                 C103 * C1185 - C115 * C1176) *
                    C30757) *
                   C30746 * C30847) *
                  C30844) *
             C30532 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C1664 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C1665 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30757) *
                   C30746 * C30847) *
                  C30560 * C30878 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C1664 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30757) *
                   C30746 * C1665 +
               ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                 C115 * C421 - C103 * C438) *
                    C116 +
                (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                 C115 * C439 - C103 * C451) *
                    C30757) *
                   C30746 * C30847) *
                  C30560 * C30865 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C1664 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30757) *
                   C30746 * C1665 +
               ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                 C103 * C442 - C115 * C423) *
                    C116 +
                (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                 C103 * C453 - C115 * C443) *
                    C30757) *
                   C30746 * C30847) *
                  C30560 * C30838) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C1664 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C1665 +
               ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                 C103 * C432 - C115 * C419) *
                    C116 +
                (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                 C103 * C449 - C115 * C435) *
                    C30757) *
                   C30746 * C30847) *
                  C30881 +
              (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C1664 +
               ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                 C103 * C819 - C115 * C814) *
                    C116 +
                (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                 C103 * C829 - C115 * C822) *
                    C30757) *
                   C30746 * C1665 +
               ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                 C115 * C1152 - C103 * C1161) *
                    C116 +
                (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                 C115 * C1164 - C103 * C1179) *
                    C30757) *
                   C30746 * C30847) *
                  C30869 +
              (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C1664 +
               ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                 C115 * C1155 - C103 * C1167) *
                    C116 +
                (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                 C115 * C1170 - C103 * C1182) *
                    C30757) *
                   C30746 * C1665 +
               ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                 C103 * C1173 - C115 * C1158) *
                    C116 +
                (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                 C103 * C1185 - C115 * C1176) *
                    C30757) *
                   C30746 * C30847) *
                  C30844) *
             C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C1839 +
          ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
            C115 * C416 - C103 * C426) *
               C116 +
           (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
            C115 * C429 - C103 * C446) *
               C30757) *
              C30746 * C1840 +
          ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
            C103 * C432 - C115 * C419) *
               C116 +
           (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
            C103 * C449 - C115 * C435) *
               C30757) *
              C30746 * C1841 +
          ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
            C115 * C1846 - C103 * C1852) *
               C116 +
           (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
            C115 * C1855 - C103 * C1864) *
               C30757) *
              C30746 * C1842 +
          ((C101 * C1856 - C113 * C1847 + C102 * C1857 - C114 * C1848 +
            C103 * C1858 - C115 * C1849) *
               C116 +
           (C101 * C1865 - C113 * C1859 + C102 * C1866 - C114 * C1860 +
            C103 * C1867 - C115 * C1861) *
               C30757) *
              C30746 * C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C30506 * C1159 - C4559 * C1150) * C116 +
             (C30506 * C1177 - C4559 * C1162) * C30757) *
                C4557 +
            ((C30506 * C1171 - C4559 * C1156) * C116 +
             (C30506 * C1183 - C4559 * C1174) * C30757) *
                C4558) *
               C30847) *
              C30560 * C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30882 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30871 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30882 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C942 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30882 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
               C30871 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C943 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30882 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C4559 * C5514 - C30506 * C5518) * C116 +
             (C4559 * C5519 - C30506 * C5523) * C30757) *
                C4558) *
               C30871 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30560 * C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C1664 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C1665 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C1664 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C1665 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30881 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C1664 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C1665 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C30869 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C1664 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C1665 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C1839 +
          (((C4559 * C414 - C30506 * C424) * C116 +
            (C4559 * C427 - C30506 * C444) * C30757) *
               C4556 +
           ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
           C5548 * C4558) *
              C1840 +
          (((C30506 * C430 - C4559 * C417) * C116 +
            (C30506 * C447 - C4559 * C433) * C30757) *
               C4556 +
           ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
           C5551 * C4558) *
              C1841 +
          (((C4559 * C1844 - C30506 * C1850) * C116 +
            (C4559 * C1853 - C30506 * C1862) * C30757) *
               C4556 +
           ((C4559 * C2222 - C30506 * C2225) * C116 +
            (C4559 * C2228 - C30506 * C2231) * C30757) *
               C4557 +
           ((C4559 * C6214 - C30506 * C6217) * C116 +
            (C4559 * C6218 - C30506 * C6223) * C30757) *
               C4558) *
              C1842 +
          (((C30506 * C1856 - C4559 * C1847) * C116 +
            (C30506 * C1865 - C4559 * C1859) * C30757) *
               C4556 +
           ((C30506 * C6219 - C4559 * C6215) * C116 +
            (C30506 * C6224 - C4559 * C6220) * C30757) *
               C4557 +
           ((C30506 * C6221 - C4559 * C6216) * C116 +
            (C30506 * C6225 - C4559 * C6222) * C30757) *
               C4558) *
              C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 +
           (C30506 * C424 - C4559 * C414) * C8894 +
           (C30506 * C444 - C4559 * C427) * C8891 +
           (C30506 * C430 - C4559 * C417) * C8895 +
           (C30506 * C447 - C4559 * C433) * C8892) *
              C30746 * C30578 * C30560 * C108 +
          ((C4559 * C118 - C30506 * C125) * C8893 +
           (C4559 * C128 - C30506 * C139) * C8890 +
           (C4559 * C415 - C30506 * C425) * C8894 +
           (C4559 * C428 - C30506 * C445) * C8891 +
           (C4559 * C418 - C30506 * C431) * C8895 +
           (C4559 * C434 - C30506 * C448) * C8892) *
              C30746 * C30578 * C30560 * C109 +
          ((C30506 * C126 - C4559 * C119) * C8893 +
           (C30506 * C140 - C4559 * C129) * C8890 +
           (C30506 * C426 - C4559 * C416) * C8894 +
           (C30506 * C446 - C4559 * C429) * C8891 +
           (C30506 * C432 - C4559 * C419) * C8895 +
           (C30506 * C449 - C4559 * C435) * C8892) *
              C30746 * C30578 * C30560 * C110 +
          ((C4559 * C120 - C30506 * C130) * C8893 +
           (C4559 * C131 - C30506 * C141) * C8890 +
           (C4559 * C420 - C30506 * C436) * C8894 +
           (C4559 * C437 - C30506 * C450) * C8891 +
           (C4559 * C421 - C30506 * C438) * C8895 +
           (C4559 * C439 - C30506 * C451) * C8892) *
              C30746 * C30578 * C30560 * C111 +
          ((C30506 * C132 - C4559 * C121) * C8893 +
           (C30506 * C142 - C4559 * C133) * C8890 +
           (C30506 * C440 - C4559 * C422) * C8894 +
           (C30506 * C452 - C4559 * C441) * C8891 +
           (C30506 * C442 - C4559 * C423) * C8895 +
           (C30506 * C453 - C4559 * C443) * C8892) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 +
            (C30506 * C424 - C4559 * C414) * C8894 +
            (C30506 * C444 - C4559 * C427) * C8891 +
            (C30506 * C430 - C4559 * C417) * C8895 +
            (C30506 * C447 - C4559 * C433) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C30869 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 +
            (C4559 * C415 - C30506 * C425) * C8894 +
            (C4559 * C428 - C30506 * C445) * C8891 +
            (C4559 * C418 - C30506 * C431) * C8895 +
            (C4559 * C434 - C30506 * C448) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C30869 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 +
            (C30506 * C426 - C4559 * C416) * C8894 +
            (C30506 * C446 - C4559 * C429) * C8891 +
            (C30506 * C432 - C4559 * C419) * C8895 +
            (C30506 * C449 - C4559 * C435) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C4559 * C1152 - C30506 * C1161) * C8895 +
            (C4559 * C1164 - C30506 * C1179) * C8892) *
               C30746 * C30578 * C30869 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30882 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30871 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30882 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
            (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
               C30746 * C30871 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C4559 * C1848 - C30506 * C1857) * C8895 +
            (C4559 * C1860 - C30506 * C1866) * C8892) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30882 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30871 +
           (C9157 * C8893 + C9158 * C8890 + (C9150 - C9149) * C8894 +
            (C9152 - C9151) * C8891 + (C30506 * C1858 - C4559 * C1849) * C8895 +
            (C30506 * C1867 - C4559 * C1861) * C8892) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C942 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C943 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C942 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C943 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C942 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C943 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
              C30746 * C30578 * C1010 +
          ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
           (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
           (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
              C30746 * C30578 * C1011 +
          (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
           (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
              C30746 * C30578 * C1012 +
          (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
           (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
           (C5542 - C5543) * C8892) *
              C30746 * C30578 * C1013 +
          (C5398 * C8893 + C5399 * C8890 + (C5927 - C5926) * C8894 +
           (C5929 - C5928) * C8891 + (C30506 * C5520 - C4559 * C5515) * C8895 +
           (C30506 * C5524 - C4559 * C5521) * C8892) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30882 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30871 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C942 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30882 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
            (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
               C30746 * C30871 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C4559 * C6215 - C30506 * C6219) * C8895 +
            (C4559 * C6220 - C30506 * C6224) * C8892) *
               C30746 * C30847) *
              C943 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30882 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30871 +
           (C5546 * C8893 + C5547 * C8890 + (C6594 - C6593) * C8894 +
            (C6596 - C6595) * C8891 + (C30506 * C6221 - C4559 * C6216) * C8895 +
            (C30506 * C6225 - C4559 * C6222) * C8892) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C1664 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C1665 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C1664 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
            (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
               C30746 * C1665 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C4559 * C1848 - C30506 * C1857) * C8895 +
            (C4559 * C1860 - C30506 * C1866) * C8892) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C1664 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C1665 +
           (C9157 * C8893 + C9158 * C8890 + (C9150 - C9149) * C8894 +
            (C9152 - C9151) * C8891 + (C30506 * C1858 - C4559 * C1849) * C8895 +
            (C30506 * C1867 - C4559 * C1861) * C8892) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C1664 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C1665 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C30881 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C1664 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
            (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
               C30746 * C1665 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C4559 * C6215 - C30506 * C6219) * C8895 +
            (C4559 * C6220 - C30506 * C6224) * C8892) *
               C30746 * C30847) *
              C30869 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C1664 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C1665 +
           (C5546 * C8893 + C5547 * C8890 + (C6594 - C6593) * C8894 +
            (C6596 - C6595) * C8891 + (C30506 * C6221 - C4559 * C6216) * C8895 +
            (C30506 * C6225 - C4559 * C6222) * C8892) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
              C30746 * C1839 +
          ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
           (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
           C10430 * C8892) *
              C30746 * C1840 +
          (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
           (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
              C30746 * C1841 +
          (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
           (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
           (C10437 - C10438) * C8892) *
              C30746 * C1842 +
          (C10439 * C8893 + C10440 * C8890 + (C10436 - C10435) * C8894 +
           (C10438 - C10437) * C8891 +
           (C30506 * C10424 - C4559 * C10421) * C8895 +
           (C30506 * C10427 - C4559 * C10425) * C8892) *
              C30746 * C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30814 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C554 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30814 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C555 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30814 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C556 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30757) *
                   C30746 * C30814 +
               ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                 C103 * C663 - C115 * C662) *
                    C116 +
                (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                 C103 * C665 - C115 * C664) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C30848) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30757) *
                    C30746 * C30814 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30757) *
                    C30746 * C30665) *
                   C942 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30757) *
                    C30746 * C30814 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30757) *
                    C30746 * C30665) *
                   C943 +
               (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                  C103 * C279 - C115 * C266) *
                     C116 +
                 (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                  C103 * C296 - C115 * C282) *
                     C30757) *
                    C30746 * C30814 +
                ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                  C115 * C1155 - C103 * C1167) *
                     C116 +
                 (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                  C115 * C1170 - C103 * C1182) *
                     C30757) *
                    C30746 * C30665) *
                   C30844) *
                  C30799 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30757) *
                    C30746 * C30814 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30757) *
                    C30746 * C30665) *
                   C942 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30757) *
                    C30746 * C30814 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30757) *
                    C30746 * C30665) *
                   C943 +
               (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                  C115 * C268 - C103 * C285) *
                     C116 +
                 (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                  C115 * C286 - C103 * C298) *
                     C30757) *
                    C30746 * C30814 +
                ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                  C103 * C1441 - C115 * C1440) *
                     C116 +
                 (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                  C103 * C1443 - C115 * C1442) *
                     C30757) *
                    C30746 * C30665) *
                   C30844) *
                  C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C30560 * C30799 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C2116 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C2117 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C2118 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30757) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30665) *
              C30560 * C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30814 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30665) *
              C30560 * C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30814 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30665) *
              C30560 * C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30814 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C942 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C30814 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C4559 * C5514 - C30506 * C5518) * C116 +
              (C4559 * C5519 - C30506 * C5523) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C942 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C30814 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C2116 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C2117 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C2118 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C4559 * C2222 - C30506 * C2225) * C116 +
             (C4559 * C2228 - C30506 * C2231) * C30757) *
                C4557 +
            ((C4559 * C6214 - C30506 * C6217) * C116 +
             (C4559 * C6218 - C30506 * C6223) * C30757) *
                C4558) *
               C30860) *
              C30560 * C30799 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C2116 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C2117 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
            ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
               C2118 +
           (((C30506 * C1851 - C4559 * C1845) * C116 +
             (C30506 * C1863 - C4559 * C1854) * C30757) *
                C4556 +
            ((C30506 * C2226 - C4559 * C2223) * C116 +
             (C30506 * C2232 - C4559 * C2229) * C30757) *
                C4557 +
            ((C30506 * C6483 - C4559 * C6482) * C116 +
             (C30506 * C6485 - C4559 * C6484) * C30757) *
                C4558) *
               C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30814 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30814 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
            (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30814 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 + (C9355 - C9356) * C8894 +
            (C9357 - C9358) * C8891 + (C9359 - C9360) * C8895 +
            (C9361 - C9362) * C8892) *
               C30746 * C30814 +
           ((C9356 - C9355) * C8893 + (C9358 - C9357) * C8890 +
            (C9360 - C9359) * C8894 + (C9362 - C9361) * C8891 +
            (C30506 * C2121 - C4559 * C2120) * C8895 +
            (C30506 * C2123 - C4559 * C2122) * C8892) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30814 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30746 * C30665) *
               C942 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30814 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
                C30746 * C30665) *
               C943 +
           ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
             (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
                C30746 * C30814 +
            (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
             (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
             (C6595 - C6596) * C8892) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30814 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
                C30746 * C30665) *
               C942 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
                C30746 * C30814 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C4559 * C2223 - C30506 * C2226) * C8895 +
             (C4559 * C2229 - C30506 * C2232) * C8892) *
                C30746 * C30665) *
               C943 +
           ((C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
             (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
             (C6383 - C6384) * C8892) *
                C30746 * C30814 +
            (C5813 * C8893 + C5814 * C8890 + (C6382 - C6381) * C8894 +
             (C6384 - C6383) * C8891 +
             (C30506 * C6483 - C4559 * C6482) * C8895 +
             (C30506 * C6485 - C4559 * C6484) * C8892) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C2116 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C2117 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30746 * C2118 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30746 * C30860) *
              C30560 * C30799 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C2116 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30746 * C2117 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C10701 - C10702) * C8895 +
            (C10703 - C10704) * C8892) *
               C30746 * C2118 +
           (C10699 * C8893 + C10700 * C8890 + (C10702 - C10701) * C8894 +
            (C10704 - C10703) * C8891 +
            (C30506 * C10695 - C4559 * C10694) * C8895 +
            (C30506 * C10697 - C4559 * C10696) * C8892) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C30560 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30757) *
              C30746 * C30578 * C30560 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30757) *
              C30746 * C30578 * C30560 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30757) *
              C30746 * C30578 * C30560 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30757) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C1664 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C1665 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30881 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30847) *
              C30869 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30560 * C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C1664 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C1665 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C1664 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C1665 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30881 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C1664 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C1665 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C30869 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C1664 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C1665 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 +
           (C30506 * C424 - C4559 * C414) * C8894 +
           (C30506 * C444 - C4559 * C427) * C8891 +
           (C30506 * C430 - C4559 * C417) * C8895 +
           (C30506 * C447 - C4559 * C433) * C8892) *
              C30746 * C30578 * C30560 * C108 +
          ((C4559 * C118 - C30506 * C125) * C8893 +
           (C4559 * C128 - C30506 * C139) * C8890 +
           (C4559 * C415 - C30506 * C425) * C8894 +
           (C4559 * C428 - C30506 * C445) * C8891 +
           (C4559 * C418 - C30506 * C431) * C8895 +
           (C4559 * C434 - C30506 * C448) * C8892) *
              C30746 * C30578 * C30560 * C109 +
          ((C30506 * C126 - C4559 * C119) * C8893 +
           (C30506 * C140 - C4559 * C129) * C8890 +
           (C30506 * C426 - C4559 * C416) * C8894 +
           (C30506 * C446 - C4559 * C429) * C8891 +
           (C30506 * C432 - C4559 * C419) * C8895 +
           (C30506 * C449 - C4559 * C435) * C8892) *
              C30746 * C30578 * C30560 * C110 +
          ((C4559 * C120 - C30506 * C130) * C8893 +
           (C4559 * C131 - C30506 * C141) * C8890 +
           (C4559 * C420 - C30506 * C436) * C8894 +
           (C4559 * C437 - C30506 * C450) * C8891 +
           (C4559 * C421 - C30506 * C438) * C8895 +
           (C4559 * C439 - C30506 * C451) * C8892) *
              C30746 * C30578 * C30560 * C111 +
          ((C30506 * C132 - C4559 * C121) * C8893 +
           (C30506 * C142 - C4559 * C133) * C8890 +
           (C30506 * C440 - C4559 * C422) * C8894 +
           (C30506 * C452 - C4559 * C441) * C8891 +
           (C30506 * C442 - C4559 * C423) * C8895 +
           (C30506 * C453 - C4559 * C443) * C8892) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 +
            (C30506 * C424 - C4559 * C414) * C8894 +
            (C30506 * C444 - C4559 * C427) * C8891 +
            (C30506 * C430 - C4559 * C417) * C8895 +
            (C30506 * C447 - C4559 * C433) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C30869 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 +
            (C4559 * C415 - C30506 * C425) * C8894 +
            (C4559 * C428 - C30506 * C445) * C8891 +
            (C4559 * C418 - C30506 * C431) * C8895 +
            (C4559 * C434 - C30506 * C448) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C30869 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 +
            (C30506 * C426 - C4559 * C416) * C8894 +
            (C30506 * C446 - C4559 * C429) * C8891 +
            (C30506 * C432 - C4559 * C419) * C8895 +
            (C30506 * C449 - C4559 * C435) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C4559 * C1152 - C30506 * C1161) * C8895 +
            (C4559 * C1164 - C30506 * C1179) * C8892) *
               C30746 * C30578 * C30869 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C942 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C943 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C942 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C943 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C942 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C943 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
              C30746 * C30578 * C1010 +
          ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
           (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
           (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
              C30746 * C30578 * C1011 +
          (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
           (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
              C30746 * C30578 * C1012 +
          (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
           (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
           (C5542 - C5543) * C8892) *
              C30746 * C30578 * C1013 +
          (C5398 * C8893 + C5399 * C8890 + (C5927 - C5926) * C8894 +
           (C5929 - C5928) * C8891 + (C30506 * C5520 - C4559 * C5515) * C8895 +
           (C30506 * C5524 - C4559 * C5521) * C8892) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C1664 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C1665 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C1664 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
            (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
               C30746 * C1665 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C4559 * C1848 - C30506 * C1857) * C8895 +
            (C4559 * C1860 - C30506 * C1866) * C8892) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C1664 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C1665 +
           (C9157 * C8893 + C9158 * C8890 + (C9150 - C9149) * C8894 +
            (C9152 - C9151) * C8891 + (C30506 * C1858 - C4559 * C1849) * C8895 +
            (C30506 * C1867 - C4559 * C1861) * C8892) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C1664 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C1665 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C30881 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C1664 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
            (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
               C30746 * C1665 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C4559 * C6215 - C30506 * C6219) * C8895 +
            (C4559 * C6220 - C30506 * C6224) * C8892) *
               C30746 * C30847) *
              C30869 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C1664 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C1665 +
           (C5546 * C8893 + C5547 * C8890 + (C6594 - C6593) * C8894 +
            (C6596 - C6595) * C8891 + (C30506 * C6221 - C4559 * C6216) * C8895 +
            (C30506 * C6225 - C4559 * C6222) * C8892) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30537 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30546 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C3094 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C3094 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C3094 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C3094 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C3094 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C3094 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C30506 * C126 - C4559 * C119) * C8893 +
             (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
             (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
                C30746 * C3094 +
            ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
             (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
             (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
             (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
             (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
                C30746 * C3094 +
            ((C5199 - C5198) * C8893 + (C5201 - C5200) * C8890 +
             (C9510 - C9509) * C8894 + (C9512 - C9511) * C8891 +
             (C30506 * C2227 - C4559 * C2224) * C8895 +
             (C30506 * C2233 - C4559 * C2230) * C8892) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30661 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30668 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C3602) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30661 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30668 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C3602) *
               C30623) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30661 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30668 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C3602) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30661 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30668 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C3602) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C3602) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30661 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30668 +
            (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30746 * C3602) *
               C30813 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30661 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30668 +
            (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
             (C6591 - C6592) * C8891 + (C10809 - C10810) * C8895 +
             (C10811 - C10812) * C8892) *
                C30746 * C3602) *
               C30623) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30661 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30668 +
            (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
             (C9140 - C9139) * C8891 + (C10701 - C10702) * C8895 +
             (C10703 - C10704) * C8892) *
                C30746 * C3602) *
               C30813 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C30661 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30668 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30506 * C10587 - C4559 * C10586) * C8895 +
             (C30506 * C10589 - C4559 * C10588) * C8892) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C3094 +
               ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                 C115 * C416 - C103 * C426) *
                    C116 +
                (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                 C115 * C429 - C103 * C446) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C30887 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C3094 +
               ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                 C103 * C436 - C115 * C420) *
                    C116 +
                (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                 C103 * C450 - C115 * C437) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C30880 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C3094 +
               ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                 C115 * C422 - C103 * C440) *
                    C116 +
                (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                 C115 * C441 - C103 * C452) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C30867 +
              (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                 C115 * C122 - C103 * C134) *
                    C116 +
                (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C135 - C103 * C143) *
                    C30757) *
                   C30746 * C3094 +
               ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                 C103 * C663 - C115 * C662) *
                    C116 +
                (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                 C103 * C665 - C115 * C664) *
                    C30757) *
                   C30746 * C30665) *
                  C30560 * C30848) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                  C103 * C126 - C115 * C119) *
                     C116 +
                 (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                  C103 * C140 - C115 * C129) *
                     C30757) *
                    C30746 * C3094 +
                ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                  C115 * C416 - C103 * C426) *
                     C116 +
                 (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                  C115 * C429 - C103 * C446) *
                     C30757) *
                    C30746 * C30665) *
                   C30881 +
               (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                  C115 * C263 - C103 * C273) *
                     C116 +
                 (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                  C115 * C276 - C103 * C293) *
                     C30757) *
                    C30746 * C3094 +
                ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                  C103 * C819 - C115 * C814) *
                     C116 +
                 (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                  C103 * C829 - C115 * C822) *
                     C30757) *
                    C30746 * C30665) *
                   C30869 +
               (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                  C103 * C279 - C115 * C266) *
                     C116 +
                 (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                  C103 * C296 - C115 * C282) *
                     C30757) *
                    C30746 * C3094 +
                ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                  C115 * C1155 - C103 * C1167) *
                     C116 +
                 (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                  C115 * C1170 - C103 * C1182) *
                     C30757) *
                    C30746 * C30665) *
                   C30844) *
                  C2440 +
              ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                  C115 * C120 - C103 * C130) *
                     C116 +
                 (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                  C115 * C131 - C103 * C141) *
                     C30757) *
                    C30746 * C3094 +
                ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                  C103 * C436 - C115 * C420) *
                     C116 +
                 (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                  C103 * C450 - C115 * C437) *
                     C30757) *
                    C30746 * C30665) *
                   C30881 +
               (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                  C103 * C283 - C115 * C267) *
                     C116 +
                 (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                  C103 * C297 - C115 * C284) *
                     C30757) *
                    C30746 * C3094 +
                ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                  C115 * C815 - C103 * C823) *
                     C116 +
                 (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                  C115 * C824 - C103 * C830) *
                     C30757) *
                    C30746 * C30665) *
                   C30869 +
               (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                  C115 * C268 - C103 * C285) *
                     C116 +
                 (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                  C115 * C286 - C103 * C298) *
                     C30757) *
                    C30746 * C3094 +
                ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                  C103 * C1441 - C115 * C1440) *
                     C116 +
                 (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                  C103 * C1443 - C115 * C1442) *
                     C30757) *
                    C30746 * C30665) *
                   C30844) *
                  C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30889 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30886 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30877 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C30560 * C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30889 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30886 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30877 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30757) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30560 * C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C3094 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30665) *
              C30560 * C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C3094 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C30665) *
              C30560 * C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C3094 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30881 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30869 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C3094 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C30844) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30881 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30869 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C3094 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30889 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30886 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30877 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C6589 - C6590) * C116 + (C6591 - C6592) * C30757) * C4557 +
            ((C6593 - C6594) * C116 + (C6595 - C6596) * C30757) * C4558) *
               C30860) *
              C30560 * C2440 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30889 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30886 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
            ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
               C30877 +
           (((C30506 * C1851 - C4559 * C1845) * C116 +
             (C30506 * C1863 - C4559 * C1854) * C30757) *
                C4556 +
            ((C30506 * C2226 - C4559 * C2223) * C116 +
             (C30506 * C2232 - C4559 * C2229) * C30757) *
                C4557 +
            ((C30506 * C6483 - C4559 * C6482) * C116 +
             (C30506 * C6485 - C4559 * C6484) * C30757) *
                C4558) *
               C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C3094 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C3094 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C3094 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 + (C9355 - C9356) * C8894 +
            (C9357 - C9358) * C8891 + (C9359 - C9360) * C8895 +
            (C9361 - C9362) * C8892) *
               C30746 * C3094 +
           ((C9356 - C9355) * C8893 + (C9358 - C9357) * C8890 +
            (C9360 - C9359) * C8894 + (C9362 - C9361) * C8891 +
            (C30506 * C2121 - C4559 * C2120) * C8895 +
            (C30506 * C2123 - C4559 * C2122) * C8892) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C3094 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C30881 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C3094 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30869 +
           ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
             (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
                C30746 * C3094 +
            (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
             (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
             (C6595 - C6596) * C8892) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C3094 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C30881 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C3094 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30869 +
           ((C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
             (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
             (C6383 - C6384) * C8892) *
                C30746 * C3094 +
            (C5813 * C8893 + C5814 * C8890 + (C6382 - C6381) * C8894 +
             (C6384 - C6383) * C8891 +
             (C30506 * C6483 - C4559 * C6482) * C8895 +
             (C30506 * C6485 - C4559 * C6484) * C8892) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30889 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30886 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30746 * C30877 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30746 * C30860) *
              C30560 * C2440 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30889 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30746 * C30886 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C10701 - C10702) * C8895 +
            (C10703 - C10704) * C8892) *
               C30746 * C30877 +
           (C10699 * C8893 + C10700 * C8890 + (C10702 - C10701) * C8894 +
            (C10704 - C10703) * C8891 +
            (C30506 * C10695 - C4559 * C10694) * C8895 +
            (C30506 * C10697 - C4559 * C10696) * C8892) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30661 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30668 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C3602) *
              C30560 * C30537 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30661 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30668 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
            ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
               C3602) *
              C30560 * C30546 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30661 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C30668 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C3602) *
              C30560 * C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C3602) *
              C30560 * C30537 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30661 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30668 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C3602) *
              C30560 * C30546 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C3602) *
              C30560 * C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30661 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30668 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30746 * C3602) *
              C30560 * C30537 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30661 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30746 * C30668 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C10701 - C10702) * C8895 +
            (C10703 - C10704) * C8892) *
               C30746 * C3602) *
              C30560 * C30546 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30661 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30668 +
           (C9157 * C8893 + C9158 * C8890 + (C9150 - C9149) * C8894 +
            (C9152 - C9151) * C8891 + (C30506 * C1858 - C4559 * C1849) * C8895 +
            (C30506 * C1867 - C4559 * C1861) * C8892) *
               C30746 * C3602) *
              C30560 * C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30881 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30869 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30881 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30869 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30560 * C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C3094 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30665) *
              C30560 * C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C3094 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C30665) *
              C30560 * C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C3094 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30881 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30869 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C3094 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C30844) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30881 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30869 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C3094 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C3094 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C3094 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C3094 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 + (C9355 - C9356) * C8894 +
            (C9357 - C9358) * C8891 + (C9359 - C9360) * C8895 +
            (C9361 - C9362) * C8892) *
               C30746 * C3094 +
           ((C9356 - C9355) * C8893 + (C9358 - C9357) * C8890 +
            (C9360 - C9359) * C8894 + (C9362 - C9361) * C8891 +
            (C30506 * C2121 - C4559 * C2120) * C8895 +
            (C30506 * C2123 - C4559 * C2122) * C8892) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C3094 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30746 * C30665) *
               C30881 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C3094 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30746 * C30665) *
               C30869 +
           ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
             (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
                C30746 * C3094 +
            (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
             (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
             (C6595 - C6596) * C8892) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C3094 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             C10699 * C8895 + C10700 * C8892) *
                C30746 * C30665) *
               C30881 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             C10591 * C8895 + C10592 * C8892) *
                C30746 * C3094 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30746 * C30665) *
               C30869 +
           ((C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
             (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
             (C6383 - C6384) * C8892) *
                C30746 * C3094 +
            (C5813 * C8893 + C5814 * C8890 + (C6382 - C6381) * C8894 +
             (C6384 - C6383) * C8891 +
             (C30506 * C6483 - C4559 * C6482) * C8895 +
             (C30506 * C6485 - C4559 * C6484) * C8892) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C1284 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C1285 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C1286 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C1284 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C1285 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C1286 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30813 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30623) *
              C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30813 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30623) *
              C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30813 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C30813 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C1284 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C1285 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C1286 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C1284 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C1285 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C1286 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C30813 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C30813 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C30813 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C4559 * C1152 - C30506 * C1161) * C8895 +
            (C4559 * C1164 - C30506 * C1179) * C8892) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 +
            (C4559 * C420 - C30506 * C436) * C8894 +
            (C4559 * C437 - C30506 * C450) * C8891 +
            (C4559 * C421 - C30506 * C438) * C8895 +
            (C4559 * C439 - C30506 * C451) * C8892) *
               C30746 * C30578 * C30813 +
           ((C4931 - C4930) * C8893 + (C4933 - C4932) * C8890 +
            (C30506 * C823 - C4559 * C815) * C8894 +
            (C30506 * C830 - C4559 * C824) * C8891 +
            (C30506 * C2015 - C4559 * C2014) * C8895 +
            (C30506 * C2017 - C4559 * C2016) * C8892) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C1284 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30578 * C1285 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C1286 +
           (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C1284 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C1285 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C1286 +
           (C5654 * C8893 + C5655 * C8890 + (C5816 - C5815) * C8894 +
            (C5818 - C5817) * C8891 + (C30506 * C6373 - C4559 * C6372) * C8895 +
            (C30506 * C6375 - C4559 * C6374) * C8892) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C1284 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30665) *
              C1285 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30665) *
              C1286 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30757) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             ((C5186 - C5187) * C116 + (C5188 - C5189) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C30506 * C1545 - C4559 * C1542) * C116 +
              (C30506 * C1551 - C4559 * C1548) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C258 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             ((C5194 - C5195) * C116 + (C5196 - C5197) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C4559 * C1543 - C30506 * C1546) * C116 +
              (C4559 * C1549 - C30506 * C1552) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C259 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C30814 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C30814 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C1284 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30814 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C1285 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30814 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C1286 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30814 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30814 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
             (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
                C30746 * C30814 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30814 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
                C30746 * C30814 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C4559 * C2223 - C30506 * C2226) * C8895 +
             (C4559 * C2229 - C30506 * C2232) * C8892) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C8893 +
             (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
             (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
                C30746 * C30814 +
            ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
             (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
             (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
                C30746 * C30665) *
               C30813 +
           (((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
             (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
             (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
                C30746 * C30814 +
            ((C5199 - C5198) * C8893 + (C5201 - C5200) * C8890 +
             (C9510 - C9509) * C8894 + (C9512 - C9511) * C8891 +
             (C30506 * C2227 - C4559 * C2224) * C8895 +
             (C30506 * C2233 - C4559 * C2230) * C8892) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30814 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30665) *
              C1284 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30814 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
            (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
               C30746 * C30665) *
              C1285 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30814 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30665) *
              C1286 +
          ((C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
            (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
            (C5542 - C5543) * C8892) *
               C30746 * C30814 +
           (C5924 * C8893 + C5925 * C8890 + (C5541 - C5540) * C8894 +
            (C5543 - C5542) * C8891 + (C30506 * C6585 - C4559 * C6584) * C8895 +
            (C30506 * C6587 - C4559 * C6586) * C8892) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30757) *
                  C30746 * C30578 * C30560 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C30757) *
                  C30746 * C30578 * C30560 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C30757) *
                  C30746 * C30578 * C30560 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C30757) *
                  C30746 * C30578 * C30560 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C30757) *
                  C30746 * C30578 * C30560 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30882 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30871 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30882 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30871 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30847) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C30506 * C1159 - C4559 * C1150) * C116 +
             (C30506 * C1177 - C4559 * C1162) * C30757) *
                C4557 +
            ((C30506 * C1171 - C4559 * C1156) * C116 +
             (C30506 * C1183 - C4559 * C1174) * C30757) *
                C4558) *
               C30847) *
              C30560 * C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30882 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30871 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30882 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C942 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30882 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
               C30871 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C943 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30882 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C4559 * C5514 - C30506 * C5518) * C116 +
             (C4559 * C5519 - C30506 * C5523) * C30757) *
                C4558) *
               C30871 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 +
           (C30506 * C424 - C4559 * C414) * C8894 +
           (C30506 * C444 - C4559 * C427) * C8891 +
           (C30506 * C430 - C4559 * C417) * C8895 +
           (C30506 * C447 - C4559 * C433) * C8892) *
              C30746 * C30578 * C30560 * C108 +
          ((C4559 * C118 - C30506 * C125) * C8893 +
           (C4559 * C128 - C30506 * C139) * C8890 +
           (C4559 * C415 - C30506 * C425) * C8894 +
           (C4559 * C428 - C30506 * C445) * C8891 +
           (C4559 * C418 - C30506 * C431) * C8895 +
           (C4559 * C434 - C30506 * C448) * C8892) *
              C30746 * C30578 * C30560 * C109 +
          ((C30506 * C126 - C4559 * C119) * C8893 +
           (C30506 * C140 - C4559 * C129) * C8890 +
           (C30506 * C426 - C4559 * C416) * C8894 +
           (C30506 * C446 - C4559 * C429) * C8891 +
           (C30506 * C432 - C4559 * C419) * C8895 +
           (C30506 * C449 - C4559 * C435) * C8892) *
              C30746 * C30578 * C30560 * C110 +
          ((C4559 * C120 - C30506 * C130) * C8893 +
           (C4559 * C131 - C30506 * C141) * C8890 +
           (C4559 * C420 - C30506 * C436) * C8894 +
           (C4559 * C437 - C30506 * C450) * C8891 +
           (C4559 * C421 - C30506 * C438) * C8895 +
           (C4559 * C439 - C30506 * C451) * C8892) *
              C30746 * C30578 * C30560 * C111 +
          ((C30506 * C132 - C4559 * C121) * C8893 +
           (C30506 * C142 - C4559 * C133) * C8890 +
           (C30506 * C440 - C4559 * C422) * C8894 +
           (C30506 * C452 - C4559 * C441) * C8891 +
           (C30506 * C442 - C4559 * C423) * C8895 +
           (C30506 * C453 - C4559 * C443) * C8892) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 +
            (C30506 * C424 - C4559 * C414) * C8894 +
            (C30506 * C444 - C4559 * C427) * C8891 +
            (C30506 * C430 - C4559 * C417) * C8895 +
            (C30506 * C447 - C4559 * C433) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C30869 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 +
            (C4559 * C415 - C30506 * C425) * C8894 +
            (C4559 * C428 - C30506 * C445) * C8891 +
            (C4559 * C418 - C30506 * C431) * C8895 +
            (C4559 * C434 - C30506 * C448) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C30869 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 +
            (C30506 * C426 - C4559 * C416) * C8894 +
            (C30506 * C446 - C4559 * C429) * C8891 +
            (C30506 * C432 - C4559 * C419) * C8895 +
            (C30506 * C449 - C4559 * C435) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C4559 * C1152 - C30506 * C1161) * C8895 +
            (C4559 * C1164 - C30506 * C1179) * C8892) *
               C30746 * C30578 * C30869 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30882 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30871 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30882 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
            (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
               C30746 * C30871 +
           (C9155 * C8893 + C9156 * C8890 + (C9138 - C9137) * C8894 +
            (C9140 - C9139) * C8891 + (C4559 * C1848 - C30506 * C1857) * C8895 +
            (C4559 * C1860 - C30506 * C1866) * C8892) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30882 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30871 +
           (C9157 * C8893 + C9158 * C8890 + (C9150 - C9149) * C8894 +
            (C9152 - C9151) * C8891 + (C30506 * C1858 - C4559 * C1849) * C8895 +
            (C30506 * C1867 - C4559 * C1861) * C8892) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C942 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C943 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C942 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C943 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C942 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C943 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
              C30746 * C30578 * C1010 +
          ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
           (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
           (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
              C30746 * C30578 * C1011 +
          (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
           (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
              C30746 * C30578 * C1012 +
          (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
           (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
           (C5542 - C5543) * C8892) *
              C30746 * C30578 * C1013 +
          (C5398 * C8893 + C5399 * C8890 + (C5927 - C5926) * C8894 +
           (C5929 - C5928) * C8891 + (C30506 * C5520 - C4559 * C5515) * C8895 +
           (C30506 * C5524 - C4559 * C5521) * C8892) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30882 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30871 +
           (C9153 * C8893 + C9154 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30506 * C1856 - C4559 * C1847) * C8895 +
            (C30506 * C1865 - C4559 * C1859) * C8892) *
               C30746 * C30847) *
              C942 +
          (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
            C9796 * C8892) *
               C30746 * C30882 +
           ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
            (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
            (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
               C30746 * C30871 +
           (C9795 * C8893 + C9796 * C8890 + (C6589 - C6590) * C8894 +
            (C6591 - C6592) * C8891 + (C4559 * C6215 - C30506 * C6219) * C8895 +
            (C4559 * C6220 - C30506 * C6224) * C8892) *
               C30746 * C30847) *
              C943 +
          ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30882 +
           (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
            (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
            (C6595 - C6596) * C8892) *
               C30746 * C30871 +
           (C5546 * C8893 + C5547 * C8890 + (C6594 - C6593) * C8894 +
            (C6596 - C6595) * C8891 + (C30506 * C6221 - C4559 * C6216) * C8895 +
            (C30506 * C6225 - C4559 * C6222) * C8892) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C942 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C943 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C942 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C943 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30665) *
              C30560 * C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30814 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30665) *
              C30560 * C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30814 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30665) *
              C30560 * C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30814 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C942 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C30814 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C4559 * C5514 - C30506 * C5518) * C116 +
              (C4559 * C5519 - C30506 * C5523) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C942 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C30814 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30814 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30814 +
           ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
            (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
            (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30814 +
           ((C9142 - C9141) * C8893 + (C9144 - C9143) * C8890 +
            (C9146 - C9145) * C8894 + (C9148 - C9147) * C8891 +
            (C9149 - C9150) * C8895 + (C9151 - C9152) * C8892) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C4559 * C120 - C30506 * C130) * C8893 +
            (C4559 * C131 - C30506 * C141) * C8890 + (C9355 - C9356) * C8894 +
            (C9357 - C9358) * C8891 + (C9359 - C9360) * C8895 +
            (C9361 - C9362) * C8892) *
               C30746 * C30814 +
           ((C9356 - C9355) * C8893 + (C9358 - C9357) * C8890 +
            (C9360 - C9359) * C8894 + (C9362 - C9361) * C8891 +
            (C30506 * C2121 - C4559 * C2120) * C8895 +
            (C30506 * C2123 - C4559 * C2122) * C8892) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C8893 +
             (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
                C30746 * C30814 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30746 * C30665) *
               C942 +
           (((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
             (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 + C9795 * C8895 +
             C9796 * C8892) *
                C30746 * C30814 +
            ((C5183 - C5182) * C8893 + (C5185 - C5184) * C8890 +
             (C5528 - C5529) * C8894 + (C5530 - C5531) * C8891 +
             (C6590 - C6589) * C8895 + (C6592 - C6591) * C8892) *
                C30746 * C30665) *
               C943 +
           ((C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
             (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
                C30746 * C30814 +
            (C5526 * C8893 + C5527 * C8890 + (C5533 - C5532) * C8894 +
             (C5535 - C5534) * C8891 + (C6593 - C6594) * C8895 +
             (C6595 - C6596) * C8892) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C8893 +
             (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
             (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
                C30746 * C30814 +
            ((C9130 - C9129) * C8893 + (C9132 - C9131) * C8890 +
             (C9134 - C9133) * C8894 + (C9136 - C9135) * C8891 +
             (C9137 - C9138) * C8895 + (C9139 - C9140) * C8892) *
                C30746 * C30665) *
               C942 +
           (((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
             (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
             (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
                C30746 * C30814 +
            ((C5191 - C5190) * C8893 + (C5193 - C5192) * C8890 +
             (C6377 - C6378) * C8894 + (C6379 - C6380) * C8891 +
             (C4559 * C2223 - C30506 * C2226) * C8895 +
             (C4559 * C2229 - C30506 * C2232) * C8892) *
                C30746 * C30665) *
               C943 +
           ((C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
             (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
             (C6383 - C6384) * C8892) *
                C30746 * C30814 +
            (C5813 * C8893 + C5814 * C8890 + (C6382 - C6381) * C8894 +
             (C6384 - C6383) * C8891 +
             (C30506 * C6483 - C4559 * C6482) * C8895 +
             (C30506 * C6485 - C4559 * C6484) * C8892) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C30560 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30757) *
              C30746 * C30578 * C30560 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30757) *
              C30746 * C30578 * C30560 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30757) *
              C30746 * C30578 * C30560 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30757) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 +
           (C30506 * C424 - C4559 * C414) * C8894 +
           (C30506 * C444 - C4559 * C427) * C8891 +
           (C30506 * C430 - C4559 * C417) * C8895 +
           (C30506 * C447 - C4559 * C433) * C8892) *
              C30746 * C30578 * C30560 * C108 +
          ((C4559 * C118 - C30506 * C125) * C8893 +
           (C4559 * C128 - C30506 * C139) * C8890 +
           (C4559 * C415 - C30506 * C425) * C8894 +
           (C4559 * C428 - C30506 * C445) * C8891 +
           (C4559 * C418 - C30506 * C431) * C8895 +
           (C4559 * C434 - C30506 * C448) * C8892) *
              C30746 * C30578 * C30560 * C109 +
          ((C30506 * C126 - C4559 * C119) * C8893 +
           (C30506 * C140 - C4559 * C129) * C8890 +
           (C30506 * C426 - C4559 * C416) * C8894 +
           (C30506 * C446 - C4559 * C429) * C8891 +
           (C30506 * C432 - C4559 * C419) * C8895 +
           (C30506 * C449 - C4559 * C435) * C8892) *
              C30746 * C30578 * C30560 * C110 +
          ((C4559 * C120 - C30506 * C130) * C8893 +
           (C4559 * C131 - C30506 * C141) * C8890 +
           (C4559 * C420 - C30506 * C436) * C8894 +
           (C4559 * C437 - C30506 * C450) * C8891 +
           (C4559 * C421 - C30506 * C438) * C8895 +
           (C4559 * C439 - C30506 * C451) * C8892) *
              C30746 * C30578 * C30560 * C111 +
          ((C30506 * C132 - C4559 * C121) * C8893 +
           (C30506 * C142 - C4559 * C133) * C8890 +
           (C30506 * C440 - C4559 * C422) * C8894 +
           (C30506 * C452 - C4559 * C441) * C8891 +
           (C30506 * C442 - C4559 * C423) * C8895 +
           (C30506 * C453 - C4559 * C443) * C8892) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 +
            (C30506 * C424 - C4559 * C414) * C8894 +
            (C30506 * C444 - C4559 * C427) * C8891 +
            (C30506 * C430 - C4559 * C417) * C8895 +
            (C30506 * C447 - C4559 * C433) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C30869 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 +
            (C4559 * C415 - C30506 * C425) * C8894 +
            (C4559 * C428 - C30506 * C445) * C8891 +
            (C4559 * C418 - C30506 * C431) * C8895 +
            (C4559 * C434 - C30506 * C448) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C30869 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 +
            (C30506 * C426 - C4559 * C416) * C8894 +
            (C30506 * C446 - C4559 * C429) * C8891 +
            (C30506 * C432 - C4559 * C419) * C8895 +
            (C30506 * C449 - C4559 * C435) * C8892) *
               C30746 * C30578 * C30881 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C4559 * C1152 - C30506 * C1161) * C8895 +
            (C4559 * C1164 - C30506 * C1179) * C8892) *
               C30746 * C30578 * C30869 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C8893 +
            (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
               C30746 * C30578 * C942 +
           ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
            (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
            (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
               C30746 * C30578 * C943 +
           (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
            (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C4559 * C118 - C30506 * C125) * C8893 +
            (C4559 * C128 - C30506 * C139) * C8890 + (C9129 - C9130) * C8894 +
            (C9131 - C9132) * C8891 + C9155 * C8895 + C9156 * C8892) *
               C30746 * C30578 * C942 +
           ((C4684 - C4683) * C8893 + (C4686 - C4685) * C8890 +
            (C5190 - C5191) * C8894 + (C5192 - C5193) * C8891 +
            (C6378 - C6377) * C8895 + (C6380 - C6379) * C8892) *
               C30746 * C30578 * C943 +
           (C4709 * C8893 + C4710 * C8890 + (C5195 - C5194) * C8894 +
            (C5197 - C5196) * C8891 + (C6381 - C6382) * C8895 +
            (C6383 - C6384) * C8892) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C30506 * C126 - C4559 * C119) * C8893 +
            (C30506 * C140 - C4559 * C129) * C8890 + (C9141 - C9142) * C8894 +
            (C9143 - C9144) * C8891 + C9157 * C8895 + C9158 * C8892) *
               C30746 * C30578 * C942 +
           ((C4696 - C4695) * C8893 + (C4698 - C4697) * C8890 +
            (C5198 - C5199) * C8894 + (C5200 - C5201) * C8891 +
            (C9509 - C9510) * C8895 + (C9511 - C9512) * C8892) *
               C30746 * C30578 * C943 +
           (C4711 * C8893 + C4712 * C8890 + (C5203 - C5202) * C8894 +
            (C5205 - C5204) * C8891 + (C30506 * C1173 - C4559 * C1158) * C8895 +
            (C30506 * C1185 - C4559 * C1176) * C8892) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C30506 * C124 - C4559 * C117) * C8893 +
           (C30506 * C138 - C4559 * C127) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9153 * C8895 + C9154 * C8892) *
              C30746 * C30578 * C1010 +
          ((C4672 - C4671) * C8893 + (C4674 - C4673) * C8890 +
           (C5182 - C5183) * C8894 + (C5184 - C5185) * C8891 +
           (C5529 - C5528) * C8895 + (C5531 - C5530) * C8892) *
              C30746 * C30578 * C1011 +
          (C4707 * C8893 + C4708 * C8890 + (C5187 - C5186) * C8894 +
           (C5189 - C5188) * C8891 + C5546 * C8895 + C5547 * C8892) *
              C30746 * C30578 * C1012 +
          (C5386 * C8893 + C5387 * C8890 + (C5537 - C5536) * C8894 +
           (C5539 - C5538) * C8891 + (C5540 - C5541) * C8895 +
           (C5542 - C5543) * C8892) *
              C30746 * C30578 * C1013 +
          (C5398 * C8893 + C5399 * C8890 + (C5927 - C5926) * C8894 +
           (C5929 - C5928) * C8891 + (C30506 * C5520 - C4559 * C5515) * C8895 +
           (C30506 * C5524 - C4559 * C5521) * C8892) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C30619 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30626 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C2700) *
              C30537 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C30619 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30626 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C2700) *
              C30546 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C30619 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30626 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30814 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30619 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30814 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30626 +
           (((C13288 - C13287 + C13290 - C13289) * C18742 +
             (C13292 - C13291 + C13294 - C13293) * C18740 +
             (C14357 - C14358 + C14359 - C14360) * C18743 +
             (C14361 - C14362 + C14363 - C14364) * C18741) *
                C30746 * C30814 +
            ((C14358 - C14357 + C14360 - C14359) * C18742 +
             (C14362 - C14361 + C14364 - C14363) * C18740 +
             (C14365 - C14366 + C14367 - C14368) * C18743 +
             (C14369 - C14370 + C14371 - C14372) * C18741) *
                C30746 * C30665) *
               C2700) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30814 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30619 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30814 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30626 +
           (((C13304 - C13303 + C13306 - C13305) * C18742 +
             (C13308 - C13307 + C13310 - C13309) * C18740 +
             (C14705 - C14706 + C14707 - C14708) * C18743 +
             (C14709 - C14710 + C14711 - C14712) * C18741) *
                C30746 * C30814 +
            ((C14706 - C14705 + C14708 - C14707) * C18742 +
             (C14710 - C14709 + C14712 - C14711) * C18740 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C18743 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C18741) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C30888 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30884 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30874 +
           ((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C30888 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30884 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30874 +
           ((C14504 - C14503 + C14506 - C14505) * C18742 +
            (C14508 - C14507 + C14510 - C14509) * C18740 +
            (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
             C13131 * C1544) *
                C18743 +
            (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
             C13131 * C1550) *
                C18741) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C19345 - C19346 + C19347 - C19348) * C18743 +
            (C19349 - C19350 + C19351 - C19352) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13604 - C13603 + C13606 - C13605) * C18742 +
            (C13608 - C13607 + C13610 - C13609) * C18740 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C18743 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C18741) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30882 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30871 +
            ((C19046 - C19045 + C19048 - C19047) * C18742 +
             (C19050 - C19049 + C19052 - C19051) * C18740 +
             (C20749 - C20750 + C20751 - C20752) * C18743 +
             (C20753 - C20754 + C20755 - C20756) * C18741) *
                C30746 * C30847) *
               C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30882 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30871 +
            ((C14350 - C14349 + C14352 - C14351) * C18742 +
             (C14354 - C14353 + C14356 - C14355) * C18740 +
             (C15687 - C15688 + C15689 - C15690) * C18743 +
             (C15691 - C15692 + C15693 - C15694) * C18741) *
                C30746 * C30847) *
               C30623) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30882 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30871 +
            ((C19062 - C19061 + C19064 - C19063) * C18742 +
             (C19066 - C19065 + C19068 - C19067) * C18740 +
             (C21089 - C21090 + C21091 - C21092) * C18743 +
             (C21093 - C21094 + C21095 - C21096) * C18741) *
                C30746 * C30847) *
               C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30882 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30871 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
              C13131 * C2224) *
                 C18743 +
             (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
              C13131 * C2230) *
                 C18741) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30814 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30814 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30814 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30814 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C18742 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C18740 +
             (C19069 - C19070 + C19071 - C19072) * C18743 +
             (C19073 - C19074 + C19075 - C19076) * C18741) *
                C30746 * C30814 +
            ((C19070 - C19069 + C19072 - C19071) * C18742 +
             (C19074 - C19073 + C19076 - C19075) * C18740 +
             (C19077 - C19078 + C19079 - C19080) * C18743 +
             (C19081 - C19082 + C19083 - C19084) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13951 - C13952 + C13953 - C13954) * C18743 +
             (C13955 - C13956 + C13957 - C13958) * C18741) *
                C30746 * C30814 +
            ((C13952 - C13951 + C13954 - C13953) * C18742 +
             (C13956 - C13955 + C13958 - C13957) * C18740 +
             (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C18743 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C18741) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C19345 - C19346 + C19347 - C19348) * C18743 +
            (C19349 - C19350 + C19351 - C19352) * C18741) *
               C30746 * C30578 * C2332 +
           ((C13604 - C13603 + C13606 - C13605) * C18742 +
            (C13608 - C13607 + C13610 - C13609) * C18740 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C18743 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C18741) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C30888 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30884 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30874 +
           ((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C30888 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30884 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30874 +
           ((C14504 - C14503 + C14506 - C14505) * C18742 +
            (C14508 - C14507 + C14510 - C14509) * C18740 +
            (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
             C13131 * C1544) *
                C18743 +
            (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
             C13131 * C1550) *
                C18741) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C3094 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30619 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C3094 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30626 +
           (((C13288 - C13287 + C13290 - C13289) * C18742 +
             (C13292 - C13291 + C13294 - C13293) * C18740 +
             (C14357 - C14358 + C14359 - C14360) * C18743 +
             (C14361 - C14362 + C14363 - C14364) * C18741) *
                C30746 * C3094 +
            ((C14358 - C14357 + C14360 - C14359) * C18742 +
             (C14362 - C14361 + C14364 - C14363) * C18740 +
             (C14365 - C14366 + C14367 - C14368) * C18743 +
             (C14369 - C14370 + C14371 - C14372) * C18741) *
                C30746 * C30665) *
               C2700) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C3094 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30619 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C3094 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30626 +
           (((C13304 - C13303 + C13306 - C13305) * C18742 +
             (C13308 - C13307 + C13310 - C13309) * C18740 +
             (C14705 - C14706 + C14707 - C14708) * C18743 +
             (C14709 - C14710 + C14711 - C14712) * C18741) *
                C30746 * C3094 +
            ((C14706 - C14705 + C14708 - C14707) * C18742 +
             (C14710 - C14709 + C14712 - C14711) * C18740 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C18743 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C18741) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30661 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30668 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C20749 - C20750 + C20751 - C20752) * C18743 +
            (C20753 - C20754 + C20755 - C20756) * C18741) *
               C30746 * C3602) *
              C30619 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30661 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30668 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C3602) *
              C30626 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30661 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30668 +
           ((C14366 - C14365 + C14368 - C14367) * C18742 +
            (C14370 - C14369 + C14372 - C14371) * C18740 +
            (C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
             C13131 * C6482) *
                C18743 +
            (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
             C13131 * C6484) *
                C18741) *
               C30746 * C3602) *
              C2700) *
         C30532) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C3094 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C30888 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C3094 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30665) *
              C30884 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C3094 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30665) *
              C30874 +
          (((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C3094 +
           ((C14844 - C14843 + C14846 - C14845) * C18742 +
            (C14848 - C14847 + C14850 - C14849) * C18740 +
            (C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
             C13131 * C6372) *
                C18743 +
            (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
             C13131 * C6374) *
                C18741) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C3094 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C3094 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C3094 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C3094 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C18742 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C18740 +
             (C19069 - C19070 + C19071 - C19072) * C18743 +
             (C19073 - C19074 + C19075 - C19076) * C18741) *
                C30746 * C3094 +
            ((C19070 - C19069 + C19072 - C19071) * C18742 +
             (C19074 - C19073 + C19076 - C19075) * C18740 +
             (C19077 - C19078 + C19079 - C19080) * C18743 +
             (C19081 - C19082 + C19083 - C19084) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13951 - C13952 + C13953 - C13954) * C18743 +
             (C13955 - C13956 + C13957 - C13958) * C18741) *
                C30746 * C3094 +
            ((C13952 - C13951 + C13954 - C13953) * C18742 +
             (C13956 - C13955 + C13958 - C13957) * C18740 +
             (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C18743 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C18741) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30889 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30886 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C20749 - C20750 + C20751 - C20752) * C18743 +
            (C20753 - C20754 + C20755 - C20756) * C18741) *
               C30746 * C30877 +
           ((C20750 - C20749 + C20752 - C20751) * C18742 +
            (C20754 - C20753 + C20756 - C20755) * C18740 +
            (C20757 - C20758 + C20759 - C20760) * C18743 +
            (C20761 - C20762 + C20763 - C20764) * C18741) *
               C30746 * C30860) *
              C2332 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30889 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30886 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C30877 +
           ((C15688 - C15687 + C15690 - C15689) * C18742 +
            (C15692 - C15691 + C15694 - C15693) * C18740 +
            (C13126 * C6219 - C13130 * C6215 + C13127 * C10587 -
             C13131 * C10586) *
                C18743 +
            (C13126 * C6224 - C13130 * C6220 + C13127 * C10589 -
             C13131 * C10588) *
                C18741) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30661 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30668 +
            ((C19046 - C19045 + C19048 - C19047) * C18742 +
             (C19050 - C19049 + C19052 - C19051) * C18740 +
             (C20749 - C20750 + C20751 - C20752) * C18743 +
             (C20753 - C20754 + C20755 - C20756) * C18741) *
                C30746 * C3602) *
               C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30661 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30668 +
            ((C14350 - C14349 + C14352 - C14351) * C18742 +
             (C14354 - C14353 + C14356 - C14355) * C18740 +
             (C15687 - C15688 + C15689 - C15690) * C18743 +
             (C15691 - C15692 + C15693 - C15694) * C18741) *
                C30746 * C3602) *
               C30623) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30661 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30668 +
            ((C19062 - C19061 + C19064 - C19063) * C18742 +
             (C19066 - C19065 + C19068 - C19067) * C18740 +
             (C21089 - C21090 + C21091 - C21092) * C18743 +
             (C21093 - C21094 + C21095 - C21096) * C18741) *
                C30746 * C3602) *
               C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30661 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30668 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
              C13131 * C2224) *
                 C18743 +
             (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
              C13131 * C2230) *
                 C18741) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C3094 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C3094 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C3094 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C3094 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C18742 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C18740 +
             (C19069 - C19070 + C19071 - C19072) * C18743 +
             (C19073 - C19074 + C19075 - C19076) * C18741) *
                C30746 * C3094 +
            ((C19070 - C19069 + C19072 - C19071) * C18742 +
             (C19074 - C19073 + C19076 - C19075) * C18740 +
             (C19077 - C19078 + C19079 - C19080) * C18743 +
             (C19081 - C19082 + C19083 - C19084) * C18741) *
                C30746 * C30665) *
               C2332 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13951 - C13952 + C13953 - C13954) * C18743 +
             (C13955 - C13956 + C13957 - C13958) * C18741) *
                C30746 * C3094 +
            ((C13952 - C13951 + C13954 - C13953) * C18742 +
             (C13956 - C13955 + C13958 - C13957) * C18740 +
             (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C18743 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C18741) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C3094 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C30888 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C3094 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30665) *
              C30884 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C3094 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30665) *
              C30874 +
          (((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C3094 +
           ((C14844 - C14843 + C14846 - C14845) * C18742 +
            (C14848 - C14847 + C14850 - C14849) * C18740 +
            (C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
             C13131 * C6372) *
                C18743 +
            (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
             C13131 * C6374) *
                C18741) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C1284 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C1285 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C1286 +
           ((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C1284 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C1285 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C1286 +
           ((C14504 - C14503 + C14506 - C14505) * C18742 +
            (C14508 - C14507 + C14510 - C14509) * C18740 +
            (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
             C13131 * C1544) *
                C18743 +
            (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
             C13131 * C1550) *
                C18741) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C30813 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C30813 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C30813 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                C18743 +
            (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                C18741) *
               C30746 * C30578 * C30813 +
           ((C13604 - C13603 + C13606 - C13605) * C18742 +
            (C13608 - C13607 + C13610 - C13609) * C18740 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C18743 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C18741) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C1664 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C1665 +
            ((C19046 - C19045 + C19048 - C19047) * C18742 +
             (C19050 - C19049 + C19052 - C19051) * C18740 +
             (C20749 - C20750 + C20751 - C20752) * C18743 +
             (C20753 - C20754 + C20755 - C20756) * C18741) *
                C30746 * C30847) *
               C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C1664 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C1665 +
            ((C14350 - C14349 + C14352 - C14351) * C18742 +
             (C14354 - C14353 + C14356 - C14355) * C18740 +
             (C15687 - C15688 + C15689 - C15690) * C18743 +
             (C15691 - C15692 + C15693 - C15694) * C18741) *
                C30746 * C30847) *
               C30623) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C1664 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C1665 +
            ((C19062 - C19061 + C19064 - C19063) * C18742 +
             (C19066 - C19065 + C19068 - C19067) * C18740 +
             (C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
              C13127 * C1852) *
                 C18743 +
             (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
              C13127 * C1864) *
                 C18741) *
                C30746 * C30847) *
               C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C1664 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C1665 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
              C13131 * C2224) *
                 C18743 +
             (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
              C13131 * C2230) *
                 C18741) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30814 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C1284 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30814 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30665) *
              C1285 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30814 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30665) *
              C1286 +
          (((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C30814 +
           ((C14844 - C14843 + C14846 - C14845) * C18742 +
            (C14848 - C14847 + C14850 - C14849) * C18740 +
            (C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
             C13131 * C6372) *
                C18743 +
            (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
             C13131 * C6374) *
                C18741) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30814 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30814 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30814 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30814 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C18742 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C18740 +
             (C19069 - C19070 + C19071 - C19072) * C18743 +
             (C19073 - C19074 + C19075 - C19076) * C18741) *
                C30746 * C30814 +
            ((C19070 - C19069 + C19072 - C19071) * C18742 +
             (C19074 - C19073 + C19076 - C19075) * C18740 +
             (C19077 - C19078 + C19079 - C19080) * C18743 +
             (C19081 - C19082 + C19083 - C19084) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13951 - C13952 + C13953 - C13954) * C18743 +
             (C13955 - C13956 + C13957 - C13958) * C18741) *
                C30746 * C30814 +
            ((C13952 - C13951 + C13954 - C13953) * C18742 +
             (C13956 - C13955 + C13958 - C13957) * C18740 +
             (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C18743 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C18741) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C2116 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C2117 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C20749 - C20750 + C20751 - C20752) * C18743 +
            (C20753 - C20754 + C20755 - C20756) * C18741) *
               C30746 * C2118 +
           ((C20750 - C20749 + C20752 - C20751) * C18742 +
            (C20754 - C20753 + C20756 - C20755) * C18740 +
            (C20757 - C20758 + C20759 - C20760) * C18743 +
            (C20761 - C20762 + C20763 - C20764) * C18741) *
               C30746 * C30860) *
              C30813 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C2116 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C2117 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C2118 +
           ((C15688 - C15687 + C15690 - C15689) * C18742 +
            (C15692 - C15691 + C15694 - C15693) * C18740 +
            (C13126 * C6219 - C13130 * C6215 + C13127 * C10587 -
             C13131 * C10586) *
                C18743 +
            (C13126 * C6224 - C13130 * C6220 + C13127 * C10589 -
             C13131 * C10588) *
                C18741) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                   C18742 +
               (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                   C18740 +
               (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                   C18743 +
               (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                   C18741) *
                  C30746 * C30578 * C30560 * C108 +
              ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                   C18742 +
               (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                   C18740 +
               (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                   C18743 +
               (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                   C18741) *
                  C30746 * C30578 * C30560 * C109 +
              ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                   C18742 +
               (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                   C18740 +
               (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                   C18743 +
               (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                   C18741) *
                  C30746 * C30578 * C30560 * C110 +
              ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                   C18742 +
               (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                   C18740 +
               (C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                   C18743 +
               (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                   C18741) *
                  C30746 * C30578 * C30560 * C111 +
              ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
                   C18742 +
               (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
                   C18740 +
               (C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
                   C18743 +
               (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
                   C18741) *
                  C30746 * C30578 * C30560 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C124 - C13130 * C117 + C13127 * C125 -
                 C13131 * C118) *
                    C18742 +
                (C13126 * C138 - C13130 * C127 + C13127 * C139 -
                 C13131 * C128) *
                    C18740 +
                (C13126 * C424 - C13130 * C414 + C13127 * C425 -
                 C13131 * C415) *
                    C18743 +
                (C13126 * C444 - C13130 * C427 + C13127 * C445 -
                 C13131 * C428) *
                    C18741) *
                   C30746 * C30578 * C30881 +
               ((C13280 - C13279 + C13282 - C13281) * C18742 +
                (C13284 - C13283 + C13286 - C13285) * C18740 +
                (C13935 - C13936 + C13937 - C13938) * C18743 +
                (C13939 - C13940 + C13941 - C13942) * C18741) *
                   C30746 * C30578 * C30869 +
               ((C13288 - C13287 + C13290 - C13289) * C18742 +
                (C13292 - C13291 + C13294 - C13293) * C18740 +
                (C14357 - C14358 + C14359 - C14360) * C18743 +
                (C14361 - C14362 + C14363 - C14364) * C18741) *
                   C30746 * C30578 * C30844) *
                  C258 +
              (((C13130 * C118 - C13126 * C125 + C13131 * C119 -
                 C13127 * C126) *
                    C18742 +
                (C13130 * C128 - C13126 * C139 + C13131 * C129 -
                 C13127 * C140) *
                    C18740 +
                (C13130 * C415 - C13126 * C425 + C13131 * C416 -
                 C13127 * C426) *
                    C18743 +
                (C13130 * C428 - C13126 * C445 + C13131 * C429 -
                 C13127 * C446) *
                    C18741) *
                   C30746 * C30578 * C30881 +
               ((C13296 - C13295 + C13298 - C13297) * C18742 +
                (C13300 - C13299 + C13302 - C13301) * C18740 +
                (C13943 - C13944 + C13945 - C13946) * C18743 +
                (C13947 - C13948 + C13949 - C13950) * C18741) *
                   C30746 * C30578 * C30869 +
               ((C13304 - C13303 + C13306 - C13305) * C18742 +
                (C13308 - C13307 + C13310 - C13309) * C18740 +
                (C14705 - C14706 + C14707 - C14708) * C18743 +
                (C14709 - C14710 + C14711 - C14712) * C18741) *
                   C30746 * C30578 * C30844) *
                  C259 +
              (((C13126 * C126 - C13130 * C119 + C13127 * C130 -
                 C13131 * C120) *
                    C18742 +
                (C13126 * C140 - C13130 * C129 + C13127 * C141 -
                 C13131 * C131) *
                    C18740 +
                (C13126 * C426 - C13130 * C416 + C13127 * C436 -
                 C13131 * C420) *
                    C18743 +
                (C13126 * C446 - C13130 * C429 + C13127 * C450 -
                 C13131 * C437) *
                    C18741) *
                   C30746 * C30578 * C30881 +
               ((C13312 - C13311 + C13314 - C13313) * C18742 +
                (C13316 - C13315 + C13318 - C13317) * C18740 +
                (C13951 - C13952 + C13953 - C13954) * C18743 +
                (C13955 - C13956 + C13957 - C13958) * C18741) *
                   C30746 * C30578 * C30869 +
               ((C13320 - C13319 + C13322 - C13321) * C18742 +
                (C13324 - C13323 + C13326 - C13325) * C18740 +
                (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
                 C13131 * C1440) *
                    C18743 +
                (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
                 C13131 * C1442) *
                    C18741) *
                   C30746 * C30578 * C30844) *
                  C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30882 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30871 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30882 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30871 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
             C13127 * C1852) *
                C18743 +
            (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
             C13127 * C1864) *
                C18741) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30882 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30871 +
           ((C19078 - C19077 + C19080 - C19079) * C18742 +
            (C19082 - C19081 + C19084 - C19083) * C18740 +
            (C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
             C13131 * C2120) *
                C18743 +
            (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
             C13131 * C2122) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C942 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C943 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C942 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C943 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C942 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C943 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C19037 - C19038 + C19039 - C19040) * C18743 +
           (C19041 - C19042 + C19043 - C19044) * C18741) *
              C30746 * C30578 * C1010 +
          ((C13280 - C13279 + C13282 - C13281) * C18742 +
           (C13284 - C13283 + C13286 - C13285) * C18740 +
           (C13935 - C13936 + C13937 - C13938) * C18743 +
           (C13939 - C13940 + C13941 - C13942) * C18741) *
              C30746 * C30578 * C1011 +
          ((C13288 - C13287 + C13290 - C13289) * C18742 +
           (C13292 - C13291 + C13294 - C13293) * C18740 +
           (C14357 - C14358 + C14359 - C14360) * C18743 +
           (C14361 - C14362 + C14363 - C14364) * C18741) *
              C30746 * C30578 * C1012 +
          ((C14188 - C14187 + C14190 - C14189) * C18742 +
           (C14192 - C14191 + C14194 - C14193) * C18740 +
           (C14843 - C14844 + C14845 - C14846) * C18743 +
           (C14847 - C14848 + C14849 - C14850) * C18741) *
              C30746 * C30578 * C1013 +
          ((C14196 - C14195 + C14198 - C14197) * C18742 +
           (C14200 - C14199 + C14202 - C14201) * C18740 +
           (C13126 * C5518 - C13130 * C5514 + C13127 * C5809 - C13131 * C5808) *
               C18743 +
           (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 - C13131 * C5810) *
               C18741) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30882 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30871 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C942 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30882 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30871 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C30847) *
              C943 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30882 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30871 +
           ((C14366 - C14365 + C14368 - C14367) * C18742 +
            (C14370 - C14369 + C14372 - C14371) * C18740 +
            (C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
             C13131 * C6482) *
                C18743 +
            (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
             C13131 * C6484) *
                C18741) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C1664 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C1665 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C1664 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C1665 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
             C13127 * C1852) *
                C18743 +
            (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
             C13127 * C1864) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C1664 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C1665 +
           ((C19078 - C19077 + C19080 - C19079) * C18742 +
            (C19082 - C19081 + C19084 - C19083) * C18740 +
            (C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
             C13131 * C2120) *
                C18743 +
            (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
             C13131 * C2122) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C1664 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C1665 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C30881 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C1664 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C1665 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C30847) *
              C30869 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C1664 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C1665 +
           ((C14366 - C14365 + C14368 - C14367) * C18742 +
            (C14370 - C14369 + C14372 - C14371) * C18740 +
            (C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
             C13131 * C6482) *
                C18743 +
            (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
             C13131 * C6484) *
                C18741) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C19037 - C19038 + C19039 - C19040) * C18743 +
           (C19041 - C19042 + C19043 - C19044) * C18741) *
              C30746 * C1839 +
          ((C19038 - C19037 + C19040 - C19039) * C18742 +
           (C19042 - C19041 + C19044 - C19043) * C18740 +
           (C19045 - C19046 + C19047 - C19048) * C18743 +
           (C19049 - C19050 + C19051 - C19052) * C18741) *
              C30746 * C1840 +
          ((C19046 - C19045 + C19048 - C19047) * C18742 +
           (C19050 - C19049 + C19052 - C19051) * C18740 +
           (C20749 - C20750 + C20751 - C20752) * C18743 +
           (C20753 - C20754 + C20755 - C20756) * C18741) *
              C30746 * C1841 +
          ((C20750 - C20749 + C20752 - C20751) * C18742 +
           (C20754 - C20753 + C20756 - C20755) * C18740 +
           (C20757 - C20758 + C20759 - C20760) * C18743 +
           (C20761 - C20762 + C20763 - C20764) * C18741) *
              C30746 * C1842 +
          ((C20758 - C20757 + C20760 - C20759) * C18742 +
           (C20762 - C20761 + C20764 - C20763) * C18740 +
           (C13126 * C10422 - C13130 * C10420 + C13127 * C10695 -
            C13131 * C10694) *
               C18743 +
           (C13126 * C10426 - C13130 * C10423 + C13127 * C10697 -
            C13131 * C10696) *
               C18741) *
              C30746 * C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30814 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C942 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30814 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C943 +
           (((C13288 - C13287 + C13290 - C13289) * C18742 +
             (C13292 - C13291 + C13294 - C13293) * C18740 +
             (C14357 - C14358 + C14359 - C14360) * C18743 +
             (C14361 - C14362 + C14363 - C14364) * C18741) *
                C30746 * C30814 +
            ((C14358 - C14357 + C14360 - C14359) * C18742 +
             (C14362 - C14361 + C14364 - C14363) * C18740 +
             (C14365 - C14366 + C14367 - C14368) * C18743 +
             (C14369 - C14370 + C14371 - C14372) * C18741) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30814 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C942 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30814 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C943 +
           (((C13304 - C13303 + C13306 - C13305) * C18742 +
             (C13308 - C13307 + C13310 - C13309) * C18740 +
             (C14705 - C14706 + C14707 - C14708) * C18743 +
             (C14709 - C14710 + C14711 - C14712) * C18741) *
                C30746 * C30814 +
            ((C14706 - C14705 + C14708 - C14707) * C18742 +
             (C14710 - C14709 + C14712 - C14711) * C18740 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C18743 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C18741) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30814 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30814 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30814 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C19345 - C19346 + C19347 - C19348) * C18743 +
            (C19349 - C19350 + C19351 - C19352) * C18741) *
               C30746 * C30814 +
           ((C19346 - C19345 + C19348 - C19347) * C18742 +
            (C19350 - C19349 + C19352 - C19351) * C18740 +
            (C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                C18743 +
            (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                C18741) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C2116 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C2117 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C20749 - C20750 + C20751 - C20752) * C18743 +
            (C20753 - C20754 + C20755 - C20756) * C18741) *
               C30746 * C2118 +
           ((C20750 - C20749 + C20752 - C20751) * C18742 +
            (C20754 - C20753 + C20756 - C20755) * C18740 +
            (C20757 - C20758 + C20759 - C20760) * C18743 +
            (C20761 - C20762 + C20763 - C20764) * C18741) *
               C30746 * C30860) *
              C30560 * C30799 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C2116 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C2117 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C21089 - C21090 + C21091 - C21092) * C18743 +
            (C21093 - C21094 + C21095 - C21096) * C18741) *
               C30746 * C2118 +
           ((C21090 - C21089 + C21092 - C21091) * C18742 +
            (C21094 - C21093 + C21096 - C21095) * C18740 +
            (C13126 * C1857 - C13130 * C1848 + C13127 * C1858 -
             C13131 * C1849) *
                C18743 +
            (C13126 * C1866 - C13130 * C1860 + C13127 * C1867 -
             C13131 * C1861) *
                C18741) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                C18743 +
            (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                C18743 +
            (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                C18743 +
            (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
               C18743 +
           (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
               C18741) *
              C30746 * C30578 * C30560 * C108 +
          ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
               C18742 +
           (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
               C18740 +
           (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
               C18743 +
           (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
               C18741) *
              C30746 * C30578 * C30560 * C109 +
          ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
               C18742 +
           (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
               C18740 +
           (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
               C18743 +
           (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
               C18741) *
              C30746 * C30578 * C30560 * C110 +
          ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
               C18742 +
           (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
               C18740 +
           (C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
               C18743 +
           (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
               C18741) *
              C30746 * C30578 * C30560 * C111 +
          ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
               C18742 +
           (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
               C18740 +
           (C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
               C18743 +
           (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
               C18741) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C942 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C943 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C942 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C943 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C942 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C943 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C19037 - C19038 + C19039 - C19040) * C18743 +
           (C19041 - C19042 + C19043 - C19044) * C18741) *
              C30746 * C30578 * C1010 +
          ((C13280 - C13279 + C13282 - C13281) * C18742 +
           (C13284 - C13283 + C13286 - C13285) * C18740 +
           (C13935 - C13936 + C13937 - C13938) * C18743 +
           (C13939 - C13940 + C13941 - C13942) * C18741) *
              C30746 * C30578 * C1011 +
          ((C13288 - C13287 + C13290 - C13289) * C18742 +
           (C13292 - C13291 + C13294 - C13293) * C18740 +
           (C14357 - C14358 + C14359 - C14360) * C18743 +
           (C14361 - C14362 + C14363 - C14364) * C18741) *
              C30746 * C30578 * C1012 +
          ((C14188 - C14187 + C14190 - C14189) * C18742 +
           (C14192 - C14191 + C14194 - C14193) * C18740 +
           (C14843 - C14844 + C14845 - C14846) * C18743 +
           (C14847 - C14848 + C14849 - C14850) * C18741) *
              C30746 * C30578 * C1013 +
          ((C14196 - C14195 + C14198 - C14197) * C18742 +
           (C14200 - C14199 + C14202 - C14201) * C18740 +
           (C13126 * C5518 - C13130 * C5514 + C13127 * C5809 - C13131 * C5808) *
               C18743 +
           (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 - C13131 * C5810) *
               C18741) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C1664 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C1665 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C1664 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C1665 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
             C13127 * C1852) *
                C18743 +
            (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
             C13127 * C1864) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C1664 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C1665 +
           ((C19078 - C19077 + C19080 - C19079) * C18742 +
            (C19082 - C19081 + C19084 - C19083) * C18740 +
            (C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
             C13131 * C2120) *
                C18743 +
            (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
             C13131 * C2122) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C1664 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C1665 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C30881 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C1664 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C1665 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C30847) *
              C30869 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C1664 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C1665 +
           ((C14366 - C14365 + C14368 - C14367) * C18742 +
            (C14370 - C14369 + C14372 - C14371) * C18740 +
            (C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
             C13131 * C6482) *
                C18743 +
            (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
             C13131 * C6484) *
                C18741) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C3094 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C3094 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C3094 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C3094 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C18742 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C18740 +
             (C19069 - C19070 + C19071 - C19072) * C18743 +
             (C19073 - C19074 + C19075 - C19076) * C18741) *
                C30746 * C3094 +
            ((C19070 - C19069 + C19072 - C19071) * C18742 +
             (C19074 - C19073 + C19076 - C19075) * C18740 +
             (C19077 - C19078 + C19079 - C19080) * C18743 +
             (C19081 - C19082 + C19083 - C19084) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13951 - C13952 + C13953 - C13954) * C18743 +
             (C13955 - C13956 + C13957 - C13958) * C18741) *
                C30746 * C3094 +
            ((C13952 - C13951 + C13954 - C13953) * C18742 +
             (C13956 - C13955 + C13958 - C13957) * C18740 +
             (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C18743 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C18741) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30661 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30668 +
            ((C19046 - C19045 + C19048 - C19047) * C18742 +
             (C19050 - C19049 + C19052 - C19051) * C18740 +
             (C20749 - C20750 + C20751 - C20752) * C18743 +
             (C20753 - C20754 + C20755 - C20756) * C18741) *
                C30746 * C3602) *
               C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30661 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30668 +
            ((C14350 - C14349 + C14352 - C14351) * C18742 +
             (C14354 - C14353 + C14356 - C14355) * C18740 +
             (C15687 - C15688 + C15689 - C15690) * C18743 +
             (C15691 - C15692 + C15693 - C15694) * C18741) *
                C30746 * C3602) *
               C30623) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30661 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30668 +
            ((C19062 - C19061 + C19064 - C19063) * C18742 +
             (C19066 - C19065 + C19068 - C19067) * C18740 +
             (C21089 - C21090 + C21091 - C21092) * C18743 +
             (C21093 - C21094 + C21095 - C21096) * C18741) *
                C30746 * C3602) *
               C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30661 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30668 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2226 - C13130 * C2223 + C13127 * C2227 -
              C13131 * C2224) *
                 C18743 +
             (C13126 * C2232 - C13130 * C2229 + C13127 * C2233 -
              C13131 * C2230) *
                 C18741) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C3094 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30881 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C3094 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30869 +
           (((C13288 - C13287 + C13290 - C13289) * C18742 +
             (C13292 - C13291 + C13294 - C13293) * C18740 +
             (C14357 - C14358 + C14359 - C14360) * C18743 +
             (C14361 - C14362 + C14363 - C14364) * C18741) *
                C30746 * C3094 +
            ((C14358 - C14357 + C14360 - C14359) * C18742 +
             (C14362 - C14361 + C14364 - C14363) * C18740 +
             (C14365 - C14366 + C14367 - C14368) * C18743 +
             (C14369 - C14370 + C14371 - C14372) * C18741) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C3094 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30881 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C3094 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30869 +
           (((C13304 - C13303 + C13306 - C13305) * C18742 +
             (C13308 - C13307 + C13310 - C13309) * C18740 +
             (C14705 - C14706 + C14707 - C14708) * C18743 +
             (C14709 - C14710 + C14711 - C14712) * C18741) *
                C30746 * C3094 +
            ((C14706 - C14705 + C14708 - C14707) * C18742 +
             (C14710 - C14709 + C14712 - C14711) * C18740 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C18743 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C18741) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C3094 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C3094 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C3094 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C19345 - C19346 + C19347 - C19348) * C18743 +
            (C19349 - C19350 + C19351 - C19352) * C18741) *
               C30746 * C3094 +
           ((C19346 - C19345 + C19348 - C19347) * C18742 +
            (C19350 - C19349 + C19352 - C19351) * C18740 +
            (C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                C18743 +
            (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                C18741) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30889 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30886 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C20749 - C20750 + C20751 - C20752) * C18743 +
            (C20753 - C20754 + C20755 - C20756) * C18741) *
               C30746 * C30877 +
           ((C20750 - C20749 + C20752 - C20751) * C18742 +
            (C20754 - C20753 + C20756 - C20755) * C18740 +
            (C20757 - C20758 + C20759 - C20760) * C18743 +
            (C20761 - C20762 + C20763 - C20764) * C18741) *
               C30746 * C30860) *
              C30560 * C2440 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30889 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30886 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C21089 - C21090 + C21091 - C21092) * C18743 +
            (C21093 - C21094 + C21095 - C21096) * C18741) *
               C30746 * C30877 +
           ((C21090 - C21089 + C21092 - C21091) * C18742 +
            (C21094 - C21093 + C21096 - C21095) * C18740 +
            (C13126 * C1857 - C13130 * C1848 + C13127 * C1858 -
             C13131 * C1849) *
                C18743 +
            (C13126 * C1866 - C13130 * C1860 + C13127 * C1867 -
             C13131 * C1861) *
                C18741) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30661 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30668 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C20749 - C20750 + C20751 - C20752) * C18743 +
            (C20753 - C20754 + C20755 - C20756) * C18741) *
               C30746 * C3602) *
              C30560 * C30537 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30661 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30668 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C21089 - C21090 + C21091 - C21092) * C18743 +
            (C21093 - C21094 + C21095 - C21096) * C18741) *
               C30746 * C3602) *
              C30560 * C30546 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30661 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30668 +
           ((C19078 - C19077 + C19080 - C19079) * C18742 +
            (C19082 - C19081 + C19084 - C19083) * C18740 +
            (C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
             C13131 * C2120) *
                C18743 +
            (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
             C13131 * C2122) *
                C18741) *
               C30746 * C3602) *
              C30560 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C3094 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C3094 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C3094 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C19345 - C19346 + C19347 - C19348) * C18743 +
            (C19349 - C19350 + C19351 - C19352) * C18741) *
               C30746 * C3094 +
           ((C19346 - C19345 + C19348 - C19347) * C18742 +
            (C19350 - C19349 + C19352 - C19351) * C18740 +
            (C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                C18743 +
            (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                C18741) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C3094 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30881 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C3094 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30869 +
           (((C13288 - C13287 + C13290 - C13289) * C18742 +
             (C13292 - C13291 + C13294 - C13293) * C18740 +
             (C14357 - C14358 + C14359 - C14360) * C18743 +
             (C14361 - C14362 + C14363 - C14364) * C18741) *
                C30746 * C3094 +
            ((C14358 - C14357 + C14360 - C14359) * C18742 +
             (C14362 - C14361 + C14364 - C14363) * C18740 +
             (C14365 - C14366 + C14367 - C14368) * C18743 +
             (C14369 - C14370 + C14371 - C14372) * C18741) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C3094 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30881 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C3094 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30869 +
           (((C13304 - C13303 + C13306 - C13305) * C18742 +
             (C13308 - C13307 + C13310 - C13309) * C18740 +
             (C14705 - C14706 + C14707 - C14708) * C18743 +
             (C14709 - C14710 + C14711 - C14712) * C18741) *
                C30746 * C3094 +
            ((C14706 - C14705 + C14708 - C14707) * C18742 +
             (C14710 - C14709 + C14712 - C14711) * C18740 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C18743 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C18741) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C30813 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C30813 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C30813 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
                C18743 +
            (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
                C18741) *
               C30746 * C30578 * C30813 +
           ((C13604 - C13603 + C13606 - C13605) * C18742 +
            (C13608 - C13607 + C13610 - C13609) * C18740 +
            (C13126 * C823 - C13130 * C815 + C13127 * C825 - C13131 * C816) *
                C18743 +
            (C13126 * C830 - C13130 * C824 + C13127 * C831 - C13131 * C826) *
                C18741) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C1284 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C1285 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C1286 +
           ((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C1284 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C1285 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C1286 +
           ((C14504 - C14503 + C14506 - C14505) * C18742 +
            (C14508 - C14507 + C14510 - C14509) * C18740 +
            (C13126 * C1546 - C13130 * C1543 + C13127 * C1547 -
             C13131 * C1544) *
                C18743 +
            (C13126 * C1552 - C13130 * C1549 + C13127 * C1553 -
             C13131 * C1550) *
                C18741) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30814 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30814 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30814 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30814 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                 C18742 +
             (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                 C18740 +
             (C19069 - C19070 + C19071 - C19072) * C18743 +
             (C19073 - C19074 + C19075 - C19076) * C18741) *
                C30746 * C30814 +
            ((C19070 - C19069 + C19072 - C19071) * C18742 +
             (C19074 - C19073 + C19076 - C19075) * C18740 +
             (C19077 - C19078 + C19079 - C19080) * C18743 +
             (C19081 - C19082 + C19083 - C19084) * C18741) *
                C30746 * C30665) *
               C30813 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13951 - C13952 + C13953 - C13954) * C18743 +
             (C13955 - C13956 + C13957 - C13958) * C18741) *
                C30746 * C30814 +
            ((C13952 - C13951 + C13954 - C13953) * C18742 +
             (C13956 - C13955 + C13958 - C13957) * C18740 +
             (C13126 * C1161 - C13130 * C1152 + C13127 * C2015 -
              C13131 * C2014) *
                 C18743 +
             (C13126 * C1179 - C13130 * C1164 + C13127 * C2017 -
              C13131 * C2016) *
                 C18741) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30814 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C1284 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30814 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30665) *
              C1285 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30814 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30665) *
              C1286 +
          (((C14188 - C14187 + C14190 - C14189) * C18742 +
            (C14192 - C14191 + C14194 - C14193) * C18740 +
            (C14843 - C14844 + C14845 - C14846) * C18743 +
            (C14847 - C14848 + C14849 - C14850) * C18741) *
               C30746 * C30814 +
           ((C14844 - C14843 + C14846 - C14845) * C18742 +
            (C14848 - C14847 + C14850 - C14849) * C18740 +
            (C13126 * C5516 - C13130 * C5513 + C13127 * C6373 -
             C13131 * C6372) *
                C18743 +
            (C13126 * C5522 - C13130 * C5517 + C13127 * C6375 -
             C13131 * C6374) *
                C18741) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                C18743 +
            (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                C18743 +
            (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                C18743 +
            (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
               C18743 +
           (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
               C18741) *
              C30746 * C30578 * C30560 * C108 +
          ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
               C18742 +
           (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
               C18740 +
           (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
               C18743 +
           (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
               C18741) *
              C30746 * C30578 * C30560 * C109 +
          ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
               C18742 +
           (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
               C18740 +
           (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
               C18743 +
           (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
               C18741) *
              C30746 * C30578 * C30560 * C110 +
          ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
               C18742 +
           (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
               C18740 +
           (C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
               C18743 +
           (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
               C18741) *
              C30746 * C30578 * C30560 * C111 +
          ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
               C18742 +
           (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
               C18740 +
           (C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
               C18743 +
           (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
               C18741) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30882 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30871 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30882 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30871 +
           ((C19062 - C19061 + C19064 - C19063) * C18742 +
            (C19066 - C19065 + C19068 - C19067) * C18740 +
            (C13130 * C1845 - C13126 * C1851 + C13131 * C1846 -
             C13127 * C1852) *
                C18743 +
            (C13130 * C1854 - C13126 * C1863 + C13131 * C1855 -
             C13127 * C1864) *
                C18741) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30882 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30871 +
           ((C19078 - C19077 + C19080 - C19079) * C18742 +
            (C19082 - C19081 + C19084 - C19083) * C18740 +
            (C13126 * C1852 - C13130 * C1846 + C13127 * C2121 -
             C13131 * C2120) *
                C18743 +
            (C13126 * C1864 - C13130 * C1855 + C13127 * C2123 -
             C13131 * C2122) *
                C18741) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C942 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C943 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C942 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C943 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C942 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C943 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C19037 - C19038 + C19039 - C19040) * C18743 +
           (C19041 - C19042 + C19043 - C19044) * C18741) *
              C30746 * C30578 * C1010 +
          ((C13280 - C13279 + C13282 - C13281) * C18742 +
           (C13284 - C13283 + C13286 - C13285) * C18740 +
           (C13935 - C13936 + C13937 - C13938) * C18743 +
           (C13939 - C13940 + C13941 - C13942) * C18741) *
              C30746 * C30578 * C1011 +
          ((C13288 - C13287 + C13290 - C13289) * C18742 +
           (C13292 - C13291 + C13294 - C13293) * C18740 +
           (C14357 - C14358 + C14359 - C14360) * C18743 +
           (C14361 - C14362 + C14363 - C14364) * C18741) *
              C30746 * C30578 * C1012 +
          ((C14188 - C14187 + C14190 - C14189) * C18742 +
           (C14192 - C14191 + C14194 - C14193) * C18740 +
           (C14843 - C14844 + C14845 - C14846) * C18743 +
           (C14847 - C14848 + C14849 - C14850) * C18741) *
              C30746 * C30578 * C1013 +
          ((C14196 - C14195 + C14198 - C14197) * C18742 +
           (C14200 - C14199 + C14202 - C14201) * C18740 +
           (C13126 * C5518 - C13130 * C5514 + C13127 * C5809 - C13131 * C5808) *
               C18743 +
           (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 - C13131 * C5810) *
               C18741) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30882 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30871 +
           ((C19046 - C19045 + C19048 - C19047) * C18742 +
            (C19050 - C19049 + C19052 - C19051) * C18740 +
            (C13126 * C1850 - C13130 * C1844 + C13127 * C1851 -
             C13131 * C1845) *
                C18743 +
            (C13126 * C1862 - C13130 * C1853 + C13127 * C1863 -
             C13131 * C1854) *
                C18741) *
               C30746 * C30847) *
              C942 +
          (((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30882 +
           ((C13936 - C13935 + C13938 - C13937) * C18742 +
            (C13940 - C13939 + C13942 - C13941) * C18740 +
            (C14349 - C14350 + C14351 - C14352) * C18743 +
            (C14353 - C14354 + C14355 - C14356) * C18741) *
               C30746 * C30871 +
           ((C14350 - C14349 + C14352 - C14351) * C18742 +
            (C14354 - C14353 + C14356 - C14355) * C18740 +
            (C15687 - C15688 + C15689 - C15690) * C18743 +
            (C15691 - C15692 + C15693 - C15694) * C18741) *
               C30746 * C30847) *
              C943 +
          (((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30882 +
           ((C14358 - C14357 + C14360 - C14359) * C18742 +
            (C14362 - C14361 + C14364 - C14363) * C18740 +
            (C14365 - C14366 + C14367 - C14368) * C18743 +
            (C14369 - C14370 + C14371 - C14372) * C18741) *
               C30746 * C30871 +
           ((C14366 - C14365 + C14368 - C14367) * C18742 +
            (C14370 - C14369 + C14372 - C14371) * C18740 +
            (C13126 * C6217 - C13130 * C6214 + C13127 * C6483 -
             C13131 * C6482) *
                C18743 +
            (C13126 * C6223 - C13130 * C6218 + C13127 * C6485 -
             C13131 * C6484) *
                C18741) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30814 +
           ((C19038 - C19037 + C19040 - C19039) * C18742 +
            (C19042 - C19041 + C19044 - C19043) * C18740 +
            (C19045 - C19046 + C19047 - C19048) * C18743 +
            (C19049 - C19050 + C19051 - C19052) * C18741) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30814 +
           ((C19054 - C19053 + C19056 - C19055) * C18742 +
            (C19058 - C19057 + C19060 - C19059) * C18740 +
            (C19061 - C19062 + C19063 - C19064) * C18743 +
            (C19065 - C19066 + C19067 - C19068) * C18741) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30814 +
           ((C19070 - C19069 + C19072 - C19071) * C18742 +
            (C19074 - C19073 + C19076 - C19075) * C18740 +
            (C19077 - C19078 + C19079 - C19080) * C18743 +
            (C19081 - C19082 + C19083 - C19084) * C18741) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
                C18742 +
            (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
                C18740 +
            (C19345 - C19346 + C19347 - C19348) * C18743 +
            (C19349 - C19350 + C19351 - C19352) * C18741) *
               C30746 * C30814 +
           ((C19346 - C19345 + C19348 - C19347) * C18742 +
            (C19350 - C19349 + C19352 - C19351) * C18740 +
            (C13126 * C438 - C13130 * C421 + C13127 * C442 - C13131 * C423) *
                C18743 +
            (C13126 * C451 - C13130 * C439 + C13127 * C453 - C13131 * C443) *
                C18741) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                 C18742 +
             (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                 C18740 +
             (C19037 - C19038 + C19039 - C19040) * C18743 +
             (C19041 - C19042 + C19043 - C19044) * C18741) *
                C30746 * C30814 +
            ((C19038 - C19037 + C19040 - C19039) * C18742 +
             (C19042 - C19041 + C19044 - C19043) * C18740 +
             (C19045 - C19046 + C19047 - C19048) * C18743 +
             (C19049 - C19050 + C19051 - C19052) * C18741) *
                C30746 * C30665) *
               C942 +
           (((C13280 - C13279 + C13282 - C13281) * C18742 +
             (C13284 - C13283 + C13286 - C13285) * C18740 +
             (C13935 - C13936 + C13937 - C13938) * C18743 +
             (C13939 - C13940 + C13941 - C13942) * C18741) *
                C30746 * C30814 +
            ((C13936 - C13935 + C13938 - C13937) * C18742 +
             (C13940 - C13939 + C13942 - C13941) * C18740 +
             (C14349 - C14350 + C14351 - C14352) * C18743 +
             (C14353 - C14354 + C14355 - C14356) * C18741) *
                C30746 * C30665) *
               C943 +
           (((C13288 - C13287 + C13290 - C13289) * C18742 +
             (C13292 - C13291 + C13294 - C13293) * C18740 +
             (C14357 - C14358 + C14359 - C14360) * C18743 +
             (C14361 - C14362 + C14363 - C14364) * C18741) *
                C30746 * C30814 +
            ((C14358 - C14357 + C14360 - C14359) * C18742 +
             (C14362 - C14361 + C14364 - C14363) * C18740 +
             (C14365 - C14366 + C14367 - C14368) * C18743 +
             (C14369 - C14370 + C14371 - C14372) * C18741) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                 C18742 +
             (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                 C18740 +
             (C19053 - C19054 + C19055 - C19056) * C18743 +
             (C19057 - C19058 + C19059 - C19060) * C18741) *
                C30746 * C30814 +
            ((C19054 - C19053 + C19056 - C19055) * C18742 +
             (C19058 - C19057 + C19060 - C19059) * C18740 +
             (C19061 - C19062 + C19063 - C19064) * C18743 +
             (C19065 - C19066 + C19067 - C19068) * C18741) *
                C30746 * C30665) *
               C942 +
           (((C13296 - C13295 + C13298 - C13297) * C18742 +
             (C13300 - C13299 + C13302 - C13301) * C18740 +
             (C13943 - C13944 + C13945 - C13946) * C18743 +
             (C13947 - C13948 + C13949 - C13950) * C18741) *
                C30746 * C30814 +
            ((C13944 - C13943 + C13946 - C13945) * C18742 +
             (C13948 - C13947 + C13950 - C13949) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30746 * C30665) *
               C943 +
           (((C13304 - C13303 + C13306 - C13305) * C18742 +
             (C13308 - C13307 + C13310 - C13309) * C18740 +
             (C14705 - C14706 + C14707 - C14708) * C18743 +
             (C14709 - C14710 + C14711 - C14712) * C18741) *
                C30746 * C30814 +
            ((C14706 - C14705 + C14708 - C14707) * C18742 +
             (C14710 - C14709 + C14712 - C14711) * C18740 +
             (C13126 * C1172 - C13130 * C1157 + C13127 * C1173 -
              C13131 * C1158) *
                 C18743 +
             (C13126 * C1184 - C13130 * C1175 + C13127 * C1185 -
              C13131 * C1176) *
                 C18741) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
               C18743 +
           (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
               C18741) *
              C30746 * C30578 * C30560 * C108 +
          ((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
               C18742 +
           (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
               C18740 +
           (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
               C18743 +
           (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
               C18741) *
              C30746 * C30578 * C30560 * C109 +
          ((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
               C18742 +
           (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
               C18740 +
           (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
               C18743 +
           (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
               C18741) *
              C30746 * C30578 * C30560 * C110 +
          ((C13130 * C120 - C13126 * C130 + C13131 * C121 - C13127 * C132) *
               C18742 +
           (C13130 * C131 - C13126 * C141 + C13131 * C133 - C13127 * C142) *
               C18740 +
           (C13130 * C420 - C13126 * C436 + C13131 * C422 - C13127 * C440) *
               C18743 +
           (C13130 * C437 - C13126 * C450 + C13131 * C441 - C13127 * C452) *
               C18741) *
              C30746 * C30578 * C30560 * C111 +
          ((C13126 * C132 - C13130 * C121 + C13127 * C134 - C13131 * C122) *
               C18742 +
           (C13126 * C142 - C13130 * C133 + C13127 * C143 - C13131 * C135) *
               C18740 +
           (C13126 * C440 - C13130 * C422 + C13127 * C663 - C13131 * C662) *
               C18743 +
           (C13126 * C452 - C13130 * C441 + C13127 * C665 - C13131 * C664) *
               C18741) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C13126 * C424 - C13130 * C414 + C13127 * C425 - C13131 * C415) *
                C18743 +
            (C13126 * C444 - C13130 * C427 + C13127 * C445 - C13131 * C428) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C13130 * C415 - C13126 * C425 + C13131 * C416 - C13127 * C426) *
                C18743 +
            (C13130 * C428 - C13126 * C445 + C13131 * C429 - C13127 * C446) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C13126 * C426 - C13130 * C416 + C13127 * C436 - C13131 * C420) *
                C18743 +
            (C13126 * C446 - C13130 * C429 + C13127 * C450 - C13131 * C437) *
                C18741) *
               C30746 * C30578 * C30881 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C30869 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
                C18742 +
            (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
                C18740 +
            (C19037 - C19038 + C19039 - C19040) * C18743 +
            (C19041 - C19042 + C19043 - C19044) * C18741) *
               C30746 * C30578 * C942 +
           ((C13280 - C13279 + C13282 - C13281) * C18742 +
            (C13284 - C13283 + C13286 - C13285) * C18740 +
            (C13935 - C13936 + C13937 - C13938) * C18743 +
            (C13939 - C13940 + C13941 - C13942) * C18741) *
               C30746 * C30578 * C943 +
           ((C13288 - C13287 + C13290 - C13289) * C18742 +
            (C13292 - C13291 + C13294 - C13293) * C18740 +
            (C14357 - C14358 + C14359 - C14360) * C18743 +
            (C14361 - C14362 + C14363 - C14364) * C18741) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C13130 * C118 - C13126 * C125 + C13131 * C119 - C13127 * C126) *
                C18742 +
            (C13130 * C128 - C13126 * C139 + C13131 * C129 - C13127 * C140) *
                C18740 +
            (C19053 - C19054 + C19055 - C19056) * C18743 +
            (C19057 - C19058 + C19059 - C19060) * C18741) *
               C30746 * C30578 * C942 +
           ((C13296 - C13295 + C13298 - C13297) * C18742 +
            (C13300 - C13299 + C13302 - C13301) * C18740 +
            (C13943 - C13944 + C13945 - C13946) * C18743 +
            (C13947 - C13948 + C13949 - C13950) * C18741) *
               C30746 * C30578 * C943 +
           ((C13304 - C13303 + C13306 - C13305) * C18742 +
            (C13308 - C13307 + C13310 - C13309) * C18740 +
            (C14705 - C14706 + C14707 - C14708) * C18743 +
            (C14709 - C14710 + C14711 - C14712) * C18741) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C13126 * C126 - C13130 * C119 + C13127 * C130 - C13131 * C120) *
                C18742 +
            (C13126 * C140 - C13130 * C129 + C13127 * C141 - C13131 * C131) *
                C18740 +
            (C19069 - C19070 + C19071 - C19072) * C18743 +
            (C19073 - C19074 + C19075 - C19076) * C18741) *
               C30746 * C30578 * C942 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13951 - C13952 + C13953 - C13954) * C18743 +
            (C13955 - C13956 + C13957 - C13958) * C18741) *
               C30746 * C30578 * C943 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C13126 * C1167 - C13130 * C1155 + C13127 * C1441 -
             C13131 * C1440) *
                C18743 +
            (C13126 * C1182 - C13130 * C1170 + C13127 * C1443 -
             C13131 * C1442) *
                C18741) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C124 - C13130 * C117 + C13127 * C125 - C13131 * C118) *
               C18742 +
           (C13126 * C138 - C13130 * C127 + C13127 * C139 - C13131 * C128) *
               C18740 +
           (C19037 - C19038 + C19039 - C19040) * C18743 +
           (C19041 - C19042 + C19043 - C19044) * C18741) *
              C30746 * C30578 * C1010 +
          ((C13280 - C13279 + C13282 - C13281) * C18742 +
           (C13284 - C13283 + C13286 - C13285) * C18740 +
           (C13935 - C13936 + C13937 - C13938) * C18743 +
           (C13939 - C13940 + C13941 - C13942) * C18741) *
              C30746 * C30578 * C1011 +
          ((C13288 - C13287 + C13290 - C13289) * C18742 +
           (C13292 - C13291 + C13294 - C13293) * C18740 +
           (C14357 - C14358 + C14359 - C14360) * C18743 +
           (C14361 - C14362 + C14363 - C14364) * C18741) *
              C30746 * C30578 * C1012 +
          ((C14188 - C14187 + C14190 - C14189) * C18742 +
           (C14192 - C14191 + C14194 - C14193) * C18740 +
           (C14843 - C14844 + C14845 - C14846) * C18743 +
           (C14847 - C14848 + C14849 - C14850) * C18741) *
              C30746 * C30578 * C1013 +
          ((C14196 - C14195 + C14198 - C14197) * C18742 +
           (C14200 - C14199 + C14202 - C14201) * C18740 +
           (C13126 * C5518 - C13130 * C5514 + C13127 * C5809 - C13131 * C5808) *
               C18743 +
           (C13126 * C5523 - C13130 * C5519 + C13127 * C5811 - C13131 * C5810) *
               C18741) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30619 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30626 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C2700) *
              C30537 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30619 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30626 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C2700) *
              C30546 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30619 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30626 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30619 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30626 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C2700) *
              C30537 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30619 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30626 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C2700) *
              C30546 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30619 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30626 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C2700) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30619 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30626 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C30814 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C2700) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30619 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30626 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C30814 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30888 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30884 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30874 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30888 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30884 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30874 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30882 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30871 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C30847) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30882 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30871 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30882 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30871 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C30847) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30882 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30871 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C2332 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30623) *
              C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C2332 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30623) *
              C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C2332 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C2332 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30888 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30884 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C30874 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30888 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30884 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C30874 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30882 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30871 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C30847) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30882 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30871 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C30847) *
               C30623) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30882 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30871 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C30847) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30882 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30871 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30537 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30546 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C30814 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C2332 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C30814 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30887 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30880 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30867 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30578 * C2332 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30888 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30884 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30874 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30578 * C30854) *
              C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30888 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30884 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30874 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C2332 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30623) *
              C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C2332 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30623) *
              C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C2332 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C2332 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30888 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C30884 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C30874 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C2440 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30888 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C30884 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C30874 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30619 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30626 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30619 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30626 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C3094 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C2700) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30619 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30626 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C3094 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C2700) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C3602) *
              C30619 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30661 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30668 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C3602) *
              C30626 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C3602) *
              C2700) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30661 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30668 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C3602) *
              C30619 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30661 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30668 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C3602) *
              C30626 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30661 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30668 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C3602) *
              C2700) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30888 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30665) *
              C30884 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30665) *
              C30874 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30757) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30889 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30886 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30877 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C2332 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30889 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30886 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30877 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30757) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30878 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30865 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C3094 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C2332 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C3094 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30888 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C3094 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C30884 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C3094 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C30874 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C3094 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30889 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30886 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30877 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C6589 - C6590) * C116 + (C6591 - C6592) * C30757) * C4557 +
            ((C6593 - C6594) * C116 + (C6595 - C6596) * C30757) * C4558) *
               C30860) *
              C2332 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30889 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30886 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30877 +
           (((C6590 - C6589) * C116 + (C6592 - C6591) * C30757) * C4556 +
            ((C6594 - C6593) * C116 + (C6596 - C6595) * C30757) * C4557 +
            ((C30506 * C6585 - C4559 * C6584) * C116 +
             (C30506 * C6587 - C4559 * C6586) * C30757) *
                C4558) *
               C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C3602) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C3602) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30661 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30668 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C3602) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30661 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30668 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C3602) *
               C30623) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30661 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30668 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C3602) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30661 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30668 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30878 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30865 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C2332 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30888 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30665) *
              C30884 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30665) *
              C30874 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30757) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C2332 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30878 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C2332 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30865 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C3094 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C2332 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C3094 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30888 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C3094 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C30884 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C3094 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C30874 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C3094 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C1284 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C1285 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C1286 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C1284 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C1285 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C1286 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C1664 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C1665 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C30847) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C1664 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C1665 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C1664 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C1665 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C30847) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C1664 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C1665 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30813 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30623) *
              C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30813 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30623) *
              C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30813 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C30813 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C1284 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C1285 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C1286 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C1284 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C1285 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C1286 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C1664 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C1665 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C30847) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C1664 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C1665 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C30847) *
               C30623) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C1664 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C1665 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C30847) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C1664 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C1665 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C30847) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C1284 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30665) *
              C1285 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30665) *
              C1286 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30757) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C30813 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C2116 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C2117 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C2118 +
           ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
             C103 * C2227 - C115 * C2224) *
                C116 +
            (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
             C103 * C2233 - C115 * C2230) *
                C30757) *
               C30746 * C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             ((C5186 - C5187) * C116 + (C5188 - C5189) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C30506 * C1545 - C4559 * C1542) * C116 +
              (C30506 * C1551 - C4559 * C1548) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C258 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             ((C5194 - C5195) * C116 + (C5196 - C5197) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C4559 * C1543 - C30506 * C1546) * C116 +
              (C4559 * C1549 - C30506 * C1552) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C259 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C30814 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C30814 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C1284 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30814 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C1285 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30814 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C1286 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30814 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C2116 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C2117 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C2118 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C6589 - C6590) * C116 + (C6591 - C6592) * C30757) * C4557 +
            ((C6593 - C6594) * C116 + (C6595 - C6596) * C30757) * C4558) *
               C30860) *
              C30813 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C2116 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C2117 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C2118 +
           (((C6590 - C6589) * C116 + (C6592 - C6591) * C30757) * C4556 +
            ((C6594 - C6593) * C116 + (C6596 - C6595) * C30757) * C4557 +
            ((C30506 * C6585 - C4559 * C6584) * C116 +
             (C30506 * C6587 - C4559 * C6586) * C30757) *
                C4558) *
               C30860) *
              C30623) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C30757) *
                  C30746 * C30578 * C30560 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C30757) *
                  C30746 * C30578 * C30560 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C30757) *
                  C30746 * C30578 * C30560 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C30757) *
                  C30746 * C30578 * C30560 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C30757) *
                  C30746 * C30578 * C30560 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C30757) *
                   C30746 * C30578 * C30881 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C30757) *
                   C30746 * C30578 * C30869 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C30757) *
                   C30746 * C30578 * C30844) *
                  C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30882 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30871 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30882 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30871 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30847) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C1664 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C1665 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30881 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30847) *
              C30869 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C1839 +
          ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
            C115 * C416 - C103 * C426) *
               C116 +
           (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
            C115 * C429 - C103 * C446) *
               C30757) *
              C30746 * C1840 +
          ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
            C103 * C432 - C115 * C419) *
               C116 +
           (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
            C103 * C449 - C115 * C435) *
               C30757) *
              C30746 * C1841 +
          ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
            C115 * C1846 - C103 * C1852) *
               C116 +
           (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
            C115 * C1855 - C103 * C1864) *
               C30757) *
              C30746 * C1842 +
          ((C101 * C1856 - C113 * C1847 + C102 * C1857 - C114 * C1848 +
            C103 * C1858 - C115 * C1849) *
               C116 +
           (C101 * C1865 - C113 * C1859 + C102 * C1866 - C114 * C1860 +
            C103 * C1867 - C115 * C1861) *
               C30757) *
              C30746 * C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C30506 * C1159 - C4559 * C1150) * C116 +
             (C30506 * C1177 - C4559 * C1162) * C30757) *
                C4557 +
            ((C30506 * C1171 - C4559 * C1156) * C116 +
             (C30506 * C1183 - C4559 * C1174) * C30757) *
                C4558) *
               C30847) *
              C30560 * C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30882 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30871 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30882 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C942 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30882 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
               C30871 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C943 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30882 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C4559 * C5514 - C30506 * C5518) * C116 +
             (C4559 * C5519 - C30506 * C5523) * C30757) *
                C4558) *
               C30871 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30560 * C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C1664 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C1665 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C1664 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C1665 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30881 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C1664 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C1665 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C30869 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C1664 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C1665 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C1839 +
          (((C4559 * C414 - C30506 * C424) * C116 +
            (C4559 * C427 - C30506 * C444) * C30757) *
               C4556 +
           ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
           C5548 * C4558) *
              C1840 +
          (((C30506 * C430 - C4559 * C417) * C116 +
            (C30506 * C447 - C4559 * C433) * C30757) *
               C4556 +
           ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
           C5551 * C4558) *
              C1841 +
          (((C4559 * C1844 - C30506 * C1850) * C116 +
            (C4559 * C1853 - C30506 * C1862) * C30757) *
               C4556 +
           ((C4559 * C2222 - C30506 * C2225) * C116 +
            (C4559 * C2228 - C30506 * C2231) * C30757) *
               C4557 +
           ((C4559 * C6214 - C30506 * C6217) * C116 +
            (C4559 * C6218 - C30506 * C6223) * C30757) *
               C4558) *
              C1842 +
          (((C30506 * C1856 - C4559 * C1847) * C116 +
            (C30506 * C1865 - C4559 * C1859) * C30757) *
               C4556 +
           ((C30506 * C6219 - C4559 * C6215) * C116 +
            (C30506 * C6224 - C4559 * C6220) * C30757) *
               C4557 +
           ((C30506 * C6221 - C4559 * C6216) * C116 +
            (C30506 * C6225 - C4559 * C6222) * C30757) *
               C4558) *
              C1843) *
         C30560 * C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C942 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C943 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C942 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C943 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C2116 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C2117 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C2118 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C30560 * C30799 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C2116 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C2117 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C2118 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30757) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30665) *
              C30560 * C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30814 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30665) *
              C30560 * C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30814 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30665) *
              C30560 * C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30814 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C942 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C30814 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C4559 * C5514 - C30506 * C5518) * C116 +
              (C4559 * C5519 - C30506 * C5523) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C942 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C30814 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C2116 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C2117 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C2118 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C4559 * C2222 - C30506 * C2225) * C116 +
             (C4559 * C2228 - C30506 * C2231) * C30757) *
                C4557 +
            ((C4559 * C6214 - C30506 * C6217) * C116 +
             (C4559 * C6218 - C30506 * C6223) * C30757) *
                C4558) *
               C30860) *
              C30560 * C30799 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C2116 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C2117 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
            ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
               C2118 +
           (((C30506 * C1851 - C4559 * C1845) * C116 +
             (C30506 * C1863 - C4559 * C1854) * C30757) *
                C4556 +
            ((C30506 * C2226 - C4559 * C2223) * C116 +
             (C30506 * C2232 - C4559 * C2229) * C30757) *
                C4557 +
            ((C30506 * C6483 - C4559 * C6482) * C116 +
             (C30506 * C6485 - C4559 * C6484) * C30757) *
                C4558) *
               C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C30560 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30757) *
              C30746 * C30578 * C30560 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30757) *
              C30746 * C30578 * C30560 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30757) *
              C30746 * C30578 * C30560 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30757) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C1664 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C1665 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30881 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30847) *
              C30869 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30560 * C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C1664 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C1665 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C1664 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C1665 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C1664 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C1665 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C30881 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C1664 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C1665 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C30869 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C1664 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C1665 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30537 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30546 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30623) *
              C30537 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30623) *
              C30546 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C3094 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C3094 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
              C103 * C432 - C115 * C419) *
                 C116 +
             (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
              C103 * C449 - C115 * C435) *
                 C30757) *
                C30746 * C3602) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
              C115 * C1152 - C103 * C1161) *
                 C116 +
             (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
              C115 * C1164 - C103 * C1179) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30661 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30668 +
            ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
              C115 * C421 - C103 * C438) *
                 C116 +
             (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
              C115 * C439 - C103 * C451) *
                 C30757) *
                C30746 * C3602) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30661 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30668 +
            ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
              C103 * C2015 - C115 * C2014) *
                 C116 +
             (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
              C103 * C2017 - C115 * C2016) *
                 C30757) *
                C30746 * C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30661 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30668 +
            (((C30506 * C430 - C4559 * C417) * C116 +
              (C30506 * C447 - C4559 * C433) * C30757) *
                 C4556 +
             ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
             C5551 * C4558) *
                C3602) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30661 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30668 +
            (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
             ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
             ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
                C3602) *
               C30623) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30661 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30668 +
            (((C4559 * C418 - C30506 * C431) * C116 +
              (C4559 * C434 - C30506 * C448) * C30757) *
                 C4556 +
             ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
             ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
                C3602) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30661 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30668 +
            (((C6378 - C6377) * C116 + (C6380 - C6379) * C30757) * C4556 +
             ((C6382 - C6381) * C116 + (C6384 - C6383) * C30757) * C4557 +
             ((C30506 * C6373 - C4559 * C6372) * C116 +
              (C30506 * C6375 - C4559 * C6374) * C30757) *
                 C4558) *
                C3602) *
               C30623) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30881 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30869 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30881 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30869 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30889 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30886 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30877 +
           ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
             C115 * C1846 - C103 * C1852) *
                C116 +
            (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
             C115 * C1855 - C103 * C1864) *
                C30757) *
               C30746 * C30860) *
              C30560 * C2440 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30889 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30886 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30877 +
           ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
             C103 * C2121 - C115 * C2120) *
                C116 +
            (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
             C103 * C2123 - C115 * C2122) *
                C30757) *
               C30746 * C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30560 * C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C3094 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30665) *
              C30560 * C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C3094 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C30665) *
              C30560 * C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C3094 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30881 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30869 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C3094 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C30844) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30881 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30869 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C3094 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30889 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30886 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30877 +
           (((C4559 * C1844 - C30506 * C1850) * C116 +
             (C4559 * C1853 - C30506 * C1862) * C30757) *
                C4556 +
            ((C6589 - C6590) * C116 + (C6591 - C6592) * C30757) * C4557 +
            ((C6593 - C6594) * C116 + (C6595 - C6596) * C30757) * C4558) *
               C30860) *
              C30560 * C2440 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30889 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30886 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
            ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
               C30877 +
           (((C30506 * C1851 - C4559 * C1845) * C116 +
             (C30506 * C1863 - C4559 * C1854) * C30757) *
                C4556 +
            ((C30506 * C2226 - C4559 * C2223) * C116 +
             (C30506 * C2232 - C4559 * C2229) * C30757) *
                C4557 +
            ((C30506 * C6483 - C4559 * C6482) * C116 +
             (C30506 * C6485 - C4559 * C6484) * C30757) *
                C4558) *
               C30860) *
              C30560 * C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C3602) *
              C30560 * C30537 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30661 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30668 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C3602) *
              C30560 * C30546 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30661 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30668 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C3602) *
              C30560 * C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30661 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30668 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C3602) *
              C30560 * C30537 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30661 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30668 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C6377 - C6378) * C116 + (C6379 - C6380) * C30757) * C4557 +
            ((C6381 - C6382) * C116 + (C6383 - C6384) * C30757) * C4558) *
               C3602) *
              C30560 * C30546 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30661 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C30668 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C3602) *
              C30560 * C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30887 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30880 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C3094 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30867 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C3094 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30881 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30869 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C2440 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30881 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C3094 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30869 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C3094 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C3094 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C30560 * C30887 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C3094 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
            C5821 * C4558) *
               C30665) *
              C30560 * C30880 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C3094 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
            ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
               C30665) *
              C30560 * C30867 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C3094 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C3094 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C30881 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C3094 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             C5932 * C4558) *
                C30665) *
               C30869 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C3094 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
                C30665) *
               C30844) *
              C2440 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C3094 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C30881 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C3094 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C30869 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C3094 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30623) *
              C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30623) *
              C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30623) *
              C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30578 * C30813 +
           ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
             C103 * C559 - C115 * C558) *
                C116 +
            (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
             C103 * C561 - C115 * C560) *
                C30757) *
               C30746 * C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C1284 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C1285 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C1286 +
           ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30799 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C1284 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C1285 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C1286 +
           ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
             C103 * C1291 - C115 * C1290) *
                C116 +
            (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
             C103 * C1293 - C115 * C1292) *
                C30757) *
               C30746 * C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30813 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30623) *
              C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30813 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30623) *
              C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30813 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30623) *
              C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30578 * C30813 +
           (((C4931 - C4930) * C116 + (C4933 - C4932) * C30757) * C4556 +
            ((C4935 - C4934) * C116 + (C4937 - C4936) * C30757) * C4557 +
            ((C30506 * C1291 - C4559 * C1290) * C116 +
             (C30506 * C1293 - C4559 * C1292) * C30757) *
                C4558) *
               C30578 * C30623) *
              C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C1284 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30578 * C1285 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30578 * C1286 +
           (C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30578 * C30854) *
              C30799 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C1284 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            C5662 * C4558) *
               C30578 * C1285 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
               C30578 * C1286 +
           (C5662 * C4556 +
            ((C5657 - C5656) * C116 + (C5659 - C5658) * C30757) * C4557 +
            ((C30506 * C5650 - C4559 * C5649) * C116 +
             (C30506 * C5652 - C4559 * C5651) * C30757) *
                C4558) *
               C30578 * C30854) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C258 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C259 +
          ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
              C103 * C132 - C115 * C121) *
                 C116 +
             (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
              C103 * C142 - C115 * C133) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
              C115 * C422 - C103 * C440) *
                 C116 +
             (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
              C115 * C441 - C103 * C452) *
                 C30757) *
                C30746 * C30665) *
               C30813 +
           (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
              C115 * C269 - C103 * C287) *
                 C116 +
             (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
              C115 * C288 - C103 * C299) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
              C103 * C825 - C115 * C816) *
                 C116 +
             (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
              C103 * C831 - C115 * C826) *
                 C30757) *
                C30746 * C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C1284 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30665) *
              C1285 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30665) *
              C1286 +
          (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
             C115 * C1018 - C103 * C1024) *
                C116 +
            (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
             C115 * C1027 - C103 * C1036) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
             C103 * C1547 - C115 * C1544) *
                C116 +
            (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
             C103 * C1553 - C115 * C1550) *
                C30757) *
               C30746 * C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             ((C5186 - C5187) * C116 + (C5188 - C5189) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C30506 * C1545 - C4559 * C1542) * C116 +
              (C30506 * C1551 - C4559 * C1548) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C258 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             ((C5194 - C5195) * C116 + (C5196 - C5197) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C4559 * C1543 - C30506 * C1546) * C116 +
              (C4559 * C1549 - C30506 * C1552) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C259 +
          (((((C30506 * C126 - C4559 * C119) * C116 +
              (C30506 * C140 - C4559 * C129) * C30757) *
                 C4556 +
             ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
             C4721 * C4558) *
                C30814 +
            (((C4559 * C416 - C30506 * C426) * C116 +
              (C4559 * C429 - C30506 * C446) * C30757) *
                 C4556 +
             ((C5198 - C5199) * C116 + (C5200 - C5201) * C30757) * C4557 +
             ((C5202 - C5203) * C116 + (C5204 - C5205) * C30757) * C4558) *
                C30665) *
               C30813 +
           ((((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
             ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
             ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
                C30814 +
            (((C5199 - C5198) * C116 + (C5201 - C5200) * C30757) * C4556 +
             ((C5203 - C5202) * C116 + (C5205 - C5204) * C30757) * C4557 +
             ((C30506 * C1547 - C4559 * C1544) * C116 +
              (C30506 * C1553 - C4559 * C1550) * C30757) *
                 C4558) *
                C30665) *
               C30623) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30665) *
              C1284 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30814 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            C5932 * C4558) *
               C30665) *
              C1285 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30814 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C5926 - C5927) * C116 + (C5928 - C5929) * C30757) * C4558) *
               C30665) *
              C1286 +
          ((C5400 * C4556 +
            ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
            ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
               C30814 +
           (C5932 * C4556 +
            ((C5927 - C5926) * C116 + (C5929 - C5928) * C30757) * C4557 +
            ((C30506 * C5920 - C4559 * C5919) * C116 +
             (C30506 * C5922 - C4559 * C5921) * C30757) *
                C4558) *
               C30665) *
              C30854) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C30560 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30757) *
              C30746 * C30578 * C30560 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30757) *
              C30746 * C30578 * C30560 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30757) *
              C30746 * C30578 * C30560 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30757) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C30560 * C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30882 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30871 +
           ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
             C115 * C421 - C103 * C438) *
                C116 +
            (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
             C115 * C439 - C103 * C451) *
                C30757) *
               C30746 * C30847) *
              C30560 * C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
             C103 * C442 - C115 * C423) *
                C116 +
            (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
             C103 * C453 - C115 * C443) *
                C30757) *
               C30746 * C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C30757) *
               C30746 * C30847) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30882 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C30757) *
               C30746 * C30871 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C30757) *
               C30746 * C30847) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30882 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C30757) *
               C30746 * C30871 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C30757) *
               C30746 * C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C30506 * C1159 - C4559 * C1150) * C116 +
             (C30506 * C1177 - C4559 * C1162) * C30757) *
                C4557 +
            ((C30506 * C1171 - C4559 * C1156) * C116 +
             (C30506 * C1183 - C4559 * C1174) * C30757) *
                C4558) *
               C30847) *
              C30560 * C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30882 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30871 +
           (((C4559 * C418 - C30506 * C431) * C116 +
             (C4559 * C434 - C30506 * C448) * C30757) *
                C4556 +
            ((C4559 * C1151 - C30506 * C1160) * C116 +
             (C4559 * C1163 - C30506 * C1178) * C30757) *
                C4557 +
            ((C4559 * C1157 - C30506 * C1172) * C116 +
             (C4559 * C1175 - C30506 * C1184) * C30757) *
                C4558) *
               C30847) *
              C30560 * C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30882 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30871 +
           (((C30506 * C432 - C4559 * C419) * C116 +
             (C30506 * C449 - C4559 * C435) * C30757) *
                C4556 +
            ((C30506 * C1161 - C4559 * C1152) * C116 +
             (C30506 * C1179 - C4559 * C1164) * C30757) *
                C4557 +
            ((C30506 * C1173 - C4559 * C1158) * C116 +
             (C30506 * C1185 - C4559 * C1176) * C30757) *
                C4558) *
               C30847) *
              C30560 * C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30882 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
            C5548 * C4558) *
               C30871 +
           (((C30506 * C430 - C4559 * C417) * C116 +
             (C30506 * C447 - C4559 * C433) * C30757) *
                C4556 +
            ((C5528 - C5529) * C116 + (C5530 - C5531) * C30757) * C4557 +
            C5551 * C4558) *
               C30847) *
              C942 +
          ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            C5400 * C4558) *
               C30882 +
           (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
            ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
            ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
               C30871 +
           (((C5529 - C5528) * C116 + (C5531 - C5530) * C30757) * C4556 +
            ((C5533 - C5532) * C116 + (C5535 - C5534) * C30757) * C4557 +
            ((C5540 - C5541) * C116 + (C5542 - C5543) * C30757) * C4558) *
               C30847) *
              C943 +
          ((C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            C5403 * C4558) *
               C30882 +
           (C5548 * C4556 +
            ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
            ((C4559 * C5514 - C30506 * C5518) * C116 +
             (C4559 * C5519 - C30506 * C5523) * C30757) *
                C4558) *
               C30871 +
           (C5551 * C4556 +
            ((C5541 - C5540) * C116 + (C5543 - C5542) * C30757) * C4557 +
            ((C30506 * C5520 - C4559 * C5515) * C116 +
             (C30506 * C5524 - C4559 * C5521) * C30757) *
                C4558) *
               C30847) *
              C30844) *
         C30532) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C30757) *
               C30746 * C30665) *
              C30560 * C554 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
             C103 * C436 - C115 * C420) *
                C116 +
            (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
             C103 * C450 - C115 * C437) *
                C30757) *
               C30746 * C30665) *
              C30560 * C555 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30814 +
           ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
             C115 * C422 - C103 * C440) *
                C116 +
            (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
             C115 * C441 - C103 * C452) *
                C30757) *
               C30746 * C30665) *
              C30560 * C556 +
          (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
             C115 * C122 - C103 * C134) *
                C116 +
            (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C135 - C103 * C143) *
                C30757) *
               C30746 * C30814 +
           ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
             C103 * C663 - C115 * C662) *
                C116 +
            (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
             C103 * C665 - C115 * C664) *
                C30757) *
               C30746 * C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
              C103 * C126 - C115 * C119) *
                 C116 +
             (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
              C103 * C140 - C115 * C129) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
              C115 * C416 - C103 * C426) *
                 C116 +
             (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
              C115 * C429 - C103 * C446) *
                 C30757) *
                C30746 * C30665) *
               C942 +
           (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
              C115 * C263 - C103 * C273) *
                 C116 +
             (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
              C115 * C276 - C103 * C293) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
              C103 * C819 - C115 * C814) *
                 C116 +
             (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
              C103 * C829 - C115 * C822) *
                 C30757) *
                C30746 * C30665) *
               C943 +
           (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
              C103 * C279 - C115 * C266) *
                 C116 +
             (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
              C103 * C296 - C115 * C282) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
              C115 * C1155 - C103 * C1167) *
                 C116 +
             (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
              C115 * C1170 - C103 * C1182) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30799 +
          ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
              C115 * C120 - C103 * C130) *
                 C116 +
             (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
              C115 * C131 - C103 * C141) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
              C103 * C436 - C115 * C420) *
                 C116 +
             (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
              C103 * C450 - C115 * C437) *
                 C30757) *
                C30746 * C30665) *
               C942 +
           (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
              C103 * C283 - C115 * C267) *
                 C116 +
             (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
              C103 * C297 - C115 * C284) *
                 C30757) *
                C30746 * C30814 +
            ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
              C115 * C815 - C103 * C823) *
                 C116 +
             (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
              C115 * C824 - C103 * C830) *
                 C30757) *
                C30746 * C30665) *
               C943 +
           (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
              C115 * C268 - C103 * C285) *
                 C116 +
             (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
              C115 * C286 - C103 * C298) *
                 C30757) *
                C30746 * C30814 +
            ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
              C103 * C1441 - C115 * C1440) *
                 C116 +
             (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
              C103 * C1443 - C115 * C1442) *
                 C30757) *
                C30746 * C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30814 +
           (((C4559 * C414 - C30506 * C424) * C116 +
             (C4559 * C427 - C30506 * C444) * C30757) *
                C4556 +
            ((C4559 * C812 - C30506 * C817) * C116 +
             (C4559 * C820 - C30506 * C827) * C30757) *
                C4557 +
            ((C4559 * C1153 - C30506 * C1165) * C116 +
             (C4559 * C1168 - C30506 * C1180) * C30757) *
                C4558) *
               C30665) *
              C30560 * C554 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30814 +
           (((C30506 * C425 - C4559 * C415) * C116 +
             (C30506 * C445 - C4559 * C428) * C30757) *
                C4556 +
            ((C30506 * C818 - C4559 * C813) * C116 +
             (C30506 * C828 - C4559 * C821) * C30757) *
                C4557 +
            ((C30506 * C1166 - C4559 * C1154) * C116 +
             (C30506 * C1181 - C4559 * C1169) * C30757) *
                C4558) *
               C30665) *
              C30560 * C555 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30814 +
           (((C4559 * C416 - C30506 * C426) * C116 +
             (C4559 * C429 - C30506 * C446) * C30757) *
                C4556 +
            ((C4559 * C814 - C30506 * C819) * C116 +
             (C4559 * C822 - C30506 * C829) * C30757) *
                C4557 +
            ((C4559 * C1155 - C30506 * C1167) * C116 +
             (C4559 * C1170 - C30506 * C1182) * C30757) *
                C4558) *
               C30665) *
              C30560 * C556 +
          ((((C4559 * C120 - C30506 * C130) * C116 +
             (C4559 * C131 - C30506 * C141) * C30757) *
                C4556 +
            ((C4930 - C4931) * C116 + (C4932 - C4933) * C30757) * C4557 +
            ((C4934 - C4935) * C116 + (C4936 - C4937) * C30757) * C4558) *
               C30814 +
           (((C30506 * C436 - C4559 * C420) * C116 +
             (C30506 * C450 - C4559 * C437) * C30757) *
                C4556 +
            ((C30506 * C823 - C4559 * C815) * C116 +
             (C30506 * C830 - C4559 * C824) * C30757) *
                C4557 +
            ((C30506 * C1441 - C4559 * C1440) * C116 +
             (C30506 * C1443 - C4559 * C1442) * C30757) *
                C4558) *
               C30665) *
              C30560 * C30848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30506 * C124 - C4559 * C117) * C116 +
              (C30506 * C138 - C4559 * C127) * C30757) *
                 C4556 +
             ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
             C4719 * C4558) *
                C30814 +
            (((C4559 * C414 - C30506 * C424) * C116 +
              (C4559 * C427 - C30506 * C444) * C30757) *
                 C4556 +
             ((C5182 - C5183) * C116 + (C5184 - C5185) * C30757) * C4557 +
             C5548 * C4558) *
                C30665) *
               C942 +
           ((((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
             ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
             C5400 * C4558) *
                C30814 +
            (((C5183 - C5182) * C116 + (C5185 - C5184) * C30757) * C4556 +
             ((C5187 - C5186) * C116 + (C5189 - C5188) * C30757) * C4557 +
             ((C5536 - C5537) * C116 + (C5538 - C5539) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4719 * C4556 +
             ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
             C5403 * C4558) *
                C30814 +
            (C5548 * C4556 +
             ((C5537 - C5536) * C116 + (C5539 - C5538) * C30757) * C4557 +
             ((C4559 * C5514 - C30506 * C5518) * C116 +
              (C4559 * C5519 - C30506 * C5523) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30799 +
          (((((C4559 * C118 - C30506 * C125) * C116 +
              (C4559 * C128 - C30506 * C139) * C30757) *
                 C4556 +
             ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
             C4720 * C4558) *
                C30814 +
            (((C30506 * C425 - C4559 * C415) * C116 +
              (C30506 * C445 - C4559 * C428) * C30757) *
                 C4556 +
             ((C5190 - C5191) * C116 + (C5192 - C5193) * C30757) * C4557 +
             C5821 * C4558) *
                C30665) *
               C942 +
           ((((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
             ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
             C5662 * C4558) *
                C30814 +
            (((C5191 - C5190) * C116 + (C5193 - C5192) * C30757) * C4556 +
             ((C5195 - C5194) * C116 + (C5197 - C5196) * C30757) * C4557 +
             ((C5815 - C5816) * C116 + (C5817 - C5818) * C30757) * C4558) *
                C30665) *
               C943 +
           ((C4720 * C4556 +
             ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
             ((C5656 - C5657) * C116 + (C5658 - C5659) * C30757) * C4558) *
                C30814 +
            (C5821 * C4556 +
             ((C5816 - C5815) * C116 + (C5818 - C5817) * C30757) * C4557 +
             ((C30506 * C5809 - C4559 * C5808) * C116 +
              (C30506 * C5811 - C4559 * C5810) * C30757) *
                 C4558) *
                C30665) *
               C30844) *
              C30543)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C30560 * C108 +
          ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
            C115 * C120 - C103 * C130) *
               C116 +
           (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
            C115 * C131 - C103 * C141) *
               C30757) *
              C30746 * C30578 * C30560 * C109 +
          ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
            C103 * C132 - C115 * C121) *
               C116 +
           (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
            C103 * C142 - C115 * C133) *
               C30757) *
              C30746 * C30578 * C30560 * C110 +
          ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
            C115 * C122 - C103 * C134) *
               C116 +
           (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C135 - C103 * C143) *
               C30757) *
              C30746 * C30578 * C30560 * C111 +
          ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
            C103 * C136 - C115 * C123) *
               C116 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
            C103 * C144 - C115 * C137) *
               C30757) *
              C30746 * C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C258 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C259 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C30881 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C30869 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30878 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30865 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C30757) *
               C30746 * C30578 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C30757) *
               C30746 * C30578 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C30757) *
               C30746 * C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C30757) *
              C30746 * C30578 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C30757) *
              C30746 * C30578 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C30757) *
              C30746 * C30578 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C30757) *
              C30746 * C30578 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C30757) *
              C30746 * C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C30506 * C271 - C4559 * C261) * C116 +
            (C30506 * C291 - C4559 * C274) * C30757) *
               C4557 +
           ((C30506 * C277 - C4559 * C264) * C116 +
            (C30506 * C294 - C4559 * C280) * C30757) *
               C4558) *
              C30578 * C30560 * C108 +
          (((C4559 * C118 - C30506 * C125) * C116 +
            (C4559 * C128 - C30506 * C139) * C30757) *
               C4556 +
           ((C4559 * C262 - C30506 * C272) * C116 +
            (C4559 * C275 - C30506 * C292) * C30757) *
               C4557 +
           ((C4559 * C265 - C30506 * C278) * C116 +
            (C4559 * C281 - C30506 * C295) * C30757) *
               C4558) *
              C30578 * C30560 * C109 +
          (((C30506 * C126 - C4559 * C119) * C116 +
            (C30506 * C140 - C4559 * C129) * C30757) *
               C4556 +
           ((C30506 * C273 - C4559 * C263) * C116 +
            (C30506 * C293 - C4559 * C276) * C30757) *
               C4557 +
           ((C30506 * C279 - C4559 * C266) * C116 +
            (C30506 * C296 - C4559 * C282) * C30757) *
               C4558) *
              C30578 * C30560 * C110 +
          (((C4559 * C120 - C30506 * C130) * C116 +
            (C4559 * C131 - C30506 * C141) * C30757) *
               C4556 +
           ((C4559 * C267 - C30506 * C283) * C116 +
            (C4559 * C284 - C30506 * C297) * C30757) *
               C4557 +
           ((C4559 * C268 - C30506 * C285) * C116 +
            (C4559 * C286 - C30506 * C298) * C30757) *
               C4558) *
              C30578 * C30560 * C111 +
          (((C30506 * C132 - C4559 * C121) * C116 +
            (C30506 * C142 - C4559 * C133) * C30757) *
               C4556 +
           ((C30506 * C287 - C4559 * C269) * C116 +
            (C30506 * C299 - C4559 * C288) * C30757) *
               C4557 +
           ((C30506 * C289 - C4559 * C270) * C116 +
            (C30506 * C300 - C4559 * C290) * C30757) *
               C4558) *
              C30578 * C30560 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C30881 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C30869 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C258 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C30881 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C30869 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C259 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C30881 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C30869 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((((C30506 * C124 - C4559 * C117) * C116 +
             (C30506 * C138 - C4559 * C127) * C30757) *
                C4556 +
            ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
            C4719 * C4558) *
               C30578 * C942 +
           (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
            ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
            ((C4679 - C4680) * C116 + (C4681 - C4682) * C30757) * C4558) *
               C30578 * C943 +
           (C4719 * C4556 +
            ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
            ((C30506 * C1028 - C4559 * C1019) * C116 +
             (C30506 * C1037 - C4559 * C1031) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30878 +
          ((((C4559 * C118 - C30506 * C125) * C116 +
             (C4559 * C128 - C30506 * C139) * C30757) *
                C4556 +
            ((C4683 - C4684) * C116 + (C4685 - C4686) * C30757) * C4557 +
            C4720 * C4558) *
               C30578 * C942 +
           (((C4684 - C4683) * C116 + (C4686 - C4685) * C30757) * C4556 +
            ((C4688 - C4687) * C116 + (C4690 - C4689) * C30757) * C4557 +
            ((C4691 - C4692) * C116 + (C4693 - C4694) * C30757) * C4558) *
               C30578 * C943 +
           (C4720 * C4556 +
            ((C4692 - C4691) * C116 + (C4694 - C4693) * C30757) * C4557 +
            ((C4559 * C1020 - C30506 * C1029) * C116 +
             (C4559 * C1032 - C30506 * C1038) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30865 +
          ((((C30506 * C126 - C4559 * C119) * C116 +
             (C30506 * C140 - C4559 * C129) * C30757) *
                C4556 +
            ((C4695 - C4696) * C116 + (C4697 - C4698) * C30757) * C4557 +
            C4721 * C4558) *
               C30578 * C942 +
           (((C4696 - C4695) * C116 + (C4698 - C4697) * C30757) * C4556 +
            ((C4700 - C4699) * C116 + (C4702 - C4701) * C30757) * C4557 +
            ((C4703 - C4704) * C116 + (C4705 - C4706) * C30757) * C4558) *
               C30578 * C943 +
           (C4721 * C4556 +
            ((C4704 - C4703) * C116 + (C4706 - C4705) * C30757) * C4557 +
            ((C30506 * C1030 - C4559 * C1021) * C116 +
             (C30506 * C1039 - C4559 * C1033) * C30757) *
                C4558) *
               C30578 * C30844) *
              C30838)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C30506 * C124 - C4559 * C117) * C116 +
            (C30506 * C138 - C4559 * C127) * C30757) *
               C4556 +
           ((C4671 - C4672) * C116 + (C4673 - C4674) * C30757) * C4557 +
           C4719 * C4558) *
              C30578 * C1010 +
          (((C4672 - C4671) * C116 + (C4674 - C4673) * C30757) * C4556 +
           ((C4676 - C4675) * C116 + (C4678 - C4677) * C30757) * C4557 +
           C5400 * C4558) *
              C30578 * C1011 +
          (C4719 * C4556 +
           ((C4680 - C4679) * C116 + (C4682 - C4681) * C30757) * C4557 +
           C5403 * C4558) *
              C30578 * C1012 +
          (C5400 * C4556 +
           ((C5389 - C5388) * C116 + (C5391 - C5390) * C30757) * C4557 +
           ((C5392 - C5393) * C116 + (C5394 - C5395) * C30757) * C4558) *
              C30578 * C1013 +
          (C5403 * C4556 +
           ((C5393 - C5392) * C116 + (C5395 - C5394) * C30757) * C4557 +
           ((C30506 * C5381 - C4559 * C5378) * C116 +
            (C30506 * C5384 - C4559 * C5382) * C30757) *
               C4558) *
              C30578 * C1014) *
         C30532) /
            (p * q * std::sqrt(p + q));
}
