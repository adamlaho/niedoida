/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AB_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_12_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29682 = ae * be;
    const double C29681 = ae + be;
    const double C29680 = 0 * be;
    const double C29679 = yA - yB;
    const double C29699 = 0 * be;
    const double C29698 = zA - zB;
    const double C29721 = yP - yQ;
    const double C29720 = zP - zQ;
    const double C29719 = p + q;
    const double C29718 = p * q;
    const double C29730 = bs[4];
    const double C29728 = xP - xQ;
    const double C29735 = bs[5];
    const double C29742 = bs[6];
    const double C29750 = bs[7];
    const double C29764 = bs[3];
    const double C30187 = bs[2];
    const double C115 = bs[0];
    const double C30550 = xA - xB;
    const double C30568 = ce + de;
    const double C30567 = ce * de;
    const double C30566 = xC - xD;
    const double C30600 = yC - yD;
    const double C30618 = zC - zD;
    const double C29683 = std::pow(C29681, 2);
    const double C30840 = 2 * C29681;
    const double C29684 = C29682 * C29679;
    const double C30784 = std::pow(C29679, 2);
    const double C30871 = C29679 * ae;
    const double C29700 = C29682 * C29698;
    const double C30797 = std::pow(C29698, 2);
    const double C30872 = C29698 * ae;
    const double C29802 = C29721 * be;
    const double C29855 = std::pow(C29721, 2);
    const double C29723 = C29720 * C29721;
    const double C29761 = C29720 * ae;
    const double C29938 = std::pow(C29720, 2);
    const double C29722 = 2 * C29718;
    const double C29736 = std::pow(C29728, 2);
    const double C30551 = std::pow(C30550, 2);
    const double C30839 = C30550 * ae;
    const double C30572 = 2 * C30568;
    const double C30571 = std::pow(C30568, 2);
    const double C30573 = C30566 * de;
    const double C30570 = C30566 * ce;
    const double C30569 = std::pow(C30566, 2);
    const double C30601 = std::pow(C30600, 2);
    const double C30660 = C30600 * de;
    const double C30658 = C30600 * ce;
    const double C30619 = std::pow(C30618, 2);
    const double C30702 = C30618 * de;
    const double C30700 = C30618 * ce;
    const double C29685 = 2 * C29683;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * ae * be) /
                        C29683;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * ae * be) /
                        C29683;
    const double C30875 = std::pow(C30840, -2);
    const double C30873 = std::pow(C30840, -1);
    const double C30785 = C30784 * C29682;
    const double C30798 = C30797 * C29682;
    const double C29804 = C29764 * C29802;
    const double C29807 = C29730 * C29802;
    const double C29811 = C29735 * C29802;
    const double C29818 = C29742 * C29802;
    const double C29829 = C29750 * C29802;
    const double C29725 = C29723 * ae;
    const double C29765 = C29764 * C29761;
    const double C29768 = C29730 * C29761;
    const double C29772 = C29735 * C29761;
    const double C29779 = C29742 * C29761;
    const double C29790 = C29750 * C29761;
    const double C29724 = C29722 / C29719;
    const double C122 = (-(bs[1] * C29802 * C29722) / C29719) / C29681;
    const double C123 = (-(bs[1] * C29761 * C29722) / C29719) / C29681;
    const double C116 = -(C29728 * bs[1] * C29722) / C29719;
    const double C294 = -(C29721 * bs[1] * C29722) / C29719;
    const double C481 = -(C29720 * bs[1] * C29722) / C29719;
    const double C30552 = C30551 * C29682;
    const double C30585 = std::pow(C30572, -1);
    const double C30848 = std::pow(C30572, -2);
    const double C30586 = 2 * C30571;
    const double C30852 = C30571 * C30572;
    const double C30851 = 4 * C30571;
    const double C30841 = std::pow(C30570, 2);
    const double C30574 = C30569 * C30567;
    const double C30602 = C30601 * C30567;
    const double C30853 = std::pow(C30658, 2);
    const double C30620 = C30619 * C30567;
    const double C30855 = std::pow(C30700, 2);
    const double C30786 = C30785 / C29681;
    const double C30799 = C30798 / C29681;
    const double C29726 = C29725 * be;
    const double C29729 = std::pow(C29724, 4);
    const double C29734 = -C29724;
    const double C29741 = std::pow(C29724, 6);
    const double C30186 = std::pow(C29724, 2);
    const double C124 =
        (C29728 * std::pow(C29724, 2) * bs[2] * C29802) / C29681;
    const double C125 =
        (C29728 * std::pow(C29724, 2) * bs[2] * C29761) / C29681;
    const double C304 =
        (C29721 * std::pow(C29724, 2) * bs[2] * C29802) / C29681 -
        (be * bs[1] * C29722) / (C29719 * C29681);
    const double C305 =
        (C29721 * std::pow(C29724, 2) * bs[2] * C29761) / C29681;
    const double C30553 = C30552 / C29681;
    const double C30885 = 4 * C30852;
    const double C30884 = C30568 * C30851;
    const double C30575 = C30574 / C30568;
    const double C30603 = C30602 / C30568;
    const double C30621 = C30620 / C30568;
    const double C30787 = -C30786;
    const double C30800 = -C30799;
    const double C29731 = C29730 * C29726;
    const double C29738 = C29735 * C29726;
    const double C29743 = C29742 * C29726;
    const double C29752 = C29750 * C29726;
    const double C138 =
        (std::pow(-C29724, 3) * bs[3] * C29726 +
         std::pow(C29724, 4) * bs[4] * C29726 * std::pow(xP - xQ, 2)) /
        C29683;
    const double C29769 = C29729 * C29768;
    const double C29808 = C29729 * C29807;
    const double C29844 = C29730 * C29729;
    const double C29737 = std::pow(C29734, 5);
    const double C29749 = std::pow(C29734, 7);
    const double C29763 = std::pow(C29734, 3);
    const double C324 = (be * std::pow(C29724, 2) * bs[2] * C29720 * ae +
                         C29721 * std::pow(C29734, 3) * bs[3] * C29726) /
                        C29683;
    const double C29781 = C29741 * C29779;
    const double C29820 = C29741 * C29818;
    const double C29913 = C29742 * C29741;
    const double C30188 = C30187 * C30186;
    const double C491 = (C29720 * C30186 * C30187 * C29802) / C29681;
    const double C492 = (C29720 * C30186 * C30187 * C29761) / C29681 -
                        (ae * bs[1] * C29722) / (C29719 * C29681);
    const double C30554 = -C30553;
    const double C30576 = -C30575;
    const double C30604 = -C30603;
    const double C30622 = -C30621;
    const double C30788 = std::exp(C30787);
    const double C30801 = std::exp(C30800);
    const double C29732 = C29729 * C29731;
    const double C29744 = C29741 * C29743;
    const double C29770 = C29728 * C29769;
    const double C29853 = be * C29769;
    const double C29852 = C29721 * C29769;
    const double C30302 = C29720 * C29769;
    const double C29809 = C29728 * C29808;
    const double C29874 = C29721 * C29808;
    const double C29936 = ae * C29808;
    const double C29935 = C29720 * C29808;
    const double C29880 = C29728 * C29844;
    const double C29895 = C29721 * C29844;
    const double C29894 = C29844 * be;
    const double C30194 = C29844 * C29736;
    const double C30253 = C29844 * C29855;
    const double C30305 = C29844 * C29938;
    const double C30388 = C29720 * C29844;
    const double C30387 = C29844 * ae;
    const double C29739 = C29737 * C29738;
    const double C29773 = C29737 * C29772;
    const double C29812 = C29737 * C29811;
    const double C29846 = C29735 * C29737;
    const double C29753 = C29749 * C29752;
    const double C29792 = C29749 * C29790;
    const double C29831 = C29749 * C29829;
    const double C29766 = C29763 * C29765;
    const double C29805 = C29763 * C29804;
    const double C29875 = C29764 * C29763;
    const double C511 = (ae * std::pow(C29724, 2) * bs[2] * C29721 * be +
                         C29720 * C29763 * C29764 * C29726) /
                        C29683;
    const double C29782 = C29781 * C29736;
    const double C29789 = C29728 * C29781;
    const double C29968 = C29781 * C29855;
    const double C29982 = be * C29781;
    const double C29981 = C29721 * C29781;
    const double C30402 = C29720 * C29781;
    const double C29821 = C29820 * C29736;
    const double C29828 = C29728 * C29820;
    const double C30002 = C29721 * C29820;
    const double C30098 = C29820 * C29938;
    const double C30112 = ae * C29820;
    const double C30111 = C29720 * C29820;
    const double C29914 = C29913 * C29736;
    const double C30023 = C29913 * C29855;
    const double C30022 = C29721 * C29913;
    const double C30021 = C29913 * be;
    const double C30058 = C29728 * C29913;
    const double C30406 = C29913 * C29938;
    const double C117 = C30188 * C29736 - (bs[1] * C29722) / C29719;
    const double C295 = C29721 * C29728 * C30188;
    const double C297 = C30188 * C29855 - (bs[1] * C29722) / C29719;
    const double C482 = C29720 * C29728 * C30188;
    const double C484 = C30188 * C29938 - (bs[1] * C29722) / C29719;
    const double C931 = C29720 * C29721 * C30188;
    const double C30555 = std::exp(C30554);
    const double C30577 = std::exp(C30576);
    const double C30605 = std::exp(C30604);
    const double C30623 = std::exp(C30622);
    const double C150 = C30788 * C138;
    const double C146 = C30788 * C137;
    const double C144 = C30788 * C124;
    const double C9117 = C30788 * C491;
    const double C29686 = C29684 * C30788;
    const double C113 = -(2 * ae * be * (yA - yB) * C30788) / (ae + be);
    const double C30905 = C30788 * C30871;
    const double C4723 =
        (C30788 * std::pow(C30871, 2)) / C29683 + C30788 / C30840;
    const double C4725 = C30875 * C30788;
    const double C13127 = C30873 * C30788;
    const double C29701 = C29700 * C30801;
    const double C114 = -(2 * ae * be * (zA - zB) * C30801) / (ae + be);
    const double C30906 = C30801 * C30872;
    const double C8890 =
        (C30801 * std::pow(C30872, 2)) / C29683 + C30801 / C30840;
    const double C8892 = C30875 * C30801;
    const double C18741 = C30873 * C30801;
    const double C139 = (2 * C29728 * C29732 +
                         C29728 * (C29732 + std::pow(-C29724, 5) * bs[5] *
                                                C29726 * std::pow(C29728, 2))) /
                        C29683;
    const double C325 =
        (be * C29728 * std::pow(C29734, 3) * bs[3] * C29720 * ae +
         C29721 * C29728 * C29732) /
        C29683;
    const double C512 = (ae * C29728 * C29763 * C29764 * C29721 * be +
                         C29720 * C29728 * C29732) /
                        C29683;
    const double C29745 = C29744 * C29736;
    const double C29748 = C29728 * C29744;
    const double C29967 = C29721 * C29744;
    const double C30097 = C29720 * C29744;
    const double C29881 = C29880 * be;
    const double C30200 = 2 * C29880;
    const double C30257 = C29721 * C29880;
    const double C30312 = C29720 * C29880;
    const double C30311 = C29880 * ae;
    const double C29897 = C29895 * be;
    const double C30336 = 2 * C29895;
    const double C30367 = C29720 * C29895;
    const double C30366 = C29895 * ae;
    const double C30393 = 2 * C30388;
    const double C30391 = C30388 * ae;
    const double C29849 = C29728 * C29739;
    const double C29854 = C29721 * C29739;
    const double C29937 = C29720 * C29739;
    const double C140 =
        (3 * (C29732 + C29739 * C29736) +
         C29728 * (2 * C29728 * C29739 +
                   C29728 * (C29739 +
                             std::pow(C29724, 6) * bs[6] * C29726 * C29736))) /
        C29683;
    const double C326 = (be * (std::pow(C29734, 3) * bs[3] * C29761 +
                               C29729 * C29730 * C29761 * C29736) +
                         C29721 * (C29732 + C29739 * C29736)) /
                        C29683;
    const double C328 = (C29728 * C29732 + be * C29721 * C29770 +
                         C29721 * (be * C29770 + C29721 * C29728 * C29739)) /
                        C29683;
    const double C513 =
        (ae * (C29763 * C29764 * C29802 + C29729 * C29730 * C29802 * C29736) +
         C29720 * (C29732 + C29739 * C29736)) /
        C29683;
    const double C515 = (C29728 * C29732 + ae * C29720 * C29809 +
                         C29720 * (ae * C29809 + C29720 * C29728 * C29739)) /
                        C29683;
    const double C947 =
        (ae * (C29721 * C29809 + C29728 * C29764 * C29763 * be) +
         C29720 * (be * C29770 + C29721 * C29728 * C29739)) /
        C29683;
    const double C29774 = C29773 * C29736;
    const double C29778 = C29728 * C29773;
    const double C29857 = C29773 * C29855;
    const double C29966 = be * C29773;
    const double C29965 = C29721 * C29773;
    const double C30386 = C29720 * C29773;
    const double C29813 = C29812 * C29736;
    const double C29817 = C29728 * C29812;
    const double C29893 = C29721 * C29812;
    const double C29940 = C29812 * C29938;
    const double C30096 = ae * C29812;
    const double C30095 = C29720 * C29812;
    const double C29885 = C29846 * C29736;
    const double C29903 = C29728 * C29846;
    const double C30005 = C29846 * C29855;
    const double C30004 = C29721 * C29846;
    const double C30003 = C29846 * be;
    const double C30389 = C29846 * C29938;
    const double C30404 = C29720 * C29846;
    const double C30403 = C29846 * ae;
    const double C29754 = C29753 * C29736;
    const double C29983 = C29721 * C29753;
    const double C30044 = C29728 * C29753;
    const double C30113 = C29720 * C29753;
    const double C29793 = C29792 * C29736;
    const double C29985 = C29792 * C29855;
    const double C30045 = C29728 * C29792;
    const double C29832 = C29831 * C29736;
    const double C30020 = C29721 * C29831;
    const double C30079 = C29728 * C29831;
    const double C30115 = C29831 * C29938;
    const double C327 = (C29763 * C29764 * C29726 + be * C29721 * C29766 +
                         C29721 * (be * C29766 + C29721 * C29732)) /
                        C29683;
    const double C1170 = (2 * (be * C29766 + C29721 * C29732) +
                          be * (C29766 + C29769 * std::pow(C29721, 2)) +
                          C29721 * (C29732 + be * C29721 * C29769 +
                                    C29721 * (be * C29769 + C29721 * C29739))) /
                         C29683;
    const double C127 =
        (std::pow(C29724, 2) * bs[2] * C29761 + C29766 * C29736) / C29681;
    const double C129 =
        (2 * C29728 * C29766 + C29728 * (C29766 + C29769 * C29736)) / C29681;
    const double C307 = (C29721 * C29728 * C29766) / C29681;
    const double C309 = (C29721 * (C29766 + C29769 * C29736)) / C29681;
    const double C311 = (C30186 * C30187 * C29761 + C29766 * C29855) / C29681;
    const double C313 = (C29728 * C29766 + C29770 * C29855) / C29681;
    const double C494 =
        (C29720 * C29728 * C29766 + C29728 * C30188 * ae) / C29681;
    const double C498 =
        (C30186 * C30187 * C29761 + C29720 * (C29720 * C29766 + C30188 * ae) +
         C29720 * C30188 * ae) /
        C29681;
    const double C937 =
        (C29720 * C29721 * C29766 + C29721 * C30188 * ae) / C29681;
    const double C1159 =
        (2 * C29721 * C29766 + C29721 * (C29766 + C29769 * C29855)) / C29681;
    const double C514 = (C29763 * C29764 * C29726 + ae * C29720 * C29805 +
                         C29720 * (ae * C29805 + C29720 * C29732)) /
                        C29683;
    const double C946 =
        (ae * (C29721 * C29805 + bs[2] * std::pow(C29724, 2) * be) +
         C29720 * (be * C29766 + C29721 * C29732)) /
        C29683;
    const double C2014 = (2 * (ae * C29805 + C29720 * C29732) +
                          ae * (C29805 + C29808 * std::pow(C29720, 2)) +
                          C29720 * (C29732 + ae * C29720 * C29808 +
                                    C29720 * (ae * C29808 + C29720 * C29739))) /
                         C29683;
    const double C126 =
        (std::pow(C29724, 2) * bs[2] * C29802 + C29805 * C29736) / C29681;
    const double C128 =
        (2 * C29728 * C29805 + C29728 * (C29805 + C29808 * C29736)) / C29681;
    const double C306 =
        (C29721 * C29728 * C29805 + C29728 * bs[2] * std::pow(C29724, 2) * be) /
        C29681;
    const double C310 =
        (C30186 * C30187 * C29802 + C29721 * (C29721 * C29805 + C30188 * be) +
         C29721 * C30188 * be) /
        C29681;
    const double C493 = (C29720 * C29728 * C29805) / C29681;
    const double C495 = (C29720 * (C29805 + C29808 * C29736)) / C29681;
    const double C497 = (C30186 * C30187 * C29802 + C29805 * C29938) / C29681;
    const double C499 = (C29728 * C29805 + C29809 * C29938) / C29681;
    const double C936 = (C29720 * (C29721 * C29805 + C30188 * be)) / C29681;
    const double C2002 =
        (2 * C29720 * C29805 + C29720 * (C29805 + C29808 * C29938)) / C29681;
    const double C29876 = C29875 * be;
    const double C30191 = C29728 * C29875;
    const double C30195 = C29875 + C30194;
    const double C30252 = C29721 * C29875;
    const double C30254 = C29875 + C30253;
    const double C30304 = C29720 * C29875;
    const double C30303 = C29875 * ae;
    const double C30307 = C29875 + C30305;
    const double C308 = (C29721 * (C29805 + C29808 * C29736) +
                         (bs[2] * std::pow(C29724, 2) + C29875 * C29736) * be) /
                        C29681;
    const double C496 = (C29720 * (C29766 + C29769 * C29736) +
                         (C30188 + C29875 * C29736) * ae) /
                        C29681;
    const double C1302 = (C29720 * (C29766 + C29769 * C29855) +
                          (C30188 + C29875 * C29855) * ae) /
                         C29681;
    const double C2003 =
        (2 * (C29720 * C29766 + C30188 * ae) +
         C29720 * (C29766 + C29720 * (C29720 * C29769 + C29875 * ae) +
                   C29720 * C29875 * ae) +
         (C30188 + C29875 * C29938) * ae) /
        C29681;
    const double C118 =
        2 * C29728 * C30188 + C29728 * (C30188 + C29875 * C29736);
    const double C296 = C29721 * (C30188 + C29875 * C29736);
    const double C483 = C29720 * (C30188 + C29875 * C29736);
    const double C1152 =
        2 * C29721 * C30188 + C29721 * (C30188 + C29875 * C29855);
    const double C1289 = C29720 * (C30188 + C29875 * C29855);
    const double C1996 =
        2 * C29720 * C30188 + C29720 * (C30188 + C29875 * C29938);
    const double C9119 = C30788 * C511;
    const double C29783 = C29773 + C29782;
    const double C29791 = 2 * C29789;
    const double C29863 = C29789 * C29855;
    const double C30043 = be * C29789;
    const double C30042 = C29721 * C29789;
    const double C30432 = C29720 * C29789;
    const double C29972 = C29773 + C29968;
    const double C29989 = 2 * C29981;
    const double C29987 = be * C29981;
    const double C30447 = C29720 * C29981;
    const double C29822 = C29812 + C29821;
    const double C29830 = 2 * C29828;
    const double C29902 = C29721 * C29828;
    const double C29946 = C29828 * C29938;
    const double C30139 = ae * C29828;
    const double C30138 = C29720 * C29828;
    const double C30102 = C29812 + C30098;
    const double C30119 = 2 * C30111;
    const double C30117 = ae * C30111;
    const double C29915 = C29846 + C29914;
    const double C30027 = C29846 + C30023;
    const double C30026 = C30022 * be;
    const double C30450 = C30022 * C29938;
    const double C30059 = C30058 * C29855;
    const double C30081 = C29721 * C30058;
    const double C30080 = C30058 * be;
    const double C30435 = C30058 * C29938;
    const double C30410 = C29846 + C30406;
    const double C30874 = C30555 * C30839;
    const double C103 =
        (C30555 * std::pow(C30839, 2)) / C29683 + C30555 / C30840;
    const double C105 = C30875 * C30555;
    const double C13129 = C30873 * C30555;
    const double C30579 = C30577 * C30570;
    const double C30578 = C30577 / C30572;
    const double C30588 = C30585 * C30577;
    const double C30844 = C30577 * C30573;
    const double C30882 = C30848 * C30577;
    const double C30876 = C30577 * C30841;
    const double C30659 = C30605 / C30572;
    const double C30661 = C30605 * C30658;
    const double C30668 = C30585 * C30605;
    const double C30859 = C30605 * C30660;
    const double C30888 = C30848 * C30605;
    const double C30886 = C30605 * C30853;
    const double C30701 = C30623 / C30572;
    const double C30703 = C30623 * C30700;
    const double C30710 = C30585 * C30623;
    const double C30865 = C30623 * C30702;
    const double C30891 = C30848 * C30623;
    const double C30889 = C30623 * C30855;
    const double C4729 = ((0 * ae) / C29681 - C29686 / C29683) / (2 * C29681) +
                         (0 * ae) / C29681;
    const double C13130 =
        ((C30788 - (C29679 * 2 * C29686) / C29681) * ae) / C29681 -
        C29680 / C29685;
    const double C13131 = (0 * ae) / C29681 - C29686 / C29683;
    const double C149 = C113 * C117;
    const double C147 = C113 * C125;
    const double C145 = C113 * C116;
    const double C335 = C113 * C295;
    const double C522 = C113 * C482;
    const double C9122 = C113 * C484;
    const double C9120 = C113 * C492;
    const double C9118 = C113 * C481;
    const double C9475 = C113 * C931;
    const double C4724 = (2 * C30873 * C30905) / C29681;
    const double C13126 = C30905 / C29681;
    const double C4728 =
        (((C30788 - (C29679 * 2 * C29686) / C29681) * ae) / C29681 -
         C29680 / C29685) /
            (2 * C29681) +
        ((C29679 * ((0 * ae) / C29681 - C29686 / C29683) + C13127) * ae) /
            C29681;
    const double C8895 = ((0 * ae) / C29681 - C29701 / C29683) / (2 * C29681) +
                         (0 * ae) / C29681;
    const double C18742 =
        ((C30801 - (C29698 * 2 * C29701) / C29681) * ae) / C29681 -
        C29699 / C29685;
    const double C18743 = (0 * ae) / C29681 - C29701 / C29683;
    const double C8891 = (2 * C30873 * C30906) / C29681;
    const double C18740 = C30906 / C29681;
    const double C8894 =
        (((C30801 - (C29698 * 2 * C29701) / C29681) * ae) / C29681 -
         C29699 / C29685) /
            (2 * C29681) +
        ((C29698 * ((0 * ae) / C29681 - C29701 / C29683) + C18741) * ae) /
            C29681;
    const double C155 = C30788 * C139;
    const double C338 = C30788 * C325;
    const double C13139 = C13127 * C325;
    const double C525 = C30788 * C512;
    const double C29746 = C29739 + C29745;
    const double C29751 = 2 * C29748;
    const double C29862 = C29721 * C29748;
    const double C29945 = C29720 * C29748;
    const double C29856 = C29853 + C29854;
    const double C29939 = C29936 + C29937;
    const double C158 = C30788 * C140;
    const double C342 = C30788 * C326;
    const double C13148 = C13127 * C326;
    const double C345 = C30788 * C328;
    const double C13318 = C13127 * C328;
    const double C529 = C30788 * C513;
    const double C532 = C30788 * C515;
    const double C954 = C30788 * C947;
    const double C13496 = C13127 * C947;
    const double C29775 = C29769 + C29774;
    const double C29780 = 2 * C29778;
    const double C29861 = be * C29778;
    const double C29860 = C29721 * C29778;
    const double C1171 = (2 * (be * C29770 + C29721 * C29849) +
                          be * (C29770 + C29778 * std::pow(C29721, 2)) +
                          C29721 * (C29849 + be * C29721 * C29778 +
                                    C29721 * (be * C29778 + C29721 * C29748))) /
                         C29683;
    const double C30310 = C29720 * C29778;
    const double C1161 =
        (2 * C29721 * C29770 + C29721 * (C29770 + C29778 * C29855)) / C29681;
    const double C29858 = C29769 + C29857;
    const double C29970 = C29966 + C29967;
    const double C29971 = 2 * C29965;
    const double C29969 = be * C29965;
    const double C30365 = C29720 * C29965;
    const double C30390 = C30386 + C30387;
    const double C29814 = C29808 + C29813;
    const double C29819 = 2 * C29817;
    const double C29879 = C29721 * C29817;
    const double C29944 = ae * C29817;
    const double C29943 = C29720 * C29817;
    const double C2015 = (2 * (ae * C29809 + C29720 * C29849) +
                          ae * (C29809 + C29817 * std::pow(C29720, 2)) +
                          C29720 * (C29849 + ae * C29720 * C29817 +
                                    C29720 * (ae * C29817 + C29720 * C29748))) /
                         C29683;
    const double C2004 =
        (2 * C29720 * C29809 + C29720 * (C29809 + C29817 * C29938)) / C29681;
    const double C29896 = C29893 + C29894;
    const double C29941 = C29808 + C29940;
    const double C30100 = C30096 + C30097;
    const double C30101 = 2 * C30095;
    const double C30099 = ae * C30095;
    const double C29886 = C29844 + C29885;
    const double C29905 = C29721 * C29903;
    const double C29904 = C29903 * be;
    const double C29925 = 2 * C29903;
    const double C30258 = C29903 * C29855;
    const double C30313 = C29903 * C29938;
    const double C30434 = C29720 * C29903;
    const double C30433 = C29903 * ae;
    const double C30008 = C29844 + C30005;
    const double C30007 = C30004 * be;
    const double C30024 = 2 * C30004;
    const double C30368 = C30004 * C29938;
    const double C30449 = C29720 * C30004;
    const double C30448 = C30004 * ae;
    const double C30006 = C30002 + C30003;
    const double C30392 = C29844 + C30389;
    const double C30411 = 2 * C30404;
    const double C30409 = C30404 * ae;
    const double C30408 = C30402 + C30403;
    const double C29755 = C29744 + C29754;
    const double C29988 = C29982 + C29983;
    const double C30047 = C29721 * C30044;
    const double C30140 = C29720 * C30044;
    const double C30118 = C30112 + C30113;
    const double C29794 = C29781 + C29793;
    const double C29990 = C29781 + C29985;
    const double C30049 = C30045 * C29855;
    const double C29833 = C29820 + C29832;
    const double C30025 = C30020 + C30021;
    const double C30083 = C29721 * C30079;
    const double C30141 = C30079 * C29938;
    const double C30120 = C29820 + C30115;
    const double C151 = C113 * C127;
    const double C154 = C113 * C129;
    const double C337 = C113 * C307;
    const double C341 = C113 * C309;
    const double C346 = C113 * C313;
    const double C524 = C113 * C494;
    const double C9124 = C113 * C498;
    const double C9477 = C113 * C937;
    const double C9123 = C30788 * C514;
    const double C9478 = C30788 * C946;
    const double C24521 = C13127 * C946;
    const double C9128 = C30788 * C2014;
    const double C148 = C30788 * C126;
    const double C153 = C30788 * C128;
    const double C336 = C30788 * C306;
    const double C13135 = C13127 * C306;
    const double C523 = C30788 * C493;
    const double C527 = C30788 * C495;
    const double C9121 = C30788 * C497;
    const double C530 = C30788 * C499;
    const double C9476 = C30788 * C936;
    const double C24517 = C13127 * C936;
    const double C9126 = C30788 * C2002;
    const double C29877 = C29874 + C29876;
    const double C312 =
        (C29728 * C29805 + C29721 * (C29721 * C29809 + C30191 * be) +
         C29721 * C30191 * be) /
        C29681;
    const double C500 =
        (C29728 * C29766 + C29720 * (C29720 * C29770 + C30191 * ae) +
         C29720 * C30191 * ae) /
        C29681;
    const double C938 = (C29720 * (C29721 * C29809 + C30191 * be)) / C29681;
    const double C939 =
        (C29720 * C29721 * C29770 + C29721 * C30191 * ae) / C29681;
    const double C1304 = (C29720 * (C29770 + C29778 * C29855) +
                          (C30191 + C29880 * C29855) * ae) /
                         C29681;
    const double C2005 =
        (2 * (C29720 * C29770 + C30191 * ae) +
         C29720 * (C29770 + C29720 * (C29720 * C29778 + C29880 * ae) +
                   C29720 * C29880 * ae) +
         (C30191 + C29880 * C29938) * ae) /
        C29681;
    const double C298 = C29728 * C30188 + C30191 * C29855;
    const double C485 = C29728 * C30188 + C30191 * C29938;
    const double C932 = C29720 * C29721 * C30191;
    const double C1153 =
        2 * C29721 * C30191 + C29721 * (C30191 + C29880 * C29855);
    const double C1287 = C29721 * C30191 + C30257 * C29938;
    const double C1290 = C29720 * (C30191 + C29880 * C29855);
    const double C1997 =
        2 * C29720 * C30191 + C29720 * (C30191 + C29880 * C29938);
    const double C119 = 3 * (C30188 + C29875 * C29736) +
                        C29728 * (2 * C30191 + C29728 * C30195);
    const double C299 = C30188 + C29875 * C29736 + C30195 * C29855;
    const double C300 = C29721 * (2 * C30191 + C29728 * C30195);
    const double C486 = C30188 + C29875 * C29736 + C30195 * C29938;
    const double C487 = C29720 * (2 * C30191 + C29728 * C30195);
    const double C933 = C29720 * C29721 * C30195;
    const double C1296 =
        (C29721 * C29766 + C29720 * (C29720 * C29852 + C30252 * ae) +
         C29720 * C30252 * ae) /
        C29681;
    const double C2394 =
        (2 * (C29720 * C29852 + C30252 * ae) +
         C29720 * (C29852 + C29720 * (C29720 * C29965 + C29895 * ae) +
                   C29720 * C29895 * ae) +
         (C30252 + C29895 * C29938) * ae) /
        C29681;
    const double C1286 = C29721 * C30188 + C30252 * C29938;
    const double C2390 =
        2 * C29720 * C30252 + C29720 * (C30252 + C29895 * C29938);
    const double C1155 = 3 * (C30188 + C29875 * C29855) +
                         C29721 * (2 * C30252 + C29721 * C30254);
    const double C1292 = C30188 + C29875 * C29855 + C30254 * C29938;
    const double C1694 = C29720 * (2 * C30252 + C29721 * C30254);
    const double C30306 = C30302 + C30303;
    const double C1999 = 3 * (C30188 + C29875 * C29938) +
                         C29720 * (2 * C30304 + C29720 * C30307);
    const double C340 = C30788 * C308;
    const double C13144 = C13127 * C308;
    const double C528 = C113 * C496;
    const double C9774 = C113 * C1302;
    const double C9127 = C113 * C2003;
    const double C152 = C113 * C118;
    const double C339 = C113 * C296;
    const double C526 = C113 * C483;
    const double C9772 = C113 * C1289;
    const double C9125 = C113 * C1996;
    const double C29784 = C29728 * C29783;
    const double C29788 = 3 * C29783;
    const double C29868 = be * C29783;
    const double C29867 = C29721 * C29783;
    const double C30318 = C29720 * C29783;
    const double C29865 = C29778 + C29863;
    const double C30048 = 2 * C30042;
    const double C30046 = be * C30042;
    const double C30424 = C29720 * C30042;
    const double C29975 = C29721 * C29972;
    const double C29984 = 3 * C29972;
    const double C29980 = be * C29972;
    const double C30372 = C29720 * C29972;
    const double C29991 = C29744 + C29987;
    const double C29823 = C29728 * C29822;
    const double C29827 = 3 * C29822;
    const double C29884 = C29721 * C29822;
    const double C29951 = ae * C29822;
    const double C29950 = C29720 * C29822;
    const double C29948 = C29817 + C29946;
    const double C30144 = 2 * C30138;
    const double C30142 = ae * C30138;
    const double C30105 = C29720 * C30102;
    const double C30114 = 3 * C30102;
    const double C30110 = ae * C30102;
    const double C30121 = C29744 + C30117;
    const double C29917 = C29721 * C29915;
    const double C29916 = C29915 * be;
    const double C29926 = C29728 * C29915;
    const double C30263 = C29915 * C29855;
    const double C30321 = C29915 * C29938;
    const double C30030 = C29721 * C30027;
    const double C30029 = C30027 * be;
    const double C30375 = C30027 * C29938;
    const double C30453 = C30004 + C30450;
    const double C30060 = C29903 + C30059;
    const double C30084 = C30081 * be;
    const double C30427 = C30081 * C29938;
    const double C30438 = C29903 + C30435;
    const double C30413 = C29720 * C30410;
    const double C104 = (2 * C30873 * C30874) / C29681;
    const double C13128 = C30874 / C29681;
    const double C30580 = C30579 * C30573;
    const double C30587 = C30579 / C30586;
    const double C30845 = C30585 * C30579;
    const double C30843 = C30579 / C30568;
    const double C291 = (C30577 * std::pow(C30573, 2)) / C30571 + C30578;
    const double C30589 = C30588 * C30573;
    const double C30849 = C30570 * C30588;
    const double C30847 = 2 * C30588;
    const double C30892 = C30588 / C30851;
    const double C112 = C30588 / C30885;
    const double C2871 = C30588 / C30572;
    const double C30878 = C30844 / C30568;
    const double C292 = (-2 * C30585 * C30844) / C30568;
    const double C30907 = C30876 / C30571;
    const double C1078 = (C30605 * std::pow(C30660, 2)) / C30571 + C30659;
    const double C30662 = C30661 * C30660;
    const double C30667 = C30661 / C30586;
    const double C30857 = C30661 / C30568;
    const double C30854 = C30585 * C30661;
    const double C30669 = C30668 * C30660;
    const double C30863 = C30658 * C30668;
    const double C30862 = 2 * C30668;
    const double C30898 = C30668 / C30851;
    const double C1150 = C30668 / C30885;
    const double C2868 = C30668 / C30572;
    const double C30894 = C30859 / C30568;
    const double C1079 = (-2 * C30585 * C30859) / C30568;
    const double C30912 = C30886 / C30571;
    const double C1816 = (C30623 * std::pow(C30702, 2)) / C30571 + C30701;
    const double C30704 = C30703 * C30702;
    const double C30709 = C30703 / C30586;
    const double C30858 = C30703 / C30568;
    const double C30856 = C30585 * C30703;
    const double C30711 = C30710 * C30702;
    const double C30869 = C30700 * C30710;
    const double C30868 = 2 * C30710;
    const double C30904 = C30710 / C30851;
    const double C1995 = C30710 / C30885;
    const double C3770 = C30710 / C30572;
    const double C30900 = C30865 / C30568;
    const double C1817 = (-2 * C30585 * C30865) / C30568;
    const double C30914 = C30889 / C30571;
    const double C13154 = C13130 * C129;
    const double C13150 = C13130 * C118;
    const double C13145 = C13130 * C127;
    const double C13141 = C13130 * C117;
    const double C13138 = C13130 * C125;
    const double C13134 = C13130 * C116;
    const double C13332 = C13130 * C309;
    const double C13328 = C13130 * C296;
    const double C13324 = C13130 * C313;
    const double C13315 = C13130 * C307;
    const double C13311 = C13130 * C295;
    const double C13510 = C13130 * C496;
    const double C13506 = C13130 * C483;
    const double C13493 = C13130 * C494;
    const double C13489 = C13130 * C482;
    const double C24527 = C13130 * C498;
    const double C24523 = C13130 * C484;
    const double C24520 = C13130 * C492;
    const double C24516 = C13130 * C481;
    const double C24989 = C13130 * C937;
    const double C24985 = C13130 * C931;
    const double C25380 = C13130 * C1302;
    const double C25376 = C13130 * C1289;
    const double C26232 = C13130 * C2003;
    const double C26228 = C13130 * C1996;
    const double C13147 = C13131 * C309;
    const double C13143 = C13131 * C296;
    const double C13140 = C13131 * C307;
    const double C13136 = C13131 * C295;
    const double C13317 = C13131 * C313;
    const double C24522 = C13131 * C937;
    const double C24518 = C13131 * C931;
    const double C24991 = C13131 * C1302;
    const double C24987 = C13131 * C1289;
    const double C13162 = C13126 * C140;
    const double C13153 = C13126 * C139;
    const double C13149 = C13126 * C128;
    const double C13146 = C13126 * C138;
    const double C13142 = C13126 * C126;
    const double C13137 = C13126 * C137;
    const double C13133 = C13126 * C124;
    const double C13331 = C13126 * C326;
    const double C13327 = C13126 * C308;
    const double C13323 = C13126 * C328;
    const double C13316 = C13126 * C325;
    const double C13312 = C13126 * C306;
    const double C13509 = C13126 * C513;
    const double C13505 = C13126 * C495;
    const double C13501 = C13126 * C515;
    const double C13497 = C13126 * C499;
    const double C13494 = C13126 * C512;
    const double C13490 = C13126 * C493;
    const double C13995 = C13126 * C947;
    const double C24528 = C13126 * C514;
    const double C24524 = C13126 * C497;
    const double C24519 = C13126 * C511;
    const double C24515 = C13126 * C491;
    const double C24990 = C13126 * C946;
    const double C24986 = C13126 * C936;
    const double C26231 = C13126 * C2014;
    const double C26227 = C13126 * C2002;
    const double C4727 =
        (((0 - (C29679 * C29680) / C29681) * ae) / C29681 - (0 * be) / C29685) /
            (2 * C29681) +
        ((C29679 * (((C30788 - (C29679 * 2 * C29686) / C29681) * ae) / C29681 -
                    C29680 / C29685) +
          C13126) *
         ae) /
            C29681 +
        (0 * ae) / C29681 - C29686 / C29683;
    const double C8893 =
        (((0 - (C29698 * C29699) / C29681) * ae) / C29681 - (0 * be) / C29685) /
            (2 * C29681) +
        ((C29698 * (((C30801 - (C29698 * 2 * C29701) / C29681) * ae) / C29681 -
                    C29699 / C29685) +
          C18740) *
         ae) /
            C29681 +
        (0 * ae) / C29681 - C29701 / C29683;
    const double C141 =
        (4 * (2 * C29728 * C29739 + C29728 * C29746) +
         C29728 * (3 * C29746 +
                   C29728 * (2 * C29728 * C29744 +
                             C29728 * (C29744 + std::pow(C29734, 7) * bs[7] *
                                                    C29726 * C29736)))) /
        C29683;
    const double C329 = (C29732 + C29739 * C29736 + be * C29721 * C29775 +
                         C29721 * (be * C29775 + C29721 * C29746)) /
                        C29683;
    const double C330 = (be * (2 * C29770 + C29728 * C29775) +
                         C29721 * (2 * C29728 * C29739 + C29728 * C29746)) /
                        C29683;
    const double C131 = (3 * (C29766 + C29769 * C29736) +
                         C29728 * (2 * C29770 + C29728 * C29775)) /
                        C29681;
    const double C315 = (C29766 + C29769 * C29736 + C29775 * C29855) / C29681;
    const double C317 = (C29721 * (2 * C29770 + C29728 * C29775)) / C29681;
    const double C502 =
        (C29766 + C29769 * C29736 + C29720 * (C29720 * C29775 + C30195 * ae) +
         C29720 * C30195 * ae) /
        C29681;
    const double C504 = (C29720 * (2 * C29770 + C29728 * C29775) +
                         (2 * C30191 + C29728 * C30195) * ae) /
                        C29681;
    const double C941 =
        (C29720 * C29721 * C29775 + C29721 * C30195 * ae) / C29681;
    const double C1163 =
        (2 * C29721 * C29775 + C29721 * (C29775 + C29783 * C29855)) / C29681;
    const double C29864 = C29861 + C29862;
    const double C1298 =
        (C29721 * C29770 + C29720 * (C29720 * C29860 + C30257 * ae) +
         C29720 * C30257 * ae) /
        C29681;
    const double C1434 = C30788 * C1171;
    const double C13325 = C13127 * C1171;
    const double C14516 = C13126 * C1171;
    const double C30314 = C30310 + C30311;
    const double C1433 = C113 * C1161;
    const double C13326 = C13131 * C1161;
    const double C14515 = C13130 * C1161;
    const double C1173 =
        (3 * (C29732 + be * C29852 + C29721 * C29856) +
         be * (2 * C29852 + C29721 * C29858) +
         C29721 * (2 * C29856 + be * C29858 +
                   C29721 * (C29739 + be * C29721 * C29773 +
                             C29721 * (be * C29773 + C29721 * C29744)))) /
        C29683;
    const double C1165 = (3 * (C29766 + C29769 * C29855) +
                          C29721 * (2 * C29852 + C29721 * C29858)) /
                         C29681;
    const double C1308 =
        (C29766 + C29769 * C29855 + C29720 * (C29720 * C29858 + C30254 * ae) +
         C29720 * C30254 * ae) /
        C29681;
    const double C1698 = (C29720 * (2 * C29852 + C29721 * C29858) +
                          (2 * C30252 + C29721 * C30254) * ae) /
                         C29681;
    const double C29974 = C29721 * C29970;
    const double C29979 = 2 * C29970;
    const double C30066 = C29720 * C29970;
    const double C29973 = C29739 + C29969;
    const double C30369 = C30365 + C30366;
    const double C30394 = C29720 * C30390;
    const double C30401 = 2 * C30390;
    const double C516 = (C29732 + C29739 * C29736 + ae * C29720 * C29814 +
                         C29720 * (ae * C29814 + C29720 * C29746)) /
                        C29683;
    const double C517 = (ae * (2 * C29809 + C29728 * C29814) +
                         C29720 * (2 * C29728 * C29739 + C29728 * C29746)) /
                        C29683;
    const double C948 =
        (ae * (C29721 * C29814 +
               (C29764 * C29763 + C29730 * C29729 * C29736) * be) +
         C29720 * (be * C29775 + C29721 * C29746)) /
        C29683;
    const double C130 = (3 * (C29805 + C29808 * C29736) +
                         C29728 * (2 * C29809 + C29728 * C29814)) /
                        C29681;
    const double C314 =
        (C29805 + C29808 * C29736 + C29721 * (C29721 * C29814 + C30195 * be) +
         C29721 * C30195 * be) /
        C29681;
    const double C316 = (C29721 * (2 * C29809 + C29728 * C29814) +
                         (2 * C30191 + C29728 * C30195) * be) /
                        C29681;
    const double C501 = (C29805 + C29808 * C29736 + C29814 * C29938) / C29681;
    const double C503 = (C29720 * (2 * C29809 + C29728 * C29814)) / C29681;
    const double C940 = (C29720 * (C29721 * C29814 + C30195 * be)) / C29681;
    const double C2006 =
        (2 * C29720 * C29814 + C29720 * (C29814 + C29822 * C29938)) / C29681;
    const double C29882 = C29879 + C29881;
    const double C29947 = C29944 + C29945;
    const double C2288 = C30788 * C2015;
    const double C15562 = C13126 * C2015;
    const double C2286 = C30788 * C2004;
    const double C15558 = C13126 * C2004;
    const double C29898 = C29721 * C29896;
    const double C30001 = 2 * C29896;
    const double C30065 = ae * C29896;
    const double C30064 = C29720 * C29896;
    const double C2017 =
        (3 * (C29732 + ae * C29935 + C29720 * C29939) +
         ae * (2 * C29935 + C29720 * C29941) +
         C29720 * (2 * C29939 + ae * C29941 +
                   C29720 * (C29739 + ae * C29720 * C29812 +
                             C29720 * (ae * C29812 + C29720 * C29744)))) /
        C29683;
    const double C2008 = (3 * (C29805 + C29808 * C29938) +
                          C29720 * (2 * C29935 + C29720 * C29941)) /
                         C29681;
    const double C30104 = C29720 * C30100;
    const double C30109 = 2 * C30100;
    const double C30103 = C29739 + C30099;
    const double C29887 = C29886 * be;
    const double C30201 = C29728 * C29886;
    const double C30207 = 3 * C29886;
    const double C30262 = C29721 * C29886;
    const double C30320 = C29720 * C29886;
    const double C30319 = C29886 * ae;
    const double C1306 = (C29720 * (C29775 + C29783 * C29855) +
                          (C30195 + C29886 * C29855) * ae) /
                         C29681;
    const double C2007 =
        (2 * (C29720 * C29775 + C30195 * ae) +
         C29720 * (C29775 + C29720 * (C29720 * C29783 + C29886 * ae) +
                   C29720 * C29886 * ae) +
         (C30195 + C29886 * C29938) * ae) /
        C29681;
    const double C1154 =
        2 * C29721 * C30195 + C29721 * (C30195 + C29886 * C29855);
    const double C1291 = C29720 * (C30195 + C29886 * C29855);
    const double C1998 =
        2 * C29720 * C30195 + C29720 * (C30195 + C29886 * C29938);
    const double C29907 = C29905 * be;
    const double C30352 = 2 * C29905;
    const double C30426 = C29720 * C29905;
    const double C30425 = C29905 * ae;
    const double C2396 =
        (2 * (C29720 * C29860 + C30257 * ae) +
         C29720 * (C29860 + C29720 * (C29720 * C30042 + C29905 * ae) +
                   C29720 * C29905 * ae) +
         (C30257 + C29905 * C29938) * ae) /
        C29681;
    const double C2391 =
        2 * C29720 * C30257 + C29720 * (C30257 + C29905 * C29938);
    const double C29906 = C29902 + C29904;
    const double C30259 = C29880 + C30258;
    const double C30315 = C29880 + C30313;
    const double C30439 = 2 * C30434;
    const double C30437 = C30434 * ae;
    const double C30436 = C30432 + C30433;
    const double C30010 = C30008 * be;
    const double C30337 = C29721 * C30008;
    const double C30341 = 3 * C30008;
    const double C30374 = C29720 * C30008;
    const double C30373 = C30008 * ae;
    const double C6234 =
        (2 * (C29720 * C29858 + C30254 * ae) +
         C29720 * (C29858 + C29720 * (C29720 * C29972 + C30008 * ae) +
                   C29720 * C30008 * ae) +
         (C30254 + C30008 * C29938) * ae) /
        C29681;
    const double C6230 =
        2 * C29720 * C30254 + C29720 * (C30254 + C30008 * C29938);
    const double C30370 = C29895 + C30368;
    const double C30454 = 2 * C30449;
    const double C30452 = C30449 * ae;
    const double C30451 = C30447 + C30448;
    const double C30009 = C29721 * C30006;
    const double C30019 = 2 * C30006;
    const double C30067 = C30006 * C29938;
    const double C30153 = ae * C30006;
    const double C30152 = C29720 * C30006;
    const double C30395 = C29720 * C30392;
    const double C30407 = 3 * C30392;
    const double C30405 = C30392 * ae;
    const double C30412 = C29720 * C30408;
    const double C29756 = C29728 * C29755;
    const double C29869 = C29721 * C29755;
    const double C29952 = C29720 * C29755;
    const double C1172 = (2 * (be * C29775 + C29721 * C29746) +
                          be * (C29775 + C29783 * std::pow(C29721, 2)) +
                          C29721 * (C29746 + be * C29721 * C29783 +
                                    C29721 * (be * C29783 + C29721 * C29755))) /
                         C29683;
    const double C2016 = (2 * (ae * C29814 + C29720 * C29746) +
                          ae * (C29814 + C29822 * std::pow(C29720, 2)) +
                          C29720 * (C29746 + ae * C29720 * C29822 +
                                    C29720 * (ae * C29822 + C29720 * C29755))) /
                         C29683;
    const double C29992 = C29721 * C29988;
    const double C30154 = C29720 * C29988;
    const double C30051 = C30043 + C30047;
    const double C30143 = C30139 + C30140;
    const double C30122 = C29720 * C30118;
    const double C29795 = C29728 * C29794;
    const double C29870 = C29794 * C29855;
    const double C29993 = C29721 * C29990;
    const double C30052 = C29789 + C30049;
    const double C29834 = C29728 * C29833;
    const double C29912 = C29721 * C29833;
    const double C29953 = C29833 * C29938;
    const double C30028 = C29721 * C30025;
    const double C30155 = C30025 * C29938;
    const double C30085 = C30083 + C30080;
    const double C30145 = C29828 + C30141;
    const double C30123 = C29720 * C30120;
    const double C165 = C150 - C151;
    const double C167 = C154 - C155;
    const double C360 = C341 - C342;
    const double C19040 = C524 - C525;
    const double C19038 = C525 - C524;
    const double C9132 = C9123 - C9124;
    const double C164 = C148 - C149;
    const double C19039 = C522 - C523;
    const double C19037 = C523 - C522;
    const double C9131 = C9121 - C9122;
    const double C1313 = (be * C29766 + C29721 * C29732 + ae * C29720 * C29877 +
                          C29720 * (ae * C29877 + C29720 * C29856)) /
                         C29683;
    const double C1316 =
        (ae * (C29805 + C29721 * C29877 + C29721 * C29875 * be) +
         C29720 * (C29732 + be * C29852 + C29721 * C29856)) /
        C29683;
    const double C2399 =
        (2 * (ae * C29877 + C29720 * C29856) + ae * (C29877 + C29896 * C29938) +
         C29720 * (C29856 + ae * C29720 * C29896 +
                   C29720 * (ae * C29896 +
                             C29720 * (be * C29773 + C29721 * C29744)))) /
        C29683;
    const double C1158 =
        (2 * (C29721 * C29805 + C30188 * be) +
         C29721 * (C29805 + C29721 * C29877 + C29721 * C29875 * be) +
         (C30188 + C29875 * C29855) * be) /
        C29681;
    const double C1295 =
        (C29721 * C29805 + C30188 * be + C29877 * C29938) / C29681;
    const double C1301 =
        (C29720 * (C29805 + C29721 * C29877 + C30252 * be)) / C29681;
    const double C2393 =
        (2 * C29720 * C29877 + C29720 * (C29877 + C29896 * C29938)) / C29681;
    const double C343 = C30788 * C312;
    const double C13319 = C13126 * C312;
    const double C13314 = C13127 * C312;
    const double C533 = C113 * C500;
    const double C13502 = C13130 * C500;
    const double C952 = C30788 * C938;
    const double C13492 = C13127 * C938;
    const double C13991 = C13126 * C938;
    const double C955 = C113 * C939;
    const double C13495 = C13131 * C939;
    const double C13996 = C13130 * C939;
    const double C1591 = C113 * C1304;
    const double C13998 = C13131 * C1304;
    const double C14717 = C13130 * C1304;
    const double C2287 = C113 * C2005;
    const double C15561 = C13130 * C2005;
    const double C344 = C113 * C298;
    const double C13320 = C13130 * C298;
    const double C13313 = C13131 * C298;
    const double C531 = C113 * C485;
    const double C13498 = C13130 * C485;
    const double C953 = C113 * C932;
    const double C13491 = C13131 * C932;
    const double C13992 = C13130 * C932;
    const double C1431 = C113 * C1153;
    const double C13322 = C13131 * C1153;
    const double C14511 = C13130 * C1153;
    const double C2171 = C113 * C1287;
    const double C13500 = C13131 * C1287;
    const double C15419 = C13130 * C1287;
    const double C1589 = C113 * C1290;
    const double C13994 = C13131 * C1290;
    const double C14713 = C13130 * C1290;
    const double C2285 = C113 * C1997;
    const double C15557 = C13130 * C1997;
    const double C157 = C113 * C119;
    const double C13157 = C13130 * C119;
    const double C348 = C113 * C299;
    const double C13335 = C13130 * C299;
    const double C13330 = C13131 * C299;
    const double C352 = C113 * C300;
    const double C13152 = C13131 * C300;
    const double C13651 = C13130 * C300;
    const double C535 = C113 * C486;
    const double C13513 = C13130 * C486;
    const double C539 = C113 * C487;
    const double C13789 = C13130 * C487;
    const double C957 = C113 * C933;
    const double C13508 = C13131 * C933;
    const double C13999 = C13130 * C933;
    const double C9481 = C113 * C1296;
    const double C24529 = C13131 * C1296;
    const double C25372 = C13130 * C1296;
    const double C9770 = C113 * C2394;
    const double C26234 = C13131 * C2394;
    const double C26701 = C13130 * C2394;
    const double C9479 = C113 * C1286;
    const double C24525 = C13131 * C1286;
    const double C25368 = C13130 * C1286;
    const double C9768 = C113 * C2390;
    const double C26230 = C13131 * C2390;
    const double C26697 = C13130 * C2390;
    const double C9776 = C113 * C1292;
    const double C25383 = C13130 * C1292;
    const double C25370 = C13131 * C1292;
    const double C10131 = C113 * C1694;
    const double C25378 = C13131 * C1694;
    const double C25845 = C13130 * C1694;
    const double C2009 =
        (3 * (C29766 + C29720 * C30306 + C30304 * ae) +
         C29720 * (2 * C30306 +
                   C29720 * (C29769 + C29720 * (C29720 * C29773 + C29844 * ae) +
                             C29720 * C29844 * ae) +
                   C30307 * ae) +
         (2 * C30304 + C29720 * C30307) * ae) /
        C29681;
    const double C10432 = C113 * C1999;
    const double C26235 = C13130 * C1999;
    const double C547 = C528 - C529;
    const double C19044 = C529 - C528;
    const double C10430 = C9127 - C9128;
    const double C166 = C152 - C153;
    const double C359 = C339 - C340;
    const double C546 = C526 - C527;
    const double C19043 = C527 - C526;
    const double C10429 = C9125 - C9126;
    const double C29785 = C29780 + C29784;
    const double C1167 = (3 * (C29770 + C29778 * C29855) +
                          C29721 * (2 * C29860 + C29721 * C29865)) /
                         C29681;
    const double C30050 = C29748 + C30046;
    const double C29977 = C29971 + C29975;
    const double C29824 = C29819 + C29823;
    const double C2010 = (3 * (C29809 + C29817 * C29938) +
                          C29720 * (2 * C29943 + C29720 * C29948)) /
                         C29681;
    const double C30146 = C29748 + C30142;
    const double C30107 = C30101 + C30105;
    const double C29919 = C29917 * be;
    const double C29927 = C29925 + C29926;
    const double C30264 = C29886 + C30263;
    const double C30323 = C29886 + C30321;
    const double C30032 = C30024 + C30030;
    const double C30377 = C30008 + C30375;
    const double C30456 = C29720 * C30453;
    const double C30082 = C30060 * be;
    const double C30353 = C29721 * C30060;
    const double C30429 = C29905 + C30427;
    const double C30441 = C29720 * C30438;
    const double C30415 = C30411 + C30413;
    const double C30581 = C30580 / C30571;
    const double C30879 = 2 * C30845;
    const double C30590 = C30589 / C30568;
    const double C30883 = C30849 / C30586;
    const double C30908 = C30843 - C30878;
    const double C2608 = -C30878;
    const double C30922 = C30907 + C30578;
    const double C30663 = C30662 / C30571;
    const double C30887 = 2 * C30854;
    const double C30670 = C30669 / C30568;
    const double C30897 = C30863 / C30586;
    const double C30916 = C30857 - C30894;
    const double C2500 = -C30894;
    const double C30925 = C30912 + C30659;
    const double C30705 = C30704 / C30571;
    const double C30890 = 2 * C30856;
    const double C30712 = C30711 / C30568;
    const double C30903 = C30869 / C30586;
    const double C30919 = C30858 - C30900;
    const double C3262 = -C30900;
    const double C30926 = C30914 + C30701;
    const double C163 = C30788 * C141;
    const double C349 = C30788 * C329;
    const double C13340 = C13126 * C329;
    const double C13333 = C13127 * C329;
    const double C353 = C30788 * C330;
    const double C13155 = C13127 * C330;
    const double C13656 = C13126 * C330;
    const double C159 = C113 * C131;
    const double C13161 = C13130 * C131;
    const double C350 = C113 * C315;
    const double C13339 = C13130 * C315;
    const double C13334 = C13131 * C315;
    const double C354 = C113 * C317;
    const double C13156 = C13131 * C317;
    const double C13655 = C13130 * C317;
    const double C537 = C113 * C502;
    const double C13517 = C13130 * C502;
    const double C541 = C113 * C504;
    const double C13793 = C13130 * C504;
    const double C959 = C113 * C941;
    const double C13512 = C13131 * C941;
    const double C14003 = C13130 * C941;
    const double C1437 = C113 * C1163;
    const double C13341 = C13131 * C1163;
    const double C1174 =
        (3 * (C29849 + be * C29860 + C29721 * C29864) +
         be * (2 * C29860 + C29721 * C29865) +
         C29721 *
             (2 * C29864 + be * C29865 +
              C29721 * (C29748 + be * C29721 * C29789 +
                        C29721 * (be * C29789 + C29721 * C29728 * C29753)))) /
        C29683;
    const double C2173 = C113 * C1298;
    const double C13504 = C13131 * C1298;
    const double C15423 = C13130 * C1298;
    const double C9778 = C113 * C1308;
    const double C25387 = C13130 * C1308;
    const double C25374 = C13131 * C1308;
    const double C10133 = C113 * C1698;
    const double C25382 = C13131 * C1698;
    const double C25849 = C13130 * C1698;
    const double C29986 = C29979 + C29980;
    const double C29976 = C29973 + C29974;
    const double C30396 = C29769 + C30394;
    const double C536 = C30788 * C516;
    const double C13518 = C13126 * C516;
    const double C540 = C30788 * C517;
    const double C13794 = C13126 * C517;
    const double C958 = C30788 * C948;
    const double C13511 = C13127 * C948;
    const double C14004 = C13126 * C948;
    const double C156 = C30788 * C130;
    const double C13158 = C13126 * C130;
    const double C347 = C30788 * C314;
    const double C13336 = C13126 * C314;
    const double C13329 = C13127 * C314;
    const double C351 = C30788 * C316;
    const double C13151 = C13127 * C316;
    const double C13652 = C13126 * C316;
    const double C534 = C30788 * C501;
    const double C13514 = C13126 * C501;
    const double C538 = C30788 * C503;
    const double C13790 = C13126 * C503;
    const double C956 = C30788 * C940;
    const double C13507 = C13127 * C940;
    const double C14000 = C13126 * C940;
    const double C2290 = C30788 * C2006;
    const double C1314 = (be * C29770 + C29721 * C29849 + ae * C29720 * C29882 +
                          C29720 * (ae * C29882 + C29720 * C29864)) /
                         C29683;
    const double C1317 =
        (ae * (C29809 + C29721 * C29882 + C29721 * C29880 * be) +
         C29720 * (C29849 + be * C29860 + C29721 * C29864)) /
        C29683;
    const double C1160 =
        (2 * (C29721 * C29809 + C30191 * be) +
         C29721 * (C29809 + C29721 * C29882 + C29721 * C29880 * be) +
         (C30191 + C29880 * C29855) * be) /
        C29681;
    const double C1297 =
        (C29721 * C29809 + C30191 * be + C29882 * C29938) / C29681;
    const double C1303 =
        (C29720 * (C29809 + C29721 * C29882 + C30257 * be)) / C29681;
    const double C2018 =
        (3 * (C29849 + ae * C29943 + C29720 * C29947) +
         ae * (2 * C29943 + C29720 * C29948) +
         C29720 *
             (2 * C29947 + ae * C29948 +
              C29720 * (C29748 + ae * C29720 * C29828 +
                        C29720 * (ae * C29828 + C29720 * C29728 * C29753)))) /
        C29683;
    const double C29899 = C29808 + C29898;
    const double C30068 = C30065 + C30066;
    const double C10433 = C30788 * C2017;
    const double C26240 = C13126 * C2017;
    const double C10431 = C30788 * C2008;
    const double C26236 = C13126 * C2008;
    const double C30116 = C30109 + C30110;
    const double C30106 = C30103 + C30104;
    const double C29888 = C29884 + C29887;
    const double C30202 = C30200 + C30201;
    const double C1300 =
        (C29721 * C29775 + C29720 * (C29720 * C29867 + C30262 * ae) +
         C29720 * C30262 * ae) /
        C29681;
    const double C2398 =
        (2 * (C29720 * C29867 + C30262 * ae) +
         C29720 * (C29867 + C29720 * (C29720 * C29721 * C29794 + C29917 * ae) +
                   C29720 * C29917 * ae) +
         (C30262 + C29917 * C29938) * ae) /
        C29681;
    const double C1288 = C29721 * C30195 + C30262 * C29938;
    const double C2392 =
        2 * C29720 * C30262 + C29720 * (C30262 + C29917 * C29938);
    const double C30322 = C30318 + C30319;
    const double C1595 = C113 * C1306;
    const double C14005 = C13131 * C1306;
    const double C2291 = C113 * C2007;
    const double C1435 = C113 * C1154;
    const double C13337 = C13131 * C1154;
    const double C1593 = C113 * C1291;
    const double C14001 = C13131 * C1291;
    const double C2289 = C113 * C1998;
    const double C30428 = C30424 + C30425;
    const double C10595 = C113 * C2396;
    const double C15563 = C13131 * C2396;
    const double C10593 = C113 * C2391;
    const double C15559 = C13131 * C2391;
    const double C29908 = C29721 * C29906;
    const double C30078 = 2 * C29906;
    const double C30132 = ae * C29906;
    const double C30131 = C29720 * C29906;
    const double C2400 =
        (2 * (ae * C29882 + C29720 * C29864) + ae * (C29882 + C29906 * C29938) +
         C29720 *
             (C29864 + ae * C29720 * C29906 +
              C29720 * (ae * C29906 +
                        C29720 * (be * C29789 + C29721 * C29728 * C29753)))) /
        C29683;
    const double C2395 =
        (2 * C29720 * C29882 + C29720 * (C29882 + C29906 * C29938)) / C29681;
    const double C1310 =
        (C29770 + C29778 * C29855 + C29720 * (C29720 * C29865 + C30259 * ae) +
         C29720 * C30259 * ae) /
        C29681;
    const double C1700 = (C29720 * (2 * C29860 + C29721 * C29865) +
                          (2 * C30257 + C29721 * C30259) * ae) /
                         C29681;
    const double C1156 = 3 * (C30191 + C29880 * C29855) +
                         C29721 * (2 * C30257 + C29721 * C30259);
    const double C1293 = C30191 + C29880 * C29855 + C30259 * C29938;
    const double C1695 = C29720 * (2 * C30257 + C29721 * C30259);
    const double C6490 =
        2 * C29720 * C30259 + C29720 * (C30259 + C30060 * C29938);
    const double C2011 =
        (3 * (C29770 + C29720 * C30314 + C30312 * ae) +
         C29720 * (2 * C30314 +
                   C29720 * (C29778 + C29720 * (C29720 * C29789 + C29903 * ae) +
                             C29720 * C29903 * ae) +
                   C30315 * ae) +
         (2 * C30312 + C29720 * C30315) * ae) /
        C29681;
    const double C2000 = 3 * (C30191 + C29880 * C29938) +
                         C29720 * (2 * C30312 + C29720 * C30315);
    const double C30440 = C29720 * C30436;
    const double C30338 = C30336 + C30337;
    const double C30376 = C30372 + C30373;
    const double C9781 = C113 * C6234;
    const double C26703 = C13131 * C6234;
    const double C9779 = C113 * C6230;
    const double C26699 = C13131 * C6230;
    const double C6237 =
        (3 * (C29852 + C29720 * C30369 + C30367 * ae) +
         C29720 * (2 * C30369 +
                   C29720 * (C29965 + C29720 * (C29720 * C29981 + C30004 * ae) +
                             C29720 * C30004 * ae) +
                   C30370 * ae) +
         (2 * C30367 + C29720 * C30370) * ae) /
        C29681;
    const double C6231 = 3 * (C30252 + C29895 * C29938) +
                         C29720 * (2 * C30367 + C29720 * C30370);
    const double C30455 = C29720 * C30451;
    const double C30011 = C29812 + C30009;
    const double C30069 = C29896 + C30067;
    const double C30158 = 2 * C30152;
    const double C30156 = ae * C30152;
    const double C30397 = C30393 + C30395;
    const double C30414 = C29773 + C30412;
    const double C29757 = C29751 + C29756;
    const double C29871 = C29868 + C29869;
    const double C29954 = C29951 + C29952;
    const double C1438 = C30788 * C1172;
    const double C13342 = C13127 * C1172;
    const double C2292 = C30788 * C2016;
    const double C29994 = C29991 + C29992;
    const double C30157 = C30153 + C30154;
    const double C30053 = C29721 * C30051;
    const double C30133 = C29720 * C30051;
    const double C30147 = C29720 * C30143;
    const double C30124 = C30121 + C30122;
    const double C29796 = C29791 + C29795;
    const double C29872 = C29783 + C29870;
    const double C29995 = C29989 + C29993;
    const double C30054 = C29721 * C30052;
    const double C6492 =
        (2 * (C29720 * C29865 + C30259 * ae) +
         C29720 * (C29865 + C29720 * (C29720 * C30052 + C30060 * ae) +
                   C29720 * C30060 * ae) +
         (C30259 + C30060 * C29938) * ae) /
        C29681;
    const double C29835 = C29830 + C29834;
    const double C29918 = C29912 + C29916;
    const double C29955 = C29822 + C29953;
    const double C30031 = C29820 + C30028;
    const double C30159 = C30006 + C30155;
    const double C30086 = C29721 * C30085;
    const double C30134 = C30085 * C29938;
    const double C30148 = C29720 * C30145;
    const double C30125 = C30119 + C30123;
    const double C171 = C165 * C30801;
    const double C173 = C167 * C30801;
    const double C364 = C360 * C30801;
    const double C170 = C164 * C114;
    const double C9482 = C30788 * C1313;
    const double C24530 = C13127 * C1313;
    const double C25371 = C13126 * C1313;
    const double C9773 = C30788 * C1316;
    const double C24992 = C13127 * C1316;
    const double C25379 = C13126 * C1316;
    const double C9769 = C30788 * C2399;
    const double C26233 = C13127 * C2399;
    const double C26702 = C13126 * C2399;
    const double C9480 = C30788 * C1295;
    const double C24526 = C13127 * C1295;
    const double C25367 = C13126 * C1295;
    const double C9771 = C30788 * C1301;
    const double C24988 = C13127 * C1301;
    const double C25375 = C13126 * C1301;
    const double C9767 = C30788 * C2393;
    const double C26229 = C13127 * C2393;
    const double C26698 = C13126 * C2393;
    const double C9130 = C533 - C532;
    const double C19042 = C532 - C533;
    const double C19506 = C954 - C955;
    const double C19504 = C955 - C954;
    const double C10700 = C2288 - C2287;
    const double C21046 = C2287 - C2288;
    const double C9129 = C531 - C530;
    const double C19041 = C530 - C531;
    const double C19505 = C952 - C953;
    const double C19503 = C953 - C952;
    const double C10699 = C2286 - C2285;
    const double C21045 = C2285 - C2286;
    const double C10434 = C113 * C2009;
    const double C26239 = C13130 * C2009;
    const double C551 = C547 * C30801;
    const double C172 = C166 * C114;
    const double C363 = C359 * C114;
    const double C550 = C546 * C114;
    const double C133 = (4 * (2 * C29770 + C29728 * C29775) +
                         C29728 * (3 * C29775 + C29728 * C29785)) /
                        C29681;
    const double C319 =
        (2 * C29770 + C29728 * C29775 + C29785 * C29855) / C29681;
    const double C321 = (C29721 * (3 * C29775 + C29728 * C29785)) / C29681;
    const double C14517 = C13131 * C1167;
    const double C5467 = (4 * (2 * C29852 + C29721 * C29858) +
                          C29721 * (3 * C29858 + C29721 * C29977)) /
                         C29681;
    const double C132 = (4 * (2 * C29809 + C29728 * C29814) +
                         C29728 * (3 * C29814 + C29728 * C29824)) /
                        C29681;
    const double C505 =
        (2 * C29809 + C29728 * C29814 + C29824 * C29938) / C29681;
    const double C507 = (C29720 * (3 * C29814 + C29728 * C29824)) / C29681;
    const double C10702 = C30788 * C2010;
    const double C10422 = (4 * (2 * C29935 + C29720 * C29941) +
                           C29720 * (3 * C29941 + C29720 * C30107)) /
                          C29681;
    const double C29958 = C29927 * be;
    const double C30208 = C29728 * C29927;
    const double C30326 = C29721 * C29927;
    const double C1157 = 3 * (C30195 + C29886 * C29855) +
                         C29721 * (2 * C30262 + C29721 * C30264);
    const double C1294 = C30195 + C29886 * C29855 + C30264 * C29938;
    const double C1696 = C29720 * (2 * C30262 + C29721 * C30264);
    const double C2001 = 3 * (C30195 + C29886 * C29938) +
                         C29720 * (2 * C30320 + C29720 * C30323);
    const double C30034 = C30032 * be;
    const double C30342 = C29721 * C30032;
    const double C6232 = 3 * (C30254 + C30008 * C29938) +
                         C29720 * (2 * C30374 + C29720 * C30377);
    const double C30458 = C30454 + C30456;
    const double C30354 = C30352 + C30353;
    const double C10586 = 3 * (C30257 + C29905 * C29938) +
                          C29720 * (2 * C30426 + C29720 * C30429);
    const double C30443 = C30439 + C30441;
    const double C30417 = C29720 * C30415;
    const double C30582 = C30578 - C30581;
    const double C30909 = C30879 / C30568;
    const double C30591 = C30587 - C30590;
    const double C30923 = C30908 / C30572;
    const double C30664 = C30659 - C30663;
    const double C30913 = C30887 / C30568;
    const double C30671 = C30667 - C30670;
    const double C30927 = C30916 / C30572;
    const double C30706 = C30701 - C30705;
    const double C30915 = C30890 / C30568;
    const double C30713 = C30709 - C30712;
    const double C30929 = C30919 / C30572;
    const double C169 = C158 - C159;
    const double C362 = C349 - C350;
    const double C665 = C353 - C354;
    const double C14518 = C13127 * C1174;
    const double C5470 =
        (4 * (2 * C29856 + be * C29858 + C29721 * C29976) +
         be * (3 * C29858 + C29721 * C29977) +
         C29721 *
             (3 * C29976 + be * C29977 +
              C29721 * (2 * C29970 + be * C29972 +
                        C29721 * (C29744 + be * C29721 * C29781 +
                                  C29721 * (be * C29781 + C29721 * C29753))))) /
        C29683;
    const double C30398 = C30396 + C30391;
    const double C549 = C536 - C537;
    const double C19046 = C537 - C536;
    const double C778 = C540 - C541;
    const double C19308 = C541 - C540;
    const double C965 = C958 - C959;
    const double C19508 = C959 - C958;
    const double C168 = C156 - C157;
    const double C361 = C347 - C348;
    const double C664 = C351 - C352;
    const double C548 = C534 - C535;
    const double C19045 = C535 - C534;
    const double C777 = C538 - C539;
    const double C19307 = C539 - C538;
    const double C964 = C956 - C957;
    const double C19507 = C957 - C956;
    const double C2174 = C30788 * C1314;
    const double C13503 = C13127 * C1314;
    const double C15424 = C13126 * C1314;
    const double C1592 = C30788 * C1317;
    const double C13997 = C13127 * C1317;
    const double C14718 = C13126 * C1317;
    const double C1432 = C30788 * C1160;
    const double C13321 = C13127 * C1160;
    const double C14512 = C13126 * C1160;
    const double C2172 = C30788 * C1297;
    const double C13499 = C13127 * C1297;
    const double C15420 = C13126 * C1297;
    const double C1590 = C30788 * C1303;
    const double C13993 = C13127 * C1303;
    const double C14714 = C13126 * C1303;
    const double C10704 = C30788 * C2018;
    const double C29900 = C29899 + C29897;
    const double C10439 = C10431 - C10432;
    const double C10426 =
        (4 * (2 * C29939 + ae * C29941 + C29720 * C30106) +
         ae * (3 * C29941 + C29720 * C30107) +
         C29720 *
             (3 * C30106 + ae * C30107 +
              C29720 * (2 * C30100 + ae * C30102 +
                        C29720 * (C29744 + ae * C29720 * C29820 +
                                  C29720 * (ae * C29820 + C29720 * C29753))))) /
        C29683;
    const double C1162 =
        (2 * (C29721 * C29814 + C30195 * be) +
         C29721 * (C29814 + C29721 * C29888 + C29721 * C29886 * be) +
         (C30195 + C29886 * C29855) * be) /
        C29681;
    const double C1299 =
        (C29721 * C29814 + C30195 * be + C29888 * C29938) / C29681;
    const double C1305 =
        (C29720 * (C29814 + C29721 * C29888 + C30262 * be)) / C29681;
    const double C318 =
        (2 * C29809 + C29728 * C29814 +
         C29721 * (C29721 * C29824 + C30202 * be) + C29721 * C30202 * be) /
        C29681;
    const double C320 = (C29721 * (3 * C29814 + C29728 * C29824) +
                         (3 * C30195 + C29728 * C30202) * be) /
                        C29681;
    const double C506 =
        (2 * C29770 + C29728 * C29775 +
         C29720 * (C29720 * C29785 + C30202 * ae) + C29720 * C30202 * ae) /
        C29681;
    const double C508 = (C29720 * (3 * C29775 + C29728 * C29785) +
                         (3 * C30195 + C29728 * C30202) * ae) /
                        C29681;
    const double C942 = (C29720 * (C29721 * C29824 + C30202 * be)) / C29681;
    const double C943 =
        (C29720 * C29721 * C29785 + C29721 * C30202 * ae) / C29681;
    const double C120 = 4 * (2 * C30191 + C29728 * C30195) +
                        C29728 * (3 * C30195 + C29728 * C30202);
    const double C301 = 2 * C30191 + C29728 * C30195 + C30202 * C29855;
    const double C302 = C29721 * (3 * C30195 + C29728 * C30202);
    const double C488 = 2 * C30191 + C29728 * C30195 + C30202 * C29938;
    const double C489 = C29720 * (3 * C30195 + C29728 * C30202);
    const double C934 = C29720 * C29721 * C30202;
    const double C1426 =
        2 * C29721 * C30202 + C29721 * (C30202 + C29927 * C29855);
    const double C1584 = C29720 * (C30202 + C29927 * C29855);
    const double C2280 =
        2 * C29720 * C30202 + C29720 * (C30202 + C29927 * C29938);
    const double C2177 = C113 * C1300;
    const double C13519 = C13131 * C1300;
    const double C2175 = C113 * C1288;
    const double C13515 = C13131 * C1288;
    const double C2013 =
        (3 * (C29775 + C29720 * C30322 + C30320 * ae) +
         C29720 * (2 * C30322 +
                   C29720 * (C29783 + C29720 * (C29720 * C29794 + C29915 * ae) +
                             C29720 * C29915 * ae) +
                   C30323 * ae) +
         (2 * C30320 + C29720 * C30323) * ae) /
        C29681;
    const double C10588 =
        (3 * (C29860 + C29720 * C30428 + C30426 * ae) +
         C29720 * (2 * C30428 +
                   C29720 * (C30042 +
                             C29720 * (C29720 * C29721 * C30045 + C30081 * ae) +
                             C29720 * C30081 * ae) +
                   C30429 * ae) +
         (2 * C30426 + C29720 * C30429) * ae) /
        C29681;
    const double C29909 = C29817 + C29908;
    const double C10596 = C30788 * C2400;
    const double C15564 = C13127 * C2400;
    const double C10594 = C30788 * C2395;
    const double C15560 = C13127 * C2395;
    const double C10031 = C113 * C1310;
    const double C15425 = C13131 * C1310;
    const double C14719 = C13131 * C1700;
    const double C20015 = C113 * C1700;
    const double C14513 = C13131 * C1156;
    const double C10029 = C113 * C1293;
    const double C15421 = C13131 * C1293;
    const double C14715 = C13131 * C1695;
    const double C20013 = C113 * C1695;
    const double C10703 = C113 * C2011;
    const double C10701 = C113 * C2000;
    const double C30442 = C29778 + C30440;
    const double C5586 =
        (2 * C29852 + C29721 * C29858 +
         C29720 * (C29720 * C29977 + C30338 * ae) + C29720 * C30338 * ae) /
        C29681;
    const double C5588 = (C29720 * (3 * C29858 + C29721 * C29977) +
                          (3 * C30254 + C29721 * C30338) * ae) /
                         C29681;
    const double C5464 = 4 * (2 * C30252 + C29721 * C30254) +
                         C29721 * (3 * C30254 + C29721 * C30338);
    const double C5582 = 2 * C30252 + C29721 * C30254 + C30338 * C29938;
    const double C5583 = C29720 * (3 * C30254 + C29721 * C30338);
    const double C6592 =
        2 * C29720 * C30338 + C29720 * (C30338 + C30032 * C29938);
    const double C6238 =
        (3 * (C29858 + C29720 * C30376 + C30374 * ae) +
         C29720 * (2 * C30376 +
                   C29720 * (C29972 + C29720 * (C29720 * C29990 + C30027 * ae) +
                             C29720 * C30027 * ae) +
                   C30377 * ae) +
         (2 * C30374 + C29720 * C30377) * ae) /
        C29681;
    const double C10811 = C113 * C6237;
    const double C26241 = C13131 * C6237;
    const double C10809 = C113 * C6231;
    const double C26237 = C13131 * C6231;
    const double C30457 = C29965 + C30455;
    const double C30012 = C30011 + C30007;
    const double C6240 =
        (3 * (C29856 + ae * C30064 + C29720 * C30068) +
         ae * (2 * C30064 + C29720 * C30069) +
         C29720 * (2 * C30068 + ae * C30069 +
                   C29720 * (C29970 + ae * C29720 * C30006 +
                             C29720 * (ae * C30006 + C29720 * C29988)))) /
        C29683;
    const double C6235 = (3 * (C29877 + C29896 * C29938) +
                          C29720 * (2 * C30064 + C29720 * C30069)) /
                         C29681;
    const double C30160 = C29970 + C30156;
    const double C10420 = 4 * (2 * C30304 + C29720 * C30307) +
                          C29720 * (3 * C30307 + C29720 * C30397);
    const double C30416 = C30414 + C30409;
    const double C142 =
        (5 * (3 * C29746 + C29728 * C29757) +
         C29728 * (4 * C29757 +
                   C29728 * (3 * C29755 +
                             C29728 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C331 =
        (2 * C29728 * C29739 + C29728 * C29746 + be * C29721 * C29785 +
         C29721 * (be * C29785 + C29721 * C29757)) /
        C29683;
    const double C332 = (be * (3 * C29775 + C29728 * C29785) +
                         C29721 * (3 * C29746 + C29728 * C29757)) /
                        C29683;
    const double C518 =
        (2 * C29728 * C29739 + C29728 * C29746 + ae * C29720 * C29824 +
         C29720 * (ae * C29824 + C29720 * C29757)) /
        C29683;
    const double C519 = (ae * (3 * C29814 + C29728 * C29824) +
                         C29720 * (3 * C29746 + C29728 * C29757)) /
                        C29683;
    const double C949 = (ae * (C29721 * C29824 +
                               (2 * C29728 * C29844 +
                                C29728 * (C29844 + C29735 * C29737 * C29736)) *
                                   be) +
                         C29720 * (be * C29785 + C29721 * C29757)) /
                        C29683;
    const double C1315 = (be * C29775 + C29721 * C29746 + ae * C29720 * C29888 +
                          C29720 * (ae * C29888 + C29720 * C29871)) /
                         C29683;
    const double C1318 =
        (ae * (C29814 + C29721 * C29888 + C29721 * C29886 * be) +
         C29720 * (C29746 + be * C29867 + C29721 * C29871)) /
        C29683;
    const double C29996 = C29721 * C29994;
    const double C30073 = C29720 * C29994;
    const double C30161 = C29720 * C30157;
    const double C30055 = C30050 + C30053;
    const double C30135 = C30132 + C30133;
    const double C30149 = C30146 + C30147;
    const double C30126 = C29720 * C30124;
    const double C29797 = C29728 * C29796;
    const double C1429 =
        (2 * (be * C29785 + C29721 * C29757) + be * (C29785 + C29796 * C29855) +
         C29721 * (C29757 + be * C29721 * C29796 +
                   C29721 * (be * C29796 +
                             C29721 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C1428 =
        (2 * C29721 * C29785 + C29721 * (C29785 + C29796 * C29855)) / C29681;
    const double C1586 = (C29720 * (C29785 + C29796 * C29855) +
                          (C30202 + C29927 * C29855) * ae) /
                         C29681;
    const double C2282 =
        (2 * (C29720 * C29785 + C30202 * ae) +
         C29720 * (C29785 + C29720 * (C29720 * C29796 + C29927 * ae) +
                   C29720 * C29927 * ae) +
         (C30202 + C29927 * C29938) * ae) /
        C29681;
    const double C1175 =
        (3 * (C29746 + be * C29867 + C29721 * C29871) +
         be * (2 * C29867 + C29721 * C29872) +
         C29721 * (2 * C29871 + be * C29872 +
                   C29721 * (C29755 + be * C29721 * C29794 +
                             C29721 * (be * C29794 +
                                       C29721 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C1169 = (3 * (C29775 + C29783 * C29855) +
                          C29721 * (2 * C29867 + C29721 * C29872)) /
                         C29681;
    const double C1312 =
        (C29775 + C29783 * C29855 + C29720 * (C29720 * C29872 + C30264 * ae) +
         C29720 * C30264 * ae) /
        C29681;
    const double C1702 = (C29720 * (2 * C29867 + C29721 * C29872) +
                          (2 * C30262 + C29721 * C30264) * ae) /
                         C29681;
    const double C29997 = C29721 * C29995;
    const double C6594 =
        (2 * (C29720 * C29977 + C30338 * ae) +
         C29720 * (C29977 + C29720 * (C29720 * C29995 + C30032 * ae) +
                   C29720 * C30032 * ae) +
         (C30338 + C30032 * C29938) * ae) /
        C29681;
    const double C30056 = C30048 + C30054;
    const double C29836 = C29728 * C29835;
    const double C29957 = C29721 * C29835;
    const double C1587 =
        (ae * (C29824 + C29721 * (C29721 * C29835 + C29927 * be) +
               C29721 * C29927 * be) +
         C29720 * (C29757 + be * C29721 * C29796 +
                   C29721 * (be * C29796 +
                             C29721 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C2283 =
        (2 * (ae * C29824 + C29720 * C29757) + ae * (C29824 + C29835 * C29938) +
         C29720 * (C29757 + ae * C29720 * C29835 +
                   C29720 * (ae * C29835 +
                             C29720 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C2281 =
        (2 * C29720 * C29824 + C29720 * (C29824 + C29835 * C29938)) / C29681;
    const double C29920 = C29721 * C29918;
    const double C2401 =
        (2 * (ae * C29888 + C29720 * C29871) + ae * (C29888 + C29918 * C29938) +
         C29720 * (C29871 + ae * C29720 * C29918 +
                   C29720 * (ae * C29918 +
                             C29720 * (be * C29794 +
                                       C29721 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C2397 =
        (2 * C29720 * C29888 + C29720 * (C29888 + C29918 * C29938)) / C29681;
    const double C2019 =
        (3 * (C29746 + ae * C29950 + C29720 * C29954) +
         ae * (2 * C29950 + C29720 * C29955) +
         C29720 * (2 * C29954 + ae * C29955 +
                   C29720 * (C29755 + ae * C29720 * C29833 +
                             C29720 * (ae * C29833 +
                                       C29720 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C2012 = (3 * (C29814 + C29822 * C29938) +
                          C29720 * (2 * C29950 + C29720 * C29955)) /
                         C29681;
    const double C30033 = C30031 + C30026;
    const double C30162 = C29720 * C30159;
    const double C30087 = C29828 + C30086;
    const double C30136 = C29906 + C30134;
    const double C30150 = C30144 + C30148;
    const double C30127 = C29720 * C30125;
    const double C176 = C170 + C171;
    const double C9766 = C9481 - C9482;
    const double C10808 = C9769 - C9770;
    const double C9765 = C9479 - C9480;
    const double C10807 = C9767 - C9768;
    const double C10440 = C10433 - C10434;
    const double C177 = C172 + C173;
    const double C367 = C363 + C364;
    const double C554 = C550 + C551;
    const double C162 = C113 * C133;
    const double C357 = C113 * C319;
    const double C13657 = C13131 * C319;
    const double C668 = C113 * C321;
    const double C13163 = C13131 * C321;
    const double C161 = C30788 * C132;
    const double C543 = C30788 * C505;
    const double C780 = C30788 * C507;
    const double C10436 = C30788 * C10422;
    const double C30209 = C30207 + C30208;
    const double C2168 =
        (C29721 * C29785 + C29720 * (C29720 * C29721 * C29796 + C30326 * ae) +
         C29720 * C30326 * ae) /
        C29681;
    const double C2166 = C29721 * C30202 + C30326 * C29938;
    const double C30343 = C30341 + C30342;
    const double C10802 = 4 * (2 * C30367 + C29720 * C30370) +
                          C29720 * (3 * C30370 + C29720 * C30458);
    const double C5692 = 4 * (2 * C30257 + C29721 * C30259) +
                         C29721 * (3 * C30259 + C29721 * C30354);
    const double C5842 = C29720 * (3 * C30259 + C29721 * C30354);
    const double C6388 = 2 * C30257 + C29721 * C30259 + C30354 * C29938;
    const double C10694 = 4 * (2 * C30312 + C29720 * C30315) +
                          C29720 * (3 * C30315 + C29720 * C30443);
    const double C30419 = C30407 + C30417;
    const double C30842 = C30582 * C30570;
    const double C30881 = C30847 + C30582;
    const double C30850 = C30591 / C30572;
    const double C30846 = C30591 * C30570;
    const double C655 = C30923 - (C30582 * C30573) / C30568;
    const double C30860 = C30664 * C30658;
    const double C30896 = C30862 + C30664;
    const double C30864 = C30671 / C30572;
    const double C30861 = C30671 * C30658;
    const double C1420 = C30927 - (C30664 * C30660) / C30568;
    const double C30866 = C30706 * C30700;
    const double C30902 = C30868 + C30706;
    const double C30870 = C30713 / C30572;
    const double C30867 = C30713 * C30700;
    const double C2276 = C30929 - (C30706 * C30702) / C30568;
    const double C175 = C169 * C30801;
    const double C366 = C362 * C30801;
    const double C671 = C665 * C30801;
    const double C10423 =
        (4 * (2 * C30306 + C29720 * C30398 + C30307 * ae) +
         C29720 *
             (3 * C30398 +
              C29720 *
                  (2 * C30390 +
                   C29720 * (C29773 + C29720 * (C29720 * C29781 + C29846 * ae) +
                             C29720 * C29846 * ae) +
                   C30392 * ae) +
              C30397 * ae) +
         (3 * C30307 + C29720 * C30397) * ae) /
        C29681;
    const double C553 = C549 * C30801;
    const double C784 = C778 * C30801;
    const double C967 = C965 * C30801;
    const double C174 = C168 * C114;
    const double C365 = C361 * C114;
    const double C670 = C664 * C114;
    const double C552 = C548 * C114;
    const double C783 = C777 * C114;
    const double C966 = C964 * C114;
    const double C10592 = C2174 - C2173;
    const double C20914 = C2173 - C2174;
    const double C20214 = C1591 - C1592;
    const double C20212 = C1592 - C1591;
    const double C10591 = C2172 - C2171;
    const double C20913 = C2171 - C2172;
    const double C20213 = C1589 - C1590;
    const double C20211 = C1590 - C1589;
    const double C1319 =
        (C29732 + be * C29852 + C29721 * C29856 + ae * C29720 * C29900 +
         C29720 * (ae * C29900 +
                   C29720 * (C29739 + be * C29721 * C29773 +
                             C29721 * (be * C29773 + C29721 * C29744)))) /
        C29683;
    const double C1703 =
        (ae * (2 * C29877 + C29721 * C29900 + (C29875 + C29844 * C29855) * be) +
         C29720 * (2 * C29856 + be * C29858 +
                   C29721 * (C29739 + be * C29721 * C29773 +
                             C29721 * (be * C29773 + C29721 * C29744)))) /
        C29683;
    const double C1164 =
        (3 * (C29805 + C29721 * C29877 + C30252 * be) +
         C29721 * (2 * C29877 + C29721 * C29900 + C30254 * be) +
         (2 * C30252 + C29721 * C30254) * be) /
        C29681;
    const double C1307 =
        (C29805 + C29721 * C29877 + C30252 * be + C29900 * C29938) / C29681;
    const double C1697 =
        (C29720 * (2 * C29877 + C29721 * C29900 + C30254 * be)) / C29681;
    const double C10438 = C30788 * C10426;
    const double C1436 = C30788 * C1162;
    const double C13338 = C13127 * C1162;
    const double C2176 = C30788 * C1299;
    const double C13516 = C13127 * C1299;
    const double C1594 = C30788 * C1305;
    const double C14002 = C13127 * C1305;
    const double C356 = C30788 * C318;
    const double C13654 = C13127 * C318;
    const double C667 = C30788 * C320;
    const double C13160 = C13127 * C320;
    const double C544 = C113 * C506;
    const double C781 = C113 * C508;
    const double C961 = C30788 * C942;
    const double C13792 = C13127 * C942;
    const double C962 = C113 * C943;
    const double C13795 = C13131 * C943;
    const double C160 = C113 * C120;
    const double C355 = C113 * C301;
    const double C13653 = C13131 * C301;
    const double C666 = C113 * C302;
    const double C13159 = C13131 * C302;
    const double C542 = C113 * C488;
    const double C779 = C113 * C489;
    const double C960 = C113 * C934;
    const double C13791 = C13131 * C934;
    const double C29910 = C29909 + C29907;
    const double C30444 = C30442 + C30437;
    const double C10137 = C113 * C5586;
    const double C25389 = C13131 * C5586;
    const double C25851 = C13131 * C5588;
    const double C10135 = C113 * C5582;
    const double C25385 = C13131 * C5582;
    const double C25847 = C13131 * C5583;
    const double C30459 = C30457 + C30452;
    const double C30013 = C29721 * C30012;
    const double C30018 = 3 * C30012;
    const double C30072 = ae * C30012;
    const double C30071 = C29720 * C30012;
    const double C6239 =
        (2 * (ae * C29900 + C29720 * C29976) + ae * (C29900 + C30012 * C29938) +
         C29720 * (C29976 + ae * C29720 * C30012 +
                   C29720 * (ae * C30012 + C29720 * C29994))) /
        C29683;
    const double C6233 =
        (2 * C29720 * C29900 + C29720 * (C29900 + C30012 * C29938)) / C29681;
    const double C10812 = C30788 * C6240;
    const double C26242 = C13127 * C6240;
    const double C10810 = C30788 * C6235;
    const double C26238 = C13127 * C6235;
    const double C10435 = C113 * C10420;
    const double C30418 = C29720 * C30416;
    const double C358 = C30788 * C331;
    const double C13658 = C13127 * C331;
    const double C669 = C30788 * C332;
    const double C13164 = C13127 * C332;
    const double C545 = C30788 * C518;
    const double C782 = C30788 * C519;
    const double C963 = C30788 * C949;
    const double C13796 = C13127 * C949;
    const double C2178 = C30788 * C1315;
    const double C13520 = C13127 * C1315;
    const double C1596 = C30788 * C1318;
    const double C14006 = C13127 * C1318;
    const double C29998 = C29986 + C29996;
    const double C30163 = C30160 + C30161;
    const double C30128 = C30116 + C30126;
    const double C29798 = C29788 + C29797;
    const double C29999 = C29984 + C29997;
    const double C5695 =
        (4 * (2 * C29864 + be * C29865 + C29721 * C30055) +
         be * (3 * C29865 + C29721 * C30056) +
         C29721 * (3 * C30055 + be * C30056 +
                   C29721 * (2 * C30051 + be * C30052 +
                             C29721 * (C30044 + be * C29721 * C30045 +
                                       C29721 * (be * C30045 +
                                                 C29721 * C29728 *
                                                     std::pow(C29724, 8) *
                                                     bs[8] * C29726))))) /
        C29683;
    const double C5694 = (4 * (2 * C29860 + C29721 * C29865) +
                          C29721 * (3 * C29865 + C29721 * C30056)) /
                         C29681;
    const double C5844 = (C29720 * (3 * C29865 + C29721 * C30056) +
                          (3 * C30259 + C29721 * C30354) * ae) /
                         C29681;
    const double C6390 =
        (2 * C29860 + C29721 * C29865 +
         C29720 * (C29720 * C30056 + C30354 * ae) + C29720 * C30354 * ae) /
        C29681;
    const double C29837 = C29827 + C29836;
    const double C29959 = C29957 + C29958;
    const double C29921 = C29822 + C29920;
    const double C30035 = C29721 * C30033;
    const double C30074 = C30033 * C29938;
    const double C30164 = C30158 + C30162;
    const double C30088 = C30087 + C30084;
    const double C10589 =
        (3 * (C29864 + ae * C30131 + C29720 * C30135) +
         ae * (2 * C30131 + C29720 * C30136) +
         C29720 * (2 * C30135 + ae * C30136 +
                   C29720 * (C30051 + ae * C29720 * C30085 +
                             C29720 * (ae * C30085 +
                                       C29720 * (be * C30045 +
                                                 C29721 * C29728 *
                                                     std::pow(C29724, 8) *
                                                     bs[8] * C29726))))) /
        C29683;
    const double C10587 = (3 * (C29882 + C29906 * C29938) +
                           C29720 * (2 * C30131 + C29720 * C30136)) /
                          C29681;
    const double C10697 =
        (4 * (2 * C29947 + ae * C29948 + C29720 * C30149) +
         ae * (3 * C29948 + C29720 * C30150) +
         C29720 * (3 * C30149 + ae * C30150 +
                   C29720 * (2 * C30143 + ae * C30145 +
                             C29720 * (C30044 + ae * C29720 * C30079 +
                                       C29720 * (ae * C30079 +
                                                 C29720 * C29728 *
                                                     std::pow(C29724, 8) *
                                                     bs[8] * C29726))))) /
        C29683;
    const double C10695 = (4 * (2 * C29943 + C29720 * C29948) +
                           C29720 * (3 * C29948 + C29720 * C30150)) /
                          C29681;
    const double C30129 = C30114 + C30127;
    const double C121 = 5 * (3 * C30195 + C29728 * C30202) +
                        C29728 * (4 * C30202 + C29728 * C30209);
    const double C303 = 3 * C30195 + C29728 * C30202 + C30209 * C29855;
    const double C490 = 3 * C30195 + C29728 * C30202 + C30209 * C29938;
    const double C659 = C29721 * (4 * C30202 + C29728 * C30209);
    const double C772 = C29720 * (4 * C30202 + C29728 * C30209);
    const double C935 = C29720 * C29721 * C30209;
    const double C5465 = 5 * (3 * C30254 + C29721 * C30338) +
                         C29721 * (4 * C30338 + C29721 * C30343);
    const double C5584 = 3 * C30254 + C29721 * C30338 + C30343 * C29938;
    const double C5944 = C29720 * (4 * C30338 + C29721 * C30343);
    const double C10421 = 5 * (3 * C30307 + C29720 * C30397) +
                          C29720 * (4 * C30397 + C29720 * C30419);
    const double C30877 = C30842 / C30568;
    const double C30910 = C30881 / C30572;
    const double C30911 = C30883 + C30850;
    const double C657 = C30850 - C30589 / C30586;
    const double C30880 = C30846 / C30568;
    const double C30893 = C30860 / C30568;
    const double C30917 = C30896 / C30572;
    const double C30918 = C30897 + C30864;
    const double C1422 = C30864 - C30669 / C30586;
    const double C30895 = C30861 / C30568;
    const double C30899 = C30866 / C30568;
    const double C30920 = C30902 / C30572;
    const double C30921 = C30903 + C30870;
    const double C2278 = C30870 - C30711 / C30586;
    const double C30901 = C30867 / C30568;
    const double C10437 = C113 * C10423;
    const double C178 = C174 + C175;
    const double C368 = C365 + C366;
    const double C672 = C670 + C671;
    const double C555 = C552 + C553;
    const double C785 = C783 + C784;
    const double C968 = C966 + C967;
    const double C9777 = C30788 * C1319;
    const double C25388 = C13126 * C1319;
    const double C25373 = C13127 * C1319;
    const double C10134 = C30788 * C1703;
    const double C25381 = C13127 * C1703;
    const double C25850 = C13126 * C1703;
    const double C9775 = C30788 * C1307;
    const double C25384 = C13126 * C1307;
    const double C25369 = C13127 * C1307;
    const double C10132 = C30788 * C1697;
    const double C25377 = C13127 * C1697;
    const double C25846 = C13126 * C1697;
    const double C1320 =
        (C29849 + be * C29860 + C29721 * C29864 + ae * C29720 * C29910 +
         C29720 *
             (ae * C29910 +
              C29720 * (C29748 + be * C29721 * C29789 +
                        C29721 * (be * C29789 + C29721 * C29728 * C29753)))) /
        C29683;
    const double C1704 =
        (ae * (2 * C29882 + C29721 * C29910 + (C29880 + C29903 * C29855) * be) +
         C29720 *
             (2 * C29864 + be * C29865 +
              C29721 * (C29748 + be * C29721 * C29789 +
                        C29721 * (be * C29789 + C29721 * C29728 * C29753)))) /
        C29683;
    const double C5845 =
        (ae * (3 * C29910 +
               C29721 * (2 * C29906 +
                         C29721 * (C29828 +
                                   C29721 * (C29721 * C29728 * C29831 +
                                             C30058 * be) +
                                   C29721 * C30058 * be) +
                         C30060 * be) +
               (2 * C29905 + C29721 * C30060) * be) +
         C29720 * (3 * C30055 + be * C30056 +
                   C29721 * (2 * C30051 + be * C30052 +
                             C29721 * (C30044 + be * C29721 * C30045 +
                                       C29721 * (be * C30045 +
                                                 C29721 * C29728 *
                                                     std::pow(C29724, 8) *
                                                     bs[8] * C29726))))) /
        C29683;
    const double C1166 =
        (3 * (C29809 + C29721 * C29882 + C30257 * be) +
         C29721 * (2 * C29882 + C29721 * C29910 + C30259 * be) +
         (2 * C30257 + C29721 * C30259) * be) /
        C29681;
    const double C1309 =
        (C29809 + C29721 * C29882 + C30257 * be + C29910 * C29938) / C29681;
    const double C1699 =
        (C29720 * (2 * C29882 + C29721 * C29910 + C30259 * be)) / C29681;
    const double C10696 =
        (4 * (2 * C30314 + C29720 * C30444 + C30315 * ae) +
         C29720 *
             (3 * C30444 +
              C29720 *
                  (2 * C30436 +
                   C29720 * (C29789 + C29720 * (C29720 * C30045 + C30058 * ae) +
                             C29720 * C30058 * ae) +
                   C30438 * ae) +
              C30443 * ae) +
         (3 * C30315 + C29720 * C30443) * ae) /
        C29681;
    const double C10804 =
        (4 * (2 * C30369 + C29720 * C30459 + C30370 * ae) +
         C29720 * (3 * C30459 +
                   C29720 * (2 * C30451 +
                             C29720 * (C29981 +
                                       C29720 * (C29720 * C29721 * C29792 +
                                                 C30022 * ae) +
                                       C29720 * C30022 * ae) +
                             C30453 * ae) +
                   C30458 * ae) +
         (3 * C30370 + C29720 * C30458) * ae) /
        C29681;
    const double C30014 = C30001 + C30013;
    const double C30075 = C30072 + C30073;
    const double C9782 = C30788 * C6239;
    const double C26704 = C13127 * C6239;
    const double C9780 = C30788 * C6233;
    const double C26700 = C13127 * C6233;
    const double C30420 = C30401 + C30418;
    const double C333 =
        (3 * C29746 + C29728 * C29757 + be * C29721 * C29798 +
         C29721 * (be * C29798 +
                   C29721 * (3 * C29755 +
                             C29728 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C662 =
        (be * (4 * C29785 + C29728 * C29798) +
         C29721 * (4 * C29757 +
                   C29728 * (3 * C29755 +
                             C29728 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C135 = (5 * (3 * C29775 + C29728 * C29785) +
                         C29728 * (4 * C29785 + C29728 * C29798)) /
                        C29681;
    const double C323 =
        (3 * C29775 + C29728 * C29785 + C29798 * C29855) / C29681;
    const double C510 =
        (3 * C29775 + C29728 * C29785 +
         C29720 * (C29720 * C29798 + C30209 * ae) + C29720 * C30209 * ae) /
        C29681;
    const double C661 = (C29721 * (4 * C29785 + C29728 * C29798)) / C29681;
    const double C774 = (C29720 * (4 * C29785 + C29728 * C29798) +
                         (4 * C30202 + C29728 * C30209) * ae) /
                        C29681;
    const double C945 =
        (C29720 * C29721 * C29798 + C29721 * C30209 * ae) / C29681;
    const double C5471 =
        (5 * (3 * C29976 + be * C29977 + C29721 * C29998) +
         be * (4 * C29977 + C29721 * C29999) +
         C29721 *
             (4 * C29998 + be * C29999 +
              C29721 *
                  (3 * C29994 + be * C29995 +
                   C29721 * (2 * C29988 + be * C29990 +
                             C29721 * (C29753 + be * C29721 * C29792 +
                                       C29721 * (be * C29792 +
                                                 C29721 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C5469 = (5 * (3 * C29858 + C29721 * C29977) +
                          C29721 * (4 * C29977 + C29721 * C29999)) /
                         C29681;
    const double C5590 =
        (3 * C29858 + C29721 * C29977 +
         C29720 * (C29720 * C29999 + C30343 * ae) + C29720 * C30343 * ae) /
        C29681;
    const double C5946 = (C29720 * (4 * C29977 + C29721 * C29999) +
                          (4 * C30338 + C29721 * C30343) * ae) /
                         C29681;
    const double C520 =
        (3 * C29746 + C29728 * C29757 + ae * C29720 * C29837 +
         C29720 * (ae * C29837 +
                   C29720 * (3 * C29755 +
                             C29728 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C775 =
        (ae * (4 * C29824 + C29728 * C29837) +
         C29720 * (4 * C29757 +
                   C29728 * (3 * C29755 +
                             C29728 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C950 =
        (ae * (C29721 * C29837 +
               (3 * (C29844 + C29846 * C29736) +
                C29728 * (2 * C29728 * C29846 +
                          C29728 * (C29846 + C29742 * C29741 * C29736))) *
                   be) +
         C29720 * (be * C29798 +
                   C29721 * (3 * C29755 +
                             C29728 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C134 = (5 * (3 * C29814 + C29728 * C29824) +
                         C29728 * (4 * C29824 + C29728 * C29837)) /
                        C29681;
    const double C322 =
        (3 * C29814 + C29728 * C29824 +
         C29721 * (C29721 * C29837 + C30209 * be) + C29721 * C30209 * be) /
        C29681;
    const double C509 =
        (3 * C29814 + C29728 * C29824 + C29837 * C29938) / C29681;
    const double C660 = (C29721 * (4 * C29824 + C29728 * C29837) +
                         (4 * C30202 + C29728 * C30209) * be) /
                        C29681;
    const double C773 = (C29720 * (4 * C29824 + C29728 * C29837)) / C29681;
    const double C944 = (C29720 * (C29721 * C29837 + C30209 * be)) / C29681;
    const double C2169 =
        (be * C29785 + C29721 * C29757 + ae * C29720 * C29959 +
         C29720 * (ae * C29959 +
                   C29720 * (be * C29796 +
                             C29721 * (2 * C29728 * C29753 +
                                       C29728 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C1427 =
        (2 * (C29721 * C29824 + C30202 * be) +
         C29721 * (C29824 + C29721 * C29959 + C29721 * C29927 * be) +
         (C30202 + C29927 * C29855) * be) /
        C29681;
    const double C1585 =
        (C29720 * (C29824 + C29721 * C29959 + C29721 * C29927 * be)) / C29681;
    const double C2167 =
        (C29721 * C29824 + C30202 * be + C29959 * C29938) / C29681;
    const double C29922 = C29921 + C29919;
    const double C30036 = C30019 + C30035;
    const double C30076 = C30012 + C30074;
    const double C10805 =
        (4 * (2 * C30068 + ae * C30069 + C29720 * C30163) +
         ae * (3 * C30069 + C29720 * C30164) +
         C29720 *
             (3 * C30163 + ae * C30164 +
              C29720 *
                  (2 * C30157 + ae * C30159 +
                   C29720 * (C29988 + ae * C29720 * C30025 +
                             C29720 * (ae * C30025 +
                                       C29720 * (be * C29792 +
                                                 C29721 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C10803 = (4 * (2 * C30064 + C29720 * C30069) +
                           C29720 * (3 * C30069 + C29720 * C30164)) /
                          C29681;
    const double C30089 = C29721 * C30088;
    const double C6493 =
        (2 * (ae * C29910 + C29720 * C30055) + ae * (C29910 + C30088 * C29938) +
         C29720 * (C30055 + ae * C29720 * C30088 +
                   C29720 * (ae * C30088 +
                             C29720 * (C30044 + be * C29721 * C30045 +
                                       C29721 * (be * C30045 +
                                                 C29721 * C29728 *
                                                     std::pow(C29724, 8) *
                                                     bs[8] * C29726))))) /
        C29683;
    const double C6491 =
        (2 * C29720 * C29910 + C29720 * (C29910 + C30088 * C29938)) / C29681;
    const double C10427 =
        (5 * (3 * C30106 + ae * C30107 + C29720 * C30128) +
         ae * (4 * C30107 + C29720 * C30129) +
         C29720 *
             (4 * C30128 + ae * C30129 +
              C29720 *
                  (3 * C30124 + ae * C30125 +
                   C29720 * (2 * C30118 + ae * C30120 +
                             C29720 * (C29753 + ae * C29720 * C29831 +
                                       C29720 * (ae * C29831 +
                                                 C29720 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C10424 = (5 * (3 * C29941 + C29720 * C30107) +
                           C29720 * (4 * C30107 + C29720 * C30129)) /
                          C29681;
    const double C30931 = C30877 + C30923;
    const double C656 = C30910 - (C30591 * C30573) / C30568;
    const double C111 = C30911 / C30572 - C30589 / C30884;
    const double C30924 = C30880 + C30910;
    const double C30932 = C30893 + C30927;
    const double C1421 = C30917 - (C30671 * C30660) / C30568;
    const double C1149 = C30918 / C30572 - C30669 / C30884;
    const double C30928 = C30895 + C30917;
    const double C30933 = C30899 + C30929;
    const double C2277 = C30920 - (C30713 * C30702) / C30568;
    const double C1994 = C30921 / C30572 - C30711 / C30884;
    const double C30930 = C30901 + C30920;
    const double C9784 = C9777 - C9778;
    const double C9783 = C9775 - C9776;
    const double C10032 = C30788 * C1320;
    const double C15426 = C13127 * C1320;
    const double C14720 = C13127 * C1704;
    const double C20016 = C30788 * C1704;
    const double C14514 = C13127 * C1166;
    const double C10030 = C30788 * C1309;
    const double C15422 = C13127 * C1309;
    const double C14716 = C13127 * C1699;
    const double C20014 = C30788 * C1699;
    const double C30015 = C30014 + C30010;
    const double C30421 = C30420 + C30405;
    const double C1321 =
        (C29746 + be * C29867 + C29721 * C29871 + ae * C29720 * C29922 +
         C29720 * (ae * C29922 +
                   C29720 * (C29755 + be * C29721 * C29794 +
                             C29721 * (be * C29794 +
                                       C29721 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C1705 =
        (ae * (2 * C29888 + C29721 * C29922 + (C29886 + C29915 * C29855) * be) +
         C29720 * (2 * C29871 + be * C29872 +
                   C29721 * (C29755 + be * C29721 * C29794 +
                             C29721 * (be * C29794 +
                                       C29721 * (C29753 + std::pow(C29724, 8) *
                                                              bs[8] * C29726 *
                                                              C29736))))) /
        C29683;
    const double C1168 =
        (3 * (C29814 + C29721 * C29888 + C30262 * be) +
         C29721 * (2 * C29888 + C29721 * C29922 + C30264 * be) +
         (2 * C30262 + C29721 * C30264) * be) /
        C29681;
    const double C1311 =
        (C29814 + C29721 * C29888 + C30262 * be + C29922 * C29938) / C29681;
    const double C1701 =
        (C29720 * (2 * C29888 + C29721 * C29922 + C30264 * be)) / C29681;
    const double C30037 = C30036 + C30029;
    const double C6241 =
        (3 * (C29976 + ae * C30071 + C29720 * C30075) +
         ae * (2 * C30071 + C29720 * C30076) +
         C29720 *
             (2 * C30075 + ae * C30076 +
              C29720 *
                  (C29994 + ae * C29720 * C30033 +
                   C29720 * (ae * C30033 +
                             C29720 * (C29753 + be * C29721 * C29792 +
                                       C29721 * (be * C29792 +
                                                 C29721 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C6236 = (3 * (C29900 + C30012 * C29938) +
                          C29720 * (2 * C30071 + C29720 * C30076)) /
                         C29681;
    const double C30090 = C30078 + C30089;
    const double C108 =
        (C30922 + 2 * C30582) / C30572 - (C30931 * C30573) / C30568;
    const double C109 =
        (C30909 + 2 * C30591 + C30931) / C30572 - (C30924 * C30573) / C30568;
    const double C110 = (C30882 + C30588 / C30568 + C30924) / C30572 -
                        (C30911 * C30573) / C30568;
    const double C1146 =
        (C30925 + 2 * C30664) / C30572 - (C30932 * C30660) / C30568;
    const double C1147 =
        (C30913 + 2 * C30671 + C30932) / C30572 - (C30928 * C30660) / C30568;
    const double C1148 = (C30888 + C30668 / C30568 + C30928) / C30572 -
                         (C30918 * C30660) / C30568;
    const double C1991 =
        (C30926 + 2 * C30706) / C30572 - (C30933 * C30702) / C30568;
    const double C1992 =
        (C30915 + 2 * C30713 + C30933) / C30572 - (C30930 * C30702) / C30568;
    const double C1993 = (C30891 + C30710 / C30568 + C30930) / C30572 -
                         (C30921 * C30702) / C30568;
    const double C5591 =
        (2 * C29856 + be * C29858 + C29721 * C29976 + ae * C29720 * C30015 +
         C29720 * (ae * C30015 + C29720 * C29998)) /
        C29683;
    const double C5592 =
        (ae * (3 * C29900 + C29721 * C30015 +
               (2 * C29895 + C29721 * C30008) * be) +
         C29720 * (3 * C29976 + be * C29977 + C29721 * C29998)) /
        C29683;
    const double C5466 =
        (4 * (2 * C29877 + C29721 * C29900 + C30254 * be) +
         C29721 * (3 * C29900 + C29721 * C30015 + C30338 * be) +
         (3 * C30254 + C29721 * C30338) * be) /
        C29681;
    const double C5585 =
        (2 * C29877 + C29721 * C29900 + C30254 * be + C30015 * C29938) / C29681;
    const double C5587 =
        (C29720 * (3 * C29900 + C29721 * C30015 + C30338 * be)) / C29681;
    const double C10425 =
        (5 * (3 * C30398 + C29720 * C30421 + C30397 * ae) +
         C29720 * (4 * C30421 +
                   C29720 * (3 * C30416 +
                             C29720 * (2 * C30408 +
                                       C29720 * (C29781 +
                                                 C29720 * (C29720 * C29792 +
                                                           C29913 * ae) +
                                                 C29720 * C29913 * ae) +
                                       C30410 * ae) +
                             C30415 * ae) +
                   C30419 * ae) +
         (4 * C30397 + C29720 * C30419) * ae) /
        C29681;
    const double C30038 = C29721 * C30037;
    const double C6595 =
        (2 * (ae * C30015 + C29720 * C29998) + ae * (C30015 + C30037 * C29938) +
         C29720 *
             (C29998 + ae * C29720 * C30037 +
              C29720 *
                  (ae * C30037 +
                   C29720 * (2 * C29988 + be * C29990 +
                             C29721 * (C29753 + be * C29721 * C29792 +
                                       C29721 * (be * C29792 +
                                                 C29721 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C6593 =
        (2 * C29720 * C30015 + C29720 * (C30015 + C30037 * C29938)) / C29681;
    const double C30091 = C30090 + C30082;
    const double C10138 = C30788 * C5591;
    const double C25390 = C13127 * C5591;
    const double C25852 = C13127 * C5592;
    const double C10136 = C30788 * C5585;
    const double C25386 = C13127 * C5585;
    const double C25848 = C13127 * C5587;
    const double C30039 = C30018 + C30038;
    const double C6391 =
        (2 * C29864 + be * C29865 + C29721 * C30055 + ae * C29720 * C30091 +
         C29720 * (ae * C30091 +
                   C29720 * (2 * C30051 + be * C30052 +
                             C29721 * (C30044 + be * C29721 * C30045 +
                                       C29721 * (be * C30045 +
                                                 C29721 * C29728 *
                                                     std::pow(C29724, 8) *
                                                     bs[8] * C29726))))) /
        C29683;
    const double C5693 =
        (4 * (2 * C29882 + C29721 * C29910 + C30259 * be) +
         C29721 * (3 * C29910 + C29721 * C30091 + C30354 * be) +
         (3 * C30259 + C29721 * C30354) * be) /
        C29681;
    const double C5843 =
        (C29720 * (3 * C29910 + C29721 * C30091 + C30354 * be)) / C29681;
    const double C6389 =
        (2 * C29882 + C29721 * C29910 + C30259 * be + C30091 * C29938) / C29681;
    const double C30040 = C30039 + C30034;
    const double C5593 =
        (3 * C29976 + be * C29977 + C29721 * C29998 + ae * C29720 * C30040 +
         C29720 *
             (ae * C30040 +
              C29720 *
                  (3 * C29994 + be * C29995 +
                   C29721 * (2 * C29988 + be * C29990 +
                             C29721 * (C29753 + be * C29721 * C29792 +
                                       C29721 * (be * C29792 +
                                                 C29721 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C5947 =
        (ae * (4 * C30015 + C29721 * C30040 +
               (3 * C30008 + C29721 * C30032) * be) +
         C29720 *
             (4 * C29998 + be * C29999 +
              C29721 *
                  (3 * C29994 + be * C29995 +
                   C29721 * (2 * C29988 + be * C29990 +
                             C29721 * (C29753 + be * C29721 * C29792 +
                                       C29721 * (be * C29792 +
                                                 C29721 * std::pow(C29724, 8) *
                                                     bs[8] * C29726)))))) /
        C29683;
    const double C5468 =
        (5 * (3 * C29900 + C29721 * C30015 + C30338 * be) +
         C29721 * (4 * C30015 + C29721 * C30040 + C30343 * be) +
         (4 * C30338 + C29721 * C30343) * be) /
        C29681;
    const double C5589 =
        (3 * C29900 + C29721 * C30015 + C30338 * be + C30040 * C29938) / C29681;
    const double C5945 =
        (C29720 * (4 * C30015 + C29721 * C30040 + C30343 * be)) / C29681;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30664 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30671 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C2868) *
              C30582 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30664 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30671 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C2868) *
              C30591 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C30664 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C30671 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30664 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30858 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30671 +
           ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
               C13131 * C1152) *
                  C114 +
              (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
               C13131 * C1159) *
                  C30801) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C114 +
              (C13323 - C13324 + C13325 - C13326) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
               C13127 * C1697) *
                  C114 +
              (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
               C13127 * C1703) *
                  C30801) *
                 C13128 +
             ((C14713 - C14714 + C14715 - C14716) * C114 +
              (C14717 - C14718 + C14719 - C14720) * C30801) *
                 C13129) *
                C30710) *
               C2868) *
              C2608 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30858 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30664 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30858 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30671 +
           ((((C13320 - C13319 + C13322 - C13321) * C114 +
              (C13324 - C13323 + C13326 - C13325) * C30801) *
                 C13128 +
             ((C13335 - C13336 + C13337 - C13338) * C114 +
              (C13339 - C13340 + C13341 - C13342) * C30801) *
                 C13129) *
                C30858 +
            (((C14714 - C14713 + C14716 - C14715) * C114 +
              (C14718 - C14717 + C14720 - C14719) * C30801) *
                 C13128 +
             ((C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
               C13131 * C1696) *
                  C114 +
              (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
               C13131 * C1702) *
                  C30801) *
                 C13129) *
                C30710) *
               C2868) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30932 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30928 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30918 +
           (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C30623 * C30898) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30932 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30928 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30918 +
           (((C14512 - C14511 + C14514 - C14513) * C114 +
             (C14516 - C14515 + C14518 - C14517) * C30801) *
                C13128 +
            ((C13126 * C1162 - C13130 * C1154 + C13127 * C1168 -
              C13131 * C1157) *
                 C114 +
             (C13126 * C1172 - C13130 * C1163 + C13127 * C1175 -
              C13131 * C1169) *
                 C30801) *
                C13129) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30668) *
              C30931 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30668) *
              C30924 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C30668) *
              C30911 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13652 - C13651 + C13654 - C13653) * C114 +
             (C13656 - C13655 + C13658 - C13657) * C30801) *
                C13128 +
            ((C13126 * C320 - C13130 * C302 + C13127 * C322 - C13131 * C303) *
                 C114 +
             (C13126 * C332 - C13130 * C321 + C13127 * C333 - C13131 * C323) *
                 C30801) *
                C13129) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30926 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30915 +
            (((C13126 * C497 - C13130 * C484 + C13127 * C1295 -
               C13131 * C1286) *
                  C114 +
              (C13126 * C514 - C13130 * C498 + C13127 * C1313 -
               C13131 * C1296) *
                  C30801) *
                 C13128 +
             ((C13497 - C13498 + C13499 - C13500) * C114 +
              (C13501 - C13502 + C13503 - C13504) * C30801) *
                 C13129) *
                C30891) *
               C2500 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30926 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30915 +
            (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
               C13127 * C1307) *
                  C114 +
              (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
               C13127 * C1319) *
                  C30801) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C114 +
              (C15423 - C15424 + C15425 - C15426) * C30801) *
                 C13129) *
                C30891) *
               C30668) *
              C2608 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30926 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30915 +
            (((C13498 - C13497 + C13500 - C13499) * C114 +
              (C13502 - C13501 + C13504 - C13503) * C30801) *
                 C13128 +
             ((C13513 - C13514 + C13515 - C13516) * C114 +
              (C13517 - C13518 + C13519 - C13520) * C30801) *
                 C13129) *
                C30891) *
               C2500 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30926 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30915 +
            (((C15420 - C15419 + C15422 - C15421) * C114 +
              (C15424 - C15423 + C15426 - C15425) * C30801) *
                 C13128 +
             ((C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
               C13131 * C1294) *
                  C114 +
              (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
               C13131 * C1312) *
                  C30801) *
                 C13129) *
                C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30858 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30582 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30858 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30858 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30591 +
          (((((C13142 - C13141 + C13144 - C13143) * C114 +
              (C13146 - C13145 + C13148 - C13147) * C30801) *
                 C13128 +
             ((C13149 - C13150 + C13151 - C13152) * C114 +
              (C13153 - C13154 + C13155 - C13156) * C30801) *
                 C13129) *
                C30858 +
            (((C13506 - C13505 + C13508 - C13507) * C114 +
              (C13510 - C13509 + C13512 - C13511) * C30801) *
                 C13128 +
             ((C13789 - C13790 + C13791 - C13792) * C114 +
              (C13793 - C13794 + C13795 - C13796) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13328 - C13327 + C13330 - C13329) * C114 +
              (C13332 - C13331 + C13334 - C13333) * C30801) *
                 C13128 +
             ((C13651 - C13652 + C13653 - C13654) * C114 +
              (C13655 - C13656 + C13657 - C13658) * C30801) *
                 C13129) *
                C30858 +
            (((C14000 - C13999 + C14002 - C14001) * C114 +
              (C14004 - C14003 + C14006 - C14005) * C30801) *
                 C13128 +
             ((C13126 * C942 - C13130 * C934 + C13127 * C1585 -
               C13131 * C1584) *
                  C114 +
              (C13126 * C949 - C13130 * C943 + C13127 * C1587 -
               C13131 * C1586) *
                  C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30668) *
              C30931 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30668) *
              C30924 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C30668) *
              C30911 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C30623 * C2500 +
           (((C13652 - C13651 + C13654 - C13653) * C114 +
             (C13656 - C13655 + C13658 - C13657) * C30801) *
                C13128 +
            ((C13126 * C320 - C13130 * C302 + C13127 * C322 - C13131 * C303) *
                 C114 +
             (C13126 * C332 - C13130 * C321 + C13127 * C333 - C13131 * C323) *
                 C30801) *
                C13129) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30932 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30928 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30918 +
           (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C30623 * C30898) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30932 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30928 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30918 +
           (((C14512 - C14511 + C14514 - C14513) * C114 +
             (C14516 - C14515 + C14518 - C14517) * C30801) *
                C13128 +
            ((C13126 * C1162 - C13130 * C1154 + C13127 * C1168 -
              C13131 * C1157) *
                 C114 +
             (C13126 * C1172 - C13130 * C1163 + C13127 * C1175 -
              C13131 * C1169) *
                 C30801) *
                C13129) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30664 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C3262 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30671 +
           ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
               C13131 * C1152) *
                  C114 +
              (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
               C13131 * C1159) *
                  C30801) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C114 +
              (C13323 - C13324 + C13325 - C13326) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
               C13127 * C1697) *
                  C114 +
              (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
               C13127 * C1703) *
                  C30801) *
                 C13128 +
             ((C14713 - C14714 + C14715 - C14716) * C114 +
              (C14717 - C14718 + C14719 - C14720) * C30801) *
                 C13129) *
                C30710) *
               C2868) *
              C30843 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C3262 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30664 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C3262 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30671 +
           ((((C13320 - C13319 + C13322 - C13321) * C114 +
              (C13324 - C13323 + C13326 - C13325) * C30801) *
                 C13128 +
             ((C13335 - C13336 + C13337 - C13338) * C114 +
              (C13339 - C13340 + C13341 - C13342) * C30801) *
                 C13129) *
                C3262 +
            (((C14714 - C14713 + C14716 - C14715) * C114 +
              (C14718 - C14717 + C14720 - C14719) * C30801) *
                 C13128 +
             ((C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
               C13131 * C1696) *
                  C114 +
              (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
               C13131 * C1702) *
                  C30801) *
                 C13129) *
                C30710) *
               C2868) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30706 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30713 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C3770) *
              C30664 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30706 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30713 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C15419 - C15420 + C15421 - C15422) * C114 +
             (C15423 - C15424 + C15425 - C15426) * C30801) *
                C13129) *
               C3770) *
              C30671 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30706 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C30713 +
           (((C13126 * C1307 - C13130 * C1292 + C13127 * C5585 -
              C13131 * C5582) *
                 C114 +
             (C13126 * C1319 - C13130 * C1308 + C13127 * C5591 -
              C13131 * C5586) *
                 C30801) *
                C13128 +
            ((C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C114 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C30801) *
                C13129) *
               C3770) *
              C2868) *
         C30577) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C3262 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C30932 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C3262 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30710) *
              C30928 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C3262 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C30710) *
              C30918 +
          ((((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C3262 +
           (((C13126 * C1697 - C13130 * C1694 + C13127 * C5587 -
              C13131 * C5583) *
                 C114 +
             (C13126 * C1703 - C13130 * C1698 + C13127 * C5592 -
              C13131 * C5588) *
                 C30801) *
                C13128 +
            ((C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
              C13131 * C5842) *
                 C114 +
             (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
              C13131 * C5844) *
                 C30801) *
                C13129) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C3262 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30922 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C3262 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C3262 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30909 +
          (((((C13142 - C13141 + C13144 - C13143) * C114 +
              (C13146 - C13145 + C13148 - C13147) * C30801) *
                 C13128 +
             ((C13149 - C13150 + C13151 - C13152) * C114 +
              (C13153 - C13154 + C13155 - C13156) * C30801) *
                 C13129) *
                C3262 +
            (((C13506 - C13505 + C13508 - C13507) * C114 +
              (C13510 - C13509 + C13512 - C13511) * C30801) *
                 C13128 +
             ((C13789 - C13790 + C13791 - C13792) * C114 +
              (C13793 - C13794 + C13795 - C13796) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13328 - C13327 + C13330 - C13329) * C114 +
              (C13332 - C13331 + C13334 - C13333) * C30801) *
                 C13128 +
             ((C13651 - C13652 + C13653 - C13654) * C114 +
              (C13655 - C13656 + C13657 - C13658) * C30801) *
                 C13129) *
                C3262 +
            (((C14000 - C13999 + C14002 - C14001) * C114 +
              (C14004 - C14003 + C14006 - C14005) * C30801) *
                 C13128 +
             ((C13126 * C942 - C13130 * C934 + C13127 * C1585 -
               C13131 * C1584) *
                  C114 +
              (C13126 * C949 - C13130 * C943 + C13127 * C1587 -
               C13131 * C1586) *
                  C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30933 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30930 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30921 +
           (((C13130 * C1996 - C13126 * C2002 + C13131 * C2390 -
              C13127 * C2393) *
                 C114 +
             (C13130 * C2003 - C13126 * C2014 + C13131 * C2394 -
              C13127 * C2399) *
                 C30801) *
                C13128 +
            ((C15557 - C15558 + C15559 - C15560) * C114 +
             (C15561 - C15562 + C15563 - C15564) * C30801) *
                C13129) *
               C30904) *
              C2500 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30933 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30930 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C15419 - C15420 + C15421 - C15422) * C114 +
             (C15423 - C15424 + C15425 - C15426) * C30801) *
                C13129) *
               C30921 +
           (((C13126 * C2393 - C13130 * C2390 + C13127 * C6233 -
              C13131 * C6230) *
                 C114 +
             (C13126 * C2399 - C13130 * C2394 + C13127 * C6239 -
              C13131 * C6234) *
                 C30801) *
                C13128 +
            ((C13126 * C2395 - C13130 * C2391 + C13127 * C6491 -
              C13131 * C6490) *
                 C114 +
             (C13126 * C2400 - C13130 * C2396 + C13127 * C6493 -
              C13131 * C6492) *
                 C30801) *
                C13129) *
               C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30706 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30713 +
            (((C13126 * C497 - C13130 * C484 + C13127 * C1295 -
               C13131 * C1286) *
                  C114 +
              (C13126 * C514 - C13130 * C498 + C13127 * C1313 -
               C13131 * C1296) *
                  C30801) *
                 C13128 +
             ((C13497 - C13498 + C13499 - C13500) * C114 +
              (C13501 - C13502 + C13503 - C13504) * C30801) *
                 C13129) *
                C3770) *
               C2500 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30706 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30713 +
            (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
               C13127 * C1307) *
                  C114 +
              (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
               C13127 * C1319) *
                  C30801) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C114 +
              (C15423 - C15424 + C15425 - C15426) * C30801) *
                 C13129) *
                C3770) *
               C30668) *
              C30843 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30706 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30713 +
            (((C13498 - C13497 + C13500 - C13499) * C114 +
              (C13502 - C13501 + C13504 - C13503) * C30801) *
                 C13128 +
             ((C13513 - C13514 + C13515 - C13516) * C114 +
              (C13517 - C13518 + C13519 - C13520) * C30801) *
                 C13129) *
                C3770) *
               C2500 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30706 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30713 +
            (((C15420 - C15419 + C15422 - C15421) * C114 +
              (C15424 - C15423 + C15426 - C15425) * C30801) *
                 C13128 +
             ((C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
               C13131 * C1294) *
                  C114 +
              (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
               C13131 * C1312) *
                  C30801) *
                 C13129) *
                C3770) *
               C30668) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C3262 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30922 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C3262 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C3262 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30909 +
          (((((C13142 - C13141 + C13144 - C13143) * C114 +
              (C13146 - C13145 + C13148 - C13147) * C30801) *
                 C13128 +
             ((C13149 - C13150 + C13151 - C13152) * C114 +
              (C13153 - C13154 + C13155 - C13156) * C30801) *
                 C13129) *
                C3262 +
            (((C13506 - C13505 + C13508 - C13507) * C114 +
              (C13510 - C13509 + C13512 - C13511) * C30801) *
                 C13128 +
             ((C13789 - C13790 + C13791 - C13792) * C114 +
              (C13793 - C13794 + C13795 - C13796) * C30801) *
                 C13129) *
                C30710) *
               C2500 +
           ((((C13328 - C13327 + C13330 - C13329) * C114 +
              (C13332 - C13331 + C13334 - C13333) * C30801) *
                 C13128 +
             ((C13651 - C13652 + C13653 - C13654) * C114 +
              (C13655 - C13656 + C13657 - C13658) * C30801) *
                 C13129) *
                C3262 +
            (((C14000 - C13999 + C14002 - C14001) * C114 +
              (C14004 - C14003 + C14006 - C14005) * C30801) *
                 C13128 +
             ((C13126 * C942 - C13130 * C934 + C13127 * C1585 -
               C13131 * C1584) *
                  C114 +
              (C13126 * C949 - C13130 * C943 + C13127 * C1587 -
               C13131 * C1586) *
                  C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C3262 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C30932 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C3262 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30710) *
              C30928 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C3262 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C30710) *
              C30918 +
          ((((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C3262 +
           (((C13126 * C1697 - C13130 * C1694 + C13127 * C5587 -
              C13131 * C5583) *
                 C114 +
             (C13126 * C1703 - C13130 * C1698 + C13127 * C5592 -
              C13131 * C5588) *
                 C30801) *
                C13128 +
            ((C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
              C13131 * C5842) *
                 C114 +
             (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
              C13131 * C5844) *
                 C30801) *
                C13129) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C1420 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C1421 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C1422 +
           (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C30623 * C30898) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C1420 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C1421 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C1422 +
           (((C14512 - C14511 + C14514 - C14513) * C114 +
             (C14516 - C14515 + C14518 - C14517) * C30801) *
                C13128 +
            ((C13126 * C1162 - C13130 * C1154 + C13127 * C1168 -
              C13131 * C1157) *
                 C114 +
             (C13126 * C1172 - C13130 * C1163 + C13127 * C1175 -
              C13131 * C1169) *
                 C30801) *
                C13129) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30668) *
              C655 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30668) *
              C656 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C30668) *
              C657 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13652 - C13651 + C13654 - C13653) * C114 +
             (C13656 - C13655 + C13658 - C13657) * C30801) *
                C13128 +
            ((C13126 * C320 - C13130 * C302 + C13127 * C322 - C13131 * C303) *
                 C114 +
             (C13126 * C332 - C13130 * C321 + C13127 * C333 - C13131 * C323) *
                 C30801) *
                C13129) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C1816 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C1817 +
            (((C13126 * C497 - C13130 * C484 + C13127 * C1295 -
               C13131 * C1286) *
                  C114 +
              (C13126 * C514 - C13130 * C498 + C13127 * C1313 -
               C13131 * C1296) *
                  C30801) *
                 C13128 +
             ((C13497 - C13498 + C13499 - C13500) * C114 +
              (C13501 - C13502 + C13503 - C13504) * C30801) *
                 C13129) *
                C30891) *
               C30857 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C1816 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C1817 +
            (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
               C13127 * C1307) *
                  C114 +
              (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
               C13127 * C1319) *
                  C30801) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C114 +
              (C15423 - C15424 + C15425 - C15426) * C30801) *
                 C13129) *
                C30891) *
               C30668) *
              C30843 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C1816 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C1817 +
            (((C13498 - C13497 + C13500 - C13499) * C114 +
              (C13502 - C13501 + C13504 - C13503) * C30801) *
                 C13128 +
             ((C13513 - C13514 + C13515 - C13516) * C114 +
              (C13517 - C13518 + C13519 - C13520) * C30801) *
                 C13129) *
                C30891) *
               C30857 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C1816 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C1817 +
            (((C15420 - C15419 + C15422 - C15421) * C114 +
              (C15424 - C15423 + C15426 - C15425) * C30801) *
                 C13128 +
             ((C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
               C13131 * C1294) *
                  C114 +
              (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
               C13131 * C1312) *
                  C30801) *
                 C13129) *
                C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30858 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C1420 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30858 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30710) *
              C1421 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30858 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C30710) *
              C1422 +
          ((((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C30858 +
           (((C13126 * C1697 - C13130 * C1694 + C13127 * C5587 -
              C13131 * C5583) *
                 C114 +
             (C13126 * C1703 - C13130 * C1698 + C13127 * C5592 -
              C13131 * C5588) *
                 C30801) *
                C13128 +
            ((C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
              C13131 * C5842) *
                 C114 +
             (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
              C13131 * C5844) *
                 C30801) *
                C13129) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30858 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C291 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30858 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30858 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C292 +
          (((((C13142 - C13141 + C13144 - C13143) * C114 +
              (C13146 - C13145 + C13148 - C13147) * C30801) *
                 C13128 +
             ((C13149 - C13150 + C13151 - C13152) * C114 +
              (C13153 - C13154 + C13155 - C13156) * C30801) *
                 C13129) *
                C30858 +
            (((C13506 - C13505 + C13508 - C13507) * C114 +
              (C13510 - C13509 + C13512 - C13511) * C30801) *
                 C13128 +
             ((C13789 - C13790 + C13791 - C13792) * C114 +
              (C13793 - C13794 + C13795 - C13796) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13328 - C13327 + C13330 - C13329) * C114 +
              (C13332 - C13331 + C13334 - C13333) * C30801) *
                 C13128 +
             ((C13651 - C13652 + C13653 - C13654) * C114 +
              (C13655 - C13656 + C13657 - C13658) * C30801) *
                 C13129) *
                C30858 +
            (((C14000 - C13999 + C14002 - C14001) * C114 +
              (C14004 - C14003 + C14006 - C14005) * C30801) *
                 C13128 +
             ((C13126 * C942 - C13130 * C934 + C13127 * C1585 -
               C13131 * C1584) *
                  C114 +
              (C13126 * C949 - C13130 * C943 + C13127 * C1587 -
               C13131 * C1586) *
                  C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C2276 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C2277 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C2278 +
           (((C13130 * C1996 - C13126 * C2002 + C13131 * C2390 -
              C13127 * C2393) *
                 C114 +
             (C13130 * C2003 - C13126 * C2014 + C13131 * C2394 -
              C13127 * C2399) *
                 C30801) *
                C13128 +
            ((C15557 - C15558 + C15559 - C15560) * C114 +
             (C15561 - C15562 + C15563 - C15564) * C30801) *
                C13129) *
               C30904) *
              C30857 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C2276 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C2277 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C15419 - C15420 + C15421 - C15422) * C114 +
             (C15423 - C15424 + C15425 - C15426) * C30801) *
                C13129) *
               C2278 +
           (((C13126 * C2393 - C13130 * C2390 + C13127 * C6233 -
              C13131 * C6230) *
                 C114 +
             (C13126 * C2399 - C13130 * C2394 + C13127 * C6239 -
              C13131 * C6234) *
                 C30801) *
                C13128 +
            ((C13126 * C2395 - C13130 * C2391 + C13127 * C6491 -
              C13131 * C6490) *
                 C114 +
             (C13126 * C2400 - C13130 * C2396 + C13127 * C6493 -
              C13131 * C6492) *
                 C30801) *
                C13129) *
               C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C122 - C13130 * C115 + C13127 * C304 -
                 C13131 * C294) *
                    C114 +
                (C13126 * C136 - C13130 * C123 + C13127 * C324 -
                 C13131 * C305) *
                    C30801) *
                   C13128 +
               ((C13133 - C13134 + C13135 - C13136) * C114 +
                (C13137 - C13138 + C13139 - C13140) * C30801) *
                   C13129) *
                  C30623 * C30605 * C108 +
              (((C13134 - C13133 + C13136 - C13135) * C114 +
                (C13138 - C13137 + C13140 - C13139) * C30801) *
                   C13128 +
               ((C13141 - C13142 + C13143 - C13144) * C114 +
                (C13145 - C13146 + C13147 - C13148) * C30801) *
                   C13129) *
                  C30623 * C30605 * C109 +
              (((C13142 - C13141 + C13144 - C13143) * C114 +
                (C13146 - C13145 + C13148 - C13147) * C30801) *
                   C13128 +
               ((C13149 - C13150 + C13151 - C13152) * C114 +
                (C13153 - C13154 + C13155 - C13156) * C30801) *
                   C13129) *
                  C30623 * C30605 * C110 +
              (((C13150 - C13149 + C13152 - C13151) * C114 +
                (C13154 - C13153 + C13156 - C13155) * C30801) *
                   C13128 +
               ((C13157 - C13158 + C13159 - C13160) * C114 +
                (C13161 - C13162 + C13163 - C13164) * C30801) *
                   C13129) *
                  C30623 * C30605 * C111 +
              (((C13158 - C13157 + C13160 - C13159) * C114 +
                (C13162 - C13161 + C13164 - C13163) * C30801) *
                   C13128 +
               ((C13126 * C132 - C13130 * C120 + C13127 * C660 -
                 C13131 * C659) *
                    C114 +
                (C13126 * C141 - C13130 * C133 + C13127 * C662 -
                 C13131 * C661) *
                    C30801) *
                   C13129) *
                  C30623 * C30605 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C13126 * C122 - C13130 * C115 + C13127 * C304 -
                  C13131 * C294) *
                     C114 +
                 (C13126 * C136 - C13130 * C123 + C13127 * C324 -
                  C13131 * C305) *
                     C30801) *
                    C13128 +
                ((C13133 - C13134 + C13135 - C13136) * C114 +
                 (C13137 - C13138 + C13139 - C13140) * C30801) *
                    C13129) *
                   C30623 * C30925 +
               (((C13130 * C294 - C13126 * C304 + C13131 * C297 -
                  C13127 * C310) *
                     C114 +
                 (C13130 * C305 - C13126 * C324 + C13131 * C311 -
                  C13127 * C327) *
                     C30801) *
                    C13128 +
                ((C13311 - C13312 + C13313 - C13314) * C114 +
                 (C13315 - C13316 + C13317 - C13318) * C30801) *
                    C13129) *
                   C30623 * C30913 +
               (((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
                  C13131 * C1152) *
                     C114 +
                 (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
                  C13131 * C1159) *
                     C30801) *
                    C13128 +
                ((C13319 - C13320 + C13321 - C13322) * C114 +
                 (C13323 - C13324 + C13325 - C13326) * C30801) *
                    C13129) *
                   C30623 * C30888) *
                  C291 +
              ((((C13134 - C13133 + C13136 - C13135) * C114 +
                 (C13138 - C13137 + C13140 - C13139) * C30801) *
                    C13128 +
                ((C13141 - C13142 + C13143 - C13144) * C114 +
                 (C13145 - C13146 + C13147 - C13148) * C30801) *
                    C13129) *
                   C30623 * C30925 +
               (((C13312 - C13311 + C13314 - C13313) * C114 +
                 (C13316 - C13315 + C13318 - C13317) * C30801) *
                    C13128 +
                ((C13327 - C13328 + C13329 - C13330) * C114 +
                 (C13331 - C13332 + C13333 - C13334) * C30801) *
                    C13129) *
                   C30623 * C30913 +
               (((C13320 - C13319 + C13322 - C13321) * C114 +
                 (C13324 - C13323 + C13326 - C13325) * C30801) *
                    C13128 +
                ((C13335 - C13336 + C13337 - C13338) * C114 +
                 (C13339 - C13340 + C13341 - C13342) * C30801) *
                    C13129) *
                   C30623 * C30888) *
                  C292 +
              ((((C13142 - C13141 + C13144 - C13143) * C114 +
                 (C13146 - C13145 + C13148 - C13147) * C30801) *
                    C13128 +
                ((C13149 - C13150 + C13151 - C13152) * C114 +
                 (C13153 - C13154 + C13155 - C13156) * C30801) *
                    C13129) *
                   C30623 * C30925 +
               (((C13328 - C13327 + C13330 - C13329) * C114 +
                 (C13332 - C13331 + C13334 - C13333) * C30801) *
                    C13128 +
                ((C13130 * C300 - C13126 * C316 + C13131 * C301 -
                  C13127 * C318) *
                     C114 +
                 (C13130 * C317 - C13126 * C330 + C13131 * C319 -
                  C13127 * C331) *
                     C30801) *
                    C13129) *
                   C30623 * C30913 +
               (((C13336 - C13335 + C13338 - C13337) * C114 +
                 (C13340 - C13339 + C13342 - C13341) * C30801) *
                    C13128 +
                ((C13126 * C318 - C13130 * C301 + C13127 * C1427 -
                  C13131 * C1426) *
                     C114 +
                 (C13126 * C331 - C13130 * C319 + C13127 * C1429 -
                  C13131 * C1428) *
                     C30801) *
                    C13129) *
                   C30623 * C30888) *
                  C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30926 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30915 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C30605 * C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30926 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30915 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C30891) *
              C30605 * C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30926 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13130 * C487 - C13126 * C503 + C13131 * C934 - C13127 * C942) *
                 C114 +
             (C13130 * C504 - C13126 * C517 + C13131 * C943 - C13127 * C949) *
                 C30801) *
                C13129) *
               C30915 +
           (((C13514 - C13513 + C13516 - C13515) * C114 +
             (C13518 - C13517 + C13520 - C13519) * C30801) *
                C13128 +
            ((C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                 C114 +
             (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                 C30801) *
                C13129) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C1146 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C114 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C30801) *
               C13128 +
           ((C13311 - C13312 + C13313 - C13314) * C114 +
            (C13315 - C13316 + C13317 - C13318) * C30801) *
               C13129) *
              C30623 * C1147 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C114 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C30801) *
               C13128 +
           ((C13319 - C13320 + C13321 - C13322) * C114 +
            (C13323 - C13324 + C13325 - C13326) * C30801) *
               C13129) *
              C30623 * C1148 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C114 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C30801) *
               C13128 +
           ((C13130 * C1153 - C13126 * C1160 + C13131 * C1156 -
             C13127 * C1166) *
                C114 +
            (C13130 * C1161 - C13126 * C1171 + C13131 * C1167 -
             C13127 * C1174) *
                C30801) *
               C13129) *
              C30623 * C1149 +
          (((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 -
             C13131 * C5464) *
                C114 +
            (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 -
             C13131 * C5467) *
                C30801) *
               C13128 +
           ((C13126 * C1166 - C13130 * C1156 + C13127 * C5693 -
             C13131 * C5692) *
                C114 +
            (C13126 * C1174 - C13130 * C1167 + C13127 * C5695 -
             C13131 * C5694) *
                C30801) *
               C13129) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30926 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30915 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C1078 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30926 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30915 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C13130 * C1287 - C13126 * C1297 + C13131 * C1293 -
              C13127 * C1309) *
                 C114 +
             (C13130 * C1298 - C13126 * C1314 + C13131 * C1310 -
              C13127 * C1320) *
                 C30801) *
                C13129) *
               C30891) *
              C1079 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30926 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C13130 * C1290 - C13126 * C1303 + C13131 * C1695 -
              C13127 * C1699) *
                 C114 +
             (C13130 * C1304 - C13126 * C1317 + C13131 * C1700 -
              C13127 * C1704) *
                 C30801) *
                C13129) *
               C30915 +
           (((C13126 * C1307 - C13130 * C1292 + C13127 * C5585 -
              C13131 * C5582) *
                 C114 +
             (C13126 * C1319 - C13130 * C1308 + C13127 * C5591 -
              C13131 * C5586) *
                 C30801) *
                C13128 +
            ((C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C114 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C30801) *
                C13129) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C1816 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C1817 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C30605 * C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C1816 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C1817 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C30891) *
              C30605 * C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C1816 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C1817 +
           (((C13514 - C13513 + C13516 - C13515) * C114 +
             (C13518 - C13517 + C13520 - C13519) * C30801) *
                C13128 +
            ((C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                 C114 +
             (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                 C30801) *
                C13129) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C1816 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C1817 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C30925 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C1816 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C1817 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C13130 * C1287 - C13126 * C1297 + C13131 * C1293 -
              C13127 * C1309) *
                 C114 +
             (C13130 * C1298 - C13126 * C1314 + C13131 * C1310 -
              C13127 * C1320) *
                 C30801) *
                C13129) *
               C30891) *
              C30913 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C1816 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C1817 +
           (((C13126 * C1307 - C13130 * C1292 + C13127 * C5585 -
              C13131 * C5582) *
                 C114 +
             (C13126 * C1319 - C13130 * C1308 + C13127 * C5591 -
              C13131 * C5586) *
                 C30801) *
                C13128 +
            ((C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C114 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C30801) *
                C13129) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C1991 +
          (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                C114 +
            (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                C30801) *
               C13128 +
           ((C13489 - C13490 + C13491 - C13492) * C114 +
            (C13493 - C13494 + C13495 - C13496) * C30801) *
               C13129) *
              C1992 +
          (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                C114 +
            (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                C30801) *
               C13128 +
           ((C13497 - C13498 + C13499 - C13500) * C114 +
            (C13501 - C13502 + C13503 - C13504) * C30801) *
               C13129) *
              C1993 +
          (((C13130 * C1996 - C13126 * C2002 + C13131 * C2390 -
             C13127 * C2393) *
                C114 +
            (C13130 * C2003 - C13126 * C2014 + C13131 * C2394 -
             C13127 * C2399) *
                C30801) *
               C13128 +
           ((C13130 * C1997 - C13126 * C2004 + C13131 * C2391 -
             C13127 * C2395) *
                C114 +
            (C13130 * C2005 - C13126 * C2015 + C13131 * C2396 -
             C13127 * C2400) *
                C30801) *
               C13129) *
              C1994 +
          (((C13126 * C2008 - C13130 * C1999 + C13127 * C6235 -
             C13131 * C6231) *
                C114 +
            (C13126 * C2017 - C13130 * C2009 + C13127 * C6240 -
             C13131 * C6237) *
                C30801) *
               C13128 +
           ((C13126 * C2010 - C13130 * C2000 + C13127 * C10587 -
             C13131 * C10586) *
                C114 +
            (C13126 * C2018 - C13130 * C2011 + C13127 * C10589 -
             C13131 * C10588) *
                C30801) *
               C13129) *
              C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C1078 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30858 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C1079 +
           ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
               C13131 * C1152) *
                  C114 +
              (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
               C13131 * C1159) *
                  C30801) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C114 +
              (C13323 - C13324 + C13325 - C13326) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
               C13127 * C1697) *
                  C114 +
              (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
               C13127 * C1703) *
                  C30801) *
                 C13128 +
             ((C14713 - C14714 + C14715 - C14716) * C114 +
              (C14717 - C14718 + C14719 - C14720) * C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C30843 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30858 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C1078 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30858 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C1079 +
           ((((C13320 - C13319 + C13322 - C13321) * C114 +
              (C13324 - C13323 + C13326 - C13325) * C30801) *
                 C13128 +
             ((C13335 - C13336 + C13337 - C13338) * C114 +
              (C13339 - C13340 + C13341 - C13342) * C30801) *
                 C13129) *
                C30858 +
            (((C14714 - C14713 + C14716 - C14715) * C114 +
              (C14718 - C14717 + C14720 - C14719) * C30801) *
                 C13128 +
             ((C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
               C13131 * C1696) *
                  C114 +
              (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
               C13131 * C1702) *
                  C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30858 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C30605 * C655 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30858 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30710) *
              C30605 * C656 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30858 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C30710) *
              C30605 * C657 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C30858 +
           (((C13790 - C13789 + C13792 - C13791) * C114 +
             (C13794 - C13793 + C13796 - C13795) * C30801) *
                C13128 +
            ((C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
                 C114 +
             (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
                 C30801) *
                C13129) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C2276 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C2277 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C2278 +
           (((C13130 * C1996 - C13126 * C2002 + C13131 * C2390 -
              C13127 * C2393) *
                 C114 +
             (C13130 * C2003 - C13126 * C2014 + C13131 * C2394 -
              C13127 * C2399) *
                 C30801) *
                C13128 +
            ((C15557 - C15558 + C15559 - C15560) * C114 +
             (C15561 - C15562 + C15563 - C15564) * C30801) *
                C13129) *
               C30904) *
              C30605 * C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C2276 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C2277 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C2278 +
           (((C15558 - C15557 + C15560 - C15559) * C114 +
             (C15562 - C15561 + C15564 - C15563) * C30801) *
                C13128 +
            ((C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
              C13131 * C2392) *
                 C114 +
             (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
              C13131 * C2398) *
                 C30801) *
                C13129) *
               C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13130 * C300 - C13126 * C316 + C13131 * C301 - C13127 * C318) *
                 C114 +
             (C13130 * C317 - C13126 * C330 + C13131 * C319 - C13127 * C331) *
                 C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C30605 * C108 +
          (((C13134 - C13133 + C13136 - C13135) * C114 +
            (C13138 - C13137 + C13140 - C13139) * C30801) *
               C13128 +
           ((C13141 - C13142 + C13143 - C13144) * C114 +
            (C13145 - C13146 + C13147 - C13148) * C30801) *
               C13129) *
              C30623 * C30605 * C109 +
          (((C13142 - C13141 + C13144 - C13143) * C114 +
            (C13146 - C13145 + C13148 - C13147) * C30801) *
               C13128 +
           ((C13149 - C13150 + C13151 - C13152) * C114 +
            (C13153 - C13154 + C13155 - C13156) * C30801) *
               C13129) *
              C30623 * C30605 * C110 +
          (((C13150 - C13149 + C13152 - C13151) * C114 +
            (C13154 - C13153 + C13156 - C13155) * C30801) *
               C13128 +
           ((C13157 - C13158 + C13159 - C13160) * C114 +
            (C13161 - C13162 + C13163 - C13164) * C30801) *
               C13129) *
              C30623 * C30605 * C111 +
          (((C13158 - C13157 + C13160 - C13159) * C114 +
            (C13162 - C13161 + C13164 - C13163) * C30801) *
               C13128 +
           ((C13126 * C132 - C13130 * C120 + C13127 * C660 - C13131 * C659) *
                C114 +
            (C13126 * C141 - C13130 * C133 + C13127 * C662 - C13131 * C661) *
                C30801) *
               C13129) *
              C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C1146 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C114 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C30801) *
               C13128 +
           ((C13311 - C13312 + C13313 - C13314) * C114 +
            (C13315 - C13316 + C13317 - C13318) * C30801) *
               C13129) *
              C30623 * C1147 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C114 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C30801) *
               C13128 +
           ((C13319 - C13320 + C13321 - C13322) * C114 +
            (C13323 - C13324 + C13325 - C13326) * C30801) *
               C13129) *
              C30623 * C1148 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C114 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C30801) *
               C13128 +
           ((C13130 * C1153 - C13126 * C1160 + C13131 * C1156 -
             C13127 * C1166) *
                C114 +
            (C13130 * C1161 - C13126 * C1171 + C13131 * C1167 -
             C13127 * C1174) *
                C30801) *
               C13129) *
              C30623 * C1149 +
          (((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 -
             C13131 * C5464) *
                C114 +
            (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 -
             C13131 * C5467) *
                C30801) *
               C13128 +
           ((C13126 * C1166 - C13130 * C1156 + C13127 * C5693 -
             C13131 * C5692) *
                C114 +
            (C13126 * C1174 - C13130 * C1167 + C13127 * C5695 -
             C13131 * C5694) *
                C30801) *
               C13129) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C1816 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C1817 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C30605 * C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C1816 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C1817 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C30891) *
              C30605 * C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C1816 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C1817 +
           (((C13514 - C13513 + C13516 - C13515) * C114 +
             (C13518 - C13517 + C13520 - C13519) * C30801) *
                C13128 +
            ((C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                 C114 +
             (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                 C30801) *
                C13129) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C1816 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C1817 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C30925 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C1816 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C1817 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C13130 * C1287 - C13126 * C1297 + C13131 * C1293 -
              C13127 * C1309) *
                 C114 +
             (C13130 * C1298 - C13126 * C1314 + C13131 * C1310 -
              C13127 * C1320) *
                 C30801) *
                C13129) *
               C30891) *
              C30913 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C1816 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C1817 +
           (((C13126 * C1307 - C13130 * C1292 + C13127 * C5585 -
              C13131 * C5582) *
                 C114 +
             (C13126 * C1319 - C13130 * C1308 + C13127 * C5591 -
              C13131 * C5586) *
                 C30801) *
                C13128 +
            ((C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C114 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C30801) *
                C13129) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C3262 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30582 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C3262 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C3262 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30591 +
          (((((C13142 - C13141 + C13144 - C13143) * C114 +
              (C13146 - C13145 + C13148 - C13147) * C30801) *
                 C13128 +
             ((C13149 - C13150 + C13151 - C13152) * C114 +
              (C13153 - C13154 + C13155 - C13156) * C30801) *
                 C13129) *
                C3262 +
            (((C13506 - C13505 + C13508 - C13507) * C114 +
              (C13510 - C13509 + C13512 - C13511) * C30801) *
                 C13128 +
             ((C13789 - C13790 + C13791 - C13792) * C114 +
              (C13793 - C13794 + C13795 - C13796) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13328 - C13327 + C13330 - C13329) * C114 +
              (C13332 - C13331 + C13334 - C13333) * C30801) *
                 C13128 +
             ((C13651 - C13652 + C13653 - C13654) * C114 +
              (C13655 - C13656 + C13657 - C13658) * C30801) *
                 C13129) *
                C3262 +
            (((C14000 - C13999 + C14002 - C14001) * C114 +
              (C14004 - C14003 + C14006 - C14005) * C30801) *
                 C13128 +
             ((C13126 * C942 - C13130 * C934 + C13127 * C1585 -
               C13131 * C1584) *
                  C114 +
              (C13126 * C949 - C13130 * C943 + C13127 * C1587 -
               C13131 * C1586) *
                  C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30706 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30713 +
            (((C13126 * C497 - C13130 * C484 + C13127 * C1295 -
               C13131 * C1286) *
                  C114 +
              (C13126 * C514 - C13130 * C498 + C13127 * C1313 -
               C13131 * C1296) *
                  C30801) *
                 C13128 +
             ((C13497 - C13498 + C13499 - C13500) * C114 +
              (C13501 - C13502 + C13503 - C13504) * C30801) *
                 C13129) *
                C3770) *
               C30857 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30706 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30713 +
            (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
               C13127 * C1307) *
                  C114 +
              (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
               C13127 * C1319) *
                  C30801) *
                 C13128 +
             ((C15419 - C15420 + C15421 - C15422) * C114 +
              (C15423 - C15424 + C15425 - C15426) * C30801) *
                 C13129) *
                C3770) *
               C30668) *
              C2608 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30706 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30713 +
            (((C13498 - C13497 + C13500 - C13499) * C114 +
              (C13502 - C13501 + C13504 - C13503) * C30801) *
                 C13128 +
             ((C13513 - C13514 + C13515 - C13516) * C114 +
              (C13517 - C13518 + C13519 - C13520) * C30801) *
                 C13129) *
                C3770) *
               C30857 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30706 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30713 +
            (((C15420 - C15419 + C15422 - C15421) * C114 +
              (C15424 - C15423 + C15426 - C15425) * C30801) *
                 C13128 +
             ((C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
               C13131 * C1294) *
                  C114 +
              (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
               C13131 * C1312) *
                  C30801) *
                 C13129) *
                C3770) *
               C30668) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30925 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C3262 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30913 +
           ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
               C13131 * C1152) *
                  C114 +
              (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
               C13131 * C1159) *
                  C30801) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C114 +
              (C13323 - C13324 + C13325 - C13326) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
               C13127 * C1697) *
                  C114 +
              (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
               C13127 * C1703) *
                  C30801) *
                 C13128 +
             ((C14713 - C14714 + C14715 - C14716) * C114 +
              (C14717 - C14718 + C14719 - C14720) * C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C2608 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C3262 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30925 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C3262 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30913 +
           ((((C13320 - C13319 + C13322 - C13321) * C114 +
              (C13324 - C13323 + C13326 - C13325) * C30801) *
                 C13128 +
             ((C13335 - C13336 + C13337 - C13338) * C114 +
              (C13339 - C13340 + C13341 - C13342) * C30801) *
                 C13129) *
                C3262 +
            (((C14714 - C14713 + C14716 - C14715) * C114 +
              (C14718 - C14717 + C14720 - C14719) * C30801) *
                 C13128 +
             ((C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
               C13131 * C1696) *
                  C114 +
              (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
               C13131 * C1702) *
                  C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C3262 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C30605 * C30931 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C3262 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30710) *
              C30605 * C30924 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C3262 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C30710) *
              C30605 * C30911 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C3262 +
           (((C13790 - C13789 + C13792 - C13791) * C114 +
             (C13794 - C13793 + C13796 - C13795) * C30801) *
                C13128 +
            ((C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
                 C114 +
             (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
                 C30801) *
                C13129) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30933 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30930 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30921 +
           (((C13130 * C1996 - C13126 * C2002 + C13131 * C2390 -
              C13127 * C2393) *
                 C114 +
             (C13130 * C2003 - C13126 * C2014 + C13131 * C2394 -
              C13127 * C2399) *
                 C30801) *
                C13128 +
            ((C15557 - C15558 + C15559 - C15560) * C114 +
             (C15561 - C15562 + C15563 - C15564) * C30801) *
                C13129) *
               C30904) *
              C30605 * C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30933 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30930 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C30921 +
           (((C15558 - C15557 + C15560 - C15559) * C114 +
             (C15562 - C15561 + C15564 - C15563) * C30801) *
                C13128 +
            ((C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
              C13131 * C2392) *
                 C114 +
             (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
              C13131 * C2398) *
                 C30801) *
                C13129) *
               C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30706 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30713 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C3770) *
              C30605 * C30582 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30706 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30713 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C3770) *
              C30605 * C30591 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30706 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C30713 +
           (((C13514 - C13513 + C13516 - C13515) * C114 +
             (C13518 - C13517 + C13520 - C13519) * C30801) *
                C13128 +
            ((C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                 C114 +
             (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                 C30801) *
                C13129) *
               C3770) *
              C30605 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C3262 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C30605 * C30931 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C3262 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30710) *
              C30605 * C30924 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C3262 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C30710) *
              C30605 * C30911 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C3262 +
           (((C13790 - C13789 + C13792 - C13791) * C114 +
             (C13794 - C13793 + C13796 - C13795) * C30801) *
                C13128 +
            ((C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
                 C114 +
             (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
                 C30801) *
                C13129) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30925 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C3262 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30913 +
           ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
               C13131 * C1152) *
                  C114 +
              (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
               C13131 * C1159) *
                  C30801) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C114 +
              (C13323 - C13324 + C13325 - C13326) * C30801) *
                 C13129) *
                C3262 +
            (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
               C13127 * C1697) *
                  C114 +
              (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
               C13127 * C1703) *
                  C30801) *
                 C13128 +
             ((C14713 - C14714 + C14715 - C14716) * C114 +
              (C14717 - C14718 + C14719 - C14720) * C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C2608 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C3262 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30925 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C3262 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30913 +
           ((((C13320 - C13319 + C13322 - C13321) * C114 +
              (C13324 - C13323 + C13326 - C13325) * C30801) *
                 C13128 +
             ((C13335 - C13336 + C13337 - C13338) * C114 +
              (C13339 - C13340 + C13341 - C13342) * C30801) *
                 C13129) *
                C3262 +
            (((C14714 - C14713 + C14716 - C14715) * C114 +
              (C14718 - C14717 + C14720 - C14719) * C30801) *
                 C13128 +
             ((C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
               C13131 * C1696) *
                  C114 +
              (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
               C13131 * C1702) *
                  C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30668) *
              C655 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30668) *
              C656 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C30668) *
              C657 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C30623 * C30857 +
           (((C13652 - C13651 + C13654 - C13653) * C114 +
             (C13656 - C13655 + C13658 - C13657) * C30801) *
                C13128 +
            ((C13126 * C320 - C13130 * C302 + C13127 * C322 - C13131 * C303) *
                 C114 +
             (C13126 * C332 - C13130 * C321 + C13127 * C333 - C13131 * C323) *
                 C30801) *
                C13129) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C1420 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C1421 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C1422 +
           (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C30623 * C30898) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C1420 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C1421 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C1422 +
           (((C14512 - C14511 + C14514 - C14513) * C114 +
             (C14516 - C14515 + C14518 - C14517) * C30801) *
                C13128 +
            ((C13126 * C1162 - C13130 * C1154 + C13127 * C1168 -
              C13131 * C1157) *
                 C114 +
             (C13126 * C1172 - C13130 * C1163 + C13127 * C1175 -
              C13131 * C1169) *
                 C30801) *
                C13129) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30858 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C291 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30858 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30858 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C292 +
          (((((C13142 - C13141 + C13144 - C13143) * C114 +
              (C13146 - C13145 + C13148 - C13147) * C30801) *
                 C13128 +
             ((C13149 - C13150 + C13151 - C13152) * C114 +
              (C13153 - C13154 + C13155 - C13156) * C30801) *
                 C13129) *
                C30858 +
            (((C13506 - C13505 + C13508 - C13507) * C114 +
              (C13510 - C13509 + C13512 - C13511) * C30801) *
                 C13128 +
             ((C13789 - C13790 + C13791 - C13792) * C114 +
              (C13793 - C13794 + C13795 - C13796) * C30801) *
                 C13129) *
                C30710) *
               C30857 +
           ((((C13328 - C13327 + C13330 - C13329) * C114 +
              (C13332 - C13331 + C13334 - C13333) * C30801) *
                 C13128 +
             ((C13651 - C13652 + C13653 - C13654) * C114 +
              (C13655 - C13656 + C13657 - C13658) * C30801) *
                 C13129) *
                C30858 +
            (((C14000 - C13999 + C14002 - C14001) * C114 +
              (C14004 - C14003 + C14006 - C14005) * C30801) *
                 C13128 +
             ((C13126 * C942 - C13130 * C934 + C13127 * C1585 -
               C13131 * C1584) *
                  C114 +
              (C13126 * C949 - C13130 * C943 + C13127 * C1587 -
               C13131 * C1586) *
                  C30801) *
                 C13129) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30858 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C1420 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30858 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30710) *
              C1421 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30858 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C14713 - C14714 + C14715 - C14716) * C114 +
             (C14717 - C14718 + C14719 - C14720) * C30801) *
                C13129) *
               C30710) *
              C1422 +
          ((((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
              C13127 * C1164) *
                 C114 +
             (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
              C13127 * C1173) *
                 C30801) *
                C13128 +
            ((C14511 - C14512 + C14513 - C14514) * C114 +
             (C14515 - C14516 + C14517 - C14518) * C30801) *
                C13129) *
               C30858 +
           (((C13126 * C1697 - C13130 * C1694 + C13127 * C5587 -
              C13131 * C5583) *
                 C114 +
             (C13126 * C1703 - C13130 * C1698 + C13127 * C5592 -
              C13131 * C5588) *
                 C30801) *
                C13128 +
            ((C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
              C13131 * C5842) *
                 C114 +
             (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
              C13131 * C5844) *
                 C30801) *
                C13129) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13130 * C300 - C13126 * C316 + C13131 * C301 - C13127 * C318) *
                 C114 +
             (C13130 * C317 - C13126 * C330 + C13131 * C319 - C13127 * C331) *
                 C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C30605 * C108 +
          (((C13134 - C13133 + C13136 - C13135) * C114 +
            (C13138 - C13137 + C13140 - C13139) * C30801) *
               C13128 +
           ((C13141 - C13142 + C13143 - C13144) * C114 +
            (C13145 - C13146 + C13147 - C13148) * C30801) *
               C13129) *
              C30623 * C30605 * C109 +
          (((C13142 - C13141 + C13144 - C13143) * C114 +
            (C13146 - C13145 + C13148 - C13147) * C30801) *
               C13128 +
           ((C13149 - C13150 + C13151 - C13152) * C114 +
            (C13153 - C13154 + C13155 - C13156) * C30801) *
               C13129) *
              C30623 * C30605 * C110 +
          (((C13150 - C13149 + C13152 - C13151) * C114 +
            (C13154 - C13153 + C13156 - C13155) * C30801) *
               C13128 +
           ((C13157 - C13158 + C13159 - C13160) * C114 +
            (C13161 - C13162 + C13163 - C13164) * C30801) *
               C13129) *
              C30623 * C30605 * C111 +
          (((C13158 - C13157 + C13160 - C13159) * C114 +
            (C13162 - C13161 + C13164 - C13163) * C30801) *
               C13128 +
           ((C13126 * C132 - C13130 * C120 + C13127 * C660 - C13131 * C659) *
                C114 +
            (C13126 * C141 - C13130 * C133 + C13127 * C662 - C13131 * C661) *
                C30801) *
               C13129) *
              C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30926 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30915 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C30605 * C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30926 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30915 +
           (((C13498 - C13497 + C13500 - C13499) * C114 +
             (C13502 - C13501 + C13504 - C13503) * C30801) *
                C13128 +
            ((C13513 - C13514 + C13515 - C13516) * C114 +
             (C13517 - C13518 + C13519 - C13520) * C30801) *
                C13129) *
               C30891) *
              C30605 * C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30926 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13130 * C487 - C13126 * C503 + C13131 * C934 - C13127 * C942) *
                 C114 +
             (C13130 * C504 - C13126 * C517 + C13131 * C943 - C13127 * C949) *
                 C30801) *
                C13129) *
               C30915 +
           (((C13514 - C13513 + C13516 - C13515) * C114 +
             (C13518 - C13517 + C13520 - C13519) * C30801) *
                C13128 +
            ((C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                 C114 +
             (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                 C30801) *
                C13129) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C1146 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C114 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C30801) *
               C13128 +
           ((C13311 - C13312 + C13313 - C13314) * C114 +
            (C13315 - C13316 + C13317 - C13318) * C30801) *
               C13129) *
              C30623 * C1147 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C114 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C30801) *
               C13128 +
           ((C13319 - C13320 + C13321 - C13322) * C114 +
            (C13323 - C13324 + C13325 - C13326) * C30801) *
               C13129) *
              C30623 * C1148 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C114 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C30801) *
               C13128 +
           ((C13130 * C1153 - C13126 * C1160 + C13131 * C1156 -
             C13127 * C1166) *
                C114 +
            (C13130 * C1161 - C13126 * C1171 + C13131 * C1167 -
             C13127 * C1174) *
                C30801) *
               C13129) *
              C30623 * C1149 +
          (((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 -
             C13131 * C5464) *
                C114 +
            (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 -
             C13131 * C5467) *
                C30801) *
               C13128 +
           ((C13126 * C1166 - C13130 * C1156 + C13127 * C5693 -
             C13131 * C5692) *
                C114 +
            (C13126 * C1174 - C13130 * C1167 + C13127 * C5695 -
             C13131 * C5694) *
                C30801) *
               C13129) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30926 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30915 +
           (((C13126 * C497 - C13130 * C484 + C13127 * C1295 - C13131 * C1286) *
                 C114 +
             (C13126 * C514 - C13130 * C498 + C13127 * C1313 - C13131 * C1296) *
                 C30801) *
                C13128 +
            ((C13497 - C13498 + C13499 - C13500) * C114 +
             (C13501 - C13502 + C13503 - C13504) * C30801) *
                C13129) *
               C30891) *
              C1078 +
          ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30926 +
           (((C13126 * C936 - C13130 * C931 + C13127 * C1301 - C13131 * C1289) *
                 C114 +
             (C13126 * C946 - C13130 * C937 + C13127 * C1316 - C13131 * C1302) *
                 C30801) *
                C13128 +
            ((C13991 - C13992 + C13993 - C13994) * C114 +
             (C13995 - C13996 + C13997 - C13998) * C30801) *
                C13129) *
               C30915 +
           (((C13130 * C1286 - C13126 * C1295 + C13131 * C1292 -
              C13127 * C1307) *
                 C114 +
             (C13130 * C1296 - C13126 * C1313 + C13131 * C1308 -
              C13127 * C1319) *
                 C30801) *
                C13128 +
            ((C13130 * C1287 - C13126 * C1297 + C13131 * C1293 -
              C13127 * C1309) *
                 C114 +
             (C13130 * C1298 - C13126 * C1314 + C13131 * C1310 -
              C13127 * C1320) *
                 C30801) *
                C13129) *
               C30891) *
              C1079 +
          ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30926 +
           (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
              C13127 * C1697) *
                 C114 +
             (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
              C13127 * C1703) *
                 C30801) *
                C13128 +
            ((C13130 * C1290 - C13126 * C1303 + C13131 * C1695 -
              C13127 * C1699) *
                 C114 +
             (C13130 * C1304 - C13126 * C1317 + C13131 * C1700 -
              C13127 * C1704) *
                 C30801) *
                C13129) *
               C30915 +
           (((C13126 * C1307 - C13130 * C1292 + C13127 * C5585 -
              C13131 * C5582) *
                 C114 +
             (C13126 * C1319 - C13130 * C1308 + C13127 * C5591 -
              C13131 * C5586) *
                 C30801) *
                C13128 +
            ((C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C114 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C30801) *
                C13129) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30858 +
           (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                 C114 +
             (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                 C30801) *
                C13128 +
            ((C13489 - C13490 + C13491 - C13492) * C114 +
             (C13493 - C13494 + C13495 - C13496) * C30801) *
                C13129) *
               C30710) *
              C30605 * C655 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30858 +
           (((C13490 - C13489 + C13492 - C13491) * C114 +
             (C13494 - C13493 + C13496 - C13495) * C30801) *
                C13128 +
            ((C13505 - C13506 + C13507 - C13508) * C114 +
             (C13509 - C13510 + C13511 - C13512) * C30801) *
                C13129) *
               C30710) *
              C30605 * C656 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30858 +
           (((C13506 - C13505 + C13508 - C13507) * C114 +
             (C13510 - C13509 + C13512 - C13511) * C30801) *
                C13128 +
            ((C13789 - C13790 + C13791 - C13792) * C114 +
             (C13793 - C13794 + C13795 - C13796) * C30801) *
                C13129) *
               C30710) *
              C30605 * C657 +
          ((((C13150 - C13149 + C13152 - C13151) * C114 +
             (C13154 - C13153 + C13156 - C13155) * C30801) *
                C13128 +
            ((C13157 - C13158 + C13159 - C13160) * C114 +
             (C13161 - C13162 + C13163 - C13164) * C30801) *
                C13129) *
               C30858 +
           (((C13790 - C13789 + C13792 - C13791) * C114 +
             (C13794 - C13793 + C13796 - C13795) * C30801) *
                C13128 +
            ((C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
                 C114 +
             (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
                 C30801) *
                C13129) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                  C114 +
              (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                  C30801) *
                 C13128 +
             ((C13133 - C13134 + C13135 - C13136) * C114 +
              (C13137 - C13138 + C13139 - C13140) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C481 - C13126 * C491 + C13131 * C931 - C13127 * C936) *
                  C114 +
              (C13130 * C492 - C13126 * C511 + C13131 * C937 - C13127 * C946) *
                  C30801) *
                 C13128 +
             ((C13489 - C13490 + C13491 - C13492) * C114 +
              (C13493 - C13494 + C13495 - C13496) * C30801) *
                 C13129) *
                C30710) *
               C1078 +
           ((((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                  C114 +
              (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                  C30801) *
                 C13128 +
             ((C13311 - C13312 + C13313 - C13314) * C114 +
              (C13315 - C13316 + C13317 - C13318) * C30801) *
                 C13129) *
                C30858 +
            (((C13126 * C936 - C13130 * C931 + C13127 * C1301 -
               C13131 * C1289) *
                  C114 +
              (C13126 * C946 - C13130 * C937 + C13127 * C1316 -
               C13131 * C1302) *
                  C30801) *
                 C13128 +
             ((C13991 - C13992 + C13993 - C13994) * C114 +
              (C13995 - C13996 + C13997 - C13998) * C30801) *
                 C13129) *
                C30710) *
               C1079 +
           ((((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
               C13131 * C1152) *
                  C114 +
              (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
               C13131 * C1159) *
                  C30801) *
                 C13128 +
             ((C13319 - C13320 + C13321 - C13322) * C114 +
              (C13323 - C13324 + C13325 - C13326) * C30801) *
                 C13129) *
                C30858 +
            (((C13130 * C1289 - C13126 * C1301 + C13131 * C1694 -
               C13127 * C1697) *
                  C114 +
              (C13130 * C1302 - C13126 * C1316 + C13131 * C1698 -
               C13127 * C1703) *
                  C30801) *
                 C13128 +
             ((C14713 - C14714 + C14715 - C14716) * C114 +
              (C14717 - C14718 + C14719 - C14720) * C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C30843 +
          (((((C13134 - C13133 + C13136 - C13135) * C114 +
              (C13138 - C13137 + C13140 - C13139) * C30801) *
                 C13128 +
             ((C13141 - C13142 + C13143 - C13144) * C114 +
              (C13145 - C13146 + C13147 - C13148) * C30801) *
                 C13129) *
                C30858 +
            (((C13490 - C13489 + C13492 - C13491) * C114 +
              (C13494 - C13493 + C13496 - C13495) * C30801) *
                 C13128 +
             ((C13505 - C13506 + C13507 - C13508) * C114 +
              (C13509 - C13510 + C13511 - C13512) * C30801) *
                 C13129) *
                C30710) *
               C1078 +
           ((((C13312 - C13311 + C13314 - C13313) * C114 +
              (C13316 - C13315 + C13318 - C13317) * C30801) *
                 C13128 +
             ((C13327 - C13328 + C13329 - C13330) * C114 +
              (C13331 - C13332 + C13333 - C13334) * C30801) *
                 C13129) *
                C30858 +
            (((C13992 - C13991 + C13994 - C13993) * C114 +
              (C13996 - C13995 + C13998 - C13997) * C30801) *
                 C13128 +
             ((C13999 - C14000 + C14001 - C14002) * C114 +
              (C14003 - C14004 + C14005 - C14006) * C30801) *
                 C13129) *
                C30710) *
               C1079 +
           ((((C13320 - C13319 + C13322 - C13321) * C114 +
              (C13324 - C13323 + C13326 - C13325) * C30801) *
                 C13128 +
             ((C13335 - C13336 + C13337 - C13338) * C114 +
              (C13339 - C13340 + C13341 - C13342) * C30801) *
                 C13129) *
                C30858 +
            (((C14714 - C14713 + C14716 - C14715) * C114 +
              (C14718 - C14717 + C14720 - C14719) * C30801) *
                 C13128 +
             ((C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
               C13131 * C1696) *
                  C114 +
              (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
               C13131 * C1702) *
                  C30801) *
                 C13129) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C30605 * C108 +
          (((C13134 - C13133 + C13136 - C13135) * C114 +
            (C13138 - C13137 + C13140 - C13139) * C30801) *
               C13128 +
           ((C13141 - C13142 + C13143 - C13144) * C114 +
            (C13145 - C13146 + C13147 - C13148) * C30801) *
               C13129) *
              C30623 * C30605 * C109 +
          (((C13142 - C13141 + C13144 - C13143) * C114 +
            (C13146 - C13145 + C13148 - C13147) * C30801) *
               C13128 +
           ((C13149 - C13150 + C13151 - C13152) * C114 +
            (C13153 - C13154 + C13155 - C13156) * C30801) *
               C13129) *
              C30623 * C30605 * C110 +
          (((C13150 - C13149 + C13152 - C13151) * C114 +
            (C13154 - C13153 + C13156 - C13155) * C30801) *
               C13128 +
           ((C13157 - C13158 + C13159 - C13160) * C114 +
            (C13161 - C13162 + C13163 - C13164) * C30801) *
               C13129) *
              C30623 * C30605 * C111 +
          (((C13158 - C13157 + C13160 - C13159) * C114 +
            (C13162 - C13161 + C13164 - C13163) * C30801) *
               C13128 +
           ((C13126 * C132 - C13130 * C120 + C13127 * C660 - C13131 * C659) *
                C114 +
            (C13126 * C141 - C13130 * C133 + C13127 * C662 - C13131 * C661) *
                C30801) *
               C13129) *
              C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C30925 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13130 * C300 - C13126 * C316 + C13131 * C301 - C13127 * C318) *
                 C114 +
             (C13130 * C317 - C13126 * C330 + C13131 * C319 - C13127 * C331) *
                 C30801) *
                C13129) *
               C30623 * C30913 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C114 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C30801) *
                C13128 +
            ((C13133 - C13134 + C13135 - C13136) * C114 +
             (C13137 - C13138 + C13139 - C13140) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C114 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C30801) *
                C13128 +
            ((C13311 - C13312 + C13313 - C13314) * C114 +
             (C13315 - C13316 + C13317 - C13318) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C114 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C30801) *
                C13128 +
            ((C13319 - C13320 + C13321 - C13322) * C114 +
             (C13323 - C13324 + C13325 - C13326) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C114 +
             (C13138 - C13137 + C13140 - C13139) * C30801) *
                C13128 +
            ((C13141 - C13142 + C13143 - C13144) * C114 +
             (C13145 - C13146 + C13147 - C13148) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13312 - C13311 + C13314 - C13313) * C114 +
             (C13316 - C13315 + C13318 - C13317) * C30801) *
                C13128 +
            ((C13327 - C13328 + C13329 - C13330) * C114 +
             (C13331 - C13332 + C13333 - C13334) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13320 - C13319 + C13322 - C13321) * C114 +
             (C13324 - C13323 + C13326 - C13325) * C30801) *
                C13128 +
            ((C13335 - C13336 + C13337 - C13338) * C114 +
             (C13339 - C13340 + C13341 - C13342) * C30801) *
                C13129) *
               C30623 * C30888) *
              C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C114 +
             (C13146 - C13145 + C13148 - C13147) * C30801) *
                C13128 +
            ((C13149 - C13150 + C13151 - C13152) * C114 +
             (C13153 - C13154 + C13155 - C13156) * C30801) *
                C13129) *
               C30623 * C1078 +
           (((C13328 - C13327 + C13330 - C13329) * C114 +
             (C13332 - C13331 + C13334 - C13333) * C30801) *
                C13128 +
            ((C13651 - C13652 + C13653 - C13654) * C114 +
             (C13655 - C13656 + C13657 - C13658) * C30801) *
                C13129) *
               C30623 * C1079 +
           (((C13336 - C13335 + C13338 - C13337) * C114 +
             (C13340 - C13339 + C13342 - C13341) * C30801) *
                C13128 +
            ((C13126 * C318 - C13130 * C301 + C13127 * C1427 - C13131 * C1426) *
                 C114 +
             (C13126 * C331 - C13130 * C319 + C13127 * C1429 - C13131 * C1428) *
                 C30801) *
                C13129) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C114 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C30801) *
               C13128 +
           ((C13133 - C13134 + C13135 - C13136) * C114 +
            (C13137 - C13138 + C13139 - C13140) * C30801) *
               C13129) *
              C30623 * C1146 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C114 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C30801) *
               C13128 +
           ((C13311 - C13312 + C13313 - C13314) * C114 +
            (C13315 - C13316 + C13317 - C13318) * C30801) *
               C13129) *
              C30623 * C1147 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C114 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C30801) *
               C13128 +
           ((C13319 - C13320 + C13321 - C13322) * C114 +
            (C13323 - C13324 + C13325 - C13326) * C30801) *
               C13129) *
              C30623 * C1148 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C114 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C30801) *
               C13128 +
           ((C13130 * C1153 - C13126 * C1160 + C13131 * C1156 -
             C13127 * C1166) *
                C114 +
            (C13130 * C1161 - C13126 * C1171 + C13131 * C1167 -
             C13127 * C1174) *
                C30801) *
               C13129) *
              C30623 * C1149 +
          (((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 -
             C13131 * C5464) *
                C114 +
            (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 -
             C13131 * C5467) *
                C30801) *
               C13128 +
           ((C13126 * C1166 - C13130 * C1156 + C13127 * C5693 -
             C13131 * C5692) *
                C114 +
            (C13126 * C1174 - C13130 * C1167 + C13127 * C5695 -
             C13131 * C5694) *
                C30801) *
               C13129) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C30664 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C30671 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30623 * C2868) *
              C30582 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30664 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30671 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C2868) *
              C30591 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C30664 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30671 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30858 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30664 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30858 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30671 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C18742 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C18740 +
             (C25375 - C25376 + C25377 - C25378) * C18743 +
             (C25379 - C25380 + C25381 - C25382) * C18741) *
                C30555 * C30858 +
            ((C25376 - C25375 + C25378 - C25377) * C18742 +
             (C25380 - C25379 + C25382 - C25381) * C18740 +
             (C25383 - C25384 + C25385 - C25386) * C18743 +
             (C25387 - C25388 + C25389 - C25390) * C18741) *
                C30555 * C30710) *
               C2868) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30858 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30664 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30858 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30671 +
           (((C13320 - C13319 + C13322 - C13321) * C18742 +
             (C13324 - C13323 + C13326 - C13325) * C18740 +
             (C14713 - C14714 + C14715 - C14716) * C18743 +
             (C14717 - C14718 + C14719 - C14720) * C18741) *
                C30555 * C30858 +
            ((C14714 - C14713 + C14716 - C14715) * C18742 +
             (C14718 - C14717 + C14720 - C14719) * C18740 +
             (C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C18743 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C18741) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C30932 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C30928 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30623 * C30918 +
           ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C25845 - C25846 + C25847 - C25848) * C18743 +
            (C25849 - C25850 + C25851 - C25852) * C18741) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30932 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30928 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30918 +
           ((C14512 - C14511 + C14514 - C14513) * C18742 +
            (C14516 - C14515 + C14518 - C14517) * C18740 +
            (C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
             C13131 * C5842) *
                C18743 +
            (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
             C13131 * C5844) *
                C18741) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30668) *
              C30924 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30668) *
              C30911 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13652 - C13651 + C13654 - C13653) * C18742 +
            (C13656 - C13655 + C13658 - C13657) * C18740 +
            (C13126 * C942 - C13130 * C934 + C13127 * C1585 - C13131 * C1584) *
                C18743 +
            (C13126 * C949 - C13130 * C943 + C13127 * C1587 - C13131 * C1586) *
                C18741) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30926 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30915 +
            ((C24524 - C24523 + C24526 - C24525) * C18742 +
             (C24528 - C24527 + C24530 - C24529) * C18740 +
             (C26227 - C26228 + C26229 - C26230) * C18743 +
             (C26231 - C26232 + C26233 - C26234) * C18741) *
                C30555 * C30891) *
               C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30926 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30915 +
            ((C25368 - C25367 + C25370 - C25369) * C18742 +
             (C25372 - C25371 + C25374 - C25373) * C18740 +
             (C26697 - C26698 + C26699 - C26700) * C18743 +
             (C26701 - C26702 + C26703 - C26704) * C18741) *
                C30555 * C30891) *
               C30668) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30926 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30915 +
            ((C13498 - C13497 + C13500 - C13499) * C18742 +
             (C13502 - C13501 + C13504 - C13503) * C18740 +
             (C15557 - C15558 + C15559 - C15560) * C18743 +
             (C15561 - C15562 + C15563 - C15564) * C18741) *
                C30555 * C30891) *
               C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30926 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30915 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2395 - C13130 * C2391 + C13127 * C6491 -
              C13131 * C6490) *
                 C18743 +
             (C13126 * C2400 - C13130 * C2396 + C13127 * C6493 -
              C13131 * C6492) *
                 C18741) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30858 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30858 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30582 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30858 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30858 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30591 +
          ((((C13142 - C13141 + C13144 - C13143) * C18742 +
             (C13146 - C13145 + C13148 - C13147) * C18740 +
             (C13505 - C13506 + C13507 - C13508) * C18743 +
             (C13509 - C13510 + C13511 - C13512) * C18741) *
                C30555 * C30858 +
            ((C13506 - C13505 + C13508 - C13507) * C18742 +
             (C13510 - C13509 + C13512 - C13511) * C18740 +
             (C13513 - C13514 + C13515 - C13516) * C18743 +
             (C13517 - C13518 + C13519 - C13520) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13328 - C13327 + C13330 - C13329) * C18742 +
             (C13332 - C13331 + C13334 - C13333) * C18740 +
             (C13999 - C14000 + C14001 - C14002) * C18743 +
             (C14003 - C14004 + C14005 - C14006) * C18741) *
                C30555 * C30858 +
            ((C14000 - C13999 + C14002 - C14001) * C18742 +
             (C14004 - C14003 + C14006 - C14005) * C18740 +
             (C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
              C13131 * C1294) *
                 C18743 +
             (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
              C13131 * C1312) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30668) *
              C30924 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30668) *
              C30911 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C30623 * C2500 +
           ((C13652 - C13651 + C13654 - C13653) * C18742 +
            (C13656 - C13655 + C13658 - C13657) * C18740 +
            (C13126 * C942 - C13130 * C934 + C13127 * C1585 - C13131 * C1584) *
                C18743 +
            (C13126 * C949 - C13130 * C943 + C13127 * C1587 - C13131 * C1586) *
                C18741) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C30932 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C30928 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30623 * C30918 +
           ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C25845 - C25846 + C25847 - C25848) * C18743 +
            (C25849 - C25850 + C25851 - C25852) * C18741) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30932 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30928 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30918 +
           ((C14512 - C14511 + C14514 - C14513) * C18742 +
            (C14516 - C14515 + C14518 - C14517) * C18740 +
            (C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
             C13131 * C5842) *
                C18743 +
            (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
             C13131 * C5844) *
                C18741) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C3262 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30664 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C3262 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30671 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C18742 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C18740 +
             (C25375 - C25376 + C25377 - C25378) * C18743 +
             (C25379 - C25380 + C25381 - C25382) * C18741) *
                C30555 * C3262 +
            ((C25376 - C25375 + C25378 - C25377) * C18742 +
             (C25380 - C25379 + C25382 - C25381) * C18740 +
             (C25383 - C25384 + C25385 - C25386) * C18743 +
             (C25387 - C25388 + C25389 - C25390) * C18741) *
                C30555 * C30710) *
               C2868) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C3262 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30664 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C3262 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30671 +
           (((C13320 - C13319 + C13322 - C13321) * C18742 +
             (C13324 - C13323 + C13326 - C13325) * C18740 +
             (C14713 - C14714 + C14715 - C14716) * C18743 +
             (C14717 - C14718 + C14719 - C14720) * C18741) *
                C30555 * C3262 +
            ((C14714 - C14713 + C14716 - C14715) * C18742 +
             (C14718 - C14717 + C14720 - C14719) * C18740 +
             (C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C18743 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C18741) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30706 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30713 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C26227 - C26228 + C26229 - C26230) * C18743 +
            (C26231 - C26232 + C26233 - C26234) * C18741) *
               C30555 * C3770) *
              C30664 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30706 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30713 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C26697 - C26698 + C26699 - C26700) * C18743 +
            (C26701 - C26702 + C26703 - C26704) * C18741) *
               C30555 * C3770) *
              C30671 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30706 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30713 +
           ((C25384 - C25383 + C25386 - C25385) * C18742 +
            (C25388 - C25387 + C25390 - C25389) * C18740 +
            (C13126 * C6233 - C13130 * C6230 + C13127 * C6593 -
             C13131 * C6592) *
                C18743 +
            (C13126 * C6239 - C13130 * C6234 + C13127 * C6595 -
             C13131 * C6594) *
                C18741) *
               C30555 * C3770) *
              C2868) *
         C30577) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C3262 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C30932 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C3262 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30710) *
              C30928 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C3262 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30710) *
              C30918 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C25845 - C25846 + C25847 - C25848) * C18743 +
            (C25849 - C25850 + C25851 - C25852) * C18741) *
               C30555 * C3262 +
           ((C25846 - C25845 + C25848 - C25847) * C18742 +
            (C25850 - C25849 + C25852 - C25851) * C18740 +
            (C13126 * C5585 - C13130 * C5582 + C13127 * C5589 -
             C13131 * C5584) *
                C18743 +
            (C13126 * C5591 - C13130 * C5586 + C13127 * C5593 -
             C13131 * C5590) *
                C18741) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C3262 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C3262 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C3262 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C3262 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C18742 +
             (C13146 - C13145 + C13148 - C13147) * C18740 +
             (C13505 - C13506 + C13507 - C13508) * C18743 +
             (C13509 - C13510 + C13511 - C13512) * C18741) *
                C30555 * C3262 +
            ((C13506 - C13505 + C13508 - C13507) * C18742 +
             (C13510 - C13509 + C13512 - C13511) * C18740 +
             (C13513 - C13514 + C13515 - C13516) * C18743 +
             (C13517 - C13518 + C13519 - C13520) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13328 - C13327 + C13330 - C13329) * C18742 +
             (C13332 - C13331 + C13334 - C13333) * C18740 +
             (C13999 - C14000 + C14001 - C14002) * C18743 +
             (C14003 - C14004 + C14005 - C14006) * C18741) *
                C30555 * C3262 +
            ((C14000 - C13999 + C14002 - C14001) * C18742 +
             (C14004 - C14003 + C14006 - C14005) * C18740 +
             (C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
              C13131 * C1294) *
                 C18743 +
             (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
              C13131 * C1312) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30933 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30930 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C26227 - C26228 + C26229 - C26230) * C18743 +
            (C26231 - C26232 + C26233 - C26234) * C18741) *
               C30555 * C30921 +
           ((C26228 - C26227 + C26230 - C26229) * C18742 +
            (C26232 - C26231 + C26234 - C26233) * C18740 +
            (C26235 - C26236 + C26237 - C26238) * C18743 +
            (C26239 - C26240 + C26241 - C26242) * C18741) *
               C30555 * C30904) *
              C2500 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30933 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30930 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C26697 - C26698 + C26699 - C26700) * C18743 +
            (C26701 - C26702 + C26703 - C26704) * C18741) *
               C30555 * C30921 +
           ((C26698 - C26697 + C26700 - C26699) * C18742 +
            (C26702 - C26701 + C26704 - C26703) * C18740 +
            (C13126 * C6235 - C13130 * C6231 + C13127 * C6236 -
             C13131 * C6232) *
                C18743 +
            (C13126 * C6240 - C13130 * C6237 + C13127 * C6241 -
             C13131 * C6238) *
                C18741) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30706 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30713 +
            ((C24524 - C24523 + C24526 - C24525) * C18742 +
             (C24528 - C24527 + C24530 - C24529) * C18740 +
             (C26227 - C26228 + C26229 - C26230) * C18743 +
             (C26231 - C26232 + C26233 - C26234) * C18741) *
                C30555 * C3770) *
               C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30706 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30713 +
            ((C25368 - C25367 + C25370 - C25369) * C18742 +
             (C25372 - C25371 + C25374 - C25373) * C18740 +
             (C26697 - C26698 + C26699 - C26700) * C18743 +
             (C26701 - C26702 + C26703 - C26704) * C18741) *
                C30555 * C3770) *
               C30668) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30706 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30713 +
            ((C13498 - C13497 + C13500 - C13499) * C18742 +
             (C13502 - C13501 + C13504 - C13503) * C18740 +
             (C15557 - C15558 + C15559 - C15560) * C18743 +
             (C15561 - C15562 + C15563 - C15564) * C18741) *
                C30555 * C3770) *
               C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30706 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30713 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2395 - C13130 * C2391 + C13127 * C6491 -
              C13131 * C6490) *
                 C18743 +
             (C13126 * C2400 - C13130 * C2396 + C13127 * C6493 -
              C13131 * C6492) *
                 C18741) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C3262 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C3262 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C3262 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C3262 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          ((((C13142 - C13141 + C13144 - C13143) * C18742 +
             (C13146 - C13145 + C13148 - C13147) * C18740 +
             (C13505 - C13506 + C13507 - C13508) * C18743 +
             (C13509 - C13510 + C13511 - C13512) * C18741) *
                C30555 * C3262 +
            ((C13506 - C13505 + C13508 - C13507) * C18742 +
             (C13510 - C13509 + C13512 - C13511) * C18740 +
             (C13513 - C13514 + C13515 - C13516) * C18743 +
             (C13517 - C13518 + C13519 - C13520) * C18741) *
                C30555 * C30710) *
               C2500 +
           (((C13328 - C13327 + C13330 - C13329) * C18742 +
             (C13332 - C13331 + C13334 - C13333) * C18740 +
             (C13999 - C14000 + C14001 - C14002) * C18743 +
             (C14003 - C14004 + C14005 - C14006) * C18741) *
                C30555 * C3262 +
            ((C14000 - C13999 + C14002 - C14001) * C18742 +
             (C14004 - C14003 + C14006 - C14005) * C18740 +
             (C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
              C13131 * C1294) *
                 C18743 +
             (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
              C13131 * C1312) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C3262 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C30932 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C3262 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30710) *
              C30928 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C3262 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30710) *
              C30918 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C25845 - C25846 + C25847 - C25848) * C18743 +
            (C25849 - C25850 + C25851 - C25852) * C18741) *
               C30555 * C3262 +
           ((C25846 - C25845 + C25848 - C25847) * C18742 +
            (C25850 - C25849 + C25852 - C25851) * C18740 +
            (C13126 * C5585 - C13130 * C5582 + C13127 * C5589 -
             C13131 * C5584) *
                C18743 +
            (C13126 * C5591 - C13130 * C5586 + C13127 * C5593 -
             C13131 * C5590) *
                C18741) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C1420 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C1421 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30623 * C1422 +
           ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C13130 * C1694 - C13126 * C1697 + C13131 * C5583 -
             C13127 * C5587) *
                C18743 +
            (C13130 * C1698 - C13126 * C1703 + C13131 * C5588 -
             C13127 * C5592) *
                C18741) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C1420 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C1421 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C1422 +
           ((C14512 - C14511 + C14514 - C14513) * C18742 +
            (C14516 - C14515 + C14518 - C14517) * C18740 +
            (C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
             C13131 * C5842) *
                C18743 +
            (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
             C13131 * C5844) *
                C18741) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C13130 * C931 - C13126 * C936 + C13131 * C1289 - C13127 * C1301) *
                C18743 +
            (C13130 * C937 - C13126 * C946 + C13131 * C1302 - C13127 * C1316) *
                C18741) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30668) *
              C656 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30668) *
              C657 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13652 - C13651 + C13654 - C13653) * C18742 +
            (C13656 - C13655 + C13658 - C13657) * C18740 +
            (C13126 * C942 - C13130 * C934 + C13127 * C1585 - C13131 * C1584) *
                C18743 +
            (C13126 * C949 - C13130 * C943 + C13127 * C1587 - C13131 * C1586) *
                C18741) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C1816 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C1817 +
            ((C24524 - C24523 + C24526 - C24525) * C18742 +
             (C24528 - C24527 + C24530 - C24529) * C18740 +
             (C26227 - C26228 + C26229 - C26230) * C18743 +
             (C26231 - C26232 + C26233 - C26234) * C18741) *
                C30555 * C30891) *
               C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C1816 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C1817 +
            ((C25368 - C25367 + C25370 - C25369) * C18742 +
             (C25372 - C25371 + C25374 - C25373) * C18740 +
             (C13130 * C2390 - C13126 * C2393 + C13131 * C6230 -
              C13127 * C6233) *
                 C18743 +
             (C13130 * C2394 - C13126 * C2399 + C13131 * C6234 -
              C13127 * C6239) *
                 C18741) *
                C30555 * C30891) *
               C30668) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C1816 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C1817 +
            ((C13498 - C13497 + C13500 - C13499) * C18742 +
             (C13502 - C13501 + C13504 - C13503) * C18740 +
             (C15557 - C15558 + C15559 - C15560) * C18743 +
             (C15561 - C15562 + C15563 - C15564) * C18741) *
                C30555 * C30891) *
               C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C1816 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C1817 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2395 - C13130 * C2391 + C13127 * C6491 -
              C13131 * C6490) *
                 C18743 +
             (C13126 * C2400 - C13130 * C2396 + C13127 * C6493 -
              C13131 * C6492) *
                 C18741) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30858 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C1420 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30858 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30710) *
              C1421 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30858 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30710) *
              C1422 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C25845 - C25846 + C25847 - C25848) * C18743 +
            (C25849 - C25850 + C25851 - C25852) * C18741) *
               C30555 * C30858 +
           ((C25846 - C25845 + C25848 - C25847) * C18742 +
            (C25850 - C25849 + C25852 - C25851) * C18740 +
            (C13126 * C5585 - C13130 * C5582 + C13127 * C5589 -
             C13131 * C5584) *
                C18743 +
            (C13126 * C5591 - C13130 * C5586 + C13127 * C5593 -
             C13131 * C5590) *
                C18741) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30858 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30858 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C13126 * C1295 - C13130 * C1286 + C13127 * C1307 -
              C13131 * C1292) *
                 C18743 +
             (C13126 * C1313 - C13130 * C1296 + C13127 * C1319 -
              C13131 * C1308) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30858 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30858 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30668) *
              C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C18742 +
             (C13146 - C13145 + C13148 - C13147) * C18740 +
             (C13505 - C13506 + C13507 - C13508) * C18743 +
             (C13509 - C13510 + C13511 - C13512) * C18741) *
                C30555 * C30858 +
            ((C13506 - C13505 + C13508 - C13507) * C18742 +
             (C13510 - C13509 + C13512 - C13511) * C18740 +
             (C13513 - C13514 + C13515 - C13516) * C18743 +
             (C13517 - C13518 + C13519 - C13520) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13328 - C13327 + C13330 - C13329) * C18742 +
             (C13332 - C13331 + C13334 - C13333) * C18740 +
             (C13999 - C14000 + C14001 - C14002) * C18743 +
             (C14003 - C14004 + C14005 - C14006) * C18741) *
                C30555 * C30858 +
            ((C14000 - C13999 + C14002 - C14001) * C18742 +
             (C14004 - C14003 + C14006 - C14005) * C18740 +
             (C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
              C13131 * C1294) *
                 C18743 +
             (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
              C13131 * C1312) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C2276 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C2277 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C26227 - C26228 + C26229 - C26230) * C18743 +
            (C26231 - C26232 + C26233 - C26234) * C18741) *
               C30555 * C2278 +
           ((C26228 - C26227 + C26230 - C26229) * C18742 +
            (C26232 - C26231 + C26234 - C26233) * C18740 +
            (C26235 - C26236 + C26237 - C26238) * C18743 +
            (C26239 - C26240 + C26241 - C26242) * C18741) *
               C30555 * C30904) *
              C30857 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C2276 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C2277 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C26697 - C26698 + C26699 - C26700) * C18743 +
            (C26701 - C26702 + C26703 - C26704) * C18741) *
               C30555 * C2278 +
           ((C26698 - C26697 + C26700 - C26699) * C18742 +
            (C26702 - C26701 + C26704 - C26703) * C18740 +
            (C13126 * C6235 - C13130 * C6231 + C13127 * C6236 -
             C13131 * C6232) *
                C18743 +
            (C13126 * C6240 - C13130 * C6237 + C13127 * C6241 -
             C13131 * C6238) *
                C18741) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                   C18742 +
               (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                   C18740 +
               (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
                   C18743 +
               (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
                   C18741) *
                  C30555 * C30623 * C30605 * C108 +
              ((C13134 - C13133 + C13136 - C13135) * C18742 +
               (C13138 - C13137 + C13140 - C13139) * C18740 +
               (C13489 - C13490 + C13491 - C13492) * C18743 +
               (C13493 - C13494 + C13495 - C13496) * C18741) *
                  C30555 * C30623 * C30605 * C109 +
              ((C13142 - C13141 + C13144 - C13143) * C18742 +
               (C13146 - C13145 + C13148 - C13147) * C18740 +
               (C13505 - C13506 + C13507 - C13508) * C18743 +
               (C13509 - C13510 + C13511 - C13512) * C18741) *
                  C30555 * C30623 * C30605 * C110 +
              ((C13150 - C13149 + C13152 - C13151) * C18742 +
               (C13154 - C13153 + C13156 - C13155) * C18740 +
               (C13789 - C13790 + C13791 - C13792) * C18743 +
               (C13793 - C13794 + C13795 - C13796) * C18741) *
                  C30555 * C30623 * C30605 * C111 +
              ((C13158 - C13157 + C13160 - C13159) * C18742 +
               (C13162 - C13161 + C13164 - C13163) * C18740 +
               (C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
                   C18743 +
               (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
                   C18741) *
                  C30555 * C30623 * C30605 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13126 * C122 - C13130 * C115 + C13127 * C304 -
                 C13131 * C294) *
                    C18742 +
                (C13126 * C136 - C13130 * C123 + C13127 * C324 -
                 C13131 * C305) *
                    C18740 +
                (C13126 * C491 - C13130 * C481 + C13127 * C936 -
                 C13131 * C931) *
                    C18743 +
                (C13126 * C511 - C13130 * C492 + C13127 * C946 -
                 C13131 * C937) *
                    C18741) *
                   C30555 * C30623 * C30925 +
               ((C13130 * C294 - C13126 * C304 + C13131 * C297 -
                 C13127 * C310) *
                    C18742 +
                (C13130 * C305 - C13126 * C324 + C13131 * C311 -
                 C13127 * C327) *
                    C18740 +
                (C13130 * C931 - C13126 * C936 + C13131 * C1289 -
                 C13127 * C1301) *
                    C18743 +
                (C13130 * C937 - C13126 * C946 + C13131 * C1302 -
                 C13127 * C1316) *
                    C18741) *
                   C30555 * C30623 * C30913 +
               ((C13126 * C310 - C13130 * C297 + C13127 * C1158 -
                 C13131 * C1152) *
                    C18742 +
                (C13126 * C327 - C13130 * C311 + C13127 * C1170 -
                 C13131 * C1159) *
                    C18740 +
                (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
                 C13131 * C1694) *
                    C18743 +
                (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
                 C13131 * C1698) *
                    C18741) *
                   C30555 * C30623 * C30888) *
                  C291 +
              (((C13134 - C13133 + C13136 - C13135) * C18742 +
                (C13138 - C13137 + C13140 - C13139) * C18740 +
                (C13489 - C13490 + C13491 - C13492) * C18743 +
                (C13493 - C13494 + C13495 - C13496) * C18741) *
                   C30555 * C30623 * C30925 +
               ((C13312 - C13311 + C13314 - C13313) * C18742 +
                (C13316 - C13315 + C13318 - C13317) * C18740 +
                (C13991 - C13992 + C13993 - C13994) * C18743 +
                (C13995 - C13996 + C13997 - C13998) * C18741) *
                   C30555 * C30623 * C30913 +
               ((C13320 - C13319 + C13322 - C13321) * C18742 +
                (C13324 - C13323 + C13326 - C13325) * C18740 +
                (C14713 - C14714 + C14715 - C14716) * C18743 +
                (C14717 - C14718 + C14719 - C14720) * C18741) *
                   C30555 * C30623 * C30888) *
                  C292 +
              (((C13142 - C13141 + C13144 - C13143) * C18742 +
                (C13146 - C13145 + C13148 - C13147) * C18740 +
                (C13505 - C13506 + C13507 - C13508) * C18743 +
                (C13509 - C13510 + C13511 - C13512) * C18741) *
                   C30555 * C30623 * C30925 +
               ((C13328 - C13327 + C13330 - C13329) * C18742 +
                (C13332 - C13331 + C13334 - C13333) * C18740 +
                (C13999 - C14000 + C14001 - C14002) * C18743 +
                (C14003 - C14004 + C14005 - C14006) * C18741) *
                   C30555 * C30623 * C30913 +
               ((C13336 - C13335 + C13338 - C13337) * C18742 +
                (C13340 - C13339 + C13342 - C13341) * C18740 +
                (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
                 C13131 * C1696) *
                    C18743 +
                (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
                 C13131 * C1702) *
                    C18741) *
                   C30555 * C30623 * C30888) *
                  C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30926 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30915 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30926 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30915 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C30891) *
              C30605 * C292 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30926 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30915 +
           ((C13514 - C13513 + C13516 - C13515) * C18742 +
            (C13518 - C13517 + C13520 - C13519) * C18740 +
            (C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
             C13131 * C2392) *
                C18743 +
            (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
             C13131 * C2398) *
                C18741) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C24515 - C24516 + C24517 - C24518) * C18743 +
           (C24519 - C24520 + C24521 - C24522) * C18741) *
              C30555 * C30623 * C1146 +
          ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
               C18742 +
           (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
               C18740 +
           (C24985 - C24986 + C24987 - C24988) * C18743 +
           (C24989 - C24990 + C24991 - C24992) * C18741) *
              C30555 * C30623 * C1147 +
          ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
               C18742 +
           (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
               C18740 +
           (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 - C13131 * C1694) *
               C18743 +
           (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 - C13131 * C1698) *
               C18741) *
              C30555 * C30623 * C1148 +
          ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 - C13127 * C1164) *
               C18742 +
           (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 - C13127 * C1173) *
               C18740 +
           (C13130 * C1694 - C13126 * C1697 + C13131 * C5583 - C13127 * C5587) *
               C18743 +
           (C13130 * C1698 - C13126 * C1703 + C13131 * C5588 - C13127 * C5592) *
               C18741) *
              C30555 * C30623 * C1149 +
          ((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 - C13131 * C5464) *
               C18742 +
           (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 - C13131 * C5467) *
               C18740 +
           (C13126 * C5587 - C13130 * C5583 + C13127 * C5945 - C13131 * C5944) *
               C18743 +
           (C13126 * C5592 - C13130 * C5588 + C13127 * C5947 - C13131 * C5946) *
               C18741) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30926 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30915 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C1078 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30926 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30915 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C13130 * C2390 - C13126 * C2393 + C13131 * C6230 -
             C13127 * C6233) *
                C18743 +
            (C13130 * C2394 - C13126 * C2399 + C13131 * C6234 -
             C13127 * C6239) *
                C18741) *
               C30555 * C30891) *
              C1079 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30926 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30915 +
           ((C25384 - C25383 + C25386 - C25385) * C18742 +
            (C25388 - C25387 + C25390 - C25389) * C18740 +
            (C13126 * C6233 - C13130 * C6230 + C13127 * C6593 -
             C13131 * C6592) *
                C18743 +
            (C13126 * C6239 - C13130 * C6234 + C13127 * C6595 -
             C13131 * C6594) *
                C18741) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C1816 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C1817 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C1816 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C1817 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C30891) *
              C30605 * C30909 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C1816 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C1817 +
           ((C13514 - C13513 + C13516 - C13515) * C18742 +
            (C13518 - C13517 + C13520 - C13519) * C18740 +
            (C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
             C13131 * C2392) *
                C18743 +
            (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
             C13131 * C2398) *
                C18741) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C1816 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C1817 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C30925 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C1816 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C1817 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C13130 * C2390 - C13126 * C2393 + C13131 * C6230 -
             C13127 * C6233) *
                C18743 +
            (C13130 * C2394 - C13126 * C2399 + C13131 * C6234 -
             C13127 * C6239) *
                C18741) *
               C30555 * C30891) *
              C30913 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C1816 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C1817 +
           ((C25384 - C25383 + C25386 - C25385) * C18742 +
            (C25388 - C25387 + C25390 - C25389) * C18740 +
            (C13126 * C6233 - C13130 * C6230 + C13127 * C6593 -
             C13131 * C6592) *
                C18743 +
            (C13126 * C6239 - C13130 * C6234 + C13127 * C6595 -
             C13131 * C6594) *
                C18741) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C24515 - C24516 + C24517 - C24518) * C18743 +
           (C24519 - C24520 + C24521 - C24522) * C18741) *
              C30555 * C1991 +
          ((C24516 - C24515 + C24518 - C24517) * C18742 +
           (C24520 - C24519 + C24522 - C24521) * C18740 +
           (C24523 - C24524 + C24525 - C24526) * C18743 +
           (C24527 - C24528 + C24529 - C24530) * C18741) *
              C30555 * C1992 +
          ((C24524 - C24523 + C24526 - C24525) * C18742 +
           (C24528 - C24527 + C24530 - C24529) * C18740 +
           (C26227 - C26228 + C26229 - C26230) * C18743 +
           (C26231 - C26232 + C26233 - C26234) * C18741) *
              C30555 * C1993 +
          ((C26228 - C26227 + C26230 - C26229) * C18742 +
           (C26232 - C26231 + C26234 - C26233) * C18740 +
           (C26235 - C26236 + C26237 - C26238) * C18743 +
           (C26239 - C26240 + C26241 - C26242) * C18741) *
              C30555 * C1994 +
          ((C26236 - C26235 + C26238 - C26237) * C18742 +
           (C26240 - C26239 + C26242 - C26241) * C18740 +
           (C13126 * C10422 - C13130 * C10420 + C13127 * C10803 -
            C13131 * C10802) *
               C18743 +
           (C13126 * C10426 - C13130 * C10423 + C13127 * C10805 -
            C13131 * C10804) *
               C18741) *
              C30555 * C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30858 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C1078 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30858 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C1079 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C18742 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C18740 +
             (C25375 - C25376 + C25377 - C25378) * C18743 +
             (C25379 - C25380 + C25381 - C25382) * C18741) *
                C30555 * C30858 +
            ((C25376 - C25375 + C25378 - C25377) * C18742 +
             (C25380 - C25379 + C25382 - C25381) * C18740 +
             (C25383 - C25384 + C25385 - C25386) * C18743 +
             (C25387 - C25388 + C25389 - C25390) * C18741) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30858 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C1078 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30858 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C1079 +
           (((C13320 - C13319 + C13322 - C13321) * C18742 +
             (C13324 - C13323 + C13326 - C13325) * C18740 +
             (C14713 - C14714 + C14715 - C14716) * C18743 +
             (C14717 - C14718 + C14719 - C14720) * C18741) *
                C30555 * C30858 +
            ((C14714 - C14713 + C14716 - C14715) * C18742 +
             (C14718 - C14717 + C14720 - C14719) * C18740 +
             (C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C18743 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C18741) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30858 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30858 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30710) *
              C30605 * C656 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30858 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30710) *
              C30605 * C657 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C30858 +
           ((C13790 - C13789 + C13792 - C13791) * C18742 +
            (C13794 - C13793 + C13796 - C13795) * C18740 +
            (C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                C18743 +
            (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                C18741) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C2276 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C2277 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C26227 - C26228 + C26229 - C26230) * C18743 +
            (C26231 - C26232 + C26233 - C26234) * C18741) *
               C30555 * C2278 +
           ((C26228 - C26227 + C26230 - C26229) * C18742 +
            (C26232 - C26231 + C26234 - C26233) * C18740 +
            (C26235 - C26236 + C26237 - C26238) * C18743 +
            (C26239 - C26240 + C26241 - C26242) * C18741) *
               C30555 * C30904) *
              C30605 * C30843 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C2276 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C2277 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C2278 +
           ((C15558 - C15557 + C15560 - C15559) * C18742 +
            (C15562 - C15561 + C15564 - C15563) * C18740 +
            (C13126 * C2010 - C13130 * C2000 + C13127 * C10587 -
             C13131 * C10586) *
                C18743 +
            (C13126 * C2018 - C13130 * C2011 + C13127 * C10589 -
             C13131 * C10588) *
                C18741) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
                C18743 +
            (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
                C18741) *
               C30555 * C30623 * C30925 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C13130 * C931 - C13126 * C936 + C13131 * C1289 - C13127 * C1301) *
                C18743 +
            (C13130 * C937 - C13126 * C946 + C13131 * C1302 - C13127 * C1316) *
                C18741) *
               C30555 * C30623 * C30913 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30925 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30913 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C30925 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30913 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
               C18743 +
           (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
               C18741) *
              C30555 * C30623 * C30605 * C108 +
          ((C13134 - C13133 + C13136 - C13135) * C18742 +
           (C13138 - C13137 + C13140 - C13139) * C18740 +
           (C13489 - C13490 + C13491 - C13492) * C18743 +
           (C13493 - C13494 + C13495 - C13496) * C18741) *
              C30555 * C30623 * C30605 * C109 +
          ((C13142 - C13141 + C13144 - C13143) * C18742 +
           (C13146 - C13145 + C13148 - C13147) * C18740 +
           (C13505 - C13506 + C13507 - C13508) * C18743 +
           (C13509 - C13510 + C13511 - C13512) * C18741) *
              C30555 * C30623 * C30605 * C110 +
          ((C13150 - C13149 + C13152 - C13151) * C18742 +
           (C13154 - C13153 + C13156 - C13155) * C18740 +
           (C13789 - C13790 + C13791 - C13792) * C18743 +
           (C13793 - C13794 + C13795 - C13796) * C18741) *
              C30555 * C30623 * C30605 * C111 +
          ((C13158 - C13157 + C13160 - C13159) * C18742 +
           (C13162 - C13161 + C13164 - C13163) * C18740 +
           (C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
               C18743 +
           (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
               C18741) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C24515 - C24516 + C24517 - C24518) * C18743 +
           (C24519 - C24520 + C24521 - C24522) * C18741) *
              C30555 * C30623 * C1146 +
          ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
               C18742 +
           (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
               C18740 +
           (C24985 - C24986 + C24987 - C24988) * C18743 +
           (C24989 - C24990 + C24991 - C24992) * C18741) *
              C30555 * C30623 * C1147 +
          ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
               C18742 +
           (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
               C18740 +
           (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 - C13131 * C1694) *
               C18743 +
           (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 - C13131 * C1698) *
               C18741) *
              C30555 * C30623 * C1148 +
          ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 - C13127 * C1164) *
               C18742 +
           (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 - C13127 * C1173) *
               C18740 +
           (C13130 * C1694 - C13126 * C1697 + C13131 * C5583 - C13127 * C5587) *
               C18743 +
           (C13130 * C1698 - C13126 * C1703 + C13131 * C5588 - C13127 * C5592) *
               C18741) *
              C30555 * C30623 * C1149 +
          ((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 - C13131 * C5464) *
               C18742 +
           (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 - C13131 * C5467) *
               C18740 +
           (C13126 * C5587 - C13130 * C5583 + C13127 * C5945 - C13131 * C5944) *
               C18743 +
           (C13126 * C5592 - C13130 * C5588 + C13127 * C5947 - C13131 * C5946) *
               C18741) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C1816 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C1817 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C1816 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C1817 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C30891) *
              C30605 * C30909 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C1816 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C1817 +
           ((C13514 - C13513 + C13516 - C13515) * C18742 +
            (C13518 - C13517 + C13520 - C13519) * C18740 +
            (C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
             C13131 * C2392) *
                C18743 +
            (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
             C13131 * C2398) *
                C18741) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C1816 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C1817 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C30925 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C1816 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C1817 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C13130 * C2390 - C13126 * C2393 + C13131 * C6230 -
             C13127 * C6233) *
                C18743 +
            (C13130 * C2394 - C13126 * C2399 + C13131 * C6234 -
             C13127 * C6239) *
                C18741) *
               C30555 * C30891) *
              C30913 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C1816 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C1817 +
           ((C25384 - C25383 + C25386 - C25385) * C18742 +
            (C25388 - C25387 + C25390 - C25389) * C18740 +
            (C13126 * C6233 - C13130 * C6230 + C13127 * C6593 -
             C13131 * C6592) *
                C18743 +
            (C13126 * C6239 - C13130 * C6234 + C13127 * C6595 -
             C13131 * C6594) *
                C18741) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C3262 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C3262 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30582 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C3262 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C3262 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30668) *
              C30591 +
          ((((C13142 - C13141 + C13144 - C13143) * C18742 +
             (C13146 - C13145 + C13148 - C13147) * C18740 +
             (C13505 - C13506 + C13507 - C13508) * C18743 +
             (C13509 - C13510 + C13511 - C13512) * C18741) *
                C30555 * C3262 +
            ((C13506 - C13505 + C13508 - C13507) * C18742 +
             (C13510 - C13509 + C13512 - C13511) * C18740 +
             (C13513 - C13514 + C13515 - C13516) * C18743 +
             (C13517 - C13518 + C13519 - C13520) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13328 - C13327 + C13330 - C13329) * C18742 +
             (C13332 - C13331 + C13334 - C13333) * C18740 +
             (C13999 - C14000 + C14001 - C14002) * C18743 +
             (C14003 - C14004 + C14005 - C14006) * C18741) *
                C30555 * C3262 +
            ((C14000 - C13999 + C14002 - C14001) * C18742 +
             (C14004 - C14003 + C14006 - C14005) * C18740 +
             (C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
              C13131 * C1294) *
                 C18743 +
             (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
              C13131 * C1312) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30706 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30713 +
            ((C24524 - C24523 + C24526 - C24525) * C18742 +
             (C24528 - C24527 + C24530 - C24529) * C18740 +
             (C26227 - C26228 + C26229 - C26230) * C18743 +
             (C26231 - C26232 + C26233 - C26234) * C18741) *
                C30555 * C3770) *
               C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30706 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30713 +
            ((C25368 - C25367 + C25370 - C25369) * C18742 +
             (C25372 - C25371 + C25374 - C25373) * C18740 +
             (C26697 - C26698 + C26699 - C26700) * C18743 +
             (C26701 - C26702 + C26703 - C26704) * C18741) *
                C30555 * C3770) *
               C30668) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30706 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30713 +
            ((C13498 - C13497 + C13500 - C13499) * C18742 +
             (C13502 - C13501 + C13504 - C13503) * C18740 +
             (C15557 - C15558 + C15559 - C15560) * C18743 +
             (C15561 - C15562 + C15563 - C15564) * C18741) *
                C30555 * C3770) *
               C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30706 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30713 +
            ((C15420 - C15419 + C15422 - C15421) * C18742 +
             (C15424 - C15423 + C15426 - C15425) * C18740 +
             (C13126 * C2395 - C13130 * C2391 + C13127 * C6491 -
              C13131 * C6490) *
                 C18743 +
             (C13126 * C2400 - C13130 * C2396 + C13127 * C6493 -
              C13131 * C6492) *
                 C18741) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C3262 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30925 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C3262 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30913 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C18742 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C18740 +
             (C25375 - C25376 + C25377 - C25378) * C18743 +
             (C25379 - C25380 + C25381 - C25382) * C18741) *
                C30555 * C3262 +
            ((C25376 - C25375 + C25378 - C25377) * C18742 +
             (C25380 - C25379 + C25382 - C25381) * C18740 +
             (C25383 - C25384 + C25385 - C25386) * C18743 +
             (C25387 - C25388 + C25389 - C25390) * C18741) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C3262 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30925 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C3262 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30913 +
           (((C13320 - C13319 + C13322 - C13321) * C18742 +
             (C13324 - C13323 + C13326 - C13325) * C18740 +
             (C14713 - C14714 + C14715 - C14716) * C18743 +
             (C14717 - C14718 + C14719 - C14720) * C18741) *
                C30555 * C3262 +
            ((C14714 - C14713 + C14716 - C14715) * C18742 +
             (C14718 - C14717 + C14720 - C14719) * C18740 +
             (C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C18743 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C18741) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C3262 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C3262 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30710) *
              C30605 * C30924 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C3262 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30710) *
              C30605 * C30911 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C3262 +
           ((C13790 - C13789 + C13792 - C13791) * C18742 +
            (C13794 - C13793 + C13796 - C13795) * C18740 +
            (C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                C18743 +
            (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                C18741) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30933 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30930 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C26227 - C26228 + C26229 - C26230) * C18743 +
            (C26231 - C26232 + C26233 - C26234) * C18741) *
               C30555 * C30921 +
           ((C26228 - C26227 + C26230 - C26229) * C18742 +
            (C26232 - C26231 + C26234 - C26233) * C18740 +
            (C26235 - C26236 + C26237 - C26238) * C18743 +
            (C26239 - C26240 + C26241 - C26242) * C18741) *
               C30555 * C30904) *
              C30605 * C2608 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30933 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30930 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C30921 +
           ((C15558 - C15557 + C15560 - C15559) * C18742 +
            (C15562 - C15561 + C15564 - C15563) * C18740 +
            (C13126 * C2010 - C13130 * C2000 + C13127 * C10587 -
             C13131 * C10586) *
                C18743 +
            (C13126 * C2018 - C13130 * C2011 + C13127 * C10589 -
             C13131 * C10588) *
                C18741) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30706 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30713 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C26227 - C26228 + C26229 - C26230) * C18743 +
            (C26231 - C26232 + C26233 - C26234) * C18741) *
               C30555 * C3770) *
              C30605 * C30582 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30706 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30713 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C3770) *
              C30605 * C30591 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30706 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30713 +
           ((C13514 - C13513 + C13516 - C13515) * C18742 +
            (C13518 - C13517 + C13520 - C13519) * C18740 +
            (C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
             C13131 * C2392) *
                C18743 +
            (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
             C13131 * C2398) *
                C18741) *
               C30555 * C3770) *
              C30605 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C3262 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C3262 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30710) *
              C30605 * C30924 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C3262 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30710) *
              C30605 * C30911 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C3262 +
           ((C13790 - C13789 + C13792 - C13791) * C18742 +
            (C13794 - C13793 + C13796 - C13795) * C18740 +
            (C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                C18743 +
            (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                C18741) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C3262 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30925 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C3262 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C30913 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C18742 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C18740 +
             (C25375 - C25376 + C25377 - C25378) * C18743 +
             (C25379 - C25380 + C25381 - C25382) * C18741) *
                C30555 * C3262 +
            ((C25376 - C25375 + C25378 - C25377) * C18742 +
             (C25380 - C25379 + C25382 - C25381) * C18740 +
             (C25383 - C25384 + C25385 - C25386) * C18743 +
             (C25387 - C25388 + C25389 - C25390) * C18741) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C3262 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30925 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C3262 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30913 +
           (((C13320 - C13319 + C13322 - C13321) * C18742 +
             (C13324 - C13323 + C13326 - C13325) * C18740 +
             (C14713 - C14714 + C14715 - C14716) * C18743 +
             (C14717 - C14718 + C14719 - C14720) * C18741) *
                C30555 * C3262 +
            ((C14714 - C14713 + C14716 - C14715) * C18742 +
             (C14718 - C14717 + C14720 - C14719) * C18740 +
             (C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C18743 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C18741) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C13130 * C931 - C13126 * C936 + C13131 * C1289 - C13127 * C1301) *
                C18743 +
            (C13130 * C937 - C13126 * C946 + C13131 * C1302 - C13127 * C1316) *
                C18741) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30668) *
              C656 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30668) *
              C657 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C30623 * C30857 +
           ((C13652 - C13651 + C13654 - C13653) * C18742 +
            (C13656 - C13655 + C13658 - C13657) * C18740 +
            (C13126 * C942 - C13130 * C934 + C13127 * C1585 - C13131 * C1584) *
                C18743 +
            (C13126 * C949 - C13130 * C943 + C13127 * C1587 - C13131 * C1586) *
                C18741) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C1420 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C1421 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30623 * C1422 +
           ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C13130 * C1694 - C13126 * C1697 + C13131 * C5583 -
             C13127 * C5587) *
                C18743 +
            (C13130 * C1698 - C13126 * C1703 + C13131 * C5588 -
             C13127 * C5592) *
                C18741) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C1420 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C1421 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C1422 +
           ((C14512 - C14511 + C14514 - C14513) * C18742 +
            (C14516 - C14515 + C14518 - C14517) * C18740 +
            (C13126 * C1699 - C13130 * C1695 + C13127 * C5843 -
             C13131 * C5842) *
                C18743 +
            (C13126 * C1704 - C13130 * C1700 + C13127 * C5845 -
             C13131 * C5844) *
                C18741) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30858 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30858 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C13126 * C1295 - C13130 * C1286 + C13127 * C1307 -
              C13131 * C1292) *
                 C18743 +
             (C13126 * C1313 - C13130 * C1296 + C13127 * C1319 -
              C13131 * C1308) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30858 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30858 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C30668) *
              C292 +
          ((((C13142 - C13141 + C13144 - C13143) * C18742 +
             (C13146 - C13145 + C13148 - C13147) * C18740 +
             (C13505 - C13506 + C13507 - C13508) * C18743 +
             (C13509 - C13510 + C13511 - C13512) * C18741) *
                C30555 * C30858 +
            ((C13506 - C13505 + C13508 - C13507) * C18742 +
             (C13510 - C13509 + C13512 - C13511) * C18740 +
             (C13513 - C13514 + C13515 - C13516) * C18743 +
             (C13517 - C13518 + C13519 - C13520) * C18741) *
                C30555 * C30710) *
               C30857 +
           (((C13328 - C13327 + C13330 - C13329) * C18742 +
             (C13332 - C13331 + C13334 - C13333) * C18740 +
             (C13999 - C14000 + C14001 - C14002) * C18743 +
             (C14003 - C14004 + C14005 - C14006) * C18741) *
                C30555 * C30858 +
            ((C14000 - C13999 + C14002 - C14001) * C18742 +
             (C14004 - C14003 + C14006 - C14005) * C18740 +
             (C13126 * C1299 - C13130 * C1288 + C13127 * C1311 -
              C13131 * C1294) *
                 C18743 +
             (C13126 * C1315 - C13130 * C1300 + C13127 * C1321 -
              C13131 * C1312) *
                 C18741) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30858 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C1420 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30858 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30710) *
              C1421 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30858 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30710) *
              C1422 +
          (((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 -
             C13127 * C1164) *
                C18742 +
            (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 -
             C13127 * C1173) *
                C18740 +
            (C25845 - C25846 + C25847 - C25848) * C18743 +
            (C25849 - C25850 + C25851 - C25852) * C18741) *
               C30555 * C30858 +
           ((C25846 - C25845 + C25848 - C25847) * C18742 +
            (C25850 - C25849 + C25852 - C25851) * C18740 +
            (C13126 * C5585 - C13130 * C5582 + C13127 * C5589 -
             C13131 * C5584) *
                C18743 +
            (C13126 * C5591 - C13130 * C5586 + C13127 * C5593 -
             C13131 * C5590) *
                C18741) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
                C18743 +
            (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
                C18741) *
               C30555 * C30623 * C30925 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C13130 * C931 - C13126 * C936 + C13131 * C1289 - C13127 * C1301) *
                C18743 +
            (C13130 * C937 - C13126 * C946 + C13131 * C1302 - C13127 * C1316) *
                C18741) *
               C30555 * C30623 * C30913 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30925 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30913 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C30925 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30913 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
               C18743 +
           (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
               C18741) *
              C30555 * C30623 * C30605 * C108 +
          ((C13134 - C13133 + C13136 - C13135) * C18742 +
           (C13138 - C13137 + C13140 - C13139) * C18740 +
           (C13489 - C13490 + C13491 - C13492) * C18743 +
           (C13493 - C13494 + C13495 - C13496) * C18741) *
              C30555 * C30623 * C30605 * C109 +
          ((C13142 - C13141 + C13144 - C13143) * C18742 +
           (C13146 - C13145 + C13148 - C13147) * C18740 +
           (C13505 - C13506 + C13507 - C13508) * C18743 +
           (C13509 - C13510 + C13511 - C13512) * C18741) *
              C30555 * C30623 * C30605 * C110 +
          ((C13150 - C13149 + C13152 - C13151) * C18742 +
           (C13154 - C13153 + C13156 - C13155) * C18740 +
           (C13789 - C13790 + C13791 - C13792) * C18743 +
           (C13793 - C13794 + C13795 - C13796) * C18741) *
              C30555 * C30623 * C30605 * C111 +
          ((C13158 - C13157 + C13160 - C13159) * C18742 +
           (C13162 - C13161 + C13164 - C13163) * C18740 +
           (C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
               C18743 +
           (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
               C18741) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30926 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30915 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30926 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30915 +
           ((C13498 - C13497 + C13500 - C13499) * C18742 +
            (C13502 - C13501 + C13504 - C13503) * C18740 +
            (C15557 - C15558 + C15559 - C15560) * C18743 +
            (C15561 - C15562 + C15563 - C15564) * C18741) *
               C30555 * C30891) *
              C30605 * C292 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30926 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30915 +
           ((C13514 - C13513 + C13516 - C13515) * C18742 +
            (C13518 - C13517 + C13520 - C13519) * C18740 +
            (C13126 * C2006 - C13130 * C1998 + C13127 * C2397 -
             C13131 * C2392) *
                C18743 +
            (C13126 * C2016 - C13130 * C2007 + C13127 * C2401 -
             C13131 * C2398) *
                C18741) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C24515 - C24516 + C24517 - C24518) * C18743 +
           (C24519 - C24520 + C24521 - C24522) * C18741) *
              C30555 * C30623 * C1146 +
          ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
               C18742 +
           (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
               C18740 +
           (C24985 - C24986 + C24987 - C24988) * C18743 +
           (C24989 - C24990 + C24991 - C24992) * C18741) *
              C30555 * C30623 * C1147 +
          ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
               C18742 +
           (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
               C18740 +
           (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 - C13131 * C1694) *
               C18743 +
           (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 - C13131 * C1698) *
               C18741) *
              C30555 * C30623 * C1148 +
          ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 - C13127 * C1164) *
               C18742 +
           (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 - C13127 * C1173) *
               C18740 +
           (C13130 * C1694 - C13126 * C1697 + C13131 * C5583 - C13127 * C5587) *
               C18743 +
           (C13130 * C1698 - C13126 * C1703 + C13131 * C5588 - C13127 * C5592) *
               C18741) *
              C30555 * C30623 * C1149 +
          ((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 - C13131 * C5464) *
               C18742 +
           (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 - C13131 * C5467) *
               C18740 +
           (C13126 * C5587 - C13130 * C5583 + C13127 * C5945 - C13131 * C5944) *
               C18743 +
           (C13126 * C5592 - C13130 * C5588 + C13127 * C5947 - C13131 * C5946) *
               C18741) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30926 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30915 +
           ((C24524 - C24523 + C24526 - C24525) * C18742 +
            (C24528 - C24527 + C24530 - C24529) * C18740 +
            (C13126 * C2002 - C13130 * C1996 + C13127 * C2393 -
             C13131 * C2390) *
                C18743 +
            (C13126 * C2014 - C13130 * C2003 + C13127 * C2399 -
             C13131 * C2394) *
                C18741) *
               C30555 * C30891) *
              C1078 +
          (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30926 +
           ((C24986 - C24985 + C24988 - C24987) * C18742 +
            (C24990 - C24989 + C24992 - C24991) * C18740 +
            (C25367 - C25368 + C25369 - C25370) * C18743 +
            (C25371 - C25372 + C25373 - C25374) * C18741) *
               C30555 * C30915 +
           ((C25368 - C25367 + C25370 - C25369) * C18742 +
            (C25372 - C25371 + C25374 - C25373) * C18740 +
            (C13130 * C2390 - C13126 * C2393 + C13131 * C6230 -
             C13127 * C6233) *
                C18743 +
            (C13130 * C2394 - C13126 * C2399 + C13131 * C6234 -
             C13127 * C6239) *
                C18741) *
               C30555 * C30891) *
              C1079 +
          (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C25375 - C25376 + C25377 - C25378) * C18743 +
            (C25379 - C25380 + C25381 - C25382) * C18741) *
               C30555 * C30926 +
           ((C25376 - C25375 + C25378 - C25377) * C18742 +
            (C25380 - C25379 + C25382 - C25381) * C18740 +
            (C25383 - C25384 + C25385 - C25386) * C18743 +
            (C25387 - C25388 + C25389 - C25390) * C18741) *
               C30555 * C30915 +
           ((C25384 - C25383 + C25386 - C25385) * C18742 +
            (C25388 - C25387 + C25390 - C25389) * C18740 +
            (C13126 * C6233 - C13130 * C6230 + C13127 * C6593 -
             C13131 * C6592) *
                C18743 +
            (C13126 * C6239 - C13130 * C6234 + C13127 * C6595 -
             C13131 * C6594) *
                C18741) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30858 +
           ((C24516 - C24515 + C24518 - C24517) * C18742 +
            (C24520 - C24519 + C24522 - C24521) * C18740 +
            (C24523 - C24524 + C24525 - C24526) * C18743 +
            (C24527 - C24528 + C24529 - C24530) * C18741) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30858 +
           ((C13490 - C13489 + C13492 - C13491) * C18742 +
            (C13494 - C13493 + C13496 - C13495) * C18740 +
            (C13497 - C13498 + C13499 - C13500) * C18743 +
            (C13501 - C13502 + C13503 - C13504) * C18741) *
               C30555 * C30710) *
              C30605 * C656 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30858 +
           ((C13506 - C13505 + C13508 - C13507) * C18742 +
            (C13510 - C13509 + C13512 - C13511) * C18740 +
            (C13513 - C13514 + C13515 - C13516) * C18743 +
            (C13517 - C13518 + C13519 - C13520) * C18741) *
               C30555 * C30710) *
              C30605 * C657 +
          (((C13150 - C13149 + C13152 - C13151) * C18742 +
            (C13154 - C13153 + C13156 - C13155) * C18740 +
            (C13789 - C13790 + C13791 - C13792) * C18743 +
            (C13793 - C13794 + C13795 - C13796) * C18741) *
               C30555 * C30858 +
           ((C13790 - C13789 + C13792 - C13791) * C18742 +
            (C13794 - C13793 + C13796 - C13795) * C18740 +
            (C13126 * C505 - C13130 * C488 + C13127 * C2167 - C13131 * C2166) *
                C18743 +
            (C13126 * C518 - C13130 * C506 + C13127 * C2169 - C13131 * C2168) *
                C18741) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                 C18742 +
             (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                 C18740 +
             (C24515 - C24516 + C24517 - C24518) * C18743 +
             (C24519 - C24520 + C24521 - C24522) * C18741) *
                C30555 * C30858 +
            ((C24516 - C24515 + C24518 - C24517) * C18742 +
             (C24520 - C24519 + C24522 - C24521) * C18740 +
             (C24523 - C24524 + C24525 - C24526) * C18743 +
             (C24527 - C24528 + C24529 - C24530) * C18741) *
                C30555 * C30710) *
               C1078 +
           (((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                 C18742 +
             (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                 C18740 +
             (C24985 - C24986 + C24987 - C24988) * C18743 +
             (C24989 - C24990 + C24991 - C24992) * C18741) *
                C30555 * C30858 +
            ((C24986 - C24985 + C24988 - C24987) * C18742 +
             (C24990 - C24989 + C24992 - C24991) * C18740 +
             (C25367 - C25368 + C25369 - C25370) * C18743 +
             (C25371 - C25372 + C25373 - C25374) * C18741) *
                C30555 * C30710) *
               C1079 +
           (((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                 C18742 +
             (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                 C18740 +
             (C25375 - C25376 + C25377 - C25378) * C18743 +
             (C25379 - C25380 + C25381 - C25382) * C18741) *
                C30555 * C30858 +
            ((C25376 - C25375 + C25378 - C25377) * C18742 +
             (C25380 - C25379 + C25382 - C25381) * C18740 +
             (C25383 - C25384 + C25385 - C25386) * C18743 +
             (C25387 - C25388 + C25389 - C25390) * C18741) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C13134 - C13133 + C13136 - C13135) * C18742 +
             (C13138 - C13137 + C13140 - C13139) * C18740 +
             (C13489 - C13490 + C13491 - C13492) * C18743 +
             (C13493 - C13494 + C13495 - C13496) * C18741) *
                C30555 * C30858 +
            ((C13490 - C13489 + C13492 - C13491) * C18742 +
             (C13494 - C13493 + C13496 - C13495) * C18740 +
             (C13497 - C13498 + C13499 - C13500) * C18743 +
             (C13501 - C13502 + C13503 - C13504) * C18741) *
                C30555 * C30710) *
               C1078 +
           (((C13312 - C13311 + C13314 - C13313) * C18742 +
             (C13316 - C13315 + C13318 - C13317) * C18740 +
             (C13991 - C13992 + C13993 - C13994) * C18743 +
             (C13995 - C13996 + C13997 - C13998) * C18741) *
                C30555 * C30858 +
            ((C13992 - C13991 + C13994 - C13993) * C18742 +
             (C13996 - C13995 + C13998 - C13997) * C18740 +
             (C15419 - C15420 + C15421 - C15422) * C18743 +
             (C15423 - C15424 + C15425 - C15426) * C18741) *
                C30555 * C30710) *
               C1079 +
           (((C13320 - C13319 + C13322 - C13321) * C18742 +
             (C13324 - C13323 + C13326 - C13325) * C18740 +
             (C14713 - C14714 + C14715 - C14716) * C18743 +
             (C14717 - C14718 + C14719 - C14720) * C18741) *
                C30555 * C30858 +
            ((C14714 - C14713 + C14716 - C14715) * C18742 +
             (C14718 - C14717 + C14720 - C14719) * C18740 +
             (C13126 * C1309 - C13130 * C1293 + C13127 * C6389 -
              C13131 * C6388) *
                 C18743 +
             (C13126 * C1320 - C13130 * C1310 + C13127 * C6391 -
              C13131 * C6390) *
                 C18741) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
               C18743 +
           (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
               C18741) *
              C30555 * C30623 * C30605 * C108 +
          ((C13134 - C13133 + C13136 - C13135) * C18742 +
           (C13138 - C13137 + C13140 - C13139) * C18740 +
           (C13489 - C13490 + C13491 - C13492) * C18743 +
           (C13493 - C13494 + C13495 - C13496) * C18741) *
              C30555 * C30623 * C30605 * C109 +
          ((C13142 - C13141 + C13144 - C13143) * C18742 +
           (C13146 - C13145 + C13148 - C13147) * C18740 +
           (C13505 - C13506 + C13507 - C13508) * C18743 +
           (C13509 - C13510 + C13511 - C13512) * C18741) *
              C30555 * C30623 * C30605 * C110 +
          ((C13150 - C13149 + C13152 - C13151) * C18742 +
           (C13154 - C13153 + C13156 - C13155) * C18740 +
           (C13789 - C13790 + C13791 - C13792) * C18743 +
           (C13793 - C13794 + C13795 - C13796) * C18741) *
              C30555 * C30623 * C30605 * C111 +
          ((C13158 - C13157 + C13160 - C13159) * C18742 +
           (C13162 - C13161 + C13164 - C13163) * C18740 +
           (C13126 * C507 - C13130 * C489 + C13127 * C944 - C13131 * C935) *
               C18743 +
           (C13126 * C519 - C13130 * C508 + C13127 * C950 - C13131 * C945) *
               C18741) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C13126 * C491 - C13130 * C481 + C13127 * C936 - C13131 * C931) *
                C18743 +
            (C13126 * C511 - C13130 * C492 + C13127 * C946 - C13131 * C937) *
                C18741) *
               C30555 * C30623 * C30925 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C13130 * C931 - C13126 * C936 + C13131 * C1289 - C13127 * C1301) *
                C18743 +
            (C13130 * C937 - C13126 * C946 + C13131 * C1302 - C13127 * C1316) *
                C18741) *
               C30555 * C30623 * C30913 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C30925 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C30913 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C30925 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C30913 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
                C18742 +
            (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
                C18740 +
            (C24515 - C24516 + C24517 - C24518) * C18743 +
            (C24519 - C24520 + C24521 - C24522) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
                C18742 +
            (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
                C18740 +
            (C24985 - C24986 + C24987 - C24988) * C18743 +
            (C24989 - C24990 + C24991 - C24992) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
                C18742 +
            (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
                C18740 +
            (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 -
             C13131 * C1694) *
                C18743 +
            (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 -
             C13131 * C1698) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C13134 - C13133 + C13136 - C13135) * C18742 +
            (C13138 - C13137 + C13140 - C13139) * C18740 +
            (C13489 - C13490 + C13491 - C13492) * C18743 +
            (C13493 - C13494 + C13495 - C13496) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13312 - C13311 + C13314 - C13313) * C18742 +
            (C13316 - C13315 + C13318 - C13317) * C18740 +
            (C13991 - C13992 + C13993 - C13994) * C18743 +
            (C13995 - C13996 + C13997 - C13998) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13320 - C13319 + C13322 - C13321) * C18742 +
            (C13324 - C13323 + C13326 - C13325) * C18740 +
            (C14713 - C14714 + C14715 - C14716) * C18743 +
            (C14717 - C14718 + C14719 - C14720) * C18741) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C13142 - C13141 + C13144 - C13143) * C18742 +
            (C13146 - C13145 + C13148 - C13147) * C18740 +
            (C13505 - C13506 + C13507 - C13508) * C18743 +
            (C13509 - C13510 + C13511 - C13512) * C18741) *
               C30555 * C30623 * C1078 +
           ((C13328 - C13327 + C13330 - C13329) * C18742 +
            (C13332 - C13331 + C13334 - C13333) * C18740 +
            (C13999 - C14000 + C14001 - C14002) * C18743 +
            (C14003 - C14004 + C14005 - C14006) * C18741) *
               C30555 * C30623 * C1079 +
           ((C13336 - C13335 + C13338 - C13337) * C18742 +
            (C13340 - C13339 + C13342 - C13341) * C18740 +
            (C13126 * C1305 - C13130 * C1291 + C13127 * C1701 -
             C13131 * C1696) *
                C18743 +
            (C13126 * C1318 - C13130 * C1306 + C13127 * C1705 -
             C13131 * C1702) *
                C18741) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13126 * C122 - C13130 * C115 + C13127 * C304 - C13131 * C294) *
               C18742 +
           (C13126 * C136 - C13130 * C123 + C13127 * C324 - C13131 * C305) *
               C18740 +
           (C24515 - C24516 + C24517 - C24518) * C18743 +
           (C24519 - C24520 + C24521 - C24522) * C18741) *
              C30555 * C30623 * C1146 +
          ((C13130 * C294 - C13126 * C304 + C13131 * C297 - C13127 * C310) *
               C18742 +
           (C13130 * C305 - C13126 * C324 + C13131 * C311 - C13127 * C327) *
               C18740 +
           (C24985 - C24986 + C24987 - C24988) * C18743 +
           (C24989 - C24990 + C24991 - C24992) * C18741) *
              C30555 * C30623 * C1147 +
          ((C13126 * C310 - C13130 * C297 + C13127 * C1158 - C13131 * C1152) *
               C18742 +
           (C13126 * C327 - C13130 * C311 + C13127 * C1170 - C13131 * C1159) *
               C18740 +
           (C13126 * C1301 - C13130 * C1289 + C13127 * C1697 - C13131 * C1694) *
               C18743 +
           (C13126 * C1316 - C13130 * C1302 + C13127 * C1703 - C13131 * C1698) *
               C18741) *
              C30555 * C30623 * C1148 +
          ((C13130 * C1152 - C13126 * C1158 + C13131 * C1155 - C13127 * C1164) *
               C18742 +
           (C13130 * C1159 - C13126 * C1170 + C13131 * C1165 - C13127 * C1173) *
               C18740 +
           (C13130 * C1694 - C13126 * C1697 + C13131 * C5583 - C13127 * C5587) *
               C18743 +
           (C13130 * C1698 - C13126 * C1703 + C13131 * C5588 - C13127 * C5592) *
               C18741) *
              C30555 * C30623 * C1149 +
          ((C13126 * C1164 - C13130 * C1155 + C13127 * C5466 - C13131 * C5464) *
               C18742 +
           (C13126 * C1173 - C13130 * C1165 + C13127 * C5470 - C13131 * C5467) *
               C18740 +
           (C13126 * C5587 - C13130 * C5583 + C13127 * C5945 - C13131 * C5944) *
               C18743 +
           (C13126 * C5592 - C13130 * C5588 + C13127 * C5947 - C13131 * C5946) *
               C18741) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30664 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30671 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C2868) *
              C30582 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30664 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30671 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C2868) *
              C30591 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30664 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30671 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C2868) *
              C2871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30664 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30671 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C2868) *
              C30582 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30664 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30671 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C2868) *
              C30591 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30664 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30671 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C2868) *
              C2871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C30664 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C30671 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30623 * C2868) *
              C30582 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C30664 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30555 * C30623 * C30671 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
               C30555 * C30623 * C2868) *
              C30591 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30664 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30671 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C2868) *
              C2871)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30664 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30671 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C30858 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30664 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30671 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C30858 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30858 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C30664 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30858 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30671 +
           (((C30788 * C310 - C113 * C297) * C8893 +
             (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
             (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
                C30555 * C30858 +
            ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
             (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
             (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
                C30555 * C30710) *
               C2868) *
              C2608 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30858 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C30664 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C30858 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30671 +
           (((C344 - C343) * C8893 + (C346 - C345) * C8890 +
             (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
             (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
                C30555 * C30858 +
            ((C1590 - C1589) * C8893 + (C1592 - C1591) * C8890 +
             (C10030 - C10029) * C8894 + (C10032 - C10031) * C8891 +
             (C30788 * C6491 - C113 * C6490) * C8895 +
             (C30788 * C6493 - C113 * C6492) * C8892) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C2500 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C30668) *
                  C30931 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C2500 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                C672 * C105) *
                   C30623 * C30668) *
                  C30924 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30623 * C2500 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                   C30623 * C30668) *
                  C30911 +
              ((C177 * C103 +
                ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
                ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                   C30623 * C2500 +
               (C672 * C103 +
                ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
                ((C30788 * C660 - C113 * C659) * C114 +
                 (C30788 * C662 - C113 * C661) * C30801) *
                    C105) *
                   C30623 * C30668) *
                  C30892) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C30932 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C30928 +
               (((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30623 * C30918 +
               (((C113 * C1152 - C30788 * C1158) * C114 +
                 (C113 * C1159 - C30788 * C1170) * C30801) *
                    C103 +
                ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
                ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
                   C30623 * C30898) *
                  C2608 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C30932 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                C672 * C105) *
                   C30623 * C30928 +
               (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                   C30623 * C30918 +
               (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
                ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
                ((C30788 * C1427 - C113 * C1426) * C114 +
                 (C30788 * C1429 - C113 * C1428) * C30801) *
                    C105) *
                   C30623 * C30898) *
                  C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30926 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30915 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C30891) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30926 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30915 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C30891) *
               C30668) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30926 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30915 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C30891) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30926 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30915 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30926 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30915 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C30891) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30926 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30915 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30926 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30915 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C30891) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30926 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30915 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C2500 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C2500 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30555 * C30623 * C30668) *
              C30924 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C2500 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30668) *
              C30911 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C30623 * C2500 +
           (C664 * C8893 + C665 * C8890 + (C961 - C960) * C8894 +
            (C963 - C962) * C8891 + (C30788 * C2167 - C113 * C2166) * C8895 +
            (C30788 * C2169 - C113 * C2168) * C8892) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C30932 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C30928 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30623 * C30918 +
           ((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C10131 - C10132) * C8894 + (C10133 - C10134) * C8891 +
            (C10135 - C10136) * C8895 + (C10137 - C10138) * C8892) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C30932 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30555 * C30623 * C30928 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
               C30555 * C30623 * C30918 +
           ((C1432 - C1431) * C8893 + (C1434 - C1433) * C8890 +
            (C30788 * C1699 - C113 * C1695) * C8894 +
            (C30788 * C1704 - C113 * C1700) * C8891 +
            (C30788 * C6389 - C113 * C6388) * C8895 +
            (C30788 * C6391 - C113 * C6390) * C8892) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30926 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30915 +
            (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30555 * C30891) *
               C2500 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30926 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30915 +
            (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
             (C9770 - C9769) * C8891 + (C10809 - C10810) * C8895 +
             (C10811 - C10812) * C8892) *
                C30555 * C30891) *
               C30668) *
              C2608 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30926 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30915 +
            (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
             (C2287 - C2288) * C8891 + (C10701 - C10702) * C8895 +
             (C10703 - C10704) * C8892) *
                C30555 * C30891) *
               C2500 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C30926 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30915 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30788 * C10587 - C113 * C10586) * C8895 +
             (C30788 * C10589 - C113 * C10588) * C8892) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30582 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30591 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C2871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C30582 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C30591 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C30858 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C2500 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C30858 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C2871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30858 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C2500 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30858 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30668) *
              C30582 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30858 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C2500 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C30858 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30591 +
          (((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
             (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
                C30555 * C30858 +
            (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
             (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
             (C2291 - C2292) * C8892) *
                C30555 * C30710) *
               C2500 +
           ((C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
             (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
             (C2177 - C2178) * C8892) *
                C30555 * C30858 +
            (C964 * C8893 + C965 * C8890 + (C2176 - C2175) * C8894 +
             (C2178 - C2177) * C8891 + (C30788 * C2397 - C113 * C2392) * C8895 +
             (C30788 * C2401 - C113 * C2398) * C8892) *
                C30555 * C30710) *
               C30668) *
              C2871)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30932 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30928 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30918 +
           (((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30623 * C30898) *
              C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30932 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30928 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30918 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
            ((C30788 * C1427 - C113 * C1426) * C114 +
             (C30788 * C1429 - C113 * C1428) * C30801) *
                C105) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C2500 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30668) *
              C30931 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C2500 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30668) *
              C30924 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C2500 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30668) *
              C30911 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30623 * C2500 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
            ((C30788 * C660 - C113 * C659) * C114 +
             (C30788 * C662 - C113 * C661) * C30801) *
                C105) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C2500 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C2500 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30555 * C30623 * C30668) *
              C30924 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C2500 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30668) *
              C30911 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C30623 * C2500 +
           (C664 * C8893 + C665 * C8890 + (C961 - C960) * C8894 +
            (C963 - C962) * C8891 + (C30788 * C2167 - C113 * C2166) * C8895 +
            (C30788 * C2169 - C113 * C2168) * C8892) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C30932 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C30928 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30623 * C30918 +
           ((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C10131 - C10132) * C8894 + (C10133 - C10134) * C8891 +
            (C10135 - C10136) * C8895 + (C10137 - C10138) * C8892) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C30932 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
            C10592 * C8892) *
               C30555 * C30623 * C30928 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
               C30555 * C30623 * C30918 +
           ((C1432 - C1431) * C8893 + (C1434 - C1433) * C8890 +
            (C30788 * C1699 - C113 * C1695) * C8894 +
            (C30788 * C1704 - C113 * C1700) * C8891 +
            (C30788 * C6389 - C113 * C6388) * C8895 +
            (C30788 * C6391 - C113 * C6390) * C8892) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30664 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30671 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C2868) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30664 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30671 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C3262 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C30664 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C3262 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30671 +
           (((C30788 * C310 - C113 * C297) * C8893 +
             (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
             (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
                C30555 * C3262 +
            ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
             (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
             (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
                C30555 * C30710) *
               C2868) *
              C30843 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C3262 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C30664 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C3262 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30671 +
           (((C344 - C343) * C8893 + (C346 - C345) * C8890 +
             (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
             (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
                C30555 * C3262 +
            ((C1590 - C1589) * C8893 + (C1592 - C1591) * C8890 +
             (C10030 - C10029) * C8894 + (C10032 - C10031) * C8891 +
             (C30788 * C6491 - C113 * C6490) * C8895 +
             (C30788 * C6493 - C113 * C6492) * C8892) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30706 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30713 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C3770) *
              C30664 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30706 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30713 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C3770) *
              C30671 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30706 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30713 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C3770) *
              C2868) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30706 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30713 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C3770) *
              C30664 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30706 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30713 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
               C3770) *
              C30671 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30706 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30713 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C3770) *
              C2868) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30706 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30713 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30555 * C3770) *
              C30664 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30706 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30555 * C30713 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C10809 - C10810) * C8895 +
            (C10811 - C10812) * C8892) *
               C30555 * C3770) *
              C30671 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30706 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30713 +
           (C9783 * C8893 + C9784 * C8890 + (C9780 - C9779) * C8894 +
            (C9782 - C9781) * C8891 + (C30788 * C6236 - C113 * C6232) * C8895 +
            (C30788 * C6241 - C113 * C6238) * C8892) *
               C30555 * C3770) *
              C2868) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((((C30788 * C122 - C113 * C115) * C114 +
                  (C30788 * C136 - C113 * C123) * C30801) *
                     C103 +
                 ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                 C176 * C105) *
                    C3262 +
                (((C113 * C481 - C30788 * C491) * C114 +
                  (C113 * C492 - C30788 * C511) * C30801) *
                     C103 +
                 ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                 C554 * C105) *
                    C30710) *
                   C2500 +
               ((((C113 * C294 - C30788 * C304) * C114 +
                  (C113 * C305 - C30788 * C324) * C30801) *
                     C103 +
                 ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                 C367 * C105) *
                    C3262 +
                (((C30788 * C936 - C113 * C931) * C114 +
                  (C30788 * C946 - C113 * C937) * C30801) *
                     C103 +
                 ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                 C968 * C105) *
                    C30710) *
                   C30668) *
                  C30922 +
              (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                 ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                 C177 * C105) *
                    C3262 +
                (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                 ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                 C785 * C105) *
                    C30710) *
                   C2500 +
               ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                 ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                 C672 * C105) *
                    C3262 +
                (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
                 ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
                 ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                    C30710) *
                   C30668) *
                  C30909 +
              (((C176 * C103 +
                 ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                 C178 * C105) *
                    C3262 +
                (C554 * C103 +
                 ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                 ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                    C30710) *
                   C2500 +
               ((C367 * C103 +
                 ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                 ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                    C3262 +
                (C968 * C103 +
                 ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
                 ((C30788 * C944 - C113 * C935) * C114 +
                  (C30788 * C950 - C113 * C945) * C30801) *
                     C105) *
                    C30710) *
                   C30668) *
                  C30882) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C3262 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C30710) *
                  C30932 +
              ((((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C3262 +
               (((C30788 * C936 - C113 * C931) * C114 +
                 (C30788 * C946 - C113 * C937) * C30801) *
                    C103 +
                ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                C968 * C105) *
                   C30710) *
                  C30928 +
              ((((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C3262 +
               (((C113 * C1289 - C30788 * C1301) * C114 +
                 (C113 * C1302 - C30788 * C1316) * C30801) *
                    C103 +
                ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
                ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                   C30710) *
                  C30918 +
              ((((C113 * C1152 - C30788 * C1158) * C114 +
                 (C113 * C1159 - C30788 * C1170) * C30801) *
                    C103 +
                ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
                ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
                   C3262 +
               (((C30788 * C1697 - C113 * C1694) * C114 +
                 (C30788 * C1703 - C113 * C1698) * C30801) *
                    C103 +
                ((C30788 * C1699 - C113 * C1695) * C114 +
                 (C30788 * C1704 - C113 * C1700) * C30801) *
                    C104 +
                ((C30788 * C1701 - C113 * C1696) * C114 +
                 (C30788 * C1705 - C113 * C1702) * C30801) *
                    C105) *
                   C30710) *
                  C30898) *
             C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30933 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30930 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30921 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C2500 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30933 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30930 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
               C30921 +
           (((C30788 * C2393 - C113 * C2390) * C114 +
             (C30788 * C2399 - C113 * C2394) * C30801) *
                C103 +
            ((C30788 * C2395 - C113 * C2391) * C114 +
             (C30788 * C2400 - C113 * C2396) * C30801) *
                C104 +
            ((C30788 * C2397 - C113 * C2392) * C114 +
             (C30788 * C2401 - C113 * C2398) * C30801) *
                C105) *
               C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30932 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C30928 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C30918 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30933 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30930 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30921 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C2500 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30933 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30930 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30921 +
           ((C4723 * C2393 - C4727 * C2390 + C4724 * C6233 - C4728 * C6230 +
             C4725 * C6593 - C4729 * C6592) *
                C114 +
            (C4723 * C2399 - C4727 * C2394 + C4724 * C6239 - C4728 * C6234 +
             C4725 * C6595 - C4729 * C6594) *
                C30801) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C3262 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C2500 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C3262 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C3262 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C2500 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C3262 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          (((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
             (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
                C30555 * C3262 +
            (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
             (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
             (C2291 - C2292) * C8892) *
                C30555 * C30710) *
               C2500 +
           ((C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
             (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
             (C2177 - C2178) * C8892) *
                C30555 * C3262 +
            (C964 * C8893 + C965 * C8890 + (C2176 - C2175) * C8894 +
             (C2178 - C2177) * C8891 + (C30788 * C2397 - C113 * C2392) * C8895 +
             (C30788 * C2401 - C113 * C2398) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C3262 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30710) *
              C30932 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C3262 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30555 * C30710) *
              C30928 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C3262 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30710) *
              C30918 +
          (((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C10131 - C10132) * C8894 + (C10133 - C10134) * C8891 +
            (C10135 - C10136) * C8895 + (C10137 - C10138) * C8892) *
               C30555 * C3262 +
           ((C10132 - C10131) * C8893 + (C10134 - C10133) * C8890 +
            (C10136 - C10135) * C8894 + (C10138 - C10137) * C8891 +
            (C30788 * C6593 - C113 * C6592) * C8895 +
            (C30788 * C6595 - C113 * C6594) * C8892) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30933 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30930 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30555 * C30921 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30555 * C30904) *
              C2500 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30933 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30555 * C30930 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C10809 - C10810) * C8895 +
            (C10811 - C10812) * C8892) *
               C30555 * C30921 +
           (C10807 * C8893 + C10808 * C8890 + (C10810 - C10809) * C8894 +
            (C10812 - C10811) * C8891 +
            (C30788 * C10803 - C113 * C10802) * C8895 +
            (C30788 * C10805 - C113 * C10804) * C8892) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C3770) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C3770) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30706 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30713 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C3770) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30706 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30713 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C3770) *
               C30668) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30706 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30713 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C3770) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30706 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30713 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30706 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30713 +
            (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30555 * C3770) *
               C2500 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30706 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30713 +
            (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
             (C9770 - C9769) * C8891 + (C10809 - C10810) * C8895 +
             (C10811 - C10812) * C8892) *
                C30555 * C3770) *
               C30668) *
              C30843 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30706 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30713 +
            (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
             (C2287 - C2288) * C8891 + (C10701 - C10702) * C8895 +
             (C10703 - C10704) * C8892) *
                C30555 * C3770) *
               C2500 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C30706 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30713 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30788 * C10587 - C113 * C10586) * C8895 +
             (C30788 * C10589 - C113 * C10588) * C8892) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30932 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C3262 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30710) *
              C30928 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C3262 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30710) *
              C30918 +
          ((((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C3262 +
           (((C30788 * C1697 - C113 * C1694) * C114 +
             (C30788 * C1703 - C113 * C1698) * C30801) *
                C103 +
            ((C30788 * C1699 - C113 * C1695) * C114 +
             (C30788 * C1704 - C113 * C1700) * C30801) *
                C104 +
            ((C30788 * C1701 - C113 * C1696) * C114 +
             (C30788 * C1705 - C113 * C1702) * C30801) *
                C105) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C30922 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C30909 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C3262 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C2500 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C3262 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30932 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C30928 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C30918 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C3262 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C2500 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C3262 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C3262 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C2500 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C3262 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          (((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
             (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
                C30555 * C3262 +
            (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
             (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
             (C2291 - C2292) * C8892) *
                C30555 * C30710) *
               C2500 +
           ((C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
             (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
             (C2177 - C2178) * C8892) *
                C30555 * C3262 +
            (C964 * C8893 + C965 * C8890 + (C2176 - C2175) * C8894 +
             (C2178 - C2177) * C8891 + (C30788 * C2397 - C113 * C2392) * C8895 +
             (C30788 * C2401 - C113 * C2398) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C3262 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30710) *
              C30932 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C3262 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30555 * C30710) *
              C30928 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C3262 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30710) *
              C30918 +
          (((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C10131 - C10132) * C8894 + (C10133 - C10134) * C8891 +
            (C10135 - C10136) * C8895 + (C10137 - C10138) * C8892) *
               C30555 * C3262 +
           ((C10132 - C10131) * C8893 + (C10134 - C10133) * C8890 +
            (C10136 - C10135) * C8894 + (C10138 - C10137) * C8891 +
            (C30788 * C6593 - C113 * C6592) * C8895 +
            (C30788 * C6595 - C113 * C6594) * C8892) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C30857 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C30668) *
                  C655 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C30857 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                C672 * C105) *
                   C30623 * C30668) *
                  C656 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30623 * C30857 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                   C30623 * C30668) *
                  C657 +
              ((C177 * C103 +
                ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
                ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                   C30623 * C30857 +
               (C672 * C103 +
                ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
                ((C30788 * C660 - C113 * C659) * C114 +
                 (C30788 * C662 - C113 * C661) * C30801) *
                    C105) *
                   C30623 * C30668) *
                  C30892) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C1420 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C1421 +
               (((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30623 * C1422 +
               (((C113 * C1152 - C30788 * C1158) * C114 +
                 (C113 * C1159 - C30788 * C1170) * C30801) *
                    C103 +
                ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
                ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
                   C30623 * C30898) *
                  C30843 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C1420 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                C672 * C105) *
                   C30623 * C1421 +
               (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                   C30623 * C1422 +
               (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
                ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
                ((C30788 * C1427 - C113 * C1426) * C114 +
                 (C30788 * C1429 - C113 * C1428) * C30801) *
                    C105) *
                   C30623 * C30898) *
                  C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C1816 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C1817 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C30891) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C1816 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C1817 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C30891) *
               C30668) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C1816 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C1817 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C30891) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C1816 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C1817 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C1816 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C1817 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C30891) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C1816 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C1817 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C1816 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C1817 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C30891) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C1816 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C1817 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C30857 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 +
            (C113 * C931 - C30788 * C936) * C8894 +
            (C113 * C937 - C30788 * C946) * C8891 +
            (C113 * C1286 - C30788 * C1295) * C8895 +
            (C113 * C1296 - C30788 * C1313) * C8892) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C30857 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C30668) *
              C656 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30857 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30668) *
              C657 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C30623 * C30857 +
           (C664 * C8893 + C665 * C8890 + (C961 - C960) * C8894 +
            (C963 - C962) * C8891 + (C30788 * C2167 - C113 * C2166) * C8895 +
            (C30788 * C2169 - C113 * C2168) * C8892) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C1420 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C1421 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30623 * C1422 +
           ((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C113 * C1694 - C30788 * C1697) * C8894 +
            (C113 * C1698 - C30788 * C1703) * C8891 +
            (C113 * C5582 - C30788 * C5585) * C8895 +
            (C113 * C5586 - C30788 * C5591) * C8892) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C1420 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C1421 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C1422 +
           ((C1432 - C1431) * C8893 + (C1434 - C1433) * C8890 +
            (C30788 * C1699 - C113 * C1695) * C8894 +
            (C30788 * C1704 - C113 * C1700) * C8891 +
            (C30788 * C6389 - C113 * C6388) * C8895 +
            (C30788 * C6391 - C113 * C6390) * C8892) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C1816 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C1817 +
            (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30555 * C30891) *
               C30857 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C1816 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
                C30555 * C1817 +
            (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
             (C9770 - C9769) * C8891 + (C113 * C6231 - C30788 * C6235) * C8895 +
             (C113 * C6237 - C30788 * C6240) * C8892) *
                C30555 * C30891) *
               C30668) *
              C30843 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C1816 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 +
             (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
                C30555 * C1817 +
            (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
             (C2287 - C2288) * C8891 + (C113 * C2000 - C30788 * C2010) * C8895 +
             (C113 * C2011 - C30788 * C2018) * C8892) *
                C30555 * C30891) *
               C30857 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C1816 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C1817 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30788 * C10587 - C113 * C10586) * C8895 +
             (C30788 * C10589 - C113 * C10588) * C8892) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((((C30788 * C122 - C113 * C115) * C114 +
                  (C30788 * C136 - C113 * C123) * C30801) *
                     C103 +
                 ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                 C176 * C105) *
                    C30858 +
                (((C113 * C481 - C30788 * C491) * C114 +
                  (C113 * C492 - C30788 * C511) * C30801) *
                     C103 +
                 ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                 C554 * C105) *
                    C30710) *
                   C30857 +
               ((((C113 * C294 - C30788 * C304) * C114 +
                  (C113 * C305 - C30788 * C324) * C30801) *
                     C103 +
                 ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                 C367 * C105) *
                    C30858 +
                (((C30788 * C936 - C113 * C931) * C114 +
                  (C30788 * C946 - C113 * C937) * C30801) *
                     C103 +
                 ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                 C968 * C105) *
                    C30710) *
                   C30668) *
                  C291 +
              (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                 ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                 C177 * C105) *
                    C30858 +
                (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                 ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                 C785 * C105) *
                    C30710) *
                   C30857 +
               ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                 ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                 C672 * C105) *
                    C30858 +
                (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
                 ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
                 ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                    C30710) *
                   C30668) *
                  C292 +
              (((C176 * C103 +
                 ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                 C178 * C105) *
                    C30858 +
                (C554 * C103 +
                 ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                 ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                    C30710) *
                   C30857 +
               ((C367 * C103 +
                 ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                 ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                    C30858 +
                (C968 * C103 +
                 ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
                 ((C30788 * C944 - C113 * C935) * C114 +
                  (C30788 * C950 - C113 * C945) * C30801) *
                     C105) *
                    C30710) *
                   C30668) *
                  C30882) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30858 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C30710) *
                  C1420 +
              ((((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30858 +
               (((C30788 * C936 - C113 * C931) * C114 +
                 (C30788 * C946 - C113 * C937) * C30801) *
                    C103 +
                ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                C968 * C105) *
                   C30710) *
                  C1421 +
              ((((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30858 +
               (((C113 * C1289 - C30788 * C1301) * C114 +
                 (C113 * C1302 - C30788 * C1316) * C30801) *
                    C103 +
                ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
                ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                   C30710) *
                  C1422 +
              ((((C113 * C1152 - C30788 * C1158) * C114 +
                 (C113 * C1159 - C30788 * C1170) * C30801) *
                    C103 +
                ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
                ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
                   C30858 +
               (((C30788 * C1697 - C113 * C1694) * C114 +
                 (C30788 * C1703 - C113 * C1698) * C30801) *
                    C103 +
                ((C30788 * C1699 - C113 * C1695) * C114 +
                 (C30788 * C1704 - C113 * C1700) * C30801) *
                    C104 +
                ((C30788 * C1701 - C113 * C1696) * C114 +
                 (C30788 * C1705 - C113 * C1702) * C30801) *
                    C105) *
                   C30710) *
                  C30898) *
             C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C2277 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C30857 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C2276 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C2277 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
               C2278 +
           (((C30788 * C2393 - C113 * C2390) * C114 +
             (C30788 * C2399 - C113 * C2394) * C30801) *
                C103 +
            ((C30788 * C2395 - C113 * C2391) * C114 +
             (C30788 * C2400 - C113 * C2396) * C30801) *
                C104 +
            ((C30788 * C2397 - C113 * C2392) * C114 +
             (C30788 * C2401 - C113 * C2398) * C30801) *
                C105) *
               C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C292 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C1420 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C1421 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C1422 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C2276 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C2277 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C2278 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C30857 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C2276 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C2277 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C2278 +
           ((C4723 * C2393 - C4727 * C2390 + C4724 * C6233 - C4728 * C6230 +
             C4725 * C6593 - C4729 * C6592) *
                C114 +
            (C4723 * C2399 - C4727 * C2394 + C4724 * C6239 - C4728 * C6234 +
             C4725 * C6595 - C4729 * C6594) *
                C30801) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30858 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30555 * C30710) *
               C30857 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
             (C9481 - C9482) * C8892) *
                C30555 * C30858 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             (C30788 * C2393 - C113 * C2390) * C8895 +
             (C30788 * C2399 - C113 * C2394) * C8892) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30858 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 +
             (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
                C30555 * C30710) *
               C30857 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 +
             (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
                C30555 * C30858 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C113 * C2391 - C30788 * C2395) * C8895 +
             (C113 * C2396 - C30788 * C2400) * C8892) *
                C30555 * C30710) *
               C30668) *
              C292 +
          (((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
             (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
                C30555 * C30858 +
            (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
             (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
             (C2291 - C2292) * C8892) *
                C30555 * C30710) *
               C30857 +
           ((C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
             (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
             (C2177 - C2178) * C8892) *
                C30555 * C30858 +
            (C964 * C8893 + C965 * C8890 + (C2176 - C2175) * C8894 +
             (C2178 - C2177) * C8891 + (C30788 * C2397 - C113 * C2392) * C8895 +
             (C30788 * C2401 - C113 * C2398) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30858 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30710) *
              C1420 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30858 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
            (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
               C30555 * C30710) *
              C1421 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30858 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30710) *
              C1422 +
          (((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C10131 - C10132) * C8894 + (C10133 - C10134) * C8891 +
            (C10135 - C10136) * C8895 + (C10137 - C10138) * C8892) *
               C30555 * C30858 +
           ((C10132 - C10131) * C8893 + (C10134 - C10133) * C8890 +
            (C10136 - C10135) * C8894 + (C10138 - C10137) * C8891 +
            (C30788 * C6593 - C113 * C6592) * C8895 +
            (C30788 * C6595 - C113 * C6594) * C8892) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C2276 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C2277 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30555 * C2278 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30555 * C30904) *
              C30857 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C2276 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 + C10807 * C8895 +
            C10808 * C8892) *
               C30555 * C2277 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C10809 - C10810) * C8895 +
            (C10811 - C10812) * C8892) *
               C30555 * C2278 +
           (C10807 * C8893 + C10808 * C8890 + (C10810 - C10809) * C8894 +
            (C10812 - C10811) * C8891 +
            (C30788 * C10803 - C113 * C10802) * C8895 +
            (C30788 * C10805 - C113 * C10804) * C8892) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             ((((C30788 * C122 - C113 * C115) * C114 +
                (C30788 * C136 - C113 * C123) * C30801) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
               C176 * C105) *
                  C30623 * C30605 * C108 +
              (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
               C177 * C105) *
                  C30623 * C30605 * C109 +
              (C176 * C103 +
               ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
               C178 * C105) *
                  C30623 * C30605 * C110 +
              (C177 * C103 +
               ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
               ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                  C30623 * C30605 * C111 +
              (C178 * C103 +
               ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
               ((C30788 * C134 - C113 * C121) * C114 +
                (C30788 * C142 - C113 * C135) * C30801) *
                   C105) *
                  C30623 * C30605 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C30925 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C30913 +
               (((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30623 * C30888) *
                  C291 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C30925 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
                   C30623 * C30913 +
               (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                   C30623 * C30888) *
                  C292 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30623 * C30925 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                ((C113 * C302 - C30788 * C320) * C114 +
                 (C113 * C321 - C30788 * C332) * C30801) *
                    C105) *
                   C30623 * C30913 +
               (C368 * C103 +
                ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                ((C30788 * C322 - C113 * C303) * C114 +
                 (C30788 * C333 - C113 * C323) * C30801) *
                    C105) *
                   C30623 * C30888) *
                  C30882) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30926 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C30915 +
               (((C30788 * C497 - C113 * C484) * C114 +
                 (C30788 * C514 - C113 * C498) * C30801) *
                    C103 +
                ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                C555 * C105) *
                   C30891) *
                  C30605 * C291 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30926 +
               (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                ((C538 - C539) * C114 + (C540 - C541) * C30801) * C105) *
                   C30915 +
               (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
                ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
                ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                   C30891) *
                  C30605 * C292 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30926 +
               (C554 * C103 +
                ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                ((C113 * C489 - C30788 * C507) * C114 +
                 (C113 * C508 - C30788 * C519) * C30801) *
                    C105) *
                   C30915 +
               (C555 * C103 +
                ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
                ((C30788 * C509 - C113 * C490) * C114 +
                 (C30788 * C520 - C113 * C510) * C30801) *
                    C105) *
                   C30891) *
                  C30605 * C30882) -
         0.25 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C1078 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C1079 +
               (((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30623 * C30888) *
                  C30922 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C1078 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                C672 * C105) *
                   C30623 * C1079 +
               (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                   C30623 * C30888) *
                  C30909 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30623 * C1078 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                   C30623 * C1079 +
               (C368 * C103 +
                ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                ((C30788 * C322 - C113 * C303) * C114 +
                 (C30788 * C333 - C113 * C323) * C30801) *
                    C105) *
                   C30623 * C30888) *
                  C30882) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C30788 * C122 - C113 * C115) * C114 +
                (C30788 * C136 - C113 * C123) * C30801) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
               C176 * C105) *
                  C30623 * C1146 +
              (((C113 * C294 - C30788 * C304) * C114 +
                (C113 * C305 - C30788 * C324) * C30801) *
                   C103 +
               ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
               C367 * C105) *
                  C30623 * C1147 +
              (((C30788 * C310 - C113 * C297) * C114 +
                (C30788 * C327 - C113 * C311) * C30801) *
                   C103 +
               ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
               C368 * C105) *
                  C30623 * C1148 +
              (((C113 * C1152 - C30788 * C1158) * C114 +
                (C113 * C1159 - C30788 * C1170) * C30801) *
                   C103 +
               ((C113 * C1153 - C30788 * C1160) * C114 +
                (C113 * C1161 - C30788 * C1171) * C30801) *
                   C104 +
               ((C113 * C1154 - C30788 * C1162) * C114 +
                (C113 * C1163 - C30788 * C1172) * C30801) *
                   C105) *
                  C30623 * C1149 +
              (((C30788 * C1164 - C113 * C1155) * C114 +
                (C30788 * C1173 - C113 * C1165) * C30801) *
                   C103 +
               ((C30788 * C1166 - C113 * C1156) * C114 +
                (C30788 * C1174 - C113 * C1167) * C30801) *
                   C104 +
               ((C30788 * C1168 - C113 * C1157) * C114 +
                (C30788 * C1175 - C113 * C1169) * C30801) *
                   C105) *
                  C30623 * C1150) *
             C30577 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30926 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C30915 +
               (((C30788 * C497 - C113 * C484) * C114 +
                 (C30788 * C514 - C113 * C498) * C30801) *
                    C103 +
                ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                C555 * C105) *
                   C30891) *
                  C1078 +
              ((((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30926 +
               (((C30788 * C936 - C113 * C931) * C114 +
                 (C30788 * C946 - C113 * C937) * C30801) *
                    C103 +
                ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                C968 * C105) *
                   C30915 +
               (((C113 * C1286 - C30788 * C1295) * C114 +
                 (C113 * C1296 - C30788 * C1313) * C30801) *
                    C103 +
                ((C113 * C1287 - C30788 * C1297) * C114 +
                 (C113 * C1298 - C30788 * C1314) * C30801) *
                    C104 +
                ((C113 * C1288 - C30788 * C1299) * C114 +
                 (C113 * C1300 - C30788 * C1315) * C30801) *
                    C105) *
                   C30891) *
                  C1079 +
              ((((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30926 +
               (((C113 * C1289 - C30788 * C1301) * C114 +
                 (C113 * C1302 - C30788 * C1316) * C30801) *
                    C103 +
                ((C113 * C1290 - C30788 * C1303) * C114 +
                 (C113 * C1304 - C30788 * C1317) * C30801) *
                    C104 +
                ((C113 * C1291 - C30788 * C1305) * C114 +
                 (C113 * C1306 - C30788 * C1318) * C30801) *
                    C105) *
                   C30915 +
               (((C30788 * C1307 - C113 * C1292) * C114 +
                 (C30788 * C1319 - C113 * C1308) * C30801) *
                    C103 +
                ((C30788 * C1309 - C113 * C1293) * C114 +
                 (C30788 * C1320 - C113 * C1310) * C30801) *
                    C104 +
                ((C30788 * C1311 - C113 * C1294) * C114 +
                 (C30788 * C1321 - C113 * C1312) * C30801) *
                    C105) *
                   C30891) *
                  C30888) *
             C30577 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C1816 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C1817 +
               (((C30788 * C497 - C113 * C484) * C114 +
                 (C30788 * C514 - C113 * C498) * C30801) *
                    C103 +
                ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                C555 * C105) *
                   C30891) *
                  C30605 * C30922 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C1816 +
               (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                C785 * C105) *
                   C1817 +
               (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
                ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
                ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                   C30891) *
                  C30605 * C30909 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C1816 +
               (C554 * C103 +
                ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                   C1817 +
               (C555 * C103 +
                ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
                ((C30788 * C509 - C113 * C490) * C114 +
                 (C30788 * C520 - C113 * C510) * C30801) *
                    C105) *
                   C30891) *
                  C30605 * C30882) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C1816 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C1817 +
               (((C30788 * C497 - C113 * C484) * C114 +
                 (C30788 * C514 - C113 * C498) * C30801) *
                    C103 +
                ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                C555 * C105) *
                   C30891) *
                  C30925 +
              ((((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C1816 +
               (((C30788 * C936 - C113 * C931) * C114 +
                 (C30788 * C946 - C113 * C937) * C30801) *
                    C103 +
                ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                C968 * C105) *
                   C1817 +
               (((C113 * C1286 - C30788 * C1295) * C114 +
                 (C113 * C1296 - C30788 * C1313) * C30801) *
                    C103 +
                ((C113 * C1287 - C30788 * C1297) * C114 +
                 (C113 * C1298 - C30788 * C1314) * C30801) *
                    C104 +
                ((C113 * C1288 - C30788 * C1299) * C114 +
                 (C113 * C1300 - C30788 * C1315) * C30801) *
                    C105) *
                   C30891) *
                  C30913 +
              ((((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C1816 +
               (((C113 * C1289 - C30788 * C1301) * C114 +
                 (C113 * C1302 - C30788 * C1316) * C30801) *
                    C103 +
                ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
                ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                   C1817 +
               (((C30788 * C1307 - C113 * C1292) * C114 +
                 (C30788 * C1319 - C113 * C1308) * C30801) *
                    C103 +
                ((C30788 * C1309 - C113 * C1293) * C114 +
                 (C30788 * C1320 - C113 * C1310) * C30801) *
                    C104 +
                ((C30788 * C1311 - C113 * C1294) * C114 +
                 (C30788 * C1321 - C113 * C1312) * C30801) *
                    C105) *
                   C30891) *
                  C30888) *
             C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C1991 +
          (((C113 * C481 - C30788 * C491) * C114 +
            (C113 * C492 - C30788 * C511) * C30801) *
               C103 +
           ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
           C554 * C105) *
              C1992 +
          (((C30788 * C497 - C113 * C484) * C114 +
            (C30788 * C514 - C113 * C498) * C30801) *
               C103 +
           ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
           C555 * C105) *
              C1993 +
          (((C113 * C1996 - C30788 * C2002) * C114 +
            (C113 * C2003 - C30788 * C2014) * C30801) *
               C103 +
           ((C113 * C1997 - C30788 * C2004) * C114 +
            (C113 * C2005 - C30788 * C2015) * C30801) *
               C104 +
           ((C113 * C1998 - C30788 * C2006) * C114 +
            (C113 * C2007 - C30788 * C2016) * C30801) *
               C105) *
              C1994 +
          (((C30788 * C2008 - C113 * C1999) * C114 +
            (C30788 * C2017 - C113 * C2009) * C30801) *
               C103 +
           ((C30788 * C2010 - C113 * C2000) * C114 +
            (C30788 * C2018 - C113 * C2011) * C30801) *
               C104 +
           ((C30788 * C2012 - C113 * C2001) * C114 +
            (C30788 * C2019 - C113 * C2013) * C30801) *
               C105) *
              C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C30605 * C108 +
          ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
            C4729 * C298 - C4725 * C312) *
               C114 +
           (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
            C4729 * C313 - C4725 * C328) *
               C30801) *
              C30555 * C30623 * C30605 * C109 +
          ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
            C4725 * C314 - C4729 * C299) *
               C114 +
           (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
            C4725 * C329 - C4729 * C315) *
               C30801) *
              C30555 * C30623 * C30605 * C110 +
          ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
            C4729 * C301 - C4725 * C318) *
               C114 +
           (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
            C4729 * C319 - C4725 * C331) *
               C30801) *
              C30555 * C30623 * C30605 * C111 +
          ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
            C4725 * C322 - C4729 * C303) *
               C114 +
           (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
            C4725 * C333 - C4729 * C323) *
               C30801) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30926 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30915 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C1146 +
          ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
            C4729 * C1152 - C4725 * C1158) *
               C114 +
           (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
            C4729 * C1159 - C4725 * C1170) *
               C30801) *
              C30555 * C30623 * C1147 +
          ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
            C4725 * C1164 - C4729 * C1155) *
               C114 +
           (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
            C4725 * C1173 - C4729 * C1165) *
               C30801) *
              C30555 * C30623 * C1148 +
          ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
            C4729 * C5464 - C4725 * C5466) *
               C114 +
           (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
            C4729 * C5467 - C4725 * C5470) *
               C30801) *
              C30555 * C30623 * C1149 +
          ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 - C4728 * C5464 +
            C4725 * C5468 - C4729 * C5465) *
               C114 +
           (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 - C4728 * C5467 +
            C4725 * C5471 - C4729 * C5469) *
               C30801) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C1078 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30926 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30915 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C1079 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30925 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C30913 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C1991 +
          ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
            C4729 * C1289 - C4725 * C1301) *
               C114 +
           (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
            C4729 * C1302 - C4725 * C1316) *
               C30801) *
              C30555 * C1992 +
          ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
            C4725 * C1307 - C4729 * C1292) *
               C114 +
           (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
            C4725 * C1319 - C4729 * C1308) *
               C30801) *
              C30555 * C1993 +
          ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
            C4729 * C6230 - C4725 * C6233) *
               C114 +
           (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
            C4729 * C6234 - C4725 * C6239) *
               C30801) *
              C30555 * C1994 +
          ((C4723 * C2008 - C4727 * C1999 + C4724 * C6235 - C4728 * C6231 +
            C4725 * C6236 - C4729 * C6232) *
               C114 +
           (C4723 * C2017 - C4727 * C2009 + C4724 * C6240 - C4728 * C6237 +
            C4725 * C6241 - C4729 * C6238) *
               C30801) *
              C30555 * C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 +
           (C30788 * C491 - C113 * C481) * C8894 +
           (C30788 * C511 - C113 * C492) * C8891 +
           (C30788 * C497 - C113 * C484) * C8895 +
           (C30788 * C514 - C113 * C498) * C8892) *
              C30555 * C30623 * C30605 * C108 +
          ((C145 - C144) * C8893 + (C147 - C146) * C8890 +
           (C522 - C523) * C8894 + (C524 - C525) * C8891 +
           (C531 - C530) * C8895 + (C533 - C532) * C8892) *
              C30555 * C30623 * C30605 * C109 +
          (C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
           (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
              C30555 * C30623 * C30605 * C110 +
          (C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
           (C541 - C540) * C8891 + (C542 - C543) * C8895 +
           (C544 - C545) * C8892) *
              C30555 * C30623 * C30605 * C111 +
          (C168 * C8893 + C169 * C8890 + (C780 - C779) * C8894 +
           (C782 - C781) * C8891 + (C30788 * C509 - C113 * C490) * C8895 +
           (C30788 * C520 - C113 * C510) * C8892) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 +
            (C30788 * C491 - C113 * C481) * C8894 +
            (C30788 * C511 - C113 * C492) * C8891 +
            (C30788 * C497 - C113 * C484) * C8895 +
            (C30788 * C514 - C113 * C498) * C8892) *
               C30555 * C30623 * C30925 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 +
            (C113 * C931 - C30788 * C936) * C8894 +
            (C113 * C937 - C30788 * C946) * C8891 +
            (C113 * C1286 - C30788 * C1295) * C8895 +
            (C113 * C1296 - C30788 * C1313) * C8892) *
               C30555 * C30623 * C30913 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 +
            (C531 - C530) * C8895 + (C533 - C532) * C8892) *
               C30555 * C30623 * C30925 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C30913 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C292 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30925 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30913 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30926 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30915 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30926 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 +
            (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
               C30555 * C30915 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C113 * C2000 - C30788 * C2010) * C8895 +
            (C113 * C2011 - C30788 * C2018) * C8892) *
               C30555 * C30891) *
              C30605 * C292 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30926 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30915 +
           (C548 * C8893 + C549 * C8890 + (C2290 - C2289) * C8894 +
            (C2292 - C2291) * C8891 + (C30788 * C2012 - C113 * C2001) * C8895 +
            (C30788 * C2019 - C113 * C2013) * C8892) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C1078 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
            (C9481 - C9482) * C8892) *
               C30555 * C30623 * C1079 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C1078 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C1079 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C30909 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C1078 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C1079 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
              C30555 * C30623 * C1146 +
          ((C113 * C294 - C30788 * C304) * C8893 +
           (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
           (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
           (C9481 - C9482) * C8892) *
              C30555 * C30623 * C1147 +
          ((C30788 * C310 - C113 * C297) * C8893 +
           (C30788 * C327 - C113 * C311) * C8890 +
           (C30788 * C1301 - C113 * C1289) * C8894 +
           (C30788 * C1316 - C113 * C1302) * C8891 +
           (C30788 * C1307 - C113 * C1292) * C8895 +
           (C30788 * C1319 - C113 * C1308) * C8892) *
              C30555 * C30623 * C1148 +
          ((C113 * C1152 - C30788 * C1158) * C8893 +
           (C113 * C1159 - C30788 * C1170) * C8890 +
           (C113 * C1694 - C30788 * C1697) * C8894 +
           (C113 * C1698 - C30788 * C1703) * C8891 +
           (C113 * C5582 - C30788 * C5585) * C8895 +
           (C113 * C5586 - C30788 * C5591) * C8892) *
              C30555 * C30623 * C1149 +
          ((C30788 * C1164 - C113 * C1155) * C8893 +
           (C30788 * C1173 - C113 * C1165) * C8890 +
           (C30788 * C5587 - C113 * C5583) * C8894 +
           (C30788 * C5592 - C113 * C5588) * C8891 +
           (C30788 * C5589 - C113 * C5584) * C8895 +
           (C30788 * C5593 - C113 * C5590) * C8892) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30926 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30915 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C1078 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30926 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
            (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
               C30555 * C30915 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C113 * C6231 - C30788 * C6235) * C8895 +
            (C113 * C6237 - C30788 * C6240) * C8892) *
               C30555 * C30891) *
              C1079 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30926 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30915 +
           (C9783 * C8893 + C9784 * C8890 + (C9780 - C9779) * C8894 +
            (C9782 - C9781) * C8891 + (C30788 * C6236 - C113 * C6232) * C8895 +
            (C30788 * C6241 - C113 * C6238) * C8892) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C1816 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C1817 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C1816 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 +
            (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
               C30555 * C1817 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C113 * C2000 - C30788 * C2010) * C8895 +
            (C113 * C2011 - C30788 * C2018) * C8892) *
               C30555 * C30891) *
              C30605 * C30909 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C1816 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C1817 +
           (C548 * C8893 + C549 * C8890 + (C2290 - C2289) * C8894 +
            (C2292 - C2291) * C8891 + (C30788 * C2012 - C113 * C2001) * C8895 +
            (C30788 * C2019 - C113 * C2013) * C8892) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C1816 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C1817 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C30925 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C1816 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
            (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
               C30555 * C1817 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C113 * C6231 - C30788 * C6235) * C8895 +
            (C113 * C6237 - C30788 * C6240) * C8892) *
               C30555 * C30891) *
              C30913 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C1816 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C1817 +
           (C9783 * C8893 + C9784 * C8890 + (C9780 - C9779) * C8894 +
            (C9782 - C9781) * C8891 + (C30788 * C6236 - C113 * C6232) * C8895 +
            (C30788 * C6241 - C113 * C6238) * C8892) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
              C30555 * C1991 +
          ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
           (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
           C10430 * C8892) *
              C30555 * C1992 +
          (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
           (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
              C30555 * C1993 +
          (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
           (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
           (C10437 - C10438) * C8892) *
              C30555 * C1994 +
          (C10439 * C8893 + C10440 * C8890 + (C10436 - C10435) * C8894 +
           (C10438 - C10437) * C8891 +
           (C30788 * C10424 - C113 * C10421) * C8895 +
           (C30788 * C10427 - C113 * C10425) * C8892) *
              C30555 * C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30858 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C30710) *
                  C30605 * C655 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30858 +
               (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                C785 * C105) *
                   C30710) *
                  C30605 * C656 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30858 +
               (C554 * C103 +
                ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                   C30710) *
                  C30605 * C657 +
              ((C177 * C103 +
                ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
                ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                   C30858 +
               (C785 * C103 +
                ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
                ((C30788 * C773 - C113 * C772) * C114 +
                 (C30788 * C775 - C113 * C774) * C30801) *
                    C105) *
                   C30710) *
                  C30605 * C30892) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((((C30788 * C122 - C113 * C115) * C114 +
                  (C30788 * C136 - C113 * C123) * C30801) *
                     C103 +
                 ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                 C176 * C105) *
                    C30858 +
                (((C113 * C481 - C30788 * C491) * C114 +
                  (C113 * C492 - C30788 * C511) * C30801) *
                     C103 +
                 ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                 C554 * C105) *
                    C30710) *
                   C1078 +
               ((((C113 * C294 - C30788 * C304) * C114 +
                  (C113 * C305 - C30788 * C324) * C30801) *
                     C103 +
                 ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                 C367 * C105) *
                    C30858 +
                (((C30788 * C936 - C113 * C931) * C114 +
                  (C30788 * C946 - C113 * C937) * C30801) *
                     C103 +
                 ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                 C968 * C105) *
                    C30710) *
                   C1079 +
               ((((C30788 * C310 - C113 * C297) * C114 +
                  (C30788 * C327 - C113 * C311) * C30801) *
                     C103 +
                 ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                 C368 * C105) *
                    C30858 +
                (((C113 * C1289 - C30788 * C1301) * C114 +
                  (C113 * C1302 - C30788 * C1316) * C30801) *
                     C103 +
                 ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
                 ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                    C30710) *
                   C30888) *
                  C30843 +
              (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                 ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                 C177 * C105) *
                    C30858 +
                (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                 ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                 C785 * C105) *
                    C30710) *
                   C1078 +
               ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                 ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                 C672 * C105) *
                    C30858 +
                (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
                 ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
                 ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                    C30710) *
                   C1079 +
               ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                 ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                 ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                    C30858 +
                (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
                 ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
                 ((C30788 * C1585 - C113 * C1584) * C114 +
                  (C30788 * C1587 - C113 * C1586) * C30801) *
                     C105) *
                    C30710) *
                   C30888) *
                  C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C2277 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C30605 * C30843 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C2276 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C2277 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C2278 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C30801) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C30801) * C104 +
            ((C30788 * C2281 - C113 * C2280) * C114 +
             (C30788 * C2283 - C113 * C2282) * C30801) *
                C105) *
               C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C2276 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C2277 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C2278 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C30605 * C30843 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C2276 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C2277 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C2278 +
           ((C4723 * C2004 - C4727 * C1997 + C4724 * C2395 - C4728 * C2391 +
             C4725 * C6491 - C4729 * C6490) *
                C114 +
            (C4723 * C2015 - C4727 * C2005 + C4724 * C2400 - C4728 * C2396 +
             C4725 * C6493 - C4729 * C6492) *
                C30801) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30858 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30858 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 +
            (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
               C30555 * C30710) *
              C30605 * C656 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30858 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30710) *
              C30605 * C657 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C30858 +
           (C777 * C8893 + C778 * C8890 + (C543 - C542) * C8894 +
            (C545 - C544) * C8891 + (C30788 * C2281 - C113 * C2280) * C8895 +
            (C30788 * C2283 - C113 * C2282) * C8892) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30858 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30555 * C30710) *
               C1078 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30858 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
                C30555 * C30710) *
               C1079 +
           (((C30788 * C310 - C113 * C297) * C8893 +
             (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
             (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
                C30555 * C30858 +
            ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
             (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
             (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30858 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 +
             (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
                C30555 * C30710) *
               C1078 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 +
             (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
                C30555 * C30858 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C113 * C2391 - C30788 * C2395) * C8895 +
             (C113 * C2396 - C30788 * C2400) * C8892) *
                C30555 * C30710) *
               C1079 +
           (((C344 - C343) * C8893 + (C346 - C345) * C8890 +
             (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
             (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
                C30555 * C30858 +
            ((C1590 - C1589) * C8893 + (C1592 - C1591) * C8890 +
             (C10030 - C10029) * C8894 + (C10032 - C10031) * C8891 +
             (C30788 * C6491 - C113 * C6490) * C8895 +
             (C30788 * C6493 - C113 * C6492) * C8892) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C2276 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C2277 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30555 * C2278 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30555 * C30904) *
              C30605 * C30843 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C2276 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30555 * C2277 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C10701 - C10702) * C8895 +
            (C10703 - C10704) * C8892) *
               C30555 * C2278 +
           (C10699 * C8893 + C10700 * C8890 + (C10702 - C10701) * C8894 +
            (C10704 - C10703) * C8891 +
            (C30788 * C10695 - C113 * C10694) * C8895 +
            (C30788 * C10697 - C113 * C10696) * C8892) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C30605 * C108 +
          (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
           C177 * C105) *
              C30623 * C30605 * C109 +
          (C176 * C103 +
           ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
           C178 * C105) *
              C30623 * C30605 * C110 +
          (C177 * C103 +
           ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
           ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
              C30623 * C30605 * C111 +
          (C178 * C103 +
           ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
           ((C30788 * C134 - C113 * C121) * C114 +
            (C30788 * C142 - C113 * C135) * C30801) *
               C105) *
              C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30925 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30913 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30925 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
               C30623 * C30913 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30925 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C113 * C302 - C30788 * C320) * C114 +
             (C113 * C321 - C30788 * C332) * C30801) *
                C105) *
               C30623 * C30913 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1078 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1079 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C1146 +
          (((C113 * C294 - C30788 * C304) * C114 +
            (C113 * C305 - C30788 * C324) * C30801) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
           C367 * C105) *
              C30623 * C1147 +
          (((C30788 * C310 - C113 * C297) * C114 +
            (C30788 * C327 - C113 * C311) * C30801) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
           C368 * C105) *
              C30623 * C1148 +
          (((C113 * C1152 - C30788 * C1158) * C114 +
            (C113 * C1159 - C30788 * C1170) * C30801) *
               C103 +
           ((C113 * C1153 - C30788 * C1160) * C114 +
            (C113 * C1161 - C30788 * C1171) * C30801) *
               C104 +
           ((C113 * C1154 - C30788 * C1162) * C114 +
            (C113 * C1163 - C30788 * C1172) * C30801) *
               C105) *
              C30623 * C1149 +
          (((C30788 * C1164 - C113 * C1155) * C114 +
            (C30788 * C1173 - C113 * C1165) * C30801) *
               C103 +
           ((C30788 * C1166 - C113 * C1156) * C114 +
            (C30788 * C1174 - C113 * C1167) * C30801) *
               C104 +
           ((C30788 * C1168 - C113 * C1157) * C114 +
            (C30788 * C1175 - C113 * C1169) * C30801) *
               C105) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C1817 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30605 * C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30891) *
              C30605 * C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
            ((C30788 * C509 - C113 * C490) * C114 +
             (C30788 * C520 - C113 * C510) * C30801) *
                C105) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C1817 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30925 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C1816 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C113 * C1287 - C30788 * C1297) * C114 +
             (C113 * C1298 - C30788 * C1314) * C30801) *
                C104 +
            ((C113 * C1288 - C30788 * C1299) * C114 +
             (C113 * C1300 - C30788 * C1315) * C30801) *
                C105) *
               C30891) *
              C30913 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C1817 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C30605 * C108 +
          ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
            C4729 * C298 - C4725 * C312) *
               C114 +
           (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
            C4729 * C313 - C4725 * C328) *
               C30801) *
              C30555 * C30623 * C30605 * C109 +
          ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
            C4725 * C314 - C4729 * C299) *
               C114 +
           (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
            C4725 * C329 - C4729 * C315) *
               C30801) *
              C30555 * C30623 * C30605 * C110 +
          ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
            C4729 * C301 - C4725 * C318) *
               C114 +
           (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
            C4729 * C319 - C4725 * C331) *
               C30801) *
              C30555 * C30623 * C30605 * C111 +
          ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
            C4725 * C322 - C4729 * C303) *
               C114 +
           (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
            C4725 * C333 - C4729 * C323) *
               C30801) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C1146 +
          ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
            C4729 * C1152 - C4725 * C1158) *
               C114 +
           (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
            C4729 * C1159 - C4725 * C1170) *
               C30801) *
              C30555 * C30623 * C1147 +
          ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
            C4725 * C1164 - C4729 * C1155) *
               C114 +
           (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
            C4725 * C1173 - C4729 * C1165) *
               C30801) *
              C30555 * C30623 * C1148 +
          ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
            C4729 * C5464 - C4725 * C5466) *
               C114 +
           (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
            C4729 * C5467 - C4725 * C5470) *
               C30801) *
              C30555 * C30623 * C1149 +
          ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 - C4728 * C5464 +
            C4725 * C5468 - C4729 * C5465) *
               C114 +
           (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 - C4728 * C5467 +
            C4725 * C5471 - C4729 * C5469) *
               C30801) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30925 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C30913 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 +
           (C30788 * C491 - C113 * C481) * C8894 +
           (C30788 * C511 - C113 * C492) * C8891 +
           (C30788 * C497 - C113 * C484) * C8895 +
           (C30788 * C514 - C113 * C498) * C8892) *
              C30555 * C30623 * C30605 * C108 +
          ((C145 - C144) * C8893 + (C147 - C146) * C8890 +
           (C522 - C523) * C8894 + (C524 - C525) * C8891 +
           (C531 - C530) * C8895 + (C533 - C532) * C8892) *
              C30555 * C30623 * C30605 * C109 +
          (C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
           (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
              C30555 * C30623 * C30605 * C110 +
          (C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
           (C541 - C540) * C8891 + (C542 - C543) * C8895 +
           (C544 - C545) * C8892) *
              C30555 * C30623 * C30605 * C111 +
          (C168 * C8893 + C169 * C8890 + (C780 - C779) * C8894 +
           (C782 - C781) * C8891 + (C30788 * C509 - C113 * C490) * C8895 +
           (C30788 * C520 - C113 * C510) * C8892) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 +
            (C30788 * C491 - C113 * C481) * C8894 +
            (C30788 * C511 - C113 * C492) * C8891 +
            (C30788 * C497 - C113 * C484) * C8895 +
            (C30788 * C514 - C113 * C498) * C8892) *
               C30555 * C30623 * C30925 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 +
            (C113 * C931 - C30788 * C936) * C8894 +
            (C113 * C937 - C30788 * C946) * C8891 +
            (C113 * C1286 - C30788 * C1295) * C8895 +
            (C113 * C1296 - C30788 * C1313) * C8892) *
               C30555 * C30623 * C30913 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 +
            (C531 - C530) * C8895 + (C533 - C532) * C8892) *
               C30555 * C30623 * C30925 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C30913 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C292 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30925 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30913 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C1078 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
            (C9481 - C9482) * C8892) *
               C30555 * C30623 * C1079 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C1078 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C1079 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C30909 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C1078 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C1079 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
              C30555 * C30623 * C1146 +
          ((C113 * C294 - C30788 * C304) * C8893 +
           (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
           (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
           (C9481 - C9482) * C8892) *
              C30555 * C30623 * C1147 +
          ((C30788 * C310 - C113 * C297) * C8893 +
           (C30788 * C327 - C113 * C311) * C8890 +
           (C30788 * C1301 - C113 * C1289) * C8894 +
           (C30788 * C1316 - C113 * C1302) * C8891 +
           (C30788 * C1307 - C113 * C1292) * C8895 +
           (C30788 * C1319 - C113 * C1308) * C8892) *
              C30555 * C30623 * C1148 +
          ((C113 * C1152 - C30788 * C1158) * C8893 +
           (C113 * C1159 - C30788 * C1170) * C8890 +
           (C113 * C1694 - C30788 * C1697) * C8894 +
           (C113 * C1698 - C30788 * C1703) * C8891 +
           (C113 * C5582 - C30788 * C5585) * C8895 +
           (C113 * C5586 - C30788 * C5591) * C8892) *
              C30555 * C30623 * C1149 +
          ((C30788 * C1164 - C113 * C1155) * C8893 +
           (C30788 * C1173 - C113 * C1165) * C8890 +
           (C30788 * C5587 - C113 * C5583) * C8894 +
           (C30788 * C5592 - C113 * C5588) * C8891 +
           (C30788 * C5589 - C113 * C5584) * C8895 +
           (C30788 * C5593 - C113 * C5590) * C8892) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C1816 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C1817 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C1816 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 +
            (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
               C30555 * C1817 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C113 * C2000 - C30788 * C2010) * C8895 +
            (C113 * C2011 - C30788 * C2018) * C8892) *
               C30555 * C30891) *
              C30605 * C30909 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C1816 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C1817 +
           (C548 * C8893 + C549 * C8890 + (C2290 - C2289) * C8894 +
            (C2292 - C2291) * C8891 + (C30788 * C2012 - C113 * C2001) * C8895 +
            (C30788 * C2019 - C113 * C2013) * C8892) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C1816 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C1817 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C30925 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C1816 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
            (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
               C30555 * C1817 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C113 * C6231 - C30788 * C6235) * C8895 +
            (C113 * C6237 - C30788 * C6240) * C8892) *
               C30555 * C30891) *
              C30913 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C1816 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C1817 +
           (C9783 * C8893 + C9784 * C8890 + (C9780 - C9779) * C8894 +
            (C9782 - C9781) * C8891 + (C30788 * C6236 - C113 * C6232) * C8895 +
            (C30788 * C6241 - C113 * C6238) * C8892) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30582 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30591 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C2871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C30582 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C30591 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C3262 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C30857 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C3262 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C2871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C3262 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C30857 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C3262 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30668) *
              C30582 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C3262 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C30857 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C3262 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30591 +
          (((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
             (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
                C30555 * C3262 +
            (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
             (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
             (C2291 - C2292) * C8892) *
                C30555 * C30710) *
               C30857 +
           ((C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
             (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
             (C2177 - C2178) * C8892) *
                C30555 * C3262 +
            (C964 * C8893 + C965 * C8890 + (C2176 - C2175) * C8894 +
             (C2178 - C2177) * C8891 + (C30788 * C2397 - C113 * C2392) * C8895 +
             (C30788 * C2401 - C113 * C2398) * C8892) *
                C30555 * C30710) *
               C30668) *
              C2871)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C3770) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C3770) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30706 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30713 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C3770) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30706 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30713 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C3770) *
               C30668) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30706 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30713 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C3770) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30706 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30713 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30706 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30713 +
            (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
             (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
                C30555 * C3770) *
               C30857 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30706 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30713 +
            (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
             (C9770 - C9769) * C8891 + (C10809 - C10810) * C8895 +
             (C10811 - C10812) * C8892) *
                C30555 * C3770) *
               C30668) *
              C2608 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30706 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30713 +
            (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
             (C2287 - C2288) * C8891 + (C10701 - C10702) * C8895 +
             (C10703 - C10704) * C8892) *
                C30555 * C3770) *
               C30857 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C30706 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30713 +
            (C10591 * C8893 + C10592 * C8890 + (C10594 - C10593) * C8894 +
             (C10596 - C10595) * C8891 +
             (C30788 * C10587 - C113 * C10586) * C8895 +
             (C30788 * C10589 - C113 * C10588) * C8892) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C3262 +
               (((C113 * C481 - C30788 * C491) * C114 +
                 (C113 * C492 - C30788 * C511) * C30801) *
                    C103 +
                ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                C554 * C105) *
                   C30710) *
                  C30605 * C30931 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C3262 +
               (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                C785 * C105) *
                   C30710) *
                  C30605 * C30924 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C3262 +
               (C554 * C103 +
                ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                   C30710) *
                  C30605 * C30911 +
              ((C177 * C103 +
                ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
                ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                   C3262 +
               (C785 * C103 +
                ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
                ((C30788 * C773 - C113 * C772) * C114 +
                 (C30788 * C775 - C113 * C774) * C30801) *
                    C105) *
                   C30710) *
                  C30605 * C30892) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((((C30788 * C122 - C113 * C115) * C114 +
                  (C30788 * C136 - C113 * C123) * C30801) *
                     C103 +
                 ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                 C176 * C105) *
                    C3262 +
                (((C113 * C481 - C30788 * C491) * C114 +
                  (C113 * C492 - C30788 * C511) * C30801) *
                     C103 +
                 ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                 C554 * C105) *
                    C30710) *
                   C30925 +
               ((((C113 * C294 - C30788 * C304) * C114 +
                  (C113 * C305 - C30788 * C324) * C30801) *
                     C103 +
                 ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                 C367 * C105) *
                    C3262 +
                (((C30788 * C936 - C113 * C931) * C114 +
                  (C30788 * C946 - C113 * C937) * C30801) *
                     C103 +
                 ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                 C968 * C105) *
                    C30710) *
                   C30913 +
               ((((C30788 * C310 - C113 * C297) * C114 +
                  (C30788 * C327 - C113 * C311) * C30801) *
                     C103 +
                 ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                 C368 * C105) *
                    C3262 +
                (((C113 * C1289 - C30788 * C1301) * C114 +
                  (C113 * C1302 - C30788 * C1316) * C30801) *
                     C103 +
                 ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
                 ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                    C30710) *
                   C30888) *
                  C2608 +
              (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                 ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                 C177 * C105) *
                    C3262 +
                (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                 ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                 C785 * C105) *
                    C30710) *
                   C30925 +
               ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                 ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                 C672 * C105) *
                    C3262 +
                (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
                 ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
                 ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                    C30710) *
                   C30913 +
               ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                 ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                 ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                    C3262 +
                (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
                 ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
                 ((C30788 * C1585 - C113 * C1584) * C114 +
                  (C30788 * C1587 - C113 * C1586) * C30801) *
                     C105) *
                    C30710) *
                   C30888) *
                  C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30933 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30930 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30921 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C30605 * C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30933 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30930 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30921 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C30801) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C30801) * C104 +
            ((C30788 * C2281 - C113 * C2280) * C114 +
             (C30788 * C2283 - C113 * C2282) * C30801) *
                C105) *
               C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30933 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30930 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30921 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C30605 * C2608 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30933 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30930 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30921 +
           ((C4723 * C2004 - C4727 * C1997 + C4724 * C2395 - C4728 * C2391 +
             C4725 * C6491 - C4729 * C6490) *
                C114 +
            (C4723 * C2015 - C4727 * C2005 + C4724 * C2400 - C4728 * C2396 +
             C4725 * C6493 - C4729 * C6492) *
                C30801) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C3262 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C3262 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30555 * C30710) *
              C30605 * C30924 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C3262 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30710) *
              C30605 * C30911 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C3262 +
           (C777 * C8893 + C778 * C8890 + (C543 - C542) * C8894 +
            (C545 - C544) * C8891 + (C30788 * C2281 - C113 * C2280) * C8895 +
            (C30788 * C2283 - C113 * C2282) * C8892) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C3262 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C30925 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C3262 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30913 +
           (((C30788 * C310 - C113 * C297) * C8893 +
             (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
             (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
                C30555 * C3262 +
            ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
             (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
             (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C3262 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C30925 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C3262 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30913 +
           (((C344 - C343) * C8893 + (C346 - C345) * C8890 +
             (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
             (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
                C30555 * C3262 +
            ((C1590 - C1589) * C8893 + (C1592 - C1591) * C8890 +
             (C10030 - C10029) * C8894 + (C10032 - C10031) * C8891 +
             (C30788 * C6491 - C113 * C6490) * C8895 +
             (C30788 * C6493 - C113 * C6492) * C8892) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30933 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30930 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30555 * C30921 +
           (C10429 * C8893 + C10430 * C8890 + (C10432 - C10431) * C8894 +
            (C10434 - C10433) * C8891 + (C10435 - C10436) * C8895 +
            (C10437 - C10438) * C8892) *
               C30555 * C30904) *
              C30605 * C2608 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30933 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30555 * C30930 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C10701 - C10702) * C8895 +
            (C10703 - C10704) * C8892) *
               C30555 * C30921 +
           (C10699 * C8893 + C10700 * C8890 + (C10702 - C10701) * C8894 +
            (C10704 - C10703) * C8891 +
            (C30788 * C10695 - C113 * C10694) * C8895 +
            (C30788 * C10697 - C113 * C10696) * C8892) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30706 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30713 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C3770) *
              C30605 * C30582 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30706 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30713 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C3770) *
              C30605 * C30591 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30706 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30713 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C3770) *
              C30605 * C2871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30706 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30713 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C3770) *
              C30605 * C30582 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30706 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30713 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C3770) *
              C30605 * C30591 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30706 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30713 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
            ((C30788 * C509 - C113 * C490) * C114 +
             (C30788 * C520 - C113 * C510) * C30801) *
                C105) *
               C3770) *
              C30605 * C2871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30706 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30713 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + C10439 * C8895 + C10440 * C8892) *
               C30555 * C3770) *
              C30605 * C30582 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30706 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30555 * C30713 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C10701 - C10702) * C8895 +
            (C10703 - C10704) * C8892) *
               C30555 * C3770) *
              C30605 * C30591 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30706 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30713 +
           (C548 * C8893 + C549 * C8890 + (C2290 - C2289) * C8894 +
            (C2292 - C2291) * C8891 + (C30788 * C2012 - C113 * C2001) * C8895 +
            (C30788 * C2019 - C113 * C2013) * C8892) *
               C30555 * C3770) *
              C30605 * C2871)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30925 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30913 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C30888) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30925 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30913 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30605 * C30931 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30710) *
              C30605 * C30924 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30710) *
              C30605 * C30911 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
            ((C30788 * C773 - C113 * C772) * C114 +
             (C30788 * C775 - C113 * C774) * C30801) *
                C105) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C3262 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 + C10429 * C8895 +
            C10430 * C8892) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C3262 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
            C10700 * C8892) *
               C30555 * C30710) *
              C30605 * C30924 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C3262 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30710) *
              C30605 * C30911 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C3262 +
           (C777 * C8893 + C778 * C8890 + (C543 - C542) * C8894 +
            (C545 - C544) * C8891 + (C30788 * C2281 - C113 * C2280) * C8895 +
            (C30788 * C2283 - C113 * C2282) * C8892) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C3262 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             C10429 * C8895 + C10430 * C8892) *
                C30555 * C30710) *
               C30925 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C3262 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             C10807 * C8895 + C10808 * C8892) *
                C30555 * C30710) *
               C30913 +
           (((C30788 * C310 - C113 * C297) * C8893 +
             (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
             (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
                C30555 * C3262 +
            ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
             (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
             (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C3262 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 + C10699 * C8895 +
             C10700 * C8892) *
                C30555 * C30710) *
               C30925 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 + C10591 * C8895 +
             C10592 * C8892) *
                C30555 * C3262 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C10593 - C10594) * C8895 + (C10595 - C10596) * C8892) *
                C30555 * C30710) *
               C30913 +
           (((C344 - C343) * C8893 + (C346 - C345) * C8890 +
             (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
             (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
                C30555 * C3262 +
            ((C1590 - C1589) * C8893 + (C1592 - C1591) * C8890 +
             (C10030 - C10029) * C8894 + (C10032 - C10031) * C8891 +
             (C30788 * C6491 - C113 * C6490) * C8895 +
             (C30788 * C6493 - C113 * C6492) * C8892) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1420 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1421 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C1422 +
           (((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30623 * C30898) *
              C30843 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
            ((C30788 * C1427 - C113 * C1426) * C114 +
             (C30788 * C1429 - C113 * C1428) * C30801) *
                C105) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30857 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30668) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30857 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30668) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30857 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30668) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30623 * C30857 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
            ((C30788 * C660 - C113 * C659) * C114 +
             (C30788 * C662 - C113 * C661) * C30801) *
                C105) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C30857 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 +
            (C113 * C931 - C30788 * C936) * C8894 +
            (C113 * C937 - C30788 * C946) * C8891 +
            (C113 * C1286 - C30788 * C1295) * C8895 +
            (C113 * C1296 - C30788 * C1313) * C8892) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C30857 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C30668) *
              C656 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30857 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30668) *
              C657 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C30623 * C30857 +
           (C664 * C8893 + C665 * C8890 + (C961 - C960) * C8894 +
            (C963 - C962) * C8891 + (C30788 * C2167 - C113 * C2166) * C8895 +
            (C30788 * C2169 - C113 * C2168) * C8892) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C1420 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30623 * C1421 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30623 * C1422 +
           ((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C113 * C1694 - C30788 * C1697) * C8894 +
            (C113 * C1698 - C30788 * C1703) * C8891 +
            (C113 * C5582 - C30788 * C5585) * C8895 +
            (C113 * C5586 - C30788 * C5591) * C8892) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C1420 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C1421 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C1422 +
           ((C1432 - C1431) * C8893 + (C1434 - C1433) * C8890 +
            (C30788 * C1699 - C113 * C1695) * C8894 +
            (C30788 * C1704 - C113 * C1700) * C8891 +
            (C30788 * C6389 - C113 * C6388) * C8895 +
            (C30788 * C6391 - C113 * C6390) * C8892) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30858 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C1420 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30858 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30710) *
              C1421 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30858 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30710) *
              C1422 +
          ((((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30858 +
           (((C30788 * C1697 - C113 * C1694) * C114 +
             (C30788 * C1703 - C113 * C1698) * C30801) *
                C103 +
            ((C30788 * C1699 - C113 * C1695) * C114 +
             (C30788 * C1704 - C113 * C1700) * C30801) *
                C104 +
            ((C30788 * C1701 - C113 * C1696) * C114 +
             (C30788 * C1705 - C113 * C1702) * C30801) *
                C105) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C30858 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C30857 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C30858 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C292 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C1420 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C1421 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C1422 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30858 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30555 * C30710) *
               C30857 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
             (C9481 - C9482) * C8892) *
                C30555 * C30858 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             (C30788 * C2393 - C113 * C2390) * C8895 +
             (C30788 * C2399 - C113 * C2394) * C8892) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30858 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 +
             (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
                C30555 * C30710) *
               C30857 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 +
             (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
                C30555 * C30858 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C113 * C2391 - C30788 * C2395) * C8895 +
             (C113 * C2396 - C30788 * C2400) * C8892) *
                C30555 * C30710) *
               C30668) *
              C292 +
          (((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
             (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
                C30555 * C30858 +
            (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
             (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
             (C2291 - C2292) * C8892) *
                C30555 * C30710) *
               C30857 +
           ((C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
             (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
             (C2177 - C2178) * C8892) *
                C30555 * C30858 +
            (C964 * C8893 + C965 * C8890 + (C2176 - C2175) * C8894 +
             (C2178 - C2177) * C8891 + (C30788 * C2397 - C113 * C2392) * C8895 +
             (C30788 * C2401 - C113 * C2398) * C8892) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30858 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30710) *
              C1420 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30858 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
            (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
               C30555 * C30710) *
              C1421 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30858 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30710) *
              C1422 +
          (((C113 * C1152 - C30788 * C1158) * C8893 +
            (C113 * C1159 - C30788 * C1170) * C8890 +
            (C10131 - C10132) * C8894 + (C10133 - C10134) * C8891 +
            (C10135 - C10136) * C8895 + (C10137 - C10138) * C8892) *
               C30555 * C30858 +
           ((C10132 - C10131) * C8893 + (C10134 - C10133) * C8890 +
            (C10136 - C10135) * C8894 + (C10138 - C10137) * C8891 +
            (C30788 * C6593 - C113 * C6592) * C8895 +
            (C30788 * C6595 - C113 * C6594) * C8892) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C30788 * C122 - C113 * C115) * C114 +
                (C30788 * C136 - C113 * C123) * C30801) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
               C176 * C105) *
                  C30623 * C30605 * C108 +
              (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
               C177 * C105) *
                  C30623 * C30605 * C109 +
              (C176 * C103 +
               ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
               C178 * C105) *
                  C30623 * C30605 * C110 +
              (C177 * C103 +
               ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
               ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                  C30623 * C30605 * C111 +
              (C178 * C103 +
               ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
               ((C30788 * C134 - C113 * C121) * C114 +
                (C30788 * C142 - C113 * C135) * C30801) *
                   C105) *
                  C30623 * C30605 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C30925 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C30913 +
               (((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30623 * C30888) *
                  C291 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C30925 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
                   C30623 * C30913 +
               (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                   C30623 * C30888) *
                  C292 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30623 * C30925 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                ((C113 * C302 - C30788 * C320) * C114 +
                 (C113 * C321 - C30788 * C332) * C30801) *
                    C105) *
                   C30623 * C30913 +
               (C368 * C103 +
                ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                ((C30788 * C322 - C113 * C303) * C114 +
                 (C30788 * C333 - C113 * C323) * C30801) *
                    C105) *
                   C30623 * C30888) *
                  C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30926 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30915 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30605 * C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30926 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            ((C538 - C539) * C114 + (C540 - C541) * C30801) * C105) *
               C30915 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30891) *
              C30605 * C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30926 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C113 * C489 - C30788 * C507) * C114 +
             (C113 * C508 - C30788 * C519) * C30801) *
                C105) *
               C30915 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
            ((C30788 * C509 - C113 * C490) * C114 +
             (C30788 * C520 - C113 * C510) * C30801) *
                C105) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1078 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1079 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C1146 +
          (((C113 * C294 - C30788 * C304) * C114 +
            (C113 * C305 - C30788 * C324) * C30801) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
           C367 * C105) *
              C30623 * C1147 +
          (((C30788 * C310 - C113 * C297) * C114 +
            (C30788 * C327 - C113 * C311) * C30801) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
           C368 * C105) *
              C30623 * C1148 +
          (((C113 * C1152 - C30788 * C1158) * C114 +
            (C113 * C1159 - C30788 * C1170) * C30801) *
               C103 +
           ((C113 * C1153 - C30788 * C1160) * C114 +
            (C113 * C1161 - C30788 * C1171) * C30801) *
               C104 +
           ((C113 * C1154 - C30788 * C1162) * C114 +
            (C113 * C1163 - C30788 * C1172) * C30801) *
               C105) *
              C30623 * C1149 +
          (((C30788 * C1164 - C113 * C1155) * C114 +
            (C30788 * C1173 - C113 * C1165) * C30801) *
               C103 +
           ((C30788 * C1166 - C113 * C1156) * C114 +
            (C30788 * C1174 - C113 * C1167) * C30801) *
               C104 +
           ((C30788 * C1168 - C113 * C1157) * C114 +
            (C30788 * C1175 - C113 * C1169) * C30801) *
               C105) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30926 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30915 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C1078 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30926 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30915 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C113 * C1287 - C30788 * C1297) * C114 +
             (C113 * C1298 - C30788 * C1314) * C30801) *
                C104 +
            ((C113 * C1288 - C30788 * C1299) * C114 +
             (C113 * C1300 - C30788 * C1315) * C30801) *
                C105) *
               C30891) *
              C1079 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30926 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C113 * C1290 - C30788 * C1303) * C114 +
             (C113 * C1304 - C30788 * C1317) * C30801) *
                C104 +
            ((C113 * C1291 - C30788 * C1305) * C114 +
             (C113 * C1306 - C30788 * C1318) * C30801) *
                C105) *
               C30915 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C30605 * C108 +
          ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
            C4729 * C298 - C4725 * C312) *
               C114 +
           (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
            C4729 * C313 - C4725 * C328) *
               C30801) *
              C30555 * C30623 * C30605 * C109 +
          ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
            C4725 * C314 - C4729 * C299) *
               C114 +
           (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
            C4725 * C329 - C4729 * C315) *
               C30801) *
              C30555 * C30623 * C30605 * C110 +
          ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
            C4729 * C301 - C4725 * C318) *
               C114 +
           (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
            C4729 * C319 - C4725 * C331) *
               C30801) *
              C30555 * C30623 * C30605 * C111 +
          ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
            C4725 * C322 - C4729 * C303) *
               C114 +
           (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
            C4725 * C333 - C4729 * C323) *
               C30801) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30926 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30915 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C1146 +
          ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
            C4729 * C1152 - C4725 * C1158) *
               C114 +
           (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
            C4729 * C1159 - C4725 * C1170) *
               C30801) *
              C30555 * C30623 * C1147 +
          ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
            C4725 * C1164 - C4729 * C1155) *
               C114 +
           (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
            C4725 * C1173 - C4729 * C1165) *
               C30801) *
              C30555 * C30623 * C1148 +
          ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
            C4729 * C5464 - C4725 * C5466) *
               C114 +
           (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
            C4729 * C5467 - C4725 * C5470) *
               C30801) *
              C30555 * C30623 * C1149 +
          ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 - C4728 * C5464 +
            C4725 * C5468 - C4729 * C5465) *
               C114 +
           (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 - C4728 * C5467 +
            C4725 * C5471 - C4729 * C5469) *
               C30801) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C1078 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30926 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30915 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C1079 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 +
           (C30788 * C491 - C113 * C481) * C8894 +
           (C30788 * C511 - C113 * C492) * C8891 +
           (C30788 * C497 - C113 * C484) * C8895 +
           (C30788 * C514 - C113 * C498) * C8892) *
              C30555 * C30623 * C30605 * C108 +
          ((C145 - C144) * C8893 + (C147 - C146) * C8890 +
           (C522 - C523) * C8894 + (C524 - C525) * C8891 +
           (C531 - C530) * C8895 + (C533 - C532) * C8892) *
              C30555 * C30623 * C30605 * C109 +
          (C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
           (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
              C30555 * C30623 * C30605 * C110 +
          (C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
           (C541 - C540) * C8891 + (C542 - C543) * C8895 +
           (C544 - C545) * C8892) *
              C30555 * C30623 * C30605 * C111 +
          (C168 * C8893 + C169 * C8890 + (C780 - C779) * C8894 +
           (C782 - C781) * C8891 + (C30788 * C509 - C113 * C490) * C8895 +
           (C30788 * C520 - C113 * C510) * C8892) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 +
            (C30788 * C491 - C113 * C481) * C8894 +
            (C30788 * C511 - C113 * C492) * C8891 +
            (C30788 * C497 - C113 * C484) * C8895 +
            (C30788 * C514 - C113 * C498) * C8892) *
               C30555 * C30623 * C30925 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 +
            (C113 * C931 - C30788 * C936) * C8894 +
            (C113 * C937 - C30788 * C946) * C8891 +
            (C113 * C1286 - C30788 * C1295) * C8895 +
            (C113 * C1296 - C30788 * C1313) * C8892) *
               C30555 * C30623 * C30913 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 +
            (C531 - C530) * C8895 + (C533 - C532) * C8892) *
               C30555 * C30623 * C30925 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C30913 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C292 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30925 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30913 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30926 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30915 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30926 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 +
            (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
               C30555 * C30915 +
           (C9129 * C8893 + C9130 * C8890 + (C2285 - C2286) * C8894 +
            (C2287 - C2288) * C8891 + (C113 * C2000 - C30788 * C2010) * C8895 +
            (C113 * C2011 - C30788 * C2018) * C8892) *
               C30555 * C30891) *
              C30605 * C292 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30926 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30915 +
           (C548 * C8893 + C549 * C8890 + (C2290 - C2289) * C8894 +
            (C2292 - C2291) * C8891 + (C30788 * C2012 - C113 * C2001) * C8895 +
            (C30788 * C2019 - C113 * C2013) * C8892) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C1078 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
            (C9481 - C9482) * C8892) *
               C30555 * C30623 * C1079 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C1078 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C1079 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C30909 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C1078 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C1079 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
              C30555 * C30623 * C1146 +
          ((C113 * C294 - C30788 * C304) * C8893 +
           (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
           (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
           (C9481 - C9482) * C8892) *
              C30555 * C30623 * C1147 +
          ((C30788 * C310 - C113 * C297) * C8893 +
           (C30788 * C327 - C113 * C311) * C8890 +
           (C30788 * C1301 - C113 * C1289) * C8894 +
           (C30788 * C1316 - C113 * C1302) * C8891 +
           (C30788 * C1307 - C113 * C1292) * C8895 +
           (C30788 * C1319 - C113 * C1308) * C8892) *
              C30555 * C30623 * C1148 +
          ((C113 * C1152 - C30788 * C1158) * C8893 +
           (C113 * C1159 - C30788 * C1170) * C8890 +
           (C113 * C1694 - C30788 * C1697) * C8894 +
           (C113 * C1698 - C30788 * C1703) * C8891 +
           (C113 * C5582 - C30788 * C5585) * C8895 +
           (C113 * C5586 - C30788 * C5591) * C8892) *
              C30555 * C30623 * C1149 +
          ((C30788 * C1164 - C113 * C1155) * C8893 +
           (C30788 * C1173 - C113 * C1165) * C8890 +
           (C30788 * C5587 - C113 * C5583) * C8894 +
           (C30788 * C5592 - C113 * C5588) * C8891 +
           (C30788 * C5589 - C113 * C5584) * C8895 +
           (C30788 * C5593 - C113 * C5590) * C8892) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30926 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30915 +
           (C9131 * C8893 + C9132 * C8890 + (C9126 - C9125) * C8894 +
            (C9128 - C9127) * C8891 + (C30788 * C2008 - C113 * C1999) * C8895 +
            (C30788 * C2017 - C113 * C2009) * C8892) *
               C30555 * C30891) *
              C1078 +
          (((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
               C30555 * C30926 +
           ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
            (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
            (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
               C30555 * C30915 +
           (C9765 * C8893 + C9766 * C8890 + (C9768 - C9767) * C8894 +
            (C9770 - C9769) * C8891 + (C113 * C6231 - C30788 * C6235) * C8895 +
            (C113 * C6237 - C30788 * C6240) * C8892) *
               C30555 * C30891) *
              C1079 +
          (((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
            (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
               C30555 * C30926 +
           ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
            (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
            (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
               C30555 * C30915 +
           (C9783 * C8893 + C9784 * C8890 + (C9780 - C9779) * C8894 +
            (C9782 - C9781) * C8891 + (C30788 * C6236 - C113 * C6232) * C8895 +
            (C30788 * C6241 - C113 * C6238) * C8892) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C1078 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C1079 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C30858 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C30888) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C30858 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30858 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30605 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30858 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30710) *
              C30605 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30858 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30710) *
              C30605 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30858 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
            ((C30788 * C773 - C113 * C772) * C114 +
             (C30788 * C775 - C113 * C774) * C30801) *
                C105) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30858 +
           ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
            (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
            (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30858 +
           ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
            (C530 - C531) * C8894 + (C532 - C533) * C8891 +
            (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
               C30555 * C30710) *
              C30605 * C656 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30858 +
           (C546 * C8893 + C547 * C8890 + (C535 - C534) * C8894 +
            (C537 - C536) * C8891 + (C2289 - C2290) * C8895 +
            (C2291 - C2292) * C8892) *
               C30555 * C30710) *
              C30605 * C657 +
          ((C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
            (C541 - C540) * C8891 + (C542 - C543) * C8895 +
            (C544 - C545) * C8892) *
               C30555 * C30858 +
           (C777 * C8893 + C778 * C8890 + (C543 - C542) * C8894 +
            (C545 - C544) * C8891 + (C30788 * C2281 - C113 * C2280) * C8895 +
            (C30788 * C2283 - C113 * C2282) * C8892) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C8893 +
             (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
             (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
                C30555 * C30858 +
            ((C9118 - C9117) * C8893 + (C9120 - C9119) * C8890 +
             (C9122 - C9121) * C8894 + (C9124 - C9123) * C8891 +
             (C9125 - C9126) * C8895 + (C9127 - C9128) * C8892) *
                C30555 * C30710) *
               C1078 +
           (((C113 * C294 - C30788 * C304) * C8893 +
             (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
             (C9477 - C9478) * C8891 + C9765 * C8895 + C9766 * C8892) *
                C30555 * C30858 +
            ((C9476 - C9475) * C8893 + (C9478 - C9477) * C8890 +
             (C9480 - C9479) * C8894 + (C9482 - C9481) * C8891 +
             (C9767 - C9768) * C8895 + (C9769 - C9770) * C8892) *
                C30555 * C30710) *
               C1079 +
           (((C30788 * C310 - C113 * C297) * C8893 +
             (C30788 * C327 - C113 * C311) * C8890 + (C9771 - C9772) * C8894 +
             (C9773 - C9774) * C8891 + C9783 * C8895 + C9784 * C8892) *
                C30555 * C30858 +
            ((C9772 - C9771) * C8893 + (C9774 - C9773) * C8890 +
             (C9776 - C9775) * C8894 + (C9778 - C9777) * C8891 +
             (C9779 - C9780) * C8895 + (C9781 - C9782) * C8892) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C145 - C144) * C8893 + (C147 - C146) * C8890 +
             (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
             C9130 * C8892) *
                C30555 * C30858 +
            ((C523 - C522) * C8893 + (C525 - C524) * C8890 +
             (C530 - C531) * C8894 + (C532 - C533) * C8891 +
             (C2286 - C2285) * C8895 + (C2288 - C2287) * C8892) *
                C30555 * C30710) *
               C1078 +
           (((C336 - C335) * C8893 + (C338 - C337) * C8890 +
             (C952 - C953) * C8894 + (C954 - C955) * C8891 +
             (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
                C30555 * C30858 +
            ((C953 - C952) * C8893 + (C955 - C954) * C8890 +
             (C2171 - C2172) * C8894 + (C2173 - C2174) * C8891 +
             (C113 * C2391 - C30788 * C2395) * C8895 +
             (C113 * C2396 - C30788 * C2400) * C8892) *
                C30555 * C30710) *
               C1079 +
           (((C344 - C343) * C8893 + (C346 - C345) * C8890 +
             (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
             (C10029 - C10030) * C8895 + (C10031 - C10032) * C8892) *
                C30555 * C30858 +
            ((C1590 - C1589) * C8893 + (C1592 - C1591) * C8890 +
             (C10030 - C10029) * C8894 + (C10032 - C10031) * C8891 +
             (C30788 * C6491 - C113 * C6490) * C8895 +
             (C30788 * C6493 - C113 * C6492) * C8892) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30925 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30913 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30925 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
               C30623 * C30913 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30925 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C113 * C302 - C30788 * C320) * C114 +
             (C113 * C321 - C30788 * C332) * C30801) *
                C105) *
               C30623 * C30913 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C30605 * C108 +
          (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
           C177 * C105) *
              C30623 * C30605 * C109 +
          (C176 * C103 +
           ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
           C178 * C105) *
              C30623 * C30605 * C110 +
          (C177 * C103 +
           ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
           ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
              C30623 * C30605 * C111 +
          (C178 * C103 +
           ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
           ((C30788 * C134 - C113 * C121) * C114 +
            (C30788 * C142 - C113 * C135) * C30801) *
               C105) *
              C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1078 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1079 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C1146 +
          (((C113 * C294 - C30788 * C304) * C114 +
            (C113 * C305 - C30788 * C324) * C30801) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
           C367 * C105) *
              C30623 * C1147 +
          (((C30788 * C310 - C113 * C297) * C114 +
            (C30788 * C327 - C113 * C311) * C30801) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
           C368 * C105) *
              C30623 * C1148 +
          (((C113 * C1152 - C30788 * C1158) * C114 +
            (C113 * C1159 - C30788 * C1170) * C30801) *
               C103 +
           ((C113 * C1153 - C30788 * C1160) * C114 +
            (C113 * C1161 - C30788 * C1171) * C30801) *
               C104 +
           ((C113 * C1154 - C30788 * C1162) * C114 +
            (C113 * C1163 - C30788 * C1172) * C30801) *
               C105) *
              C30623 * C1149 +
          (((C30788 * C1164 - C113 * C1155) * C114 +
            (C30788 * C1173 - C113 * C1165) * C30801) *
               C103 +
           ((C30788 * C1166 - C113 * C1156) * C114 +
            (C30788 * C1174 - C113 * C1167) * C30801) *
               C104 +
           ((C30788 * C1168 - C113 * C1157) * C114 +
            (C30788 * C1175 - C113 * C1169) * C30801) *
               C105) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C30605 * C108 +
          ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
            C4729 * C298 - C4725 * C312) *
               C114 +
           (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
            C4729 * C313 - C4725 * C328) *
               C30801) *
              C30555 * C30623 * C30605 * C109 +
          ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
            C4725 * C314 - C4729 * C299) *
               C114 +
           (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
            C4725 * C329 - C4729 * C315) *
               C30801) *
              C30555 * C30623 * C30605 * C110 +
          ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
            C4729 * C301 - C4725 * C318) *
               C114 +
           (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
            C4729 * C319 - C4725 * C331) *
               C30801) *
              C30555 * C30623 * C30605 * C111 +
          ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
            C4725 * C322 - C4729 * C303) *
               C114 +
           (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
            C4725 * C333 - C4729 * C323) *
               C30801) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C1146 +
          ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
            C4729 * C1152 - C4725 * C1158) *
               C114 +
           (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
            C4729 * C1159 - C4725 * C1170) *
               C30801) *
              C30555 * C30623 * C1147 +
          ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
            C4725 * C1164 - C4729 * C1155) *
               C114 +
           (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
            C4725 * C1173 - C4729 * C1165) *
               C30801) *
              C30555 * C30623 * C1148 +
          ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
            C4729 * C5464 - C4725 * C5466) *
               C114 +
           (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
            C4729 * C5467 - C4725 * C5470) *
               C30801) *
              C30555 * C30623 * C1149 +
          ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 - C4728 * C5464 +
            C4725 * C5468 - C4729 * C5465) *
               C114 +
           (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 - C4728 * C5467 +
            C4725 * C5471 - C4729 * C5469) *
               C30801) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 +
           (C30788 * C491 - C113 * C481) * C8894 +
           (C30788 * C511 - C113 * C492) * C8891 +
           (C30788 * C497 - C113 * C484) * C8895 +
           (C30788 * C514 - C113 * C498) * C8892) *
              C30555 * C30623 * C30605 * C108 +
          ((C145 - C144) * C8893 + (C147 - C146) * C8890 +
           (C522 - C523) * C8894 + (C524 - C525) * C8891 +
           (C531 - C530) * C8895 + (C533 - C532) * C8892) *
              C30555 * C30623 * C30605 * C109 +
          (C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
           (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
              C30555 * C30623 * C30605 * C110 +
          (C166 * C8893 + C167 * C8890 + (C539 - C538) * C8894 +
           (C541 - C540) * C8891 + (C542 - C543) * C8895 +
           (C544 - C545) * C8892) *
              C30555 * C30623 * C30605 * C111 +
          (C168 * C8893 + C169 * C8890 + (C780 - C779) * C8894 +
           (C782 - C781) * C8891 + (C30788 * C509 - C113 * C490) * C8895 +
           (C30788 * C520 - C113 * C510) * C8892) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 +
            (C30788 * C491 - C113 * C481) * C8894 +
            (C30788 * C511 - C113 * C492) * C8891 +
            (C30788 * C497 - C113 * C484) * C8895 +
            (C30788 * C514 - C113 * C498) * C8892) *
               C30555 * C30623 * C30925 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 +
            (C113 * C931 - C30788 * C936) * C8894 +
            (C113 * C937 - C30788 * C946) * C8891 +
            (C113 * C1286 - C30788 * C1295) * C8895 +
            (C113 * C1296 - C30788 * C1313) * C8892) *
               C30555 * C30623 * C30913 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 +
            (C531 - C530) * C8895 + (C533 - C532) * C8892) *
               C30555 * C30623 * C30925 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C30913 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C292 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C30925 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C30913 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C8893 +
            (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
            (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
               C30555 * C30623 * C1078 +
           ((C113 * C294 - C30788 * C304) * C8893 +
            (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
            (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
            (C9481 - C9482) * C8892) *
               C30555 * C30623 * C1079 +
           ((C30788 * C310 - C113 * C297) * C8893 +
            (C30788 * C327 - C113 * C311) * C8890 +
            (C30788 * C1301 - C113 * C1289) * C8894 +
            (C30788 * C1316 - C113 * C1302) * C8891 +
            (C30788 * C1307 - C113 * C1292) * C8895 +
            (C30788 * C1319 - C113 * C1308) * C8892) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C145 - C144) * C8893 + (C147 - C146) * C8890 +
            (C522 - C523) * C8894 + (C524 - C525) * C8891 + C9129 * C8895 +
            C9130 * C8892) *
               C30555 * C30623 * C1078 +
           ((C336 - C335) * C8893 + (C338 - C337) * C8890 +
            (C952 - C953) * C8894 + (C954 - C955) * C8891 +
            (C2172 - C2171) * C8895 + (C2174 - C2173) * C8892) *
               C30555 * C30623 * C1079 +
           ((C344 - C343) * C8893 + (C346 - C345) * C8890 +
            (C1589 - C1590) * C8894 + (C1591 - C1592) * C8891 +
            (C113 * C1293 - C30788 * C1309) * C8895 +
            (C113 * C1310 - C30788 * C1320) * C8892) *
               C30555 * C30623 * C30888) *
              C30909 +
          ((C164 * C8893 + C165 * C8890 + (C527 - C526) * C8894 +
            (C529 - C528) * C8891 + C548 * C8895 + C549 * C8892) *
               C30555 * C30623 * C1078 +
           (C359 * C8893 + C360 * C8890 + (C957 - C956) * C8894 +
            (C959 - C958) * C8891 + (C2175 - C2176) * C8895 +
            (C2177 - C2178) * C8892) *
               C30555 * C30623 * C1079 +
           (C361 * C8893 + C362 * C8890 + (C1594 - C1593) * C8894 +
            (C1596 - C1595) * C8891 + (C30788 * C1311 - C113 * C1294) * C8895 +
            (C30788 * C1321 - C113 * C1312) * C8892) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C30788 * C122 - C113 * C115) * C8893 +
           (C30788 * C136 - C113 * C123) * C8890 + (C9117 - C9118) * C8894 +
           (C9119 - C9120) * C8891 + C9131 * C8895 + C9132 * C8892) *
              C30555 * C30623 * C1146 +
          ((C113 * C294 - C30788 * C304) * C8893 +
           (C113 * C305 - C30788 * C324) * C8890 + (C9475 - C9476) * C8894 +
           (C9477 - C9478) * C8891 + (C9479 - C9480) * C8895 +
           (C9481 - C9482) * C8892) *
              C30555 * C30623 * C1147 +
          ((C30788 * C310 - C113 * C297) * C8893 +
           (C30788 * C327 - C113 * C311) * C8890 +
           (C30788 * C1301 - C113 * C1289) * C8894 +
           (C30788 * C1316 - C113 * C1302) * C8891 +
           (C30788 * C1307 - C113 * C1292) * C8895 +
           (C30788 * C1319 - C113 * C1308) * C8892) *
              C30555 * C30623 * C1148 +
          ((C113 * C1152 - C30788 * C1158) * C8893 +
           (C113 * C1159 - C30788 * C1170) * C8890 +
           (C113 * C1694 - C30788 * C1697) * C8894 +
           (C113 * C1698 - C30788 * C1703) * C8891 +
           (C113 * C5582 - C30788 * C5585) * C8895 +
           (C113 * C5586 - C30788 * C5591) * C8892) *
              C30555 * C30623 * C1149 +
          ((C30788 * C1164 - C113 * C1155) * C8893 +
           (C30788 * C1173 - C113 * C1165) * C8890 +
           (C30788 * C5587 - C113 * C5583) * C8894 +
           (C30788 * C5592 - C113 * C5588) * C8891 +
           (C30788 * C5589 - C113 * C5584) * C8895 +
           (C30788 * C5593 - C113 * C5590) * C8892) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C30664 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C30671 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C30623 * C2868) *
                      C30582 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30664 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30671 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     C20213 * C18743 + C20214 * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C2868) *
                      C30591 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C30664 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30671 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C2868) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30664 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30671 +
                   ((((C30788 * C310 - C113 * C297) * C18742 +
                      (C30788 * C327 - C113 * C311) * C18740 +
                      (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                         C13128 +
                     ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                      C20211 * C18743 + C20212 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                      (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                         C13128 +
                     (C20213 * C18742 + C20214 * C18740 +
                      (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                         C13129) *
                        C30710) *
                       C2868) *
                      C2608 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30664 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30671 +
                   ((((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                      C20213 * C18743 + C20214 * C18741) *
                         C13128 +
                     ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                      (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                         C13129) *
                        C30858 +
                    ((C20211 * C18742 + C20212 * C18740 +
                      (C10030 - C10029) * C18743 + (C10032 - C10031) * C18741) *
                         C13128 +
                     ((C1594 - C1593) * C18742 + (C1596 - C1595) * C18740 +
                      (C30788 * C1311 - C113 * C1294) * C18743 +
                      (C30788 * C1321 - C113 * C1312) * C18741) *
                         C13129) *
                        C30710) *
                       C2868) *
                      C30588)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C30932 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C30928 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C30623 * C30918 +
                   (((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C2608 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30932 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30928 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     C20213 * C18743 + C20214 * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30918 +
                   (((C1432 - C1431) * C18742 + (C1434 - C1433) * C18740 +
                     (C20014 - C20013) * C18743 + (C20016 - C20015) * C18741) *
                        C13128 +
                    ((C1436 - C1435) * C18742 + (C1438 - C1437) * C18740 +
                     (C30788 * C1701 - C113 * C1696) * C18743 +
                     (C30788 * C1705 - C113 * C1702) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C30588)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30931 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30924 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30911 +
                  (((C166 * C18742 + C167 * C18740 + C19307 * C18743 +
                     C19308 * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   ((C664 * C18742 + C665 * C18740 + (C961 - C960) * C18743 +
                     (C963 - C962) * C18741) *
                        C13128 +
                    ((C667 - C666) * C18742 + (C669 - C668) * C18740 +
                     (C30788 * C944 - C113 * C935) * C18743 +
                     (C30788 * C950 - C113 * C945) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30892)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30926 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30915 +
                    ((C9131 * C18742 + C9132 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                      C10700 * C18741) *
                         C13129) *
                        C30891) *
                       C2500 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30926 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30915 +
                    ((C9765 * C18742 + C9766 * C18740 +
                      (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                         C13128 +
                     (C20913 * C18742 + C20914 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C30891) *
                       C30668) *
                      C2608 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30926 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30915 +
                    ((C9129 * C18742 + C9130 * C18740 + C21045 * C18743 +
                      C21046 * C18741) *
                         C13128 +
                     (C19045 * C18742 + C19046 * C18740 +
                      (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                         C13129) *
                        C30891) *
                       C2500 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30926 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30915 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C2176 - C2175) * C18742 + (C2178 - C2177) * C18740 +
                      (C30788 * C2397 - C113 * C2392) * C18743 +
                      (C30788 * C2401 - C113 * C2398) * C18741) *
                         C13129) *
                        C30891) *
                       C30668) *
                      C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30582 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30591 +
                  ((((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                      C19044 * C18741) *
                         C13128 +
                     ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                      C777 * C18743 + C778 * C18741) *
                         C13129) *
                        C30858 +
                    ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                      C19046 * C18741) *
                         C13128 +
                     (C19307 * C18742 + C19308 * C18740 +
                      (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   (((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                      C19508 * C18741) *
                         C13128 +
                     ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                      (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                         C13129) *
                        C30858 +
                    ((C964 * C18742 + C965 * C18740 + (C2176 - C2175) * C18743 +
                      (C2178 - C2177) * C18741) *
                         C13128 +
                     ((C961 - C960) * C18742 + (C963 - C962) * C18740 +
                      (C30788 * C2167 - C113 * C2166) * C18743 +
                      (C30788 * C2169 - C113 * C2168) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30931 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30924 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30911 +
                  (((C166 * C18742 + C167 * C18740 + C19307 * C18743 +
                     C19308 * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C30623 * C2500 +
                   ((C664 * C18742 + C665 * C18740 + (C961 - C960) * C18743 +
                     (C963 - C962) * C18741) *
                        C13128 +
                    ((C667 - C666) * C18742 + (C669 - C668) * C18740 +
                     (C30788 * C944 - C113 * C935) * C18743 +
                     (C30788 * C950 - C113 * C945) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30892)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C30932 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C30928 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C30623 * C30918 +
                   (((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C2608 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30932 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30928 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     C20213 * C18743 + C20214 * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30918 +
                   (((C1432 - C1431) * C18742 + (C1434 - C1433) * C18740 +
                     (C20014 - C20013) * C18743 + (C20016 - C20015) * C18741) *
                        C13128 +
                    ((C1436 - C1435) * C18742 + (C1438 - C1437) * C18740 +
                     (C30788 * C1701 - C113 * C1696) * C18743 +
                     (C30788 * C1705 - C113 * C1702) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30664 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30671 +
                   ((((C30788 * C310 - C113 * C297) * C18742 +
                      (C30788 * C327 - C113 * C311) * C18740 +
                      (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                         C13128 +
                     ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                      C20211 * C18743 + C20212 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                      (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                         C13128 +
                     (C20213 * C18742 + C20214 * C18740 +
                      (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                         C13129) *
                        C30710) *
                       C2868) *
                      C30843 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30664 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30671 +
                   ((((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                      C20213 * C18743 + C20214 * C18741) *
                         C13128 +
                     ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                      (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                         C13129) *
                        C3262 +
                    ((C20211 * C18742 + C20212 * C18740 +
                      (C10030 - C10029) * C18743 + (C10032 - C10031) * C18741) *
                         C13128 +
                     ((C1594 - C1593) * C18742 + (C1596 - C1595) * C18740 +
                      (C30788 * C1311 - C113 * C1294) * C18743 +
                      (C30788 * C1321 - C113 * C1312) * C18741) *
                         C13129) *
                        C30710) *
                       C2868) *
                      C30588)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30706 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30713 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C3770) *
                      C30664 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30706 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30713 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    (C20913 * C18742 + C20914 * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C3770) *
                      C30671 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C30706 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30713 +
                   ((C9783 * C18742 + C9784 * C18740 +
                     (C9780 - C9779) * C18743 + (C9782 - C9781) * C18741) *
                        C13128 +
                    ((C10030 - C10029) * C18742 + (C10032 - C10031) * C18740 +
                     (C30788 * C6491 - C113 * C6490) * C18743 +
                     (C30788 * C6493 - C113 * C6492) * C18741) *
                        C13129) *
                       C3770) *
                      C2868) *
                 C30577) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C30932 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30710) *
                      C30928 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30710) *
                      C30918 +
                  ((((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C3262 +
                   (((C10132 - C10131) * C18742 + (C10134 - C10133) * C18740 +
                     (C10136 - C10135) * C18743 + (C10138 - C10137) * C18741) *
                        C13128 +
                    ((C20014 - C20013) * C18742 + (C20016 - C20015) * C18740 +
                     (C30788 * C6389 - C113 * C6388) * C18743 +
                     (C30788 * C6391 - C113 * C6390) * C18741) *
                        C13129) *
                       C30710) *
                      C30898) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30922 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30909 +
                  ((((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                      C19044 * C18741) *
                         C13128 +
                     ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                      C777 * C18743 + C778 * C18741) *
                         C13129) *
                        C3262 +
                    ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                      C19046 * C18741) *
                         C13128 +
                     (C19307 * C18742 + C19308 * C18740 +
                      (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   (((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                      C19508 * C18741) *
                         C13128 +
                     ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                      (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                         C13129) *
                        C3262 +
                    ((C964 * C18742 + C965 * C18740 + (C2176 - C2175) * C18743 +
                      (C2178 - C2177) * C18741) *
                         C13128 +
                     ((C961 - C960) * C18742 + (C963 - C962) * C18740 +
                      (C30788 * C2167 - C113 * C2166) * C18743 +
                      (C30788 * C2169 - C113 * C2168) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30933 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30930 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30921 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C21045 * C18742 + C21046 * C18740 +
                     (C10701 - C10702) * C18743 + (C10703 - C10704) * C18741) *
                        C13129) *
                       C30904) *
                      C2500 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30933 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30930 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    (C20913 * C18742 + C20914 * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30921 +
                   ((C10807 * C18742 + C10808 * C18740 +
                     (C10810 - C10809) * C18743 + (C10812 - C10811) * C18741) *
                        C13128 +
                    ((C10594 - C10593) * C18742 + (C10596 - C10595) * C18740 +
                     (C30788 * C10587 - C113 * C10586) * C18743 +
                     (C30788 * C10589 - C113 * C10588) * C18741) *
                        C13129) *
                       C30904) *
                      C30668) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30706 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30713 +
                    ((C9131 * C18742 + C9132 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                      C10700 * C18741) *
                         C13129) *
                        C3770) *
                       C2500 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30706 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30713 +
                    ((C9765 * C18742 + C9766 * C18740 +
                      (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                         C13128 +
                     (C20913 * C18742 + C20914 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C3770) *
                       C30668) *
                      C30843 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30706 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30713 +
                    ((C9129 * C18742 + C9130 * C18740 + C21045 * C18743 +
                      C21046 * C18741) *
                         C13128 +
                     (C19045 * C18742 + C19046 * C18740 +
                      (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                         C13129) *
                        C3770) *
                       C2500 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30706 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30713 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C2176 - C2175) * C18742 + (C2178 - C2177) * C18740 +
                      (C30788 * C2397 - C113 * C2392) * C18743 +
                      (C30788 * C2401 - C113 * C2398) * C18741) *
                         C13129) *
                        C3770) *
                       C30668) *
                      C30588)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30922 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30909 +
                  ((((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                      C19044 * C18741) *
                         C13128 +
                     ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                      C777 * C18743 + C778 * C18741) *
                         C13129) *
                        C3262 +
                    ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                      C19046 * C18741) *
                         C13128 +
                     (C19307 * C18742 + C19308 * C18740 +
                      (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                         C13129) *
                        C30710) *
                       C2500 +
                   (((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                      C19508 * C18741) *
                         C13128 +
                     ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                      (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                         C13129) *
                        C3262 +
                    ((C964 * C18742 + C965 * C18740 + (C2176 - C2175) * C18743 +
                      (C2178 - C2177) * C18741) *
                         C13128 +
                     ((C961 - C960) * C18742 + (C963 - C962) * C18740 +
                      (C30788 * C2167 - C113 * C2166) * C18743 +
                      (C30788 * C2169 - C113 * C2168) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C30932 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30710) *
                      C30928 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30710) *
                      C30918 +
                  ((((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C3262 +
                   (((C10132 - C10131) * C18742 + (C10134 - C10133) * C18740 +
                     (C10136 - C10135) * C18743 + (C10138 - C10137) * C18741) *
                        C13128 +
                    ((C20014 - C20013) * C18742 + (C20016 - C20015) * C18740 +
                     (C30788 * C6389 - C113 * C6388) * C18743 +
                     (C30788 * C6391 - C113 * C6390) * C18741) *
                        C13129) *
                       C30710) *
                      C30898) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C1420 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C1421 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C1422 +
                   (((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C30843 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C1420 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C1421 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C1422 +
                   (((C1432 - C1431) * C18742 + (C1434 - C1433) * C18740 +
                     (C20014 - C20013) * C18743 + (C20016 - C20015) * C18741) *
                        C13128 +
                    ((C1436 - C1435) * C18742 + (C1438 - C1437) * C18740 +
                     (C30788 * C1701 - C113 * C1696) * C18743 +
                     (C30788 * C1705 - C113 * C1702) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C30588)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     (C953 - C952) * C18743 + (C955 - C954) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C655 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     (C952 - C953) * C18743 + (C954 - C955) * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C656 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   ((C359 * C18742 + C360 * C18740 + (C957 - C956) * C18743 +
                     (C959 - C958) * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C657 +
                  (((C166 * C18742 + C167 * C18740 + (C539 - C538) * C18743 +
                     (C541 - C540) * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   ((C664 * C18742 + C665 * C18740 + (C961 - C960) * C18743 +
                     (C963 - C962) * C18741) *
                        C13128 +
                    ((C667 - C666) * C18742 + (C669 - C668) * C18740 +
                     (C30788 * C944 - C113 * C935) * C18743 +
                     (C30788 * C950 - C113 * C945) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30892)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C1816 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C1817 +
                    ((C9131 * C18742 + C9132 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                      C10700 * C18741) *
                         C13129) *
                        C30891) *
                       C30857 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C1816 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C1817 +
                    ((C9765 * C18742 + C9766 * C18740 +
                      (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                         C13128 +
                     (C20913 * C18742 + C20914 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C30891) *
                       C30668) *
                      C30843 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C1816 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C1817 +
                    ((C9129 * C18742 + C9130 * C18740 +
                      (C2285 - C2286) * C18743 + (C2287 - C2288) * C18741) *
                         C13128 +
                     (C19045 * C18742 + C19046 * C18740 +
                      (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                         C13129) *
                        C30891) *
                       C30857 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C1816 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C1817 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C2176 - C2175) * C18742 + (C2178 - C2177) * C18740 +
                      (C30788 * C2397 - C113 * C2392) * C18743 +
                      (C30788 * C2401 - C113 * C2398) * C18741) *
                         C13129) *
                        C30891) *
                       C30668) *
                      C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[86] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C1420 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30710) *
                      C1421 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30710) *
                      C1422 +
                  ((((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C30858 +
                   (((C10132 - C10131) * C18742 + (C10134 - C10133) * C18740 +
                     (C10136 - C10135) * C18743 + (C10138 - C10137) * C18741) *
                        C13128 +
                    ((C20014 - C20013) * C18742 + (C20016 - C20015) * C18740 +
                     (C30788 * C6389 - C113 * C6388) * C18743 +
                     (C30788 * C6391 - C113 * C6390) * C18741) *
                        C13129) *
                       C30710) *
                      C30898) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C291 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19503 * C18742 + C19504 * C18740 +
                      (C2171 - C2172) * C18743 + (C2173 - C2174) * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C292 +
                  ((((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                      C19044 * C18741) *
                         C13128 +
                     ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                      C777 * C18743 + C778 * C18741) *
                         C13129) *
                        C30858 +
                    ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                      C19046 * C18741) *
                         C13128 +
                     (C19307 * C18742 + C19308 * C18740 +
                      (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   (((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                      C19508 * C18741) *
                         C13128 +
                     ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                      (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                         C13129) *
                        C30858 +
                    ((C964 * C18742 + C965 * C18740 + (C2176 - C2175) * C18743 +
                      (C2178 - C2177) * C18741) *
                         C13128 +
                     ((C961 - C960) * C18742 + (C963 - C962) * C18740 +
                      (C30788 * C2167 - C113 * C2166) * C18743 +
                      (C30788 * C2169 - C113 * C2168) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C2276 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C2277 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C2278 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C21045 * C18742 + C21046 * C18740 +
                     (C10701 - C10702) * C18743 + (C10703 - C10704) * C18741) *
                        C13129) *
                       C30904) *
                      C30857 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C2276 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C2277 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    (C20913 * C18742 + C20914 * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C2278 +
                   ((C10807 * C18742 + C10808 * C18740 +
                     (C10810 - C10809) * C18743 + (C10812 - C10811) * C18741) *
                        C13128 +
                    ((C10594 - C10593) * C18742 + (C10596 - C10595) * C18740 +
                     (C30788 * C10587 - C113 * C10586) * C18743 +
                     (C30788 * C10589 - C113 * C10588) * C18741) *
                        C13129) *
                       C30904) *
                      C30668) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[87] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C30788 * C122 - C113 * C115) * C18742 +
                        (C30788 * C136 - C113 * C123) * C18740 +
                        (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                           C13128 +
                       ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                        (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                           C13129) *
                          C30623 * C30605 * C108 +
                      (((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                        (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                           C13128 +
                       ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                        C546 * C18743 + C547 * C18741) *
                           C13129) *
                          C30623 * C30605 * C109 +
                      ((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                        (C529 - C528) * C18741) *
                           C13128 +
                       ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                        C777 * C18743 + C778 * C18741) *
                           C13129) *
                          C30623 * C30605 * C110 +
                      ((C166 * C18742 + C167 * C18740 + (C539 - C538) * C18743 +
                        (C541 - C540) * C18741) *
                           C13128 +
                       ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                        (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                           C13129) *
                          C30623 * C30605 * C111 +
                      ((C168 * C18742 + C169 * C18740 + (C780 - C779) * C18743 +
                        (C782 - C781) * C18741) *
                           C13128 +
                       ((C161 - C160) * C18742 + (C163 - C162) * C18740 +
                        (C30788 * C773 - C113 * C772) * C18743 +
                        (C30788 * C775 - C113 * C774) * C18741) *
                           C13129) *
                          C30623 * C30605 * C112) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((((C30788 * C122 - C113 * C115) * C18742 +
                         (C30788 * C136 - C113 * C123) * C18740 +
                         (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                            C13128 +
                        ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                         (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                            C13129) *
                           C30623 * C30925 +
                       (((C113 * C294 - C30788 * C304) * C18742 +
                         (C113 * C305 - C30788 * C324) * C18740 +
                         (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                            C13128 +
                        ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                         (C953 - C952) * C18743 + (C955 - C954) * C18741) *
                            C13129) *
                           C30623 * C30913 +
                       (((C30788 * C310 - C113 * C297) * C18742 +
                         (C30788 * C327 - C113 * C311) * C18740 +
                         (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                            C13128 +
                        ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                         (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                            C13129) *
                           C30623 * C30888) *
                          C291 +
                      ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                         (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                            C13128 +
                        ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                         C546 * C18743 + C547 * C18741) *
                            C13129) *
                           C30623 * C30925 +
                       (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                         (C952 - C953) * C18743 + (C954 - C955) * C18741) *
                            C13128 +
                        ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                         C964 * C18743 + C965 * C18741) *
                            C13129) *
                           C30623 * C30913 +
                       (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                         (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                            C13128 +
                        ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                         (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                            C13129) *
                           C30623 * C30888) *
                          C292 +
                      (((C164 * C18742 + C165 * C18740 +
                         (C527 - C526) * C18743 + (C529 - C528) * C18741) *
                            C13128 +
                        ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                         C777 * C18743 + C778 * C18741) *
                            C13129) *
                           C30623 * C30925 +
                       ((C359 * C18742 + C360 * C18740 +
                         (C957 - C956) * C18743 + (C959 - C958) * C18741) *
                            C13128 +
                        ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                         (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                            C13129) *
                           C30623 * C30913 +
                       ((C361 * C18742 + C362 * C18740 +
                         (C1594 - C1593) * C18743 + (C1596 - C1595) * C18741) *
                            C13128 +
                        ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                         (C30788 * C1585 - C113 * C1584) * C18743 +
                         (C30788 * C1587 - C113 * C1586) * C18741) *
                            C13129) *
                           C30623 * C30888) *
                          C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30926 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C291 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30926 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9129 * C18742 + C9130 * C18740 +
                     (C2285 - C2286) * C18743 + (C2287 - C2288) * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C292 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30926 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    ((C539 - C538) * C18742 + (C541 - C540) * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30915 +
                   ((C548 * C18742 + C549 * C18740 + (C2290 - C2289) * C18743 +
                     (C2292 - C2291) * C18741) *
                        C13128 +
                    ((C543 - C542) * C18742 + (C545 - C544) * C18740 +
                     (C30788 * C2281 - C113 * C2280) * C18743 +
                     (C30788 * C2283 - C113 * C2282) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30922 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30909 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    C19037 * C18743 + C19038 * C18741) *
                       C13129) *
                      C30623 * C1146 +
                  (((C113 * C294 - C30788 * C304) * C18742 +
                    (C113 * C305 - C30788 * C324) * C18740 +
                    (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                       C13128 +
                   ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                    C19503 * C18743 + C19504 * C18741) *
                       C13129) *
                      C30623 * C1147 +
                  (((C30788 * C310 - C113 * C297) * C18742 +
                    (C30788 * C327 - C113 * C311) * C18740 +
                    (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                       C13128 +
                   ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                    (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                       C13129) *
                      C30623 * C1148 +
                  (((C113 * C1152 - C30788 * C1158) * C18742 +
                    (C113 * C1159 - C30788 * C1170) * C18740 +
                    (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                       C13128 +
                   ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                    (C113 * C1695 - C30788 * C1699) * C18743 +
                    (C113 * C1700 - C30788 * C1704) * C18741) *
                       C13129) *
                      C30623 * C1149 +
                  (((C30788 * C1164 - C113 * C1155) * C18742 +
                    (C30788 * C1173 - C113 * C1165) * C18740 +
                    (C30788 * C5587 - C113 * C5583) * C18743 +
                    (C30788 * C5592 - C113 * C5588) * C18741) *
                       C13128 +
                   ((C30788 * C1166 - C113 * C1156) * C18742 +
                    (C30788 * C1174 - C113 * C1167) * C18740 +
                    (C30788 * C5843 - C113 * C5842) * C18743 +
                    (C30788 * C5845 - C113 * C5844) * C18741) *
                       C13129) *
                      C30623 * C1150) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30926 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C1078 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30926 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    ((C2171 - C2172) * C18742 + (C2173 - C2174) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30891) *
                      C1079 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30926 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    ((C1589 - C1590) * C18742 + (C1591 - C1592) * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30915 +
                   ((C9783 * C18742 + C9784 * C18740 +
                     (C9780 - C9779) * C18743 + (C9782 - C9781) * C18741) *
                        C13128 +
                    ((C10030 - C10029) * C18742 + (C10032 - C10031) * C18740 +
                     (C30788 * C6491 - C113 * C6490) * C18743 +
                     (C30788 * C6493 - C113 * C6492) * C18741) *
                        C13129) *
                       C30891) *
                      C30888) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30922 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C1816 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9129 * C18742 + C9130 * C18740 +
                     (C2285 - C2286) * C18743 + (C2287 - C2288) * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30909 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C1816 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C1817 +
                   ((C548 * C18742 + C549 * C18740 + (C2290 - C2289) * C18743 +
                     (C2292 - C2291) * C18741) *
                        C13128 +
                    ((C543 - C542) * C18742 + (C545 - C544) * C18740 +
                     (C30788 * C2281 - C113 * C2280) * C18743 +
                     (C30788 * C2283 - C113 * C2282) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C30925 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    ((C2171 - C2172) * C18742 + (C2173 - C2174) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30891) *
                      C30913 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C1817 +
                   ((C9783 * C18742 + C9784 * C18740 +
                     (C9780 - C9779) * C18743 + (C9782 - C9781) * C18741) *
                        C13128 +
                    ((C10030 - C10029) * C18742 + (C10032 - C10031) * C18740 +
                     (C30788 * C6491 - C113 * C6490) * C18743 +
                     (C30788 * C6493 - C113 * C6492) * C18741) *
                        C13129) *
                       C30891) *
                      C30888) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    C19037 * C18743 + C19038 * C18741) *
                       C13129) *
                      C1991 +
                  (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                    (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                       C13128 +
                   (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                    C9130 * C18741) *
                       C13129) *
                      C1992 +
                  ((C9131 * C18742 + C9132 * C18740 + (C9126 - C9125) * C18743 +
                    (C9128 - C9127) * C18741) *
                       C13128 +
                   (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                    C10700 * C18741) *
                       C13129) *
                      C1993 +
                  ((C10429 * C18742 + C10430 * C18740 +
                    (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                       C13128 +
                   ((C2285 - C2286) * C18742 + (C2287 - C2288) * C18740 +
                    (C10701 - C10702) * C18743 + (C10703 - C10704) * C18741) *
                       C13129) *
                      C1994 +
                  ((C10439 * C18742 + C10440 * C18740 +
                    (C10436 - C10435) * C18743 + (C10438 - C10437) * C18741) *
                       C13128 +
                   ((C10702 - C10701) * C18742 + (C10704 - C10703) * C18740 +
                    (C30788 * C10695 - C113 * C10694) * C18743 +
                    (C30788 * C10697 - C113 * C10696) * C18741) *
                       C13129) *
                      C1995) *
                 C30605 * C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C1078 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C1079 +
                   ((((C30788 * C310 - C113 * C297) * C18742 +
                      (C30788 * C327 - C113 * C311) * C18740 +
                      (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                         C13128 +
                     ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                      C20211 * C18743 + C20212 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                      (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                         C13128 +
                     (C20213 * C18742 + C20214 * C18740 +
                      (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C30843 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C1078 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19503 * C18742 + C19504 * C18740 +
                      (C2171 - C2172) * C18743 + (C2173 - C2174) * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C1079 +
                   ((((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                      C20213 * C18743 + C20214 * C18741) *
                         C13128 +
                     ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                      (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                         C13129) *
                        C30858 +
                    ((C20211 * C18742 + C20212 * C18740 +
                      (C10030 - C10029) * C18743 + (C10032 - C10031) * C18741) *
                         C13128 +
                     ((C1594 - C1593) * C18742 + (C1596 - C1595) * C18740 +
                      (C30788 * C1311 - C113 * C1294) * C18743 +
                      (C30788 * C1321 - C113 * C1312) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C30588)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C655 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30858 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C656 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30858 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C657 +
                  (((C166 * C18742 + C167 * C18740 + C19307 * C18743 +
                     C19308 * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C30858 +
                   ((C777 * C18742 + C778 * C18740 + (C543 - C542) * C18743 +
                     (C545 - C544) * C18741) *
                        C13128 +
                    ((C780 - C779) * C18742 + (C782 - C781) * C18740 +
                     (C30788 * C509 - C113 * C490) * C18743 +
                     (C30788 * C520 - C113 * C510) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30892)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C2276 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C2277 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C2278 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C21045 * C18742 + C21046 * C18740 +
                     (C10701 - C10702) * C18743 + (C10703 - C10704) * C18741) *
                        C13129) *
                       C30904) *
                      C30605 * C30843 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C2276 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C2277 +
                   ((C9129 * C18742 + C9130 * C18740 + C21045 * C18743 +
                     C21046 * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C2278 +
                   ((C10699 * C18742 + C10700 * C18740 +
                     (C10702 - C10701) * C18743 + (C10704 - C10703) * C18741) *
                        C13128 +
                    ((C2290 - C2289) * C18742 + (C2292 - C2291) * C18740 +
                     (C30788 * C2012 - C113 * C2001) * C18743 +
                     (C30788 * C2019 - C113 * C2013) * C18741) *
                        C13129) *
                       C30904) *
                      C30605 * C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     (C953 - C952) * C18743 + (C955 - C954) * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C291 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     (C952 - C953) * C18743 + (C954 - C955) * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C292 +
                  (((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                     (C529 - C528) * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   ((C359 * C18742 + C360 * C18740 + (C957 - C956) * C18743 +
                     (C959 - C958) * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                       C13129) *
                      C30623 * C30605 * C108 +
                  (((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                    (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                       C13128 +
                   ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                    C546 * C18743 + C547 * C18741) *
                       C13129) *
                      C30623 * C30605 * C109 +
                  ((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                    (C529 - C528) * C18741) *
                       C13128 +
                   ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                    C777 * C18743 + C778 * C18741) *
                       C13129) *
                      C30623 * C30605 * C110 +
                  ((C166 * C18742 + C167 * C18740 + (C539 - C538) * C18743 +
                    (C541 - C540) * C18741) *
                       C13128 +
                   ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                    (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                       C13129) *
                      C30623 * C30605 * C111 +
                  ((C168 * C18742 + C169 * C18740 + (C780 - C779) * C18743 +
                    (C782 - C781) * C18741) *
                       C13128 +
                   ((C161 - C160) * C18742 + (C163 - C162) * C18740 +
                    (C30788 * C773 - C113 * C772) * C18743 +
                    (C30788 * C775 - C113 * C774) * C18741) *
                       C13129) *
                      C30623 * C30605 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30922 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30909 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    C19037 * C18743 + C19038 * C18741) *
                       C13129) *
                      C30623 * C1146 +
                  (((C113 * C294 - C30788 * C304) * C18742 +
                    (C113 * C305 - C30788 * C324) * C18740 +
                    (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                       C13128 +
                   ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                    C19503 * C18743 + C19504 * C18741) *
                       C13129) *
                      C30623 * C1147 +
                  (((C30788 * C310 - C113 * C297) * C18742 +
                    (C30788 * C327 - C113 * C311) * C18740 +
                    (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                       C13128 +
                   ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                    (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                       C13129) *
                      C30623 * C1148 +
                  (((C113 * C1152 - C30788 * C1158) * C18742 +
                    (C113 * C1159 - C30788 * C1170) * C18740 +
                    (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                       C13128 +
                   ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                    (C113 * C1695 - C30788 * C1699) * C18743 +
                    (C113 * C1700 - C30788 * C1704) * C18741) *
                       C13129) *
                      C30623 * C1149 +
                  (((C30788 * C1164 - C113 * C1155) * C18742 +
                    (C30788 * C1173 - C113 * C1165) * C18740 +
                    (C30788 * C5587 - C113 * C5583) * C18743 +
                    (C30788 * C5592 - C113 * C5588) * C18741) *
                       C13128 +
                   ((C30788 * C1166 - C113 * C1156) * C18742 +
                    (C30788 * C1174 - C113 * C1167) * C18740 +
                    (C30788 * C5843 - C113 * C5842) * C18743 +
                    (C30788 * C5845 - C113 * C5844) * C18741) *
                       C13129) *
                      C30623 * C1150) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30922 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C1816 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9129 * C18742 + C9130 * C18740 +
                     (C2285 - C2286) * C18743 + (C2287 - C2288) * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30909 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C1816 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C1817 +
                   ((C548 * C18742 + C549 * C18740 + (C2290 - C2289) * C18743 +
                     (C2292 - C2291) * C18741) *
                        C13128 +
                    ((C543 - C542) * C18742 + (C545 - C544) * C18740 +
                     (C30788 * C2281 - C113 * C2280) * C18743 +
                     (C30788 * C2283 - C113 * C2282) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C30925 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C1817 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    ((C2171 - C2172) * C18742 + (C2173 - C2174) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30891) *
                      C30913 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C1816 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C1817 +
                   ((C9783 * C18742 + C9784 * C18740 +
                     (C9780 - C9779) * C18743 + (C9782 - C9781) * C18741) *
                        C13128 +
                    ((C10030 - C10029) * C18742 + (C10032 - C10031) * C18740 +
                     (C30788 * C6491 - C113 * C6490) * C18743 +
                     (C30788 * C6493 - C113 * C6492) * C18741) *
                        C13129) *
                       C30891) *
                      C30888) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30582 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30591 +
                  ((((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                      C19044 * C18741) *
                         C13128 +
                     ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                      C777 * C18743 + C778 * C18741) *
                         C13129) *
                        C3262 +
                    ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                      C19046 * C18741) *
                         C13128 +
                     (C19307 * C18742 + C19308 * C18740 +
                      (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   (((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                      C19508 * C18741) *
                         C13128 +
                     ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                      (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                         C13129) *
                        C3262 +
                    ((C964 * C18742 + C965 * C18740 + (C2176 - C2175) * C18743 +
                      (C2178 - C2177) * C18741) *
                         C13128 +
                     ((C961 - C960) * C18742 + (C963 - C962) * C18740 +
                      (C30788 * C2167 - C113 * C2166) * C18743 +
                      (C30788 * C2169 - C113 * C2168) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30706 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30713 +
                    ((C9131 * C18742 + C9132 * C18740 +
                      (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                         C13128 +
                     (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                      C10700 * C18741) *
                         C13129) *
                        C3770) *
                       C30857 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30706 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30713 +
                    ((C9765 * C18742 + C9766 * C18740 +
                      (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                         C13128 +
                     (C20913 * C18742 + C20914 * C18740 +
                      (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                         C13129) *
                        C3770) *
                       C30668) *
                      C2608 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30706 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30713 +
                    ((C9129 * C18742 + C9130 * C18740 + C21045 * C18743 +
                      C21046 * C18741) *
                         C13128 +
                     (C19045 * C18742 + C19046 * C18740 +
                      (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                         C13129) *
                        C3770) *
                       C30857 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30706 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30713 +
                    ((C10591 * C18742 + C10592 * C18740 +
                      (C10594 - C10593) * C18743 + (C10596 - C10595) * C18741) *
                         C13128 +
                     ((C2176 - C2175) * C18742 + (C2178 - C2177) * C18740 +
                      (C30788 * C2397 - C113 * C2392) * C18743 +
                      (C30788 * C2401 - C113 * C2398) * C18741) *
                         C13129) *
                        C3770) *
                       C30668) *
                      C30588)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30925 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30913 +
                   ((((C30788 * C310 - C113 * C297) * C18742 +
                      (C30788 * C327 - C113 * C311) * C18740 +
                      (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                         C13128 +
                     ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                      C20211 * C18743 + C20212 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                      (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                         C13128 +
                     (C20213 * C18742 + C20214 * C18740 +
                      (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C2608 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30925 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30913 +
                   ((((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                      C20213 * C18743 + C20214 * C18741) *
                         C13128 +
                     ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                      (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                         C13129) *
                        C3262 +
                    ((C20211 * C18742 + C20212 * C18740 +
                      (C10030 - C10029) * C18743 + (C10032 - C10031) * C18741) *
                         C13128 +
                     ((C1594 - C1593) * C18742 + (C1596 - C1595) * C18740 +
                      (C30788 * C1311 - C113 * C1294) * C18743 +
                      (C30788 * C1321 - C113 * C1312) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C30588)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30931 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C3262 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30924 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C3262 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30911 +
                  (((C166 * C18742 + C167 * C18740 + C19307 * C18743 +
                     C19308 * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C3262 +
                   ((C777 * C18742 + C778 * C18740 + (C543 - C542) * C18743 +
                     (C545 - C544) * C18741) *
                        C13128 +
                    ((C780 - C779) * C18742 + (C782 - C781) * C18740 +
                     (C30788 * C509 - C113 * C490) * C18743 +
                     (C30788 * C520 - C113 * C510) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30892)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30933 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30930 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30921 +
                   ((C10429 * C18742 + C10430 * C18740 +
                     (C10432 - C10431) * C18743 + (C10434 - C10433) * C18741) *
                        C13128 +
                    (C21045 * C18742 + C21046 * C18740 +
                     (C10701 - C10702) * C18743 + (C10703 - C10704) * C18741) *
                        C13129) *
                       C30904) *
                      C30605 * C2608 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30933 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30930 +
                   ((C9129 * C18742 + C9130 * C18740 + C21045 * C18743 +
                     C21046 * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C30921 +
                   ((C10699 * C18742 + C10700 * C18740 +
                     (C10702 - C10701) * C18743 + (C10704 - C10703) * C18741) *
                        C13128 +
                    ((C2290 - C2289) * C18742 + (C2292 - C2291) * C18740 +
                     (C30788 * C2012 - C113 * C2001) * C18743 +
                     (C30788 * C2019 - C113 * C2013) * C18741) *
                        C13129) *
                       C30904) *
                      C30605 * C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30706 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30713 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C3770) *
                      C30605 * C30582 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30706 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30713 +
                   ((C9129 * C18742 + C9130 * C18740 + C21045 * C18743 +
                     C21046 * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C3770) *
                      C30605 * C30591 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30706 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30713 +
                   ((C548 * C18742 + C549 * C18740 + (C2290 - C2289) * C18743 +
                     (C2292 - C2291) * C18741) *
                        C13128 +
                    ((C543 - C542) * C18742 + (C545 - C544) * C18740 +
                     (C30788 * C2281 - C113 * C2280) * C18743 +
                     (C30788 * C2283 - C113 * C2282) * C18741) *
                        C13129) *
                       C3770) *
                      C30605 * C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C3262 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30931 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C3262 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30924 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C3262 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30911 +
                  (((C166 * C18742 + C167 * C18740 + C19307 * C18743 +
                     C19308 * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C3262 +
                   ((C777 * C18742 + C778 * C18740 + (C543 - C542) * C18743 +
                     (C545 - C544) * C18741) *
                        C13128 +
                    ((C780 - C779) * C18742 + (C782 - C781) * C18740 +
                     (C30788 * C509 - C113 * C490) * C18743 +
                     (C30788 * C520 - C113 * C510) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30892)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30925 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30913 +
                   ((((C30788 * C310 - C113 * C297) * C18742 +
                      (C30788 * C327 - C113 * C311) * C18740 +
                      (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                         C13128 +
                     ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                      C20211 * C18743 + C20212 * C18741) *
                         C13129) *
                        C3262 +
                    (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                      (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                         C13128 +
                     (C20213 * C18742 + C20214 * C18740 +
                      (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C2608 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30925 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C3262 +
                    ((C19503 * C18742 + C19504 * C18740 + C20913 * C18743 +
                      C20914 * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30913 +
                   ((((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                      C20213 * C18743 + C20214 * C18741) *
                         C13128 +
                     ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                      (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                         C13129) *
                        C3262 +
                    ((C20211 * C18742 + C20212 * C18740 +
                      (C10030 - C10029) * C18743 + (C10032 - C10031) * C18741) *
                         C13128 +
                     ((C1594 - C1593) * C18742 + (C1596 - C1595) * C18740 +
                      (C30788 * C1311 - C113 * C1294) * C18743 +
                      (C30788 * C1321 - C113 * C1312) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     (C953 - C952) * C18743 + (C955 - C954) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C655 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     (C952 - C953) * C18743 + (C954 - C955) * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C656 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   ((C359 * C18742 + C360 * C18740 + (C957 - C956) * C18743 +
                     (C959 - C958) * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C657 +
                  (((C166 * C18742 + C167 * C18740 + (C539 - C538) * C18743 +
                     (C541 - C540) * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C30623 * C30857 +
                   ((C664 * C18742 + C665 * C18740 + (C961 - C960) * C18743 +
                     (C963 - C962) * C18741) *
                        C13128 +
                    ((C667 - C666) * C18742 + (C669 - C668) * C18740 +
                     (C30788 * C944 - C113 * C935) * C18743 +
                     (C30788 * C950 - C113 * C945) * C18741) *
                        C13129) *
                       C30623 * C30668) *
                      C30892)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C1420 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C1421 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C1422 +
                   (((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C30843 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C1420 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C1421 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C1422 +
                   (((C1432 - C1431) * C18742 + (C1434 - C1433) * C18740 +
                     (C20014 - C20013) * C18743 + (C20016 - C20015) * C18741) *
                        C13128 +
                    ((C1436 - C1435) * C18742 + (C1438 - C1437) * C18740 +
                     (C30788 * C1701 - C113 * C1696) * C18743 +
                     (C30788 * C1705 - C113 * C1702) * C18741) *
                        C13129) *
                       C30623 * C30898) *
                      C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C291 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19503 * C18742 + C19504 * C18740 +
                      (C2171 - C2172) * C18743 + (C2173 - C2174) * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C292 +
                  ((((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                      C19044 * C18741) *
                         C13128 +
                     ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                      C777 * C18743 + C778 * C18741) *
                         C13129) *
                        C30858 +
                    ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                      C19046 * C18741) *
                         C13128 +
                     (C19307 * C18742 + C19308 * C18740 +
                      (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                         C13129) *
                        C30710) *
                       C30857 +
                   (((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                      C19508 * C18741) *
                         C13128 +
                     ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                      (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                         C13129) *
                        C30858 +
                    ((C964 * C18742 + C965 * C18740 + (C2176 - C2175) * C18743 +
                      (C2178 - C2177) * C18741) *
                         C13128 +
                     ((C961 - C960) * C18742 + (C963 - C962) * C18740 +
                      (C30788 * C2167 - C113 * C2166) * C18743 +
                      (C30788 * C2169 - C113 * C2168) * C18741) *
                         C13129) *
                        C30710) *
                       C30668) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C1420 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30710) *
                      C1421 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     C20211 * C18743 + C20212 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    (C20213 * C18742 + C20214 * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30710) *
                      C1422 +
                  ((((C113 * C1152 - C30788 * C1158) * C18742 +
                     (C113 * C1159 - C30788 * C1170) * C18740 +
                     (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                        C13128 +
                    ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                     (C20013 - C20014) * C18743 + (C20015 - C20016) * C18741) *
                        C13129) *
                       C30858 +
                   (((C10132 - C10131) * C18742 + (C10134 - C10133) * C18740 +
                     (C10136 - C10135) * C18743 + (C10138 - C10137) * C18741) *
                        C13128 +
                    ((C20014 - C20013) * C18742 + (C20016 - C20015) * C18740 +
                     (C30788 * C6389 - C113 * C6388) * C18743 +
                     (C30788 * C6391 - C113 * C6390) * C18741) *
                        C13129) *
                       C30710) *
                      C30898) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     (C953 - C952) * C18743 + (C955 - C954) * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C291 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     (C952 - C953) * C18743 + (C954 - C955) * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C292 +
                  (((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                     (C529 - C528) * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   ((C359 * C18742 + C360 * C18740 + (C957 - C956) * C18743 +
                     (C959 - C958) * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                       C13129) *
                      C30623 * C30605 * C108 +
                  (((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                    (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                       C13128 +
                   ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                    C546 * C18743 + C547 * C18741) *
                       C13129) *
                      C30623 * C30605 * C109 +
                  ((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                    (C529 - C528) * C18741) *
                       C13128 +
                   ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                    C777 * C18743 + C778 * C18741) *
                       C13129) *
                      C30623 * C30605 * C110 +
                  ((C166 * C18742 + C167 * C18740 + (C539 - C538) * C18743 +
                    (C541 - C540) * C18741) *
                       C13128 +
                   ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                    (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                       C13129) *
                      C30623 * C30605 * C111 +
                  ((C168 * C18742 + C169 * C18740 + (C780 - C779) * C18743 +
                    (C782 - C781) * C18741) *
                       C13128 +
                   ((C161 - C160) * C18742 + (C163 - C162) * C18740 +
                    (C30788 * C773 - C113 * C772) * C18743 +
                    (C30788 * C775 - C113 * C774) * C18741) *
                       C13129) *
                      C30623 * C30605 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30926 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C291 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30926 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9129 * C18742 + C9130 * C18740 +
                     (C2285 - C2286) * C18743 + (C2287 - C2288) * C18741) *
                        C13128 +
                    (C19045 * C18742 + C19046 * C18740 +
                     (C2289 - C2290) * C18743 + (C2291 - C2292) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C292 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30926 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    ((C539 - C538) * C18742 + (C541 - C540) * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30915 +
                   ((C548 * C18742 + C549 * C18740 + (C2290 - C2289) * C18743 +
                     (C2292 - C2291) * C18741) *
                        C13128 +
                    ((C543 - C542) * C18742 + (C545 - C544) * C18740 +
                     (C30788 * C2281 - C113 * C2280) * C18743 +
                     (C30788 * C2283 - C113 * C2282) * C18741) *
                        C13129) *
                       C30891) *
                      C30605 * C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30922 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30909 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    C19037 * C18743 + C19038 * C18741) *
                       C13129) *
                      C30623 * C1146 +
                  (((C113 * C294 - C30788 * C304) * C18742 +
                    (C113 * C305 - C30788 * C324) * C18740 +
                    (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                       C13128 +
                   ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                    C19503 * C18743 + C19504 * C18741) *
                       C13129) *
                      C30623 * C1147 +
                  (((C30788 * C310 - C113 * C297) * C18742 +
                    (C30788 * C327 - C113 * C311) * C18740 +
                    (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                       C13128 +
                   ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                    (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                       C13129) *
                      C30623 * C1148 +
                  (((C113 * C1152 - C30788 * C1158) * C18742 +
                    (C113 * C1159 - C30788 * C1170) * C18740 +
                    (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                       C13128 +
                   ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                    (C113 * C1695 - C30788 * C1699) * C18743 +
                    (C113 * C1700 - C30788 * C1704) * C18741) *
                       C13129) *
                      C30623 * C1149 +
                  (((C30788 * C1164 - C113 * C1155) * C18742 +
                    (C30788 * C1173 - C113 * C1165) * C18740 +
                    (C30788 * C5587 - C113 * C5583) * C18743 +
                    (C30788 * C5592 - C113 * C5588) * C18741) *
                       C13128 +
                   ((C30788 * C1166 - C113 * C1156) * C18742 +
                    (C30788 * C1174 - C113 * C1167) * C18740 +
                    (C30788 * C5843 - C113 * C5842) * C18743 +
                    (C30788 * C5845 - C113 * C5844) * C18741) *
                       C13129) *
                      C30623 * C1150) *
                 C30577) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30926 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9131 * C18742 + C9132 * C18740 +
                     (C9126 - C9125) * C18743 + (C9128 - C9127) * C18741) *
                        C13128 +
                    (C19041 * C18742 + C19042 * C18740 + C10699 * C18743 +
                     C10700 * C18741) *
                        C13129) *
                       C30891) *
                      C1078 +
                  ((((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30926 +
                   (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                     (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                        C13128 +
                    (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                     C10592 * C18741) *
                        C13129) *
                       C30915 +
                   ((C9765 * C18742 + C9766 * C18740 +
                     (C9768 - C9767) * C18743 + (C9770 - C9769) * C18741) *
                        C13128 +
                    ((C2171 - C2172) * C18742 + (C2173 - C2174) * C18740 +
                     (C10593 - C10594) * C18743 + (C10595 - C10596) * C18741) *
                        C13129) *
                       C30891) *
                      C1079 +
                  ((((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30926 +
                   (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                     (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                        C13128 +
                    ((C1589 - C1590) * C18742 + (C1591 - C1592) * C18740 +
                     (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                        C13129) *
                       C30915 +
                   ((C9783 * C18742 + C9784 * C18740 +
                     (C9780 - C9779) * C18743 + (C9782 - C9781) * C18741) *
                        C13128 +
                    ((C10030 - C10029) * C18742 + (C10032 - C10031) * C18740 +
                     (C30788 * C6491 - C113 * C6490) * C18743 +
                     (C30788 * C6493 - C113 * C6492) * C18741) *
                        C13129) *
                       C30891) *
                      C30888) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30858 +
                   (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                     (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                        C13128 +
                    (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                     C9130 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C655 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30858 +
                   ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                     C19042 * C18741) *
                        C13128 +
                    (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                     C549 * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C656 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30858 +
                   ((C546 * C18742 + C547 * C18740 + C19045 * C18743 +
                     C19046 * C18741) *
                        C13128 +
                    (C19307 * C18742 + C19308 * C18740 +
                     (C542 - C543) * C18743 + (C544 - C545) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C657 +
                  (((C166 * C18742 + C167 * C18740 + C19307 * C18743 +
                     C19308 * C18741) *
                        C13128 +
                    ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                     (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                        C13129) *
                       C30858 +
                   ((C777 * C18742 + C778 * C18740 + (C543 - C542) * C18743 +
                     (C545 - C544) * C18741) *
                        C13128 +
                    ((C780 - C779) * C18742 + (C782 - C781) * C18740 +
                     (C30788 * C509 - C113 * C490) * C18743 +
                     (C30788 * C520 - C113 * C510) * C18741) *
                        C13129) *
                       C30710) *
                      C30605 * C30892)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C30788 * C122 - C113 * C115) * C18742 +
                      (C30788 * C136 - C113 * C123) * C18740 +
                      (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                         C13128 +
                     ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                      C19037 * C18743 + C19038 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9118 - C9117) * C18742 + (C9120 - C9119) * C18740 +
                      (C9122 - C9121) * C18743 + (C9124 - C9123) * C18741) *
                         C13128 +
                     (C19039 * C18742 + C19040 * C18740 + C9129 * C18743 +
                      C9130 * C18741) *
                         C13129) *
                        C30710) *
                       C1078 +
                   ((((C113 * C294 - C30788 * C304) * C18742 +
                      (C113 * C305 - C30788 * C324) * C18740 +
                      (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                         C13128 +
                     ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                      C19503 * C18743 + C19504 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9476 - C9475) * C18742 + (C9478 - C9477) * C18740 +
                      (C9480 - C9479) * C18743 + (C9482 - C9481) * C18741) *
                         C13128 +
                     (C19505 * C18742 + C19506 * C18740 + C10591 * C18743 +
                      C10592 * C18741) *
                         C13129) *
                        C30710) *
                       C1079 +
                   ((((C30788 * C310 - C113 * C297) * C18742 +
                      (C30788 * C327 - C113 * C311) * C18740 +
                      (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                         C13128 +
                     ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                      C20211 * C18743 + C20212 * C18741) *
                         C13129) *
                        C30858 +
                    (((C9772 - C9771) * C18742 + (C9774 - C9773) * C18740 +
                      (C9776 - C9775) * C18743 + (C9778 - C9777) * C18741) *
                         C13128 +
                     (C20213 * C18742 + C20214 * C18740 +
                      (C10029 - C10030) * C18743 + (C10031 - C10032) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C30843 +
                  (((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                      C19039 * C18743 + C19040 * C18741) *
                         C13128 +
                     ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                      C546 * C18743 + C547 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19037 * C18742 + C19038 * C18740 + C19041 * C18743 +
                      C19042 * C18741) *
                         C13128 +
                     (C19043 * C18742 + C19044 * C18740 + C548 * C18743 +
                      C549 * C18741) *
                         C13129) *
                        C30710) *
                       C1078 +
                   ((((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                      C19505 * C18743 + C19506 * C18741) *
                         C13128 +
                     ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                      C964 * C18743 + C965 * C18741) *
                         C13129) *
                        C30858 +
                    ((C19503 * C18742 + C19504 * C18740 +
                      (C2171 - C2172) * C18743 + (C2173 - C2174) * C18741) *
                         C13128 +
                     (C19507 * C18742 + C19508 * C18740 +
                      (C2175 - C2176) * C18743 + (C2177 - C2178) * C18741) *
                         C13129) *
                        C30710) *
                       C1079 +
                   ((((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                      C20213 * C18743 + C20214 * C18741) *
                         C13128 +
                     ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                      (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                         C13129) *
                        C30858 +
                    ((C20211 * C18742 + C20212 * C18740 +
                      (C10030 - C10029) * C18743 + (C10032 - C10031) * C18741) *
                         C13128 +
                     ((C1594 - C1593) * C18742 + (C1596 - C1595) * C18740 +
                      (C30788 * C1311 - C113 * C1294) * C18743 +
                      (C30788 * C1321 - C113 * C1312) * C18741) *
                         C13129) *
                        C30710) *
                       C30888) *
                      C30588)) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                       C13129) *
                      C30623 * C30605 * C108 +
                  (((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                    (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                       C13128 +
                   ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                    C546 * C18743 + C547 * C18741) *
                       C13129) *
                      C30623 * C30605 * C109 +
                  ((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                    (C529 - C528) * C18741) *
                       C13128 +
                   ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                    C777 * C18743 + C778 * C18741) *
                       C13129) *
                      C30623 * C30605 * C110 +
                  ((C166 * C18742 + C167 * C18740 + (C539 - C538) * C18743 +
                    (C541 - C540) * C18741) *
                       C13128 +
                   ((C157 - C156) * C18742 + (C159 - C158) * C18740 +
                    (C779 - C780) * C18743 + (C781 - C782) * C18741) *
                       C13129) *
                      C30623 * C30605 * C111 +
                  ((C168 * C18742 + C169 * C18740 + (C780 - C779) * C18743 +
                    (C782 - C781) * C18741) *
                       C13128 +
                   ((C161 - C160) * C18742 + (C163 - C162) * C18740 +
                    (C30788 * C773 - C113 * C772) * C18743 +
                    (C30788 * C775 - C113 * C774) * C18741) *
                       C13129) *
                      C30623 * C30605 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     (C523 - C522) * C18743 + (C525 - C524) * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     (C953 - C952) * C18743 + (C955 - C954) * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C291 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     (C522 - C523) * C18743 + (C524 - C525) * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     (C952 - C953) * C18743 + (C954 - C955) * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C292 +
                  (((C164 * C18742 + C165 * C18740 + (C527 - C526) * C18743 +
                     (C529 - C528) * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C30925 +
                   ((C359 * C18742 + C360 * C18740 + (C957 - C956) * C18743 +
                     (C959 - C958) * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C30913 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((((C30788 * C122 - C113 * C115) * C18742 +
                     (C30788 * C136 - C113 * C123) * C18740 +
                     (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                        C13128 +
                    ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                     C19037 * C18743 + C19038 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C113 * C294 - C30788 * C304) * C18742 +
                     (C113 * C305 - C30788 * C324) * C18740 +
                     (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                        C13128 +
                    ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                     C19503 * C18743 + C19504 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C30788 * C310 - C113 * C297) * C18742 +
                     (C30788 * C327 - C113 * C311) * C18740 +
                     (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                        C13128 +
                    ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                     (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30922 +
                  ((((C145 - C144) * C18742 + (C147 - C146) * C18740 +
                     C19039 * C18743 + C19040 * C18741) *
                        C13128 +
                    ((C149 - C148) * C18742 + (C151 - C150) * C18740 +
                     C546 * C18743 + C547 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   (((C336 - C335) * C18742 + (C338 - C337) * C18740 +
                     C19505 * C18743 + C19506 * C18741) *
                        C13128 +
                    ((C340 - C339) * C18742 + (C342 - C341) * C18740 +
                     C964 * C18743 + C965 * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   (((C344 - C343) * C18742 + (C346 - C345) * C18740 +
                     (C1589 - C1590) * C18743 + (C1591 - C1592) * C18741) *
                        C13128 +
                    ((C348 - C347) * C18742 + (C350 - C349) * C18740 +
                     (C1593 - C1594) * C18743 + (C1595 - C1596) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30909 +
                  (((C164 * C18742 + C165 * C18740 + C19043 * C18743 +
                     C19044 * C18741) *
                        C13128 +
                    ((C153 - C152) * C18742 + (C155 - C154) * C18740 +
                     C777 * C18743 + C778 * C18741) *
                        C13129) *
                       C30623 * C1078 +
                   ((C359 * C18742 + C360 * C18740 + C19507 * C18743 +
                     C19508 * C18741) *
                        C13128 +
                    ((C352 - C351) * C18742 + (C354 - C353) * C18740 +
                     (C960 - C961) * C18743 + (C962 - C963) * C18741) *
                        C13129) *
                       C30623 * C1079 +
                   ((C361 * C18742 + C362 * C18740 + (C1594 - C1593) * C18743 +
                     (C1596 - C1595) * C18741) *
                        C13128 +
                    ((C356 - C355) * C18742 + (C358 - C357) * C18740 +
                     (C30788 * C1585 - C113 * C1584) * C18743 +
                     (C30788 * C1587 - C113 * C1586) * C18741) *
                        C13129) *
                       C30623 * C30888) *
                      C30882)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C30788 * C122 - C113 * C115) * C18742 +
                    (C30788 * C136 - C113 * C123) * C18740 +
                    (C9117 - C9118) * C18743 + (C9119 - C9120) * C18741) *
                       C13128 +
                   ((C144 - C145) * C18742 + (C146 - C147) * C18740 +
                    C19037 * C18743 + C19038 * C18741) *
                       C13129) *
                      C30623 * C1146 +
                  (((C113 * C294 - C30788 * C304) * C18742 +
                    (C113 * C305 - C30788 * C324) * C18740 +
                    (C9475 - C9476) * C18743 + (C9477 - C9478) * C18741) *
                       C13128 +
                   ((C335 - C336) * C18742 + (C337 - C338) * C18740 +
                    C19503 * C18743 + C19504 * C18741) *
                       C13129) *
                      C30623 * C1147 +
                  (((C30788 * C310 - C113 * C297) * C18742 +
                    (C30788 * C327 - C113 * C311) * C18740 +
                    (C9771 - C9772) * C18743 + (C9773 - C9774) * C18741) *
                       C13128 +
                   ((C343 - C344) * C18742 + (C345 - C346) * C18740 +
                    (C1590 - C1589) * C18743 + (C1592 - C1591) * C18741) *
                       C13129) *
                      C30623 * C1148 +
                  (((C113 * C1152 - C30788 * C1158) * C18742 +
                    (C113 * C1159 - C30788 * C1170) * C18740 +
                    (C10131 - C10132) * C18743 + (C10133 - C10134) * C18741) *
                       C13128 +
                   ((C1431 - C1432) * C18742 + (C1433 - C1434) * C18740 +
                    (C113 * C1695 - C30788 * C1699) * C18743 +
                    (C113 * C1700 - C30788 * C1704) * C18741) *
                       C13129) *
                      C30623 * C1149 +
                  (((C30788 * C1164 - C113 * C1155) * C18742 +
                    (C30788 * C1173 - C113 * C1165) * C18740 +
                    (C30788 * C5587 - C113 * C5583) * C18743 +
                    (C30788 * C5592 - C113 * C5588) * C18741) *
                       C13128 +
                   ((C30788 * C1166 - C113 * C1156) * C18742 +
                    (C30788 * C1174 - C113 * C1167) * C18740 +
                    (C30788 * C5843 - C113 * C5842) * C18743 +
                    (C30788 * C5845 - C113 * C5844) * C18741) *
                       C13129) *
                      C30623 * C1150) *
                 C30577) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30623 * C30664 +
                    (((C113 * C294 - C30788 * C304) * C114 +
                      (C113 * C305 - C30788 * C324) * C30801) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                     C367 * C105) *
                        C30623 * C30671 +
                    (((C30788 * C310 - C113 * C297) * C114 +
                      (C30788 * C327 - C113 * C311) * C30801) *
                         C103 +
                     ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                     C368 * C105) *
                        C30623 * C2868) *
                       C30582 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30623 * C30664 +
                    (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                     C672 * C105) *
                        C30623 * C30671 +
                    (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                     ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                     ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                        C30623 * C2868) *
                       C30591 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30623 * C30664 +
                    (C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                     ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                        C30623 * C30671 +
                    (C368 * C103 +
                     ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                     ((C30788 * C322 - C113 * C303) * C114 +
                      (C30788 * C333 - C113 * C323) * C30801) *
                         C105) *
                        C30623 * C2868) *
                       C2871)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30623 * C30664 +
                    ((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                      C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                         C114 +
                     (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                      C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                         C30801) *
                        C30555 * C30623 * C30671 +
                    ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                      C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                         C114 +
                     (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                      C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                         C30801) *
                        C30555 * C30623 * C2868) *
                       C30582 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30623 * C30664 +
                    ((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                      C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                         C114 +
                     (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                      C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                         C30801) *
                        C30555 * C30623 * C30671 +
                    ((C4727 * C298 - C4723 * C312 + C4728 * C1153 -
                      C4724 * C1160 + C4729 * C1156 - C4725 * C1166) *
                         C114 +
                     (C4727 * C313 - C4723 * C328 + C4728 * C1161 -
                      C4724 * C1171 + C4729 * C1167 - C4725 * C1174) *
                         C30801) *
                        C30555 * C30623 * C2868) *
                       C30591 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30623 * C30664 +
                    ((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                      C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                         C114 +
                     (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                      C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                         C30801) *
                        C30555 * C30623 * C30671 +
                    ((C4723 * C314 - C4727 * C299 + C4724 * C1162 -
                      C4728 * C1154 + C4725 * C1168 - C4729 * C1157) *
                         C114 +
                     (C4723 * C329 - C4727 * C315 + C4724 * C1172 -
                      C4728 * C1163 + C4725 * C1175 - C4729 * C1169) *
                         C30801) *
                        C30555 * C30623 * C2868) *
                       C2871)) /
                     (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30664 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30671 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C30858 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30664 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30671 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C30858 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30932 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30928 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30918 +
           (((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30623 * C30898) *
              C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30932 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30928 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30918 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
            ((C30788 * C1427 - C113 * C1426) * C114 +
             (C30788 * C1429 - C113 * C1428) * C30801) *
                C105) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C2500 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30668) *
              C30931 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C2500 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30668) *
              C30924 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C2500 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30668) *
              C30911 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30623 * C2500 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
            ((C30788 * C660 - C113 * C659) * C114 +
             (C30788 * C662 - C113 * C661) * C30801) *
                C105) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30926 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30915 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C30891) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30926 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30915 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C30891) *
               C30668) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30926 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30915 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C30891) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30926 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30915 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30926 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30915 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C30891) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30926 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30915 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30926 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30915 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C30891) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30926 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30915 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C30788 * C122 - C113 * C115) * C114 +
                       (C30788 * C136 - C113 * C123) * C30801) *
                          C103 +
                      ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                      C176 * C105) *
                         C30858 +
                     (((C113 * C481 - C30788 * C491) * C114 +
                       (C113 * C492 - C30788 * C511) * C30801) *
                          C103 +
                      ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                      C554 * C105) *
                         C30710) *
                        C2500 +
                    ((((C113 * C294 - C30788 * C304) * C114 +
                       (C113 * C305 - C30788 * C324) * C30801) *
                          C103 +
                      ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                      C367 * C105) *
                         C30858 +
                     (((C30788 * C936 - C113 * C931) * C114 +
                       (C30788 * C946 - C113 * C937) * C30801) *
                          C103 +
                      ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                      C968 * C105) *
                         C30710) *
                        C30668) *
                       C30582 +
                   (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                      ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                      C177 * C105) *
                         C30858 +
                     (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                      ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                      C785 * C105) *
                         C30710) *
                        C2500 +
                    ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                      ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                      C672 * C105) *
                         C30858 +
                     (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
                      ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
                      ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                         C30710) *
                        C30668) *
                       C30591 +
                   (((C176 * C103 +
                      ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                      C178 * C105) *
                         C30858 +
                     (C554 * C103 +
                      ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                      ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                         C30710) *
                        C2500 +
                    ((C367 * C103 +
                      ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                      ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                         C30858 +
                     (C968 * C103 +
                      ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
                      ((C30788 * C944 - C113 * C935) * C114 +
                       (C30788 * C950 - C113 * C945) * C30801) *
                          C105) *
                         C30710) *
                        C30668) *
                       C2871)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                       C4728 * C294 + C4725 * C310 - C4729 * C297) *
                          C114 +
                      (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                       C4728 * C305 + C4725 * C327 - C4729 * C311) *
                          C30801) *
                         C30555 * C30858 +
                     ((C4727 * C481 - C4723 * C491 + C4728 * C931 -
                       C4724 * C936 + C4729 * C1289 - C4725 * C1301) *
                          C114 +
                      (C4727 * C492 - C4723 * C511 + C4728 * C937 -
                       C4724 * C946 + C4729 * C1302 - C4725 * C1316) *
                          C30801) *
                         C30555 * C30710) *
                        C2500 +
                    (((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                       C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                          C114 +
                      (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                       C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                          C30801) *
                         C30555 * C30858 +
                     ((C4723 * C936 - C4727 * C931 + C4724 * C1301 -
                       C4728 * C1289 + C4725 * C1697 - C4729 * C1694) *
                          C114 +
                      (C4723 * C946 - C4727 * C937 + C4724 * C1316 -
                       C4728 * C1302 + C4725 * C1703 - C4729 * C1698) *
                          C30801) *
                         C30555 * C30710) *
                        C30668) *
                       C30582 +
                   ((((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                       C4724 * C306 + C4729 * C298 - C4725 * C312) *
                          C114 +
                      (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                       C4724 * C325 + C4729 * C313 - C4725 * C328) *
                          C30801) *
                         C30555 * C30858 +
                     ((C4723 * C493 - C4727 * C482 + C4724 * C938 -
                       C4728 * C932 + C4725 * C1303 - C4729 * C1290) *
                          C114 +
                      (C4723 * C512 - C4727 * C494 + C4724 * C947 -
                       C4728 * C939 + C4725 * C1317 - C4729 * C1304) *
                          C30801) *
                         C30555 * C30710) *
                        C2500 +
                    (((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                       C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                          C114 +
                      (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                       C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                          C30801) *
                         C30555 * C30858 +
                     ((C4727 * C932 - C4723 * C938 + C4728 * C1290 -
                       C4724 * C1303 + C4729 * C1695 - C4725 * C1699) *
                          C114 +
                      (C4727 * C939 - C4723 * C947 + C4728 * C1304 -
                       C4724 * C1317 + C4729 * C1700 - C4725 * C1704) *
                          C30801) *
                         C30555 * C30710) *
                        C30668) *
                       C30591 +
                   ((((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                       C4728 * C296 + C4725 * C314 - C4729 * C299) *
                          C114 +
                      (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                       C4728 * C309 + C4725 * C329 - C4729 * C315) *
                          C30801) *
                         C30555 * C30858 +
                     ((C4727 * C483 - C4723 * C495 + C4728 * C933 -
                       C4724 * C940 + C4729 * C1291 - C4725 * C1305) *
                          C114 +
                      (C4727 * C496 - C4723 * C513 + C4728 * C941 -
                       C4724 * C948 + C4729 * C1306 - C4725 * C1318) *
                          C30801) *
                         C30555 * C30710) *
                        C2500 +
                    (((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                       C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                          C114 +
                      (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                       C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                          C30801) *
                         C30555 * C30858 +
                     ((C4723 * C940 - C4727 * C933 + C4724 * C1305 -
                       C4728 * C1291 + C4725 * C1701 - C4729 * C1696) *
                          C114 +
                      (C4723 * C948 - C4727 * C941 + C4724 * C1318 -
                       C4728 * C1306 + C4725 * C1705 - C4729 * C1702) *
                          C30801) *
                         C30555 * C30710) *
                        C30668) *
                       C2871)) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C2500 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30668) *
              C30931 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C2500 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30668) *
              C30924 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C2500 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30668) *
              C30911 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30623 * C2500 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
            ((C30788 * C660 - C113 * C659) * C114 +
             (C30788 * C662 - C113 * C661) * C30801) *
                C105) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30932 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30928 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30918 +
           (((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30623 * C30898) *
              C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30932 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30928 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30918 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
            ((C30788 * C1427 - C113 * C1426) * C114 +
             (C30788 * C1429 - C113 * C1428) * C30801) *
                C105) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C2500 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C2608 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30932 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30928 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30918 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30664 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30671 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C2868) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30664 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30671 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30664 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30671 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C2868) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30706 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30713 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C3770) *
              C30664 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30706 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30713 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
               C3770) *
              C30671 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30706 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30713 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C3770) *
              C2868) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30706 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30713 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C3770) *
              C30664 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30706 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30713 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C3770) *
              C30671 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30706 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30713 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C3770) *
              C2868) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30932 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C3262 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30710) *
              C30928 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C3262 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30710) *
              C30918 +
          ((((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C3262 +
           (((C30788 * C1697 - C113 * C1694) * C114 +
             (C30788 * C1703 - C113 * C1698) * C30801) *
                C103 +
            ((C30788 * C1699 - C113 * C1695) * C114 +
             (C30788 * C1704 - C113 * C1700) * C30801) *
                C104 +
            ((C30788 * C1701 - C113 * C1696) * C114 +
             (C30788 * C1705 - C113 * C1702) * C30801) *
                C105) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C30922 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C30909 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C3262 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C2500 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C3262 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30933 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30930 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30921 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C2500 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30933 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30930 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
               C30921 +
           (((C30788 * C2393 - C113 * C2390) * C114 +
             (C30788 * C2399 - C113 * C2394) * C30801) *
                C103 +
            ((C30788 * C2395 - C113 * C2391) * C114 +
             (C30788 * C2400 - C113 * C2396) * C30801) *
                C104 +
            ((C30788 * C2397 - C113 * C2392) * C114 +
             (C30788 * C2401 - C113 * C2398) * C30801) *
                C105) *
               C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30932 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C30928 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C30918 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30933 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30930 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30921 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C2500 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30933 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30930 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30921 +
           ((C4723 * C2393 - C4727 * C2390 + C4724 * C6233 - C4728 * C6230 +
             C4725 * C6593 - C4729 * C6592) *
                C114 +
            (C4723 * C2399 - C4727 * C2394 + C4724 * C6239 - C4728 * C6234 +
             C4725 * C6595 - C4729 * C6594) *
                C30801) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30706 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30713 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C3770) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30706 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30713 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C3770) *
               C30668) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30706 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30713 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C3770) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30706 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30713 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C3770) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C3770) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C2500 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C30922 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C30909 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C3262 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C2500 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C3262 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30932 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C3262 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30710) *
              C30928 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C3262 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30710) *
              C30918 +
          ((((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C3262 +
           (((C30788 * C1697 - C113 * C1694) * C114 +
             (C30788 * C1703 - C113 * C1698) * C30801) *
                C103 +
            ((C30788 * C1699 - C113 * C1695) * C114 +
             (C30788 * C1704 - C113 * C1700) * C30801) *
                C104 +
            ((C30788 * C1701 - C113 * C1696) * C114 +
             (C30788 * C1705 - C113 * C1702) * C30801) *
                C105) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30922 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30909 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C2500 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30932 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C30928 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C30918 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1420 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1421 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C1422 +
           (((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30623 * C30898) *
              C30843 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
            ((C30788 * C1427 - C113 * C1426) * C114 +
             (C30788 * C1429 - C113 * C1428) * C30801) *
                C105) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30857 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30668) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30857 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30668) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30857 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30668) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30623 * C30857 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
            ((C30788 * C660 - C113 * C659) * C114 +
             (C30788 * C662 - C113 * C661) * C30801) *
                C105) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C1816 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C1817 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C30891) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C1816 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C1817 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C30891) *
               C30668) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C1816 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C1817 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C30891) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C1816 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C1817 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C1816 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C1817 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C30891) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C1816 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C1817 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C1816 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C1817 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C30891) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C1816 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C1817 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C30891) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30858 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C1420 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30858 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30710) *
              C1421 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30858 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30710) *
              C1422 +
          ((((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30858 +
           (((C30788 * C1697 - C113 * C1694) * C114 +
             (C30788 * C1703 - C113 * C1698) * C30801) *
                C103 +
            ((C30788 * C1699 - C113 * C1695) * C114 +
             (C30788 * C1704 - C113 * C1700) * C30801) *
                C104 +
            ((C30788 * C1701 - C113 * C1696) * C114 +
             (C30788 * C1705 - C113 * C1702) * C30801) *
                C105) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C30858 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C30857 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C30858 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C2277 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C30857 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C2276 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C2277 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
               C2278 +
           (((C30788 * C2393 - C113 * C2390) * C114 +
             (C30788 * C2399 - C113 * C2394) * C30801) *
                C103 +
            ((C30788 * C2395 - C113 * C2391) * C114 +
             (C30788 * C2400 - C113 * C2396) * C30801) *
                C104 +
            ((C30788 * C2397 - C113 * C2392) * C114 +
             (C30788 * C2401 - C113 * C2398) * C30801) *
                C105) *
               C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C292 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C1420 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C1421 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C1422 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C2276 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C2277 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C2278 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C30857 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C2276 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C2277 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C2278 +
           ((C4723 * C2393 - C4727 * C2390 + C4724 * C6233 - C4728 * C6230 +
             C4725 * C6593 - C4729 * C6592) *
                C114 +
            (C4723 * C2399 - C4727 * C2394 + C4724 * C6239 - C4728 * C6234 +
             C4725 * C6595 - C4729 * C6594) *
                C30801) *
               C30555 * C30904) *
              C30668) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C30788 * C122 - C113 * C115) * C114 +
                (C30788 * C136 - C113 * C123) * C30801) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
               C176 * C105) *
                  C30623 * C30605 * C108 +
              (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
               C177 * C105) *
                  C30623 * C30605 * C109 +
              (C176 * C103 +
               ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
               C178 * C105) *
                  C30623 * C30605 * C110 +
              (C177 * C103 +
               ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
               ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                  C30623 * C30605 * C111 +
              (C178 * C103 +
               ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
               ((C30788 * C134 - C113 * C121) * C114 +
                (C30788 * C142 - C113 * C135) * C30801) *
                   C105) *
                  C30623 * C30605 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((((C30788 * C122 - C113 * C115) * C114 +
                 (C30788 * C136 - C113 * C123) * C30801) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                C176 * C105) *
                   C30623 * C30925 +
               (((C113 * C294 - C30788 * C304) * C114 +
                 (C113 * C305 - C30788 * C324) * C30801) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                C367 * C105) *
                   C30623 * C30913 +
               (((C30788 * C310 - C113 * C297) * C114 +
                 (C30788 * C327 - C113 * C311) * C30801) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                C368 * C105) *
                   C30623 * C30888) *
                  C291 +
              ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                C177 * C105) *
                   C30623 * C30925 +
               (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
                   C30623 * C30913 +
               (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                   C30623 * C30888) *
                  C292 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                C178 * C105) *
                   C30623 * C30925 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                ((C113 * C302 - C30788 * C320) * C114 +
                 (C113 * C321 - C30788 * C332) * C30801) *
                    C105) *
                   C30623 * C30913 +
               (C368 * C103 +
                ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                ((C30788 * C322 - C113 * C303) * C114 +
                 (C30788 * C333 - C113 * C323) * C30801) *
                    C105) *
                   C30623 * C30888) *
                  C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30926 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30915 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30605 * C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30926 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            ((C538 - C539) * C114 + (C540 - C541) * C30801) * C105) *
               C30915 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30891) *
              C30605 * C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30926 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C113 * C489 - C30788 * C507) * C114 +
             (C113 * C508 - C30788 * C519) * C30801) *
                C105) *
               C30915 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
            ((C30788 * C509 - C113 * C490) * C114 +
             (C30788 * C520 - C113 * C510) * C30801) *
                C105) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1078 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1079 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C1146 +
          (((C113 * C294 - C30788 * C304) * C114 +
            (C113 * C305 - C30788 * C324) * C30801) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
           C367 * C105) *
              C30623 * C1147 +
          (((C30788 * C310 - C113 * C297) * C114 +
            (C30788 * C327 - C113 * C311) * C30801) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
           C368 * C105) *
              C30623 * C1148 +
          (((C113 * C1152 - C30788 * C1158) * C114 +
            (C113 * C1159 - C30788 * C1170) * C30801) *
               C103 +
           ((C113 * C1153 - C30788 * C1160) * C114 +
            (C113 * C1161 - C30788 * C1171) * C30801) *
               C104 +
           ((C113 * C1154 - C30788 * C1162) * C114 +
            (C113 * C1163 - C30788 * C1172) * C30801) *
               C105) *
              C30623 * C1149 +
          (((C30788 * C1164 - C113 * C1155) * C114 +
            (C30788 * C1173 - C113 * C1165) * C30801) *
               C103 +
           ((C30788 * C1166 - C113 * C1156) * C114 +
            (C30788 * C1174 - C113 * C1167) * C30801) *
               C104 +
           ((C30788 * C1168 - C113 * C1157) * C114 +
            (C30788 * C1175 - C113 * C1169) * C30801) *
               C105) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30926 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30915 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C1078 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30926 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30915 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C113 * C1287 - C30788 * C1297) * C114 +
             (C113 * C1298 - C30788 * C1314) * C30801) *
                C104 +
            ((C113 * C1288 - C30788 * C1299) * C114 +
             (C113 * C1300 - C30788 * C1315) * C30801) *
                C105) *
               C30891) *
              C1079 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30926 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C113 * C1290 - C30788 * C1303) * C114 +
             (C113 * C1304 - C30788 * C1317) * C30801) *
                C104 +
            ((C113 * C1291 - C30788 * C1305) * C114 +
             (C113 * C1306 - C30788 * C1318) * C30801) *
                C105) *
               C30915 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C1817 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30605 * C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30891) *
              C30605 * C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
            ((C30788 * C509 - C113 * C490) * C114 +
             (C30788 * C520 - C113 * C510) * C30801) *
                C105) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C1817 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30925 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C1816 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C113 * C1287 - C30788 * C1297) * C114 +
             (C113 * C1298 - C30788 * C1314) * C30801) *
                C104 +
            ((C113 * C1288 - C30788 * C1299) * C114 +
             (C113 * C1300 - C30788 * C1315) * C30801) *
                C105) *
               C30891) *
              C30913 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C1817 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C1991 +
          (((C113 * C481 - C30788 * C491) * C114 +
            (C113 * C492 - C30788 * C511) * C30801) *
               C103 +
           ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
           C554 * C105) *
              C1992 +
          (((C30788 * C497 - C113 * C484) * C114 +
            (C30788 * C514 - C113 * C498) * C30801) *
               C103 +
           ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
           C555 * C105) *
              C1993 +
          (((C113 * C1996 - C30788 * C2002) * C114 +
            (C113 * C2003 - C30788 * C2014) * C30801) *
               C103 +
           ((C113 * C1997 - C30788 * C2004) * C114 +
            (C113 * C2005 - C30788 * C2015) * C30801) *
               C104 +
           ((C113 * C1998 - C30788 * C2006) * C114 +
            (C113 * C2007 - C30788 * C2016) * C30801) *
               C105) *
              C1994 +
          (((C30788 * C2008 - C113 * C1999) * C114 +
            (C30788 * C2017 - C113 * C2009) * C30801) *
               C103 +
           ((C30788 * C2010 - C113 * C2000) * C114 +
            (C30788 * C2018 - C113 * C2011) * C30801) *
               C104 +
           ((C30788 * C2012 - C113 * C2001) * C114 +
            (C30788 * C2019 - C113 * C2013) * C30801) *
               C105) *
              C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C30605 * C108 +
          ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
            C4729 * C298 - C4725 * C312) *
               C114 +
           (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
            C4729 * C313 - C4725 * C328) *
               C30801) *
              C30555 * C30623 * C30605 * C109 +
          ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
            C4725 * C314 - C4729 * C299) *
               C114 +
           (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
            C4725 * C329 - C4729 * C315) *
               C30801) *
              C30555 * C30623 * C30605 * C110 +
          ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
            C4729 * C301 - C4725 * C318) *
               C114 +
           (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
            C4729 * C319 - C4725 * C331) *
               C30801) *
              C30555 * C30623 * C30605 * C111 +
          ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
            C4725 * C322 - C4729 * C303) *
               C114 +
           (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
            C4725 * C333 - C4729 * C323) *
               C30801) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30926 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30915 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C1146 +
          ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
            C4729 * C1152 - C4725 * C1158) *
               C114 +
           (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
            C4729 * C1159 - C4725 * C1170) *
               C30801) *
              C30555 * C30623 * C1147 +
          ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
            C4725 * C1164 - C4729 * C1155) *
               C114 +
           (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
            C4725 * C1173 - C4729 * C1165) *
               C30801) *
              C30555 * C30623 * C1148 +
          ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
            C4729 * C5464 - C4725 * C5466) *
               C114 +
           (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
            C4729 * C5467 - C4725 * C5470) *
               C30801) *
              C30555 * C30623 * C1149 +
          ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 - C4728 * C5464 +
            C4725 * C5468 - C4729 * C5465) *
               C114 +
           (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 - C4728 * C5467 +
            C4725 * C5471 - C4729 * C5469) *
               C30801) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C1078 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30926 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30915 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C1079 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30926 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30915 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30925 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C30913 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C1991 +
          ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
            C4729 * C1289 - C4725 * C1301) *
               C114 +
           (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
            C4729 * C1302 - C4725 * C1316) *
               C30801) *
              C30555 * C1992 +
          ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
            C4725 * C1307 - C4729 * C1292) *
               C114 +
           (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
            C4725 * C1319 - C4729 * C1308) *
               C30801) *
              C30555 * C1993 +
          ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
            C4729 * C6230 - C4725 * C6233) *
               C114 +
           (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
            C4729 * C6234 - C4725 * C6239) *
               C30801) *
              C30555 * C1994 +
          ((C4723 * C2008 - C4727 * C1999 + C4724 * C6235 - C4728 * C6231 +
            C4725 * C6236 - C4729 * C6232) *
               C114 +
           (C4723 * C2017 - C4727 * C2009 + C4724 * C6240 - C4728 * C6237 +
            C4725 * C6241 - C4729 * C6238) *
               C30801) *
              C30555 * C1995) *
         C30605 * C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C1078 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C1079 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C30858 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C30888) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C30858 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30858 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30605 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30858 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30710) *
              C30605 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30858 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30710) *
              C30605 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30858 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
            ((C30788 * C773 - C113 * C772) * C114 +
             (C30788 * C775 - C113 * C774) * C30801) *
                C105) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C2277 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C30605 * C30843 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C2276 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C2277 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C2278 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C30801) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C30801) * C104 +
            ((C30788 * C2281 - C113 * C2280) * C114 +
             (C30788 * C2283 - C113 * C2282) * C30801) *
                C105) *
               C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C2276 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C2277 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C2278 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C30605 * C30843 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C2276 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C2277 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C2278 +
           ((C4723 * C2004 - C4727 * C1997 + C4724 * C2395 - C4728 * C2391 +
             C4725 * C6491 - C4729 * C6490) *
                C114 +
            (C4723 * C2015 - C4727 * C2005 + C4724 * C2400 - C4728 * C2396 +
             C4725 * C6493 - C4729 * C6492) *
                C30801) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30925 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30913 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30925 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
               C30623 * C30913 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30925 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C113 * C302 - C30788 * C320) * C114 +
             (C113 * C321 - C30788 * C332) * C30801) *
                C105) *
               C30623 * C30913 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C30605 * C108 +
          (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
           C177 * C105) *
              C30623 * C30605 * C109 +
          (C176 * C103 +
           ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
           C178 * C105) *
              C30623 * C30605 * C110 +
          (C177 * C103 +
           ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
           ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
              C30623 * C30605 * C111 +
          (C178 * C103 +
           ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
           ((C30788 * C134 - C113 * C121) * C114 +
            (C30788 * C142 - C113 * C135) * C30801) *
               C105) *
              C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1078 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1079 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C30888) *
              C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C30888) *
              C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
            ((C30788 * C322 - C113 * C303) * C114 +
             (C30788 * C333 - C113 * C323) * C30801) *
                C105) *
               C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C30788 * C122 - C113 * C115) * C114 +
            (C30788 * C136 - C113 * C123) * C30801) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
           C176 * C105) *
              C30623 * C1146 +
          (((C113 * C294 - C30788 * C304) * C114 +
            (C113 * C305 - C30788 * C324) * C30801) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
           C367 * C105) *
              C30623 * C1147 +
          (((C30788 * C310 - C113 * C297) * C114 +
            (C30788 * C327 - C113 * C311) * C30801) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
           C368 * C105) *
              C30623 * C1148 +
          (((C113 * C1152 - C30788 * C1158) * C114 +
            (C113 * C1159 - C30788 * C1170) * C30801) *
               C103 +
           ((C113 * C1153 - C30788 * C1160) * C114 +
            (C113 * C1161 - C30788 * C1171) * C30801) *
               C104 +
           ((C113 * C1154 - C30788 * C1162) * C114 +
            (C113 * C1163 - C30788 * C1172) * C30801) *
               C105) *
              C30623 * C1149 +
          (((C30788 * C1164 - C113 * C1155) * C114 +
            (C30788 * C1173 - C113 * C1165) * C30801) *
               C103 +
           ((C30788 * C1166 - C113 * C1156) * C114 +
            (C30788 * C1174 - C113 * C1167) * C30801) *
               C104 +
           ((C30788 * C1168 - C113 * C1157) * C114 +
            (C30788 * C1175 - C113 * C1169) * C30801) *
               C105) *
              C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C1817 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30605 * C30922 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30891) *
              C30605 * C30909 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
            ((C30788 * C509 - C113 * C490) * C114 +
             (C30788 * C520 - C113 * C510) * C30801) *
                C105) *
               C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C1817 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30891) *
              C30925 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C1816 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C30788 * C1295) * C114 +
             (C113 * C1296 - C30788 * C1313) * C30801) *
                C103 +
            ((C113 * C1287 - C30788 * C1297) * C114 +
             (C113 * C1298 - C30788 * C1314) * C30801) *
                C104 +
            ((C113 * C1288 - C30788 * C1299) * C114 +
             (C113 * C1300 - C30788 * C1315) * C30801) *
                C105) *
               C30891) *
              C30913 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C1817 +
           (((C30788 * C1307 - C113 * C1292) * C114 +
             (C30788 * C1319 - C113 * C1308) * C30801) *
                C103 +
            ((C30788 * C1309 - C113 * C1293) * C114 +
             (C30788 * C1320 - C113 * C1310) * C30801) *
                C104 +
            ((C30788 * C1311 - C113 * C1294) * C114 +
             (C30788 * C1321 - C113 * C1312) * C30801) *
                C105) *
               C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C30605 * C108 +
          ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
            C4729 * C298 - C4725 * C312) *
               C114 +
           (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
            C4729 * C313 - C4725 * C328) *
               C30801) *
              C30555 * C30623 * C30605 * C109 +
          ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
            C4725 * C314 - C4729 * C299) *
               C114 +
           (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
            C4725 * C329 - C4729 * C315) *
               C30801) *
              C30555 * C30623 * C30605 * C110 +
          ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
            C4729 * C301 - C4725 * C318) *
               C114 +
           (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
            C4729 * C319 - C4725 * C331) *
               C30801) *
              C30555 * C30623 * C30605 * C111 +
          ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
            C4725 * C322 - C4729 * C303) *
               C114 +
           (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
            C4725 * C333 - C4729 * C323) *
               C30801) *
              C30555 * C30623 * C30605 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C291 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C292 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30925 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30913 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C1078 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C1079 +
           ((C4723 * C314 - C4727 * C299 + C4724 * C1162 - C4728 * C1154 +
             C4725 * C1168 - C4729 * C1157) *
                C114 +
            (C4723 * C329 - C4727 * C315 + C4724 * C1172 - C4728 * C1163 +
             C4725 * C1175 - C4729 * C1169) *
                C30801) *
               C30555 * C30623 * C30888) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
            C4725 * C310 - C4729 * C297) *
               C114 +
           (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
            C4725 * C327 - C4729 * C311) *
               C30801) *
              C30555 * C30623 * C1146 +
          ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
            C4729 * C1152 - C4725 * C1158) *
               C114 +
           (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
            C4729 * C1159 - C4725 * C1170) *
               C30801) *
              C30555 * C30623 * C1147 +
          ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
            C4725 * C1164 - C4729 * C1155) *
               C114 +
           (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
            C4725 * C1173 - C4729 * C1165) *
               C30801) *
              C30555 * C30623 * C1148 +
          ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
            C4729 * C5464 - C4725 * C5466) *
               C114 +
           (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
            C4729 * C5467 - C4725 * C5470) *
               C30801) *
              C30555 * C30623 * C1149 +
          ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 - C4728 * C5464 +
            C4725 * C5468 - C4729 * C5465) *
               C114 +
           (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 - C4728 * C5467 +
            C4725 * C5471 - C4729 * C5469) *
               C30801) *
              C30555 * C30623 * C1150) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30922 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30909 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C501 - C4727 * C486 + C4724 * C1299 - C4728 * C1288 +
             C4725 * C1311 - C4729 * C1294) *
                C114 +
            (C4723 * C516 - C4727 * C502 + C4724 * C1315 - C4728 * C1300 +
             C4725 * C1321 - C4729 * C1312) *
                C30801) *
               C30555 * C30891) *
              C30605 * C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30891) *
              C30925 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C1816 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C1817 +
           ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
             C4729 * C5582 - C4725 * C5585) *
                C114 +
            (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
             C4729 * C5586 - C4725 * C5591) *
                C30801) *
               C30555 * C30891) *
              C30913 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C1816 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C1817 +
           ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 - C4728 * C5582 +
             C4725 * C5589 - C4729 * C5584) *
                C114 +
            (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 - C4728 * C5586 +
             C4725 * C5593 - C4729 * C5590) *
                C30801) *
               C30555 * C30891) *
              C30888) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C30788 * C122 - C113 * C115) * C114 +
                       (C30788 * C136 - C113 * C123) * C30801) *
                          C103 +
                      ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                      C176 * C105) *
                         C3262 +
                     (((C113 * C481 - C30788 * C491) * C114 +
                       (C113 * C492 - C30788 * C511) * C30801) *
                          C103 +
                      ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                      C554 * C105) *
                         C30710) *
                        C30857 +
                    ((((C113 * C294 - C30788 * C304) * C114 +
                       (C113 * C305 - C30788 * C324) * C30801) *
                          C103 +
                      ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                      C367 * C105) *
                         C3262 +
                     (((C30788 * C936 - C113 * C931) * C114 +
                       (C30788 * C946 - C113 * C937) * C30801) *
                          C103 +
                      ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                      C968 * C105) *
                         C30710) *
                        C30668) *
                       C30582 +
                   (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                      ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                      C177 * C105) *
                         C3262 +
                     (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                      ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                      C785 * C105) *
                         C30710) *
                        C30857 +
                    ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                      ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                      C672 * C105) *
                         C3262 +
                     (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
                      ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
                      ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                         C30710) *
                        C30668) *
                       C30591 +
                   (((C176 * C103 +
                      ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                      C178 * C105) *
                         C3262 +
                     (C554 * C103 +
                      ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                      ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                         C30710) *
                        C30857 +
                    ((C367 * C103 +
                      ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                      ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                         C3262 +
                     (C968 * C103 +
                      ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
                      ((C30788 * C944 - C113 * C935) * C114 +
                       (C30788 * C950 - C113 * C945) * C30801) *
                          C105) *
                         C30710) *
                        C30668) *
                       C2871)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                       C4728 * C294 + C4725 * C310 - C4729 * C297) *
                          C114 +
                      (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                       C4728 * C305 + C4725 * C327 - C4729 * C311) *
                          C30801) *
                         C30555 * C3262 +
                     ((C4727 * C481 - C4723 * C491 + C4728 * C931 -
                       C4724 * C936 + C4729 * C1289 - C4725 * C1301) *
                          C114 +
                      (C4727 * C492 - C4723 * C511 + C4728 * C937 -
                       C4724 * C946 + C4729 * C1302 - C4725 * C1316) *
                          C30801) *
                         C30555 * C30710) *
                        C30857 +
                    (((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                       C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                          C114 +
                      (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                       C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                          C30801) *
                         C30555 * C3262 +
                     ((C4723 * C936 - C4727 * C931 + C4724 * C1301 -
                       C4728 * C1289 + C4725 * C1697 - C4729 * C1694) *
                          C114 +
                      (C4723 * C946 - C4727 * C937 + C4724 * C1316 -
                       C4728 * C1302 + C4725 * C1703 - C4729 * C1698) *
                          C30801) *
                         C30555 * C30710) *
                        C30668) *
                       C30582 +
                   ((((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                       C4724 * C306 + C4729 * C298 - C4725 * C312) *
                          C114 +
                      (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                       C4724 * C325 + C4729 * C313 - C4725 * C328) *
                          C30801) *
                         C30555 * C3262 +
                     ((C4723 * C493 - C4727 * C482 + C4724 * C938 -
                       C4728 * C932 + C4725 * C1303 - C4729 * C1290) *
                          C114 +
                      (C4723 * C512 - C4727 * C494 + C4724 * C947 -
                       C4728 * C939 + C4725 * C1317 - C4729 * C1304) *
                          C30801) *
                         C30555 * C30710) *
                        C30857 +
                    (((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                       C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                          C114 +
                      (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                       C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                          C30801) *
                         C30555 * C3262 +
                     ((C4727 * C932 - C4723 * C938 + C4728 * C1290 -
                       C4724 * C1303 + C4729 * C1695 - C4725 * C1699) *
                          C114 +
                      (C4727 * C939 - C4723 * C947 + C4728 * C1304 -
                       C4724 * C1317 + C4729 * C1700 - C4725 * C1704) *
                          C30801) *
                         C30555 * C30710) *
                        C30668) *
                       C30591 +
                   ((((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                       C4728 * C296 + C4725 * C314 - C4729 * C299) *
                          C114 +
                      (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                       C4728 * C309 + C4725 * C329 - C4729 * C315) *
                          C30801) *
                         C30555 * C3262 +
                     ((C4727 * C483 - C4723 * C495 + C4728 * C933 -
                       C4724 * C940 + C4729 * C1291 - C4725 * C1305) *
                          C114 +
                      (C4727 * C496 - C4723 * C513 + C4728 * C941 -
                       C4724 * C948 + C4729 * C1306 - C4725 * C1318) *
                          C30801) *
                         C30555 * C30710) *
                        C30857 +
                    (((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                       C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                          C114 +
                      (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                       C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                          C30801) *
                         C30555 * C3262 +
                     ((C4723 * C940 - C4727 * C933 + C4724 * C1305 -
                       C4728 * C1291 + C4725 * C1701 - C4729 * C1696) *
                          C114 +
                      (C4723 * C948 - C4727 * C941 + C4724 * C1318 -
                       C4728 * C1306 + C4725 * C1705 - C4729 * C1702) *
                          C30801) *
                         C30555 * C30710) *
                        C30668) *
                       C2871)) /
                     (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30706 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30713 +
            (((C30788 * C497 - C113 * C484) * C114 +
              (C30788 * C514 - C113 * C498) * C30801) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
             C555 * C105) *
                C3770) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30706 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30713 +
            (((C113 * C1286 - C30788 * C1295) * C114 +
              (C113 * C1296 - C30788 * C1313) * C30801) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C30801) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C30801) * C105) *
                C3770) *
               C30668) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30706 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30713 +
            (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                C3770) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30706 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30713 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C30801) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C30801) * C104 +
             ((C30788 * C2167 - C113 * C2166) * C114 +
              (C30788 * C2169 - C113 * C2168) * C30801) *
                 C105) *
                C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
              C4725 * C1307 - C4729 * C1292) *
                 C114 +
             (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
              C4725 * C1319 - C4729 * C1308) *
                 C30801) *
                C30555 * C3770) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 - C4724 * C1307 +
              C4729 * C5582 - C4725 * C5585) *
                 C114 +
             (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 - C4724 * C1319 +
              C4729 * C5586 - C4725 * C5591) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30706 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30713 +
            ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
              C4729 * C1293 - C4725 * C1309) *
                 C114 +
             (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
              C4729 * C1310 - C4725 * C1320) *
                 C30801) *
                C30555 * C3770) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30706 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30713 +
            ((C4723 * C1297 - C4727 * C1287 + C4724 * C1309 - C4728 * C1293 +
              C4725 * C6389 - C4729 * C6388) *
                 C114 +
             (C4723 * C1314 - C4727 * C1298 + C4724 * C1320 - C4728 * C1310 +
              C4725 * C6391 - C4729 * C6390) *
                 C30801) *
                C30555 * C3770) *
               C30668) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30925 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30913 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C30888) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30925 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30913 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30605 * C30931 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30710) *
              C30605 * C30924 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30710) *
              C30605 * C30911 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
            ((C30788 * C773 - C113 * C772) * C114 +
             (C30788 * C775 - C113 * C774) * C30801) *
                C105) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30933 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30930 +
           (((C30788 * C497 - C113 * C484) * C114 +
             (C30788 * C514 - C113 * C498) * C30801) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
            C555 * C105) *
               C30921 +
           (((C113 * C1996 - C30788 * C2002) * C114 +
             (C113 * C2003 - C30788 * C2014) * C30801) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C30801) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C30801) * C105) *
               C30904) *
              C30605 * C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30933 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30930 +
           (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
               C30921 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C30801) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C30801) * C104 +
            ((C30788 * C2281 - C113 * C2280) * C114 +
             (C30788 * C2283 - C113 * C2282) * C30801) *
                C105) *
               C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30933 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30930 +
           ((C4723 * C497 - C4727 * C484 + C4724 * C1295 - C4728 * C1286 +
             C4725 * C1307 - C4729 * C1292) *
                C114 +
            (C4723 * C514 - C4727 * C498 + C4724 * C1313 - C4728 * C1296 +
             C4725 * C1319 - C4729 * C1308) *
                C30801) *
               C30555 * C30921 +
           ((C4727 * C1996 - C4723 * C2002 + C4728 * C2390 - C4724 * C2393 +
             C4729 * C6230 - C4725 * C6233) *
                C114 +
            (C4727 * C2003 - C4723 * C2014 + C4728 * C2394 - C4724 * C2399 +
             C4729 * C6234 - C4725 * C6239) *
                C30801) *
               C30555 * C30904) *
              C30605 * C2608 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30933 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30930 +
           ((C4727 * C485 - C4723 * C499 + C4728 * C1287 - C4724 * C1297 +
             C4729 * C1293 - C4725 * C1309) *
                C114 +
            (C4727 * C500 - C4723 * C515 + C4728 * C1298 - C4724 * C1314 +
             C4729 * C1310 - C4725 * C1320) *
                C30801) *
               C30555 * C30921 +
           ((C4723 * C2004 - C4727 * C1997 + C4724 * C2395 - C4728 * C2391 +
             C4725 * C6491 - C4729 * C6490) *
                C114 +
            (C4723 * C2015 - C4727 * C2005 + C4724 * C2400 - C4728 * C2396 +
             C4725 * C6493 - C4729 * C6492) *
                C30801) *
               C30555 * C30904) *
              C30605 * C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30706 +
                    (((C113 * C481 - C30788 * C491) * C114 +
                      (C113 * C492 - C30788 * C511) * C30801) *
                         C103 +
                     ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                     C554 * C105) *
                        C30713 +
                    (((C30788 * C497 - C113 * C484) * C114 +
                      (C30788 * C514 - C113 * C498) * C30801) *
                         C103 +
                     ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                     C555 * C105) *
                        C3770) *
                       C30605 * C30582 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30706 +
                    (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                     ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                     C785 * C105) *
                        C30713 +
                    (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
                     ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
                     ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                        C3770) *
                       C30605 * C30591 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30706 +
                    (C554 * C103 +
                     ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                     ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                        C30713 +
                    (C555 * C103 +
                     ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
                     ((C30788 * C509 - C113 * C490) * C114 +
                      (C30788 * C520 - C113 * C510) * C30801) *
                         C105) *
                        C3770) *
                       C30605 * C2871)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30706 +
                    ((C4727 * C481 - C4723 * C491 + C4728 * C931 -
                      C4724 * C936 + C4729 * C1289 - C4725 * C1301) *
                         C114 +
                     (C4727 * C492 - C4723 * C511 + C4728 * C937 -
                      C4724 * C946 + C4729 * C1302 - C4725 * C1316) *
                         C30801) *
                        C30555 * C30713 +
                    ((C4723 * C497 - C4727 * C484 + C4724 * C1295 -
                      C4728 * C1286 + C4725 * C1307 - C4729 * C1292) *
                         C114 +
                     (C4723 * C514 - C4727 * C498 + C4724 * C1313 -
                      C4728 * C1296 + C4725 * C1319 - C4729 * C1308) *
                         C30801) *
                        C30555 * C3770) *
                       C30605 * C30582 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30706 +
                    ((C4723 * C493 - C4727 * C482 + C4724 * C938 -
                      C4728 * C932 + C4725 * C1303 - C4729 * C1290) *
                         C114 +
                     (C4723 * C512 - C4727 * C494 + C4724 * C947 -
                      C4728 * C939 + C4725 * C1317 - C4729 * C1304) *
                         C30801) *
                        C30555 * C30713 +
                    ((C4727 * C485 - C4723 * C499 + C4728 * C1287 -
                      C4724 * C1297 + C4729 * C1293 - C4725 * C1309) *
                         C114 +
                     (C4727 * C500 - C4723 * C515 + C4728 * C1298 -
                      C4724 * C1314 + C4729 * C1310 - C4725 * C1320) *
                         C30801) *
                        C30555 * C3770) *
                       C30605 * C30591 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30706 +
                    ((C4727 * C483 - C4723 * C495 + C4728 * C933 -
                      C4724 * C940 + C4729 * C1291 - C4725 * C1305) *
                         C114 +
                     (C4727 * C496 - C4723 * C513 + C4728 * C941 -
                      C4724 * C948 + C4729 * C1306 - C4725 * C1318) *
                         C30801) *
                        C30555 * C30713 +
                    ((C4723 * C501 - C4727 * C486 + C4724 * C1299 -
                      C4728 * C1288 + C4725 * C1311 - C4729 * C1294) *
                         C114 +
                     (C4723 * C516 - C4727 * C502 + C4724 * C1315 -
                      C4728 * C1300 + C4725 * C1321 - C4729 * C1312) *
                         C30801) *
                        C30555 * C3770) *
                       C30605 * C2871)) /
                     (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30605 * C30931 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30710) *
              C30605 * C30924 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30710) *
              C30605 * C30911 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
            ((C30788 * C773 - C113 * C772) * C114 +
             (C30788 * C775 - C113 * C774) * C30801) *
                C105) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30925 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C3262 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30913 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C30888) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30925 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30913 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30931 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30924 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C3262 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30911 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C3262 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C2608 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30925 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C3262 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30913 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C3262 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C30857 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C30668) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C30857 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C30668) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30623 * C30857 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
               C30623 * C30668) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30623 * C30857 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C30801) * C104 +
            ((C30788 * C660 - C113 * C659) * C114 +
             (C30788 * C662 - C113 * C661) * C30801) *
                C105) *
               C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30623 * C1420 +
           (((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30623 * C1421 +
           (((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30623 * C1422 +
           (((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30623 * C30898) *
              C30843 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30623 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
            C672 * C105) *
               C30623 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
               C30623 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C30801) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C30801) * C104 +
            ((C30788 * C1427 - C113 * C1426) * C114 +
             (C30788 * C1429 - C113 * C1428) * C30801) *
                C105) *
               C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C30668) *
              C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C30668) *
              C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
             C4729 * C1154 - C4725 * C1162) *
                C114 +
            (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
             C4729 * C1163 - C4725 * C1172) *
                C30801) *
               C30555 * C30623 * C30668) *
              C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30623 * C30857 +
           ((C4723 * C316 - C4727 * C300 + C4724 * C318 - C4728 * C301 +
             C4725 * C1427 - C4729 * C1426) *
                C114 +
            (C4723 * C330 - C4727 * C317 + C4724 * C331 - C4728 * C319 +
             C4725 * C1429 - C4729 * C1428) *
                C30801) *
               C30555 * C30623 * C30668) *
              C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30843 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30623 * C1420 +
           ((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
             C4725 * C1160 - C4729 * C1153) *
                C114 +
            (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
             C4725 * C1171 - C4729 * C1161) *
                C30801) *
               C30555 * C30623 * C1421 +
           ((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
             C4729 * C1156 - C4725 * C1166) *
                C114 +
            (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
             C4729 * C1167 - C4725 * C1174) *
                C30801) *
               C30555 * C30623 * C1422 +
           ((C4723 * C1160 - C4727 * C1153 + C4724 * C1166 - C4728 * C1156 +
             C4725 * C5693 - C4729 * C5692) *
                C114 +
            (C4723 * C1171 - C4727 * C1161 + C4724 * C1174 - C4728 * C1167 +
             C4725 * C5695 - C4729 * C5694) *
                C30801) *
               C30555 * C30623 * C30898) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C30857 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C30668) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C30857 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C30668) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
             C178 * C105) *
                C30858 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
                C30710) *
               C30857 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                C30858 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C30801) * C104 +
             ((C30788 * C944 - C113 * C935) * C114 +
              (C30788 * C950 - C113 * C945) * C30801) *
                 C105) *
                C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30858 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C1420 +
          ((((C113 * C294 - C30788 * C304) * C114 +
             (C113 * C305 - C30788 * C324) * C30801) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
            C367 * C105) *
               C30858 +
           (((C30788 * C936 - C113 * C931) * C114 +
             (C30788 * C946 - C113 * C937) * C30801) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
            C968 * C105) *
               C30710) *
              C1421 +
          ((((C30788 * C310 - C113 * C297) * C114 +
             (C30788 * C327 - C113 * C311) * C30801) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
            C368 * C105) *
               C30858 +
           (((C113 * C1289 - C30788 * C1301) * C114 +
             (C113 * C1302 - C30788 * C1316) * C30801) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
               C30710) *
              C1422 +
          ((((C113 * C1152 - C30788 * C1158) * C114 +
             (C113 * C1159 - C30788 * C1170) * C30801) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C30801) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C30801) * C105) *
               C30858 +
           (((C30788 * C1697 - C113 * C1694) * C114 +
             (C30788 * C1703 - C113 * C1698) * C30801) *
                C103 +
            ((C30788 * C1699 - C113 * C1695) * C114 +
             (C30788 * C1704 - C113 * C1700) * C30801) *
                C104 +
            ((C30788 * C1701 - C113 * C1696) * C114 +
             (C30788 * C1705 - C113 * C1702) * C30801) *
                C105) *
               C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C291 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C292 +
          ((((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
              C4725 * C314 - C4729 * C299) *
                 C114 +
             (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
              C4725 * C329 - C4729 * C315) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
              C4729 * C1291 - C4725 * C1305) *
                 C114 +
             (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
              C4729 * C1306 - C4725 * C1318) *
                 C30801) *
                C30555 * C30710) *
               C30857 +
           (((C4727 * C296 - C4723 * C308 + C4728 * C299 - C4724 * C314 +
              C4729 * C1154 - C4725 * C1162) *
                 C114 +
             (C4727 * C309 - C4723 * C326 + C4728 * C315 - C4724 * C329 +
              C4729 * C1163 - C4725 * C1172) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C940 - C4727 * C933 + C4724 * C1305 - C4728 * C1291 +
              C4725 * C1701 - C4729 * C1696) *
                 C114 +
             (C4723 * C948 - C4727 * C941 + C4724 * C1318 - C4728 * C1306 +
              C4725 * C1705 - C4729 * C1702) *
                 C30801) *
                C30555 * C30710) *
               C30668) *
              C30882)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C1420 +
          (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
             C4729 * C1152 - C4725 * C1158) *
                C114 +
            (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
             C4729 * C1159 - C4725 * C1170) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
             C4725 * C1697 - C4729 * C1694) *
                C114 +
            (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
             C4725 * C1703 - C4729 * C1698) *
                C30801) *
               C30555 * C30710) *
              C1421 +
          (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
             C4725 * C1164 - C4729 * C1155) *
                C114 +
            (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
             C4725 * C1173 - C4729 * C1165) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
             C4729 * C5583 - C4725 * C5587) *
                C114 +
            (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
             C4729 * C5588 - C4725 * C5592) *
                C30801) *
               C30555 * C30710) *
              C1422 +
          (((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 - C4724 * C1164 +
             C4729 * C5464 - C4725 * C5466) *
                C114 +
            (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 - C4724 * C1173 +
             C4729 * C5467 - C4725 * C5470) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C1697 - C4727 * C1694 + C4724 * C5587 - C4728 * C5583 +
             C4725 * C5945 - C4729 * C5944) *
                C114 +
            (C4723 * C1703 - C4727 * C1698 + C4724 * C5592 - C4728 * C5588 +
             C4725 * C5947 - C4729 * C5946) *
                C30801) *
               C30555 * C30710) *
              C30898) *
         C30577) /
            (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30623 * C30925 +
                    (((C113 * C294 - C30788 * C304) * C114 +
                      (C113 * C305 - C30788 * C324) * C30801) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                     C367 * C105) *
                        C30623 * C30913 +
                    (((C30788 * C310 - C113 * C297) * C114 +
                      (C30788 * C327 - C113 * C311) * C30801) *
                         C103 +
                     ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                     C368 * C105) *
                        C30623 * C30888) *
                       C291 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30623 * C30925 +
                    (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                     ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
                        C30623 * C30913 +
                    (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                     ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                     ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                        C30623 * C30888) *
                       C292 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30623 * C30925 +
                    (C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                     ((C113 * C302 - C30788 * C320) * C114 +
                      (C113 * C321 - C30788 * C332) * C30801) *
                         C105) *
                        C30623 * C30913 +
                    (C368 * C103 +
                     ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                     ((C30788 * C322 - C113 * C303) * C114 +
                      (C30788 * C333 - C113 * C323) * C30801) *
                         C105) *
                        C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C30788 * C122 - C113 * C115) * C114 +
                     (C30788 * C136 - C113 * C123) * C30801) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                    C176 * C105) *
                       C30623 * C30605 * C108 +
                   (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                    C177 * C105) *
                       C30623 * C30605 * C109 +
                   (C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                    C178 * C105) *
                       C30623 * C30605 * C110 +
                   (C177 * C103 +
                    ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
                    ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                       C30623 * C30605 * C111 +
                   (C178 * C103 +
                    ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
                    ((C30788 * C134 - C113 * C121) * C114 +
                     (C30788 * C142 - C113 * C135) * C30801) *
                        C105) *
                       C30623 * C30605 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30926 +
                    (((C113 * C481 - C30788 * C491) * C114 +
                      (C113 * C492 - C30788 * C511) * C30801) *
                         C103 +
                     ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                     C554 * C105) *
                        C30915 +
                    (((C30788 * C497 - C113 * C484) * C114 +
                      (C30788 * C514 - C113 * C498) * C30801) *
                         C103 +
                     ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                     C555 * C105) *
                        C30891) *
                       C30605 * C291 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30926 +
                    (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
                     ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
                     ((C538 - C539) * C114 + (C540 - C541) * C30801) * C105) *
                        C30915 +
                    (((C531 - C530) * C114 + (C533 - C532) * C30801) * C103 +
                     ((C535 - C534) * C114 + (C537 - C536) * C30801) * C104 +
                     ((C542 - C543) * C114 + (C544 - C545) * C30801) * C105) *
                        C30891) *
                       C30605 * C292 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30926 +
                    (C554 * C103 +
                     ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
                     ((C113 * C489 - C30788 * C507) * C114 +
                      (C113 * C508 - C30788 * C519) * C30801) *
                         C105) *
                        C30915 +
                    (C555 * C103 +
                     ((C543 - C542) * C114 + (C545 - C544) * C30801) * C104 +
                     ((C30788 * C509 - C113 * C490) * C114 +
                      (C30788 * C520 - C113 * C510) * C30801) *
                         C105) *
                        C30891) *
                       C30605 * C30882)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30623 * C1078 +
                    (((C113 * C294 - C30788 * C304) * C114 +
                      (C113 * C305 - C30788 * C324) * C30801) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                     C367 * C105) *
                        C30623 * C1079 +
                    (((C30788 * C310 - C113 * C297) * C114 +
                      (C30788 * C327 - C113 * C311) * C30801) *
                         C103 +
                     ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                     C368 * C105) *
                        C30623 * C30888) *
                       C30922 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30623 * C1078 +
                    (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                     C672 * C105) *
                        C30623 * C1079 +
                    (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                     ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                     ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                        C30623 * C30888) *
                       C30909 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30623 * C1078 +
                    (C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                     ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                        C30623 * C1079 +
                    (C368 * C103 +
                     ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                     ((C30788 * C322 - C113 * C303) * C114 +
                      (C30788 * C333 - C113 * C323) * C30801) *
                         C105) *
                        C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C30788 * C122 - C113 * C115) * C114 +
                     (C30788 * C136 - C113 * C123) * C30801) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                    C176 * C105) *
                       C30623 * C1146 +
                   (((C113 * C294 - C30788 * C304) * C114 +
                     (C113 * C305 - C30788 * C324) * C30801) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                    C367 * C105) *
                       C30623 * C1147 +
                   (((C30788 * C310 - C113 * C297) * C114 +
                     (C30788 * C327 - C113 * C311) * C30801) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                    C368 * C105) *
                       C30623 * C1148 +
                   (((C113 * C1152 - C30788 * C1158) * C114 +
                     (C113 * C1159 - C30788 * C1170) * C30801) *
                        C103 +
                    ((C113 * C1153 - C30788 * C1160) * C114 +
                     (C113 * C1161 - C30788 * C1171) * C30801) *
                        C104 +
                    ((C113 * C1154 - C30788 * C1162) * C114 +
                     (C113 * C1163 - C30788 * C1172) * C30801) *
                        C105) *
                       C30623 * C1149 +
                   (((C30788 * C1164 - C113 * C1155) * C114 +
                     (C30788 * C1173 - C113 * C1165) * C30801) *
                        C103 +
                    ((C30788 * C1166 - C113 * C1156) * C114 +
                     (C30788 * C1174 - C113 * C1167) * C30801) *
                        C104 +
                    ((C30788 * C1168 - C113 * C1157) * C114 +
                     (C30788 * C1175 - C113 * C1169) * C30801) *
                        C105) *
                       C30623 * C1150) *
                  C30577) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30926 +
                    (((C113 * C481 - C30788 * C491) * C114 +
                      (C113 * C492 - C30788 * C511) * C30801) *
                         C103 +
                     ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
                     C554 * C105) *
                        C30915 +
                    (((C30788 * C497 - C113 * C484) * C114 +
                      (C30788 * C514 - C113 * C498) * C30801) *
                         C103 +
                     ((C530 - C531) * C114 + (C532 - C533) * C30801) * C104 +
                     C555 * C105) *
                        C30891) *
                       C1078 +
                   ((((C113 * C294 - C30788 * C304) * C114 +
                      (C113 * C305 - C30788 * C324) * C30801) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                     C367 * C105) *
                        C30926 +
                    (((C30788 * C936 - C113 * C931) * C114 +
                      (C30788 * C946 - C113 * C937) * C30801) *
                         C103 +
                     ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
                     C968 * C105) *
                        C30915 +
                    (((C113 * C1286 - C30788 * C1295) * C114 +
                      (C113 * C1296 - C30788 * C1313) * C30801) *
                         C103 +
                     ((C113 * C1287 - C30788 * C1297) * C114 +
                      (C113 * C1298 - C30788 * C1314) * C30801) *
                         C104 +
                     ((C113 * C1288 - C30788 * C1299) * C114 +
                      (C113 * C1300 - C30788 * C1315) * C30801) *
                         C105) *
                        C30891) *
                       C1079 +
                   ((((C30788 * C310 - C113 * C297) * C114 +
                      (C30788 * C327 - C113 * C311) * C30801) *
                         C103 +
                     ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                     C368 * C105) *
                        C30926 +
                    (((C113 * C1289 - C30788 * C1301) * C114 +
                      (C113 * C1302 - C30788 * C1316) * C30801) *
                         C103 +
                     ((C113 * C1290 - C30788 * C1303) * C114 +
                      (C113 * C1304 - C30788 * C1317) * C30801) *
                         C104 +
                     ((C113 * C1291 - C30788 * C1305) * C114 +
                      (C113 * C1306 - C30788 * C1318) * C30801) *
                         C105) *
                        C30915 +
                    (((C30788 * C1307 - C113 * C1292) * C114 +
                      (C30788 * C1319 - C113 * C1308) * C30801) *
                         C103 +
                     ((C30788 * C1309 - C113 * C1293) * C114 +
                      (C30788 * C1320 - C113 * C1310) * C30801) *
                         C104 +
                     ((C30788 * C1311 - C113 * C1294) * C114 +
                      (C30788 * C1321 - C113 * C1312) * C30801) *
                         C105) *
                        C30891) *
                       C30888) *
                  C30577) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
                     C4725 * C310 - C4729 * C297) *
                        C114 +
                    (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
                     C4725 * C327 - C4729 * C311) *
                        C30801) *
                       C30555 * C30623 * C30605 * C108 +
                   ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
                     C4729 * C298 - C4725 * C312) *
                        C114 +
                    (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
                     C4729 * C313 - C4725 * C328) *
                        C30801) *
                       C30555 * C30623 * C30605 * C109 +
                   ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
                     C4725 * C314 - C4729 * C299) *
                        C114 +
                    (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
                     C4725 * C329 - C4729 * C315) *
                        C30801) *
                       C30555 * C30623 * C30605 * C110 +
                   ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
                     C4729 * C301 - C4725 * C318) *
                        C114 +
                    (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
                     C4729 * C319 - C4725 * C331) *
                        C30801) *
                       C30555 * C30623 * C30605 * C111 +
                   ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
                     C4725 * C322 - C4729 * C303) *
                        C114 +
                    (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
                     C4725 * C333 - C4729 * C323) *
                        C30801) *
                       C30555 * C30623 * C30605 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30623 * C30925 +
                    ((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                      C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                         C114 +
                     (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                      C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                         C30801) *
                        C30555 * C30623 * C30913 +
                    ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                      C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                         C114 +
                     (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                      C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C291 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30623 * C30925 +
                    ((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                      C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                         C114 +
                     (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                      C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                         C30801) *
                        C30555 * C30623 * C30913 +
                    ((C4727 * C298 - C4723 * C312 + C4728 * C1153 -
                      C4724 * C1160 + C4729 * C1156 - C4725 * C1166) *
                         C114 +
                     (C4727 * C313 - C4723 * C328 + C4728 * C1161 -
                      C4724 * C1171 + C4729 * C1167 - C4725 * C1174) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C292 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30623 * C30925 +
                    ((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                      C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                         C114 +
                     (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                      C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                         C30801) *
                        C30555 * C30623 * C30913 +
                    ((C4723 * C314 - C4727 * C299 + C4724 * C1162 -
                      C4728 * C1154 + C4725 * C1168 - C4729 * C1157) *
                         C114 +
                     (C4723 * C329 - C4727 * C315 + C4724 * C1172 -
                      C4728 * C1163 + C4725 * C1175 - C4729 * C1169) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30926 +
                    ((C4727 * C481 - C4723 * C491 + C4728 * C931 -
                      C4724 * C936 + C4729 * C1289 - C4725 * C1301) *
                         C114 +
                     (C4727 * C492 - C4723 * C511 + C4728 * C937 -
                      C4724 * C946 + C4729 * C1302 - C4725 * C1316) *
                         C30801) *
                        C30555 * C30915 +
                    ((C4723 * C497 - C4727 * C484 + C4724 * C1295 -
                      C4728 * C1286 + C4725 * C1307 - C4729 * C1292) *
                         C114 +
                     (C4723 * C514 - C4727 * C498 + C4724 * C1313 -
                      C4728 * C1296 + C4725 * C1319 - C4729 * C1308) *
                         C30801) *
                        C30555 * C30891) *
                       C30605 * C291 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30926 +
                    ((C4723 * C493 - C4727 * C482 + C4724 * C938 -
                      C4728 * C932 + C4725 * C1303 - C4729 * C1290) *
                         C114 +
                     (C4723 * C512 - C4727 * C494 + C4724 * C947 -
                      C4728 * C939 + C4725 * C1317 - C4729 * C1304) *
                         C30801) *
                        C30555 * C30915 +
                    ((C4727 * C485 - C4723 * C499 + C4728 * C1287 -
                      C4724 * C1297 + C4729 * C1293 - C4725 * C1309) *
                         C114 +
                     (C4727 * C500 - C4723 * C515 + C4728 * C1298 -
                      C4724 * C1314 + C4729 * C1310 - C4725 * C1320) *
                         C30801) *
                        C30555 * C30891) *
                       C30605 * C292 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30926 +
                    ((C4727 * C483 - C4723 * C495 + C4728 * C933 -
                      C4724 * C940 + C4729 * C1291 - C4725 * C1305) *
                         C114 +
                     (C4727 * C496 - C4723 * C513 + C4728 * C941 -
                      C4724 * C948 + C4729 * C1306 - C4725 * C1318) *
                         C30801) *
                        C30555 * C30915 +
                    ((C4723 * C501 - C4727 * C486 + C4724 * C1299 -
                      C4728 * C1288 + C4725 * C1311 - C4729 * C1294) *
                         C114 +
                     (C4723 * C516 - C4727 * C502 + C4724 * C1315 -
                      C4728 * C1300 + C4725 * C1321 - C4729 * C1312) *
                         C30801) *
                        C30555 * C30891) *
                       C30605 * C30882)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30623 * C1078 +
                    ((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                      C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                         C114 +
                     (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                      C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                         C30801) *
                        C30555 * C30623 * C1079 +
                    ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                      C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                         C114 +
                     (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                      C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30922 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30623 * C1078 +
                    ((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                      C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                         C114 +
                     (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                      C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                         C30801) *
                        C30555 * C30623 * C1079 +
                    ((C4727 * C298 - C4723 * C312 + C4728 * C1153 -
                      C4724 * C1160 + C4729 * C1156 - C4725 * C1166) *
                         C114 +
                     (C4727 * C313 - C4723 * C328 + C4728 * C1161 -
                      C4724 * C1171 + C4729 * C1167 - C4725 * C1174) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30909 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30623 * C1078 +
                    ((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                      C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                         C114 +
                     (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                      C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                         C30801) *
                        C30555 * C30623 * C1079 +
                    ((C4723 * C314 - C4727 * C299 + C4724 * C1162 -
                      C4728 * C1154 + C4725 * C1168 - C4729 * C1157) *
                         C114 +
                     (C4723 * C329 - C4727 * C315 + C4724 * C1172 -
                      C4728 * C1163 + C4725 * C1175 - C4729 * C1169) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
                     C4725 * C310 - C4729 * C297) *
                        C114 +
                    (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
                     C4725 * C327 - C4729 * C311) *
                        C30801) *
                       C30555 * C30623 * C1146 +
                   ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
                     C4729 * C1152 - C4725 * C1158) *
                        C114 +
                    (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
                     C4729 * C1159 - C4725 * C1170) *
                        C30801) *
                       C30555 * C30623 * C1147 +
                   ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                     C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                        C114 +
                    (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                     C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                        C30801) *
                       C30555 * C30623 * C1148 +
                   ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 -
                     C4724 * C1164 + C4729 * C5464 - C4725 * C5466) *
                        C114 +
                    (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 -
                     C4724 * C1173 + C4729 * C5467 - C4725 * C5470) *
                        C30801) *
                       C30555 * C30623 * C1149 +
                   ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 -
                     C4728 * C5464 + C4725 * C5468 - C4729 * C5465) *
                        C114 +
                    (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 -
                     C4728 * C5467 + C4725 * C5471 - C4729 * C5469) *
                        C30801) *
                       C30555 * C30623 * C1150) *
                  C30577) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30926 +
                    ((C4727 * C481 - C4723 * C491 + C4728 * C931 -
                      C4724 * C936 + C4729 * C1289 - C4725 * C1301) *
                         C114 +
                     (C4727 * C492 - C4723 * C511 + C4728 * C937 -
                      C4724 * C946 + C4729 * C1302 - C4725 * C1316) *
                         C30801) *
                        C30555 * C30915 +
                    ((C4723 * C497 - C4727 * C484 + C4724 * C1295 -
                      C4728 * C1286 + C4725 * C1307 - C4729 * C1292) *
                         C114 +
                     (C4723 * C514 - C4727 * C498 + C4724 * C1313 -
                      C4728 * C1296 + C4725 * C1319 - C4729 * C1308) *
                         C30801) *
                        C30555 * C30891) *
                       C1078 +
                   (((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                      C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                         C114 +
                     (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                      C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                         C30801) *
                        C30555 * C30926 +
                    ((C4723 * C936 - C4727 * C931 + C4724 * C1301 -
                      C4728 * C1289 + C4725 * C1697 - C4729 * C1694) *
                         C114 +
                     (C4723 * C946 - C4727 * C937 + C4724 * C1316 -
                      C4728 * C1302 + C4725 * C1703 - C4729 * C1698) *
                         C30801) *
                        C30555 * C30915 +
                    ((C4727 * C1286 - C4723 * C1295 + C4728 * C1292 -
                      C4724 * C1307 + C4729 * C5582 - C4725 * C5585) *
                         C114 +
                     (C4727 * C1296 - C4723 * C1313 + C4728 * C1308 -
                      C4724 * C1319 + C4729 * C5586 - C4725 * C5591) *
                         C30801) *
                        C30555 * C30891) *
                       C1079 +
                   (((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                      C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                         C114 +
                     (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                      C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                         C30801) *
                        C30555 * C30926 +
                    ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 -
                      C4724 * C1697 + C4729 * C5583 - C4725 * C5587) *
                         C114 +
                     (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 -
                      C4724 * C1703 + C4729 * C5588 - C4725 * C5592) *
                         C30801) *
                        C30555 * C30915 +
                    ((C4723 * C1307 - C4727 * C1292 + C4724 * C5585 -
                      C4728 * C5582 + C4725 * C5589 - C4729 * C5584) *
                         C114 +
                     (C4723 * C1319 - C4727 * C1308 + C4724 * C5591 -
                      C4728 * C5586 + C4725 * C5593 - C4729 * C5590) *
                         C30801) *
                        C30555 * C30891) *
                       C30888) *
                  C30577) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C30788 * C122 - C113 * C115) * C114 +
             (C30788 * C136 - C113 * C123) * C30801) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
            C176 * C105) *
               C30858 +
           (((C113 * C481 - C30788 * C491) * C114 +
             (C113 * C492 - C30788 * C511) * C30801) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
            C554 * C105) *
               C30710) *
              C30605 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
            C177 * C105) *
               C30858 +
           (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
            C785 * C105) *
               C30710) *
              C30605 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
            C178 * C105) *
               C30858 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C30801) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C30801) * C105) *
               C30710) *
              C30605 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
               C30858 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C30801) * C104 +
            ((C30788 * C773 - C113 * C772) * C114 +
             (C30788 * C775 - C113 * C774) * C30801) *
                C105) *
               C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((((C30788 * C122 - C113 * C115) * C114 +
              (C30788 * C136 - C113 * C123) * C30801) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
             C176 * C105) *
                C30858 +
            (((C113 * C481 - C30788 * C491) * C114 +
              (C113 * C492 - C30788 * C511) * C30801) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C30801) * C104 +
             C554 * C105) *
                C30710) *
               C1078 +
           ((((C113 * C294 - C30788 * C304) * C114 +
              (C113 * C305 - C30788 * C324) * C30801) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
             C367 * C105) *
                C30858 +
            (((C30788 * C936 - C113 * C931) * C114 +
              (C30788 * C946 - C113 * C937) * C30801) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C30801) * C104 +
             C968 * C105) *
                C30710) *
               C1079 +
           ((((C30788 * C310 - C113 * C297) * C114 +
              (C30788 * C327 - C113 * C311) * C30801) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
             C368 * C105) *
                C30858 +
            (((C113 * C1289 - C30788 * C1301) * C114 +
              (C113 * C1302 - C30788 * C1316) * C30801) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C30801) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C30801) * C105) *
                C30710) *
               C30888) *
              C30843 +
          (((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
             C177 * C105) *
                C30858 +
            (((C523 - C522) * C114 + (C525 - C524) * C30801) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C30801) * C104 +
             C785 * C105) *
                C30710) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
             C672 * C105) *
                C30858 +
            (((C953 - C952) * C114 + (C955 - C954) * C30801) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C30801) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C30801) * C105) *
                C30710) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                C30858 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C30801) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C30801) * C104 +
             ((C30788 * C1585 - C113 * C1584) * C114 +
              (C30788 * C1587 - C113 * C1586) * C30801) *
                 C105) *
                C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
             C4725 * C310 - C4729 * C297) *
                C114 +
            (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
             C4725 * C327 - C4729 * C311) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
             C4729 * C1289 - C4725 * C1301) *
                C114 +
            (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
             C4729 * C1302 - C4725 * C1316) *
                C30801) *
               C30555 * C30710) *
              C30605 * C655 +
          (((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
             C4729 * C298 - C4725 * C312) *
                C114 +
            (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
             C4729 * C313 - C4725 * C328) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
             C4725 * C1303 - C4729 * C1290) *
                C114 +
            (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
             C4725 * C1317 - C4729 * C1304) *
                C30801) *
               C30555 * C30710) *
              C30605 * C656 +
          (((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
             C4725 * C314 - C4729 * C299) *
                C114 +
            (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
             C4725 * C329 - C4729 * C315) *
                C30801) *
               C30555 * C30858 +
           ((C4727 * C483 - C4723 * C495 + C4728 * C933 - C4724 * C940 +
             C4729 * C1291 - C4725 * C1305) *
                C114 +
            (C4727 * C496 - C4723 * C513 + C4728 * C941 - C4724 * C948 +
             C4729 * C1306 - C4725 * C1318) *
                C30801) *
               C30555 * C30710) *
              C30605 * C657 +
          (((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
             C4729 * C301 - C4725 * C318) *
                C114 +
            (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
             C4729 * C319 - C4725 * C331) *
                C30801) *
               C30555 * C30858 +
           ((C4723 * C503 - C4727 * C487 + C4724 * C942 - C4728 * C934 +
             C4725 * C1585 - C4729 * C1584) *
                C114 +
            (C4723 * C517 - C4727 * C504 + C4724 * C949 - C4728 * C943 +
             C4725 * C1587 - C4729 * C1586) *
                C30801) *
               C30555 * C30710) *
              C30605 * C30892)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
              C4725 * C310 - C4729 * C297) *
                 C114 +
             (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
              C4725 * C327 - C4729 * C311) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C481 - C4723 * C491 + C4728 * C931 - C4724 * C936 +
              C4729 * C1289 - C4725 * C1301) *
                 C114 +
             (C4727 * C492 - C4723 * C511 + C4728 * C937 - C4724 * C946 +
              C4729 * C1302 - C4725 * C1316) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
              C4729 * C1152 - C4725 * C1158) *
                 C114 +
             (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
              C4729 * C1159 - C4725 * C1170) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C936 - C4727 * C931 + C4724 * C1301 - C4728 * C1289 +
              C4725 * C1697 - C4729 * C1694) *
                 C114 +
             (C4723 * C946 - C4727 * C937 + C4724 * C1316 - C4728 * C1302 +
              C4725 * C1703 - C4729 * C1698) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4723 * C310 - C4727 * C297 + C4724 * C1158 - C4728 * C1152 +
              C4725 * C1164 - C4729 * C1155) *
                 C114 +
             (C4723 * C327 - C4727 * C311 + C4724 * C1170 - C4728 * C1159 +
              C4725 * C1173 - C4729 * C1165) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C1289 - C4723 * C1301 + C4728 * C1694 - C4724 * C1697 +
              C4729 * C5583 - C4725 * C5587) *
                 C114 +
             (C4727 * C1302 - C4723 * C1316 + C4728 * C1698 - C4724 * C1703 +
              C4729 * C5588 - C4725 * C5592) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30843 +
          ((((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
              C4729 * C298 - C4725 * C312) *
                 C114 +
             (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
              C4729 * C313 - C4725 * C328) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C493 - C4727 * C482 + C4724 * C938 - C4728 * C932 +
              C4725 * C1303 - C4729 * C1290) *
                 C114 +
             (C4723 * C512 - C4727 * C494 + C4724 * C947 - C4728 * C939 +
              C4725 * C1317 - C4729 * C1304) *
                 C30801) *
                C30555 * C30710) *
               C1078 +
           (((C4723 * C306 - C4727 * C295 + C4724 * C312 - C4728 * C298 +
              C4725 * C1160 - C4729 * C1153) *
                 C114 +
             (C4723 * C325 - C4727 * C307 + C4724 * C328 - C4728 * C313 +
              C4725 * C1171 - C4729 * C1161) *
                 C30801) *
                C30555 * C30858 +
            ((C4727 * C932 - C4723 * C938 + C4728 * C1290 - C4724 * C1303 +
              C4729 * C1695 - C4725 * C1699) *
                 C114 +
             (C4727 * C939 - C4723 * C947 + C4728 * C1304 - C4724 * C1317 +
              C4729 * C1700 - C4725 * C1704) *
                 C30801) *
                C30555 * C30710) *
               C1079 +
           (((C4727 * C298 - C4723 * C312 + C4728 * C1153 - C4724 * C1160 +
              C4729 * C1156 - C4725 * C1166) *
                 C114 +
             (C4727 * C313 - C4723 * C328 + C4728 * C1161 - C4724 * C1171 +
              C4729 * C1167 - C4725 * C1174) *
                 C30801) *
                C30555 * C30858 +
            ((C4723 * C1303 - C4727 * C1290 + C4724 * C1699 - C4728 * C1695 +
              C4725 * C5843 - C4729 * C5842) *
                 C114 +
             (C4723 * C1317 - C4727 * C1304 + C4724 * C1704 - C4728 * C1700 +
              C4725 * C5845 - C4729 * C5844) *
                 C30801) *
                C30555 * C30710) *
               C30888) *
              C30588)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C30788 * C122 - C113 * C115) * C114 +
                     (C30788 * C136 - C113 * C123) * C30801) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                    C176 * C105) *
                       C30623 * C30605 * C108 +
                   (((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                    C177 * C105) *
                       C30623 * C30605 * C109 +
                   (C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                    C178 * C105) *
                       C30623 * C30605 * C110 +
                   (C177 * C103 +
                    ((C157 - C156) * C114 + (C159 - C158) * C30801) * C104 +
                    ((C160 - C161) * C114 + (C162 - C163) * C30801) * C105) *
                       C30623 * C30605 * C111 +
                   (C178 * C103 +
                    ((C161 - C160) * C114 + (C163 - C162) * C30801) * C104 +
                    ((C30788 * C134 - C113 * C121) * C114 +
                     (C30788 * C142 - C113 * C135) * C30801) *
                        C105) *
                       C30623 * C30605 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30623 * C30925 +
                    (((C113 * C294 - C30788 * C304) * C114 +
                      (C113 * C305 - C30788 * C324) * C30801) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                     C367 * C105) *
                        C30623 * C30913 +
                    (((C30788 * C310 - C113 * C297) * C114 +
                      (C30788 * C327 - C113 * C311) * C30801) *
                         C103 +
                     ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                     C368 * C105) *
                        C30623 * C30888) *
                       C291 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30623 * C30925 +
                    (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                     ((C351 - C352) * C114 + (C353 - C354) * C30801) * C105) *
                        C30623 * C30913 +
                    (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                     ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                     ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                        C30623 * C30888) *
                       C292 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30623 * C30925 +
                    (C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                     ((C113 * C302 - C30788 * C320) * C114 +
                      (C113 * C321 - C30788 * C332) * C30801) *
                         C105) *
                        C30623 * C30913 +
                    (C368 * C103 +
                     ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                     ((C30788 * C322 - C113 * C303) * C114 +
                      (C30788 * C333 - C113 * C323) * C30801) *
                         C105) *
                        C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((((C30788 * C122 - C113 * C115) * C114 +
                      (C30788 * C136 - C113 * C123) * C30801) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                     C176 * C105) *
                        C30623 * C1078 +
                    (((C113 * C294 - C30788 * C304) * C114 +
                      (C113 * C305 - C30788 * C324) * C30801) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                     C367 * C105) *
                        C30623 * C1079 +
                    (((C30788 * C310 - C113 * C297) * C114 +
                      (C30788 * C327 - C113 * C311) * C30801) *
                         C103 +
                     ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                     C368 * C105) *
                        C30623 * C30888) *
                       C30922 +
                   ((((C145 - C144) * C114 + (C147 - C146) * C30801) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C30801) * C104 +
                     C177 * C105) *
                        C30623 * C1078 +
                    (((C336 - C335) * C114 + (C338 - C337) * C30801) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C30801) * C104 +
                     C672 * C105) *
                        C30623 * C1079 +
                    (((C344 - C343) * C114 + (C346 - C345) * C30801) * C103 +
                     ((C348 - C347) * C114 + (C350 - C349) * C30801) * C104 +
                     ((C355 - C356) * C114 + (C357 - C358) * C30801) * C105) *
                        C30623 * C30888) *
                       C30909 +
                   ((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C30801) * C104 +
                     C178 * C105) *
                        C30623 * C1078 +
                    (C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C30801) * C104 +
                     ((C666 - C667) * C114 + (C668 - C669) * C30801) * C105) *
                        C30623 * C1079 +
                    (C368 * C103 +
                     ((C356 - C355) * C114 + (C358 - C357) * C30801) * C104 +
                     ((C30788 * C322 - C113 * C303) * C114 +
                      (C30788 * C333 - C113 * C323) * C30801) *
                         C105) *
                        C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C30788 * C122 - C113 * C115) * C114 +
                     (C30788 * C136 - C113 * C123) * C30801) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C30801) * C104 +
                    C176 * C105) *
                       C30623 * C1146 +
                   (((C113 * C294 - C30788 * C304) * C114 +
                     (C113 * C305 - C30788 * C324) * C30801) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C30801) * C104 +
                    C367 * C105) *
                       C30623 * C1147 +
                   (((C30788 * C310 - C113 * C297) * C114 +
                     (C30788 * C327 - C113 * C311) * C30801) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C30801) * C104 +
                    C368 * C105) *
                       C30623 * C1148 +
                   (((C113 * C1152 - C30788 * C1158) * C114 +
                     (C113 * C1159 - C30788 * C1170) * C30801) *
                        C103 +
                    ((C113 * C1153 - C30788 * C1160) * C114 +
                     (C113 * C1161 - C30788 * C1171) * C30801) *
                        C104 +
                    ((C113 * C1154 - C30788 * C1162) * C114 +
                     (C113 * C1163 - C30788 * C1172) * C30801) *
                        C105) *
                       C30623 * C1149 +
                   (((C30788 * C1164 - C113 * C1155) * C114 +
                     (C30788 * C1173 - C113 * C1165) * C30801) *
                        C103 +
                    ((C30788 * C1166 - C113 * C1156) * C114 +
                     (C30788 * C1174 - C113 * C1167) * C30801) *
                        C104 +
                    ((C30788 * C1168 - C113 * C1157) * C114 +
                     (C30788 * C1175 - C113 * C1169) * C30801) *
                        C105) *
                       C30623 * C1150) *
                  C30577) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
                     C4725 * C310 - C4729 * C297) *
                        C114 +
                    (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
                     C4725 * C327 - C4729 * C311) *
                        C30801) *
                       C30555 * C30623 * C30605 * C108 +
                   ((C4727 * C116 - C4723 * C124 + C4728 * C295 - C4724 * C306 +
                     C4729 * C298 - C4725 * C312) *
                        C114 +
                    (C4727 * C125 - C4723 * C137 + C4728 * C307 - C4724 * C325 +
                     C4729 * C313 - C4725 * C328) *
                        C30801) *
                       C30555 * C30623 * C30605 * C109 +
                   ((C4723 * C126 - C4727 * C117 + C4724 * C308 - C4728 * C296 +
                     C4725 * C314 - C4729 * C299) *
                        C114 +
                    (C4723 * C138 - C4727 * C127 + C4724 * C326 - C4728 * C309 +
                     C4725 * C329 - C4729 * C315) *
                        C30801) *
                       C30555 * C30623 * C30605 * C110 +
                   ((C4727 * C118 - C4723 * C128 + C4728 * C300 - C4724 * C316 +
                     C4729 * C301 - C4725 * C318) *
                        C114 +
                    (C4727 * C129 - C4723 * C139 + C4728 * C317 - C4724 * C330 +
                     C4729 * C319 - C4725 * C331) *
                        C30801) *
                       C30555 * C30623 * C30605 * C111 +
                   ((C4723 * C130 - C4727 * C119 + C4724 * C320 - C4728 * C302 +
                     C4725 * C322 - C4729 * C303) *
                        C114 +
                    (C4723 * C140 - C4727 * C131 + C4724 * C332 - C4728 * C321 +
                     C4725 * C333 - C4729 * C323) *
                        C30801) *
                       C30555 * C30623 * C30605 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30623 * C30925 +
                    ((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                      C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                         C114 +
                     (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                      C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                         C30801) *
                        C30555 * C30623 * C30913 +
                    ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                      C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                         C114 +
                     (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                      C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C291 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30623 * C30925 +
                    ((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                      C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                         C114 +
                     (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                      C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                         C30801) *
                        C30555 * C30623 * C30913 +
                    ((C4727 * C298 - C4723 * C312 + C4728 * C1153 -
                      C4724 * C1160 + C4729 * C1156 - C4725 * C1166) *
                         C114 +
                     (C4727 * C313 - C4723 * C328 + C4728 * C1161 -
                      C4724 * C1171 + C4729 * C1167 - C4725 * C1174) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C292 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30623 * C30925 +
                    ((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                      C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                         C114 +
                     (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                      C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                         C30801) *
                        C30555 * C30623 * C30913 +
                    ((C4723 * C314 - C4727 * C299 + C4724 * C1162 -
                      C4728 * C1154 + C4725 * C1168 - C4729 * C1157) *
                         C114 +
                     (C4723 * C329 - C4727 * C315 + C4724 * C1172 -
                      C4728 * C1163 + C4725 * C1175 - C4729 * C1169) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4723 * C122 - C4727 * C115 + C4724 * C304 -
                      C4728 * C294 + C4725 * C310 - C4729 * C297) *
                         C114 +
                     (C4723 * C136 - C4727 * C123 + C4724 * C324 -
                      C4728 * C305 + C4725 * C327 - C4729 * C311) *
                         C30801) *
                        C30555 * C30623 * C1078 +
                    ((C4727 * C294 - C4723 * C304 + C4728 * C297 -
                      C4724 * C310 + C4729 * C1152 - C4725 * C1158) *
                         C114 +
                     (C4727 * C305 - C4723 * C324 + C4728 * C311 -
                      C4724 * C327 + C4729 * C1159 - C4725 * C1170) *
                         C30801) *
                        C30555 * C30623 * C1079 +
                    ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                      C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                         C114 +
                     (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                      C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30922 +
                   (((C4727 * C116 - C4723 * C124 + C4728 * C295 -
                      C4724 * C306 + C4729 * C298 - C4725 * C312) *
                         C114 +
                     (C4727 * C125 - C4723 * C137 + C4728 * C307 -
                      C4724 * C325 + C4729 * C313 - C4725 * C328) *
                         C30801) *
                        C30555 * C30623 * C1078 +
                    ((C4723 * C306 - C4727 * C295 + C4724 * C312 -
                      C4728 * C298 + C4725 * C1160 - C4729 * C1153) *
                         C114 +
                     (C4723 * C325 - C4727 * C307 + C4724 * C328 -
                      C4728 * C313 + C4725 * C1171 - C4729 * C1161) *
                         C30801) *
                        C30555 * C30623 * C1079 +
                    ((C4727 * C298 - C4723 * C312 + C4728 * C1153 -
                      C4724 * C1160 + C4729 * C1156 - C4725 * C1166) *
                         C114 +
                     (C4727 * C313 - C4723 * C328 + C4728 * C1161 -
                      C4724 * C1171 + C4729 * C1167 - C4725 * C1174) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30909 +
                   (((C4723 * C126 - C4727 * C117 + C4724 * C308 -
                      C4728 * C296 + C4725 * C314 - C4729 * C299) *
                         C114 +
                     (C4723 * C138 - C4727 * C127 + C4724 * C326 -
                      C4728 * C309 + C4725 * C329 - C4729 * C315) *
                         C30801) *
                        C30555 * C30623 * C1078 +
                    ((C4727 * C296 - C4723 * C308 + C4728 * C299 -
                      C4724 * C314 + C4729 * C1154 - C4725 * C1162) *
                         C114 +
                     (C4727 * C309 - C4723 * C326 + C4728 * C315 -
                      C4724 * C329 + C4729 * C1163 - C4725 * C1172) *
                         C30801) *
                        C30555 * C30623 * C1079 +
                    ((C4723 * C314 - C4727 * C299 + C4724 * C1162 -
                      C4728 * C1154 + C4725 * C1168 - C4729 * C1157) *
                         C114 +
                     (C4723 * C329 - C4727 * C315 + C4724 * C1172 -
                      C4728 * C1163 + C4725 * C1175 - C4729 * C1169) *
                         C30801) *
                        C30555 * C30623 * C30888) *
                       C30882)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4723 * C122 - C4727 * C115 + C4724 * C304 - C4728 * C294 +
                     C4725 * C310 - C4729 * C297) *
                        C114 +
                    (C4723 * C136 - C4727 * C123 + C4724 * C324 - C4728 * C305 +
                     C4725 * C327 - C4729 * C311) *
                        C30801) *
                       C30555 * C30623 * C1146 +
                   ((C4727 * C294 - C4723 * C304 + C4728 * C297 - C4724 * C310 +
                     C4729 * C1152 - C4725 * C1158) *
                        C114 +
                    (C4727 * C305 - C4723 * C324 + C4728 * C311 - C4724 * C327 +
                     C4729 * C1159 - C4725 * C1170) *
                        C30801) *
                       C30555 * C30623 * C1147 +
                   ((C4723 * C310 - C4727 * C297 + C4724 * C1158 -
                     C4728 * C1152 + C4725 * C1164 - C4729 * C1155) *
                        C114 +
                    (C4723 * C327 - C4727 * C311 + C4724 * C1170 -
                     C4728 * C1159 + C4725 * C1173 - C4729 * C1165) *
                        C30801) *
                       C30555 * C30623 * C1148 +
                   ((C4727 * C1152 - C4723 * C1158 + C4728 * C1155 -
                     C4724 * C1164 + C4729 * C5464 - C4725 * C5466) *
                        C114 +
                    (C4727 * C1159 - C4723 * C1170 + C4728 * C1165 -
                     C4724 * C1173 + C4729 * C5467 - C4725 * C5470) *
                        C30801) *
                       C30555 * C30623 * C1149 +
                   ((C4723 * C1164 - C4727 * C1155 + C4724 * C5466 -
                     C4728 * C5464 + C4725 * C5468 - C4729 * C5465) *
                        C114 +
                    (C4723 * C1173 - C4727 * C1165 + C4724 * C5470 -
                     C4728 * C5467 + C4725 * C5471 - C4729 * C5469) *
                        C30801) *
                       C30555 * C30623 * C1150) *
                  C30577) /
                     (p * q * std::sqrt(p + q));
}
